[{"title":"2023年蓝桥杯省赛A组试题","url":"/2024/04/03/2023%E5%B9%B4%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%81%E8%B5%9BA%E7%BB%84%E8%AF%95%E9%A2%98/","content":""},{"title":"2023年蓝桥杯省赛B组试题","url":"/2024/04/01/2023%E5%B9%B4%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%81%E8%B5%9BB%E7%BB%84%E8%AF%95%E9%A2%98/","content":"题目总览\n2023\n硬币兑换\n松散子序列\n管道\n保险箱\n树上选点\nT字消除\n独一无二\n异或和\n混论的数组\n\n2023 - 蓝桥云课 (lanqiao.cn)问题描述请求出在 $12345678$ （含）至 $98765432$ （含）中，有多少个数中完全不包含 $2023$。\n完全不包含 $2023$ 是指无论将这个数的哪些数位移除都不能得到 $2023$。例如 $20322175$，$33220022$ 都完全不包含 $2023$，而 $20230415$，$20193213$ 则含有 $2023$（后者取第 $1,2,6,8$ 个数位）。\n答案提交这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nJava\n2s\n256M\n\n\nPython3\n3s\n256M\n\n\nPyPy3\n3s\n256M\n\n\nGo\n3s\n256M\n\n\nJavaScript\n3s\n256M\n\n\n\n\n总通过次数: 2971  |  总提交次数: 4174  |  通过率: 71.2%\n难度: 中等   标签: 2023, 模拟, 枚举, 省赛\n参考答案def ck(u):    a=[]    while u:        a.append(u%10)        u//=10    a.reverse()    n=len(a)    cnt1,cnt2,cnt3=0,0,0    for i in range(n):        if a[i]==2:            cnt1+=1        if a[i]==0 and cnt1&gt;0:            cnt2+=1        if a[i]==2 and cnt2&gt;0:            cnt3+=1        if a[i]==3 and cnt3&gt;0:            return True    return Falseans=0for i in range(12345678,98765432+1):    if ck(i):        ans+=1print((98765432-12345678+1)-ans)\n硬币兑换 - 蓝桥云课问题描述小蓝手中有 $2023$ 种不同面值的硬币，这些硬币全部是新版硬币，其中第 $i(1 \\leq i \\leq 2023)$ 种硬币的面值为 $i$，数量也为 $i$ 个。硬币兑换机可以进行硬币兑换，兑换规则为：交给硬币兑换机两个新版硬币 $coin_1$ 和 $coin_2$，硬币兑换机会兑换成一个面值为 $coin_1 + coin_2$ 的旧版硬币。\n小蓝可以用自己已有的硬币进行任意次数兑换，假设最终小蓝手中有 $K$ 种不同面值的硬币（只看面值，不看新旧）并且第 $i(1 \\leq i \\leq K)$ 种硬币的个数为 $sum_i$。小蓝想要使得 $\\max{sum_1,sum_2,\\dots,sum_K}$ 的值达到最大，请你帮他计算这个值最大是多少。\n注意硬币兑换机只接受新版硬币进行兑换，并且兑换出的硬币全部是旧版硬币。\n答案提交这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nJava\n2s\n256M\n\n\nPython3\n3s\n256M\n\n\nPyPy3\n3s\n256M\n\n\nGo\n3s\n256M\n\n\nJavaScript\n3s\n256M\n\n\n\n\n参考答案a=[0]*100000ans=0for i in range(1,2024):    a[i]=ifor i in range(1,4501):    res=0    for j in range(1,i//2+1):        k=i-j        if j!=k:            res+=min(a[j],a[k])        else:            res+=a[j]//2    res+=a[i]    ans=max(res,ans)print(ans)\n松散子序列 - 蓝桥云课问题描述给定一个仅含小写字母的字符串 $s$，假设 $s$ 的一个子序列 $t$ 的第 $i$ 个字符对应了原字符串中的第 $p_i$ 个字符。我们定义 $s$ 的一个松散子序列为：对于 $i &gt; 1$ 总是有 $p_i - p_{i-1} \\geq 2$。设一个子序列的价值为其包含的每个字符的价值之和 ($a \\sim z$ 分别为 $1 \\sim 26$)。\n求 $s$ 的松散子序列中的最大价值。\n输入格式输入一行包含一个字符串 $s$。\n输出格式输出一行包含一个整数表示答案。\n样例输入azaazaz\n样例输出78\n评测用例规模与约定对于 $20$% 的评测用例，$|s| \\leq 10$；\n对于 $40$% 的评测用例，$|s| \\leq 300$；\n对于 $70$% 的评测用例，$|s| \\leq 5000$；\n对于所有评测用例，$1 \\leq |s| \\leq 10^6$，字符串中仅包含小写字母。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n3s\n512M\n\n\nC\n3s\n512M\n\n\nJava\n5s\n512M\n\n\nPython3\n12s\n512M\n\n\nPyPy3\n12s\n512M\n\n\nGo\n12s\n512M\n\n\nJavaScript\n12s\n512M\n\n\n\n\n总通过次数: 1367  |  总提交次数: 1668  |  通过率: 82%\n难度: 困难   标签: 2023, 省赛, 动态规划\n解题思路根据题目要求，我们需要求出字符串 $s$ 的松散子序列中的最大价值。因此，我们可以使用动态规划的思想来解决这个问题。\n定义状态我们可以使用 $f[i][0]$ 表示不选字符串 $s$ 的第 $i$ 个字符时的价值，$f[i][1]$ 表示选字符串 $s$ 的第 $i$ 个字符时的价值。\n属性因为要求价值最大，所以我们需要取最大值。\n状态计算因为有 $p_i-p_{i-1}\\ge2$ 的限制，所以 $f[i][1]=max(f[i-2][1], f[i-2][0])+val$，只能从隔了 $1$ 个的开始选。\n$f[i][0]=max(f[i-1][1], f[i-1][0])$，因为第 $i$ 个字符没有选，那么我们就用前一个来更新。\n最终的答案即为 $max(f[n-1][1], f[n-1][0])$。\n时间复杂度分析该题的时间复杂度为 $O(n)$。\nAC_Code\nC++\n\n#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;vector&gt;#include &lt;unordered_map&gt;using namespace std;const int N=1e6+5;int f[N][2];int main() &#123;    string s;    cin &gt;&gt; s;    int n = s.length();    unordered_map&lt;char, int&gt; values;    for (int i = 0; i &lt; 26; i++) &#123;        values[&#x27;a&#x27; + i] = i + 1;    &#125;    f[0][0] = 0;    f[0][1] = values[s[0]];    for (int i = 1; i &lt; n; i++) &#123;        f[i][1] = max(f[i - 2][1], f[i - 2][0]) + values[s[i]];        f[i][0] = max(f[i - 1][1], f[i - 1][0]);    &#125;    cout &lt;&lt; max(f[n - 1][1], f[n - 1][0]) &lt;&lt; endl;    return 0;&#125;\n\nJava\n\nimport java.util.HashMap;import java.util.Map;import java.util.Scanner;public class Main &#123;    static int N=(int)1e6+5;    static int[][] f = new int[N + 1][2];    public static void main(String[] args) &#123;        Scanner scanner = new Scanner(System.in);        String s = scanner.next();        int n = s.length();        Map&lt;Character, Integer&gt; values = new HashMap&lt;&gt;();        for (int i = 0; i &lt; 26; i++) &#123;            values.put((char) (&#x27;a&#x27; + i), i + 1);        &#125;                f[0][0] = 0;        f[0][1] = values.get(s.charAt(0));        for (int i = 1; i &lt; n; i++) &#123;          if(i==1)  f[i][1] = values.get(s.charAt(i));          if(i&gt;=2)  f[i][1] = Math.max(f[i - 2][1], f[i - 2][0]) + values.get(s.charAt(i));            f[i][0] = Math.max(f[i - 1][1], f[i - 1][0]);        &#125;        System.out.println(Math.max(f[n - 1][1], f[n - 1][0]));    &#125;&#125;\n\nPython\n\ns = input()n = len(s)f = [[0 for j in range(2)] for i in range(n+1)] values = &#123;chr(i): ord(chr(i)) - ord(&#x27;a&#x27;) + 1 for i in range(97, 97+26, 1)&#125;f[0][0] = 0f[0][1] = values[s[0]]for i in range(1, len(s), 1):    f[i][1] = max(f[i-2][1], f[i-2][0]) + values[s[i]]    f[i][0] = max(f[i-1][1], f[i-1][0])print(max(f-1][1], f[n-1][0]))\n管道 - 蓝桥云课问题描述有一根长度为 $\\text{len}$ 的横向的管道，该管道按照单位长度分为 $\\text{len}$ 段，每一段的中央有一个可开关的阀门和一个检测水流的传感器。\n一开始管道是空的，位于 $L_i$ 的阀门会在 $S_i$ 时刻打开，并不断让水流入管道。\n对于位于 $L_i$ 的阀门，它流入的水在 $T_i$ ($T_i \\geq S_i$) 时刻会使得从第 $L_i - (T_i - S_i)$ 段到第 $L_i + (T_i - S_i)$ 段的传感器检测到水流。\n求管道中每一段中间的传感器都检测到有水流的最早时间。\n输入格式输入的第一行包含两个整数 $n,\\text{len}$，用一个空格分隔，分别表示会打开的阀门数和管道长度。\n接下来 $n$ 行每行包含两个整数 $L_i,S_i$，用一个空格分隔，表示位于第 $L_i$ 段管道中央的阀门会在 $S_i$ 时刻打开。\n输出格式输出一行包含一个整数表示答案。\n样例输入3 10 1 1 6 5 10 2\n样例输出5\n评测用例规模与约定对于 $30$% 的评测用例，$n \\leq 200$，$S_i, \\text{len} \\leq 3000$；\n对于 $70$% 的评测用例，$n \\leq 5000$，$S_i, \\text{len} \\leq 10^5$；\n对于所有评测用例，$1 \\leq n \\leq 10^5$，$1 \\leq S_i,\\text{len} \\leq 10^9$，$1 \\leq L_i \\leq \\text{len}$，$L_{i-1} &lt; L_i$。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n3s\n512M\n\n\nC\n3s\n512M\n\n\nJava\n5s\n512M\n\n\nPython3\n12s\n512M\n\n\nPyPy3\n12s\n512M\n\n\nGo\n12s\n512M\n\n\nJavaScript\n12s\n512M\n\n\n\n\n总通过次数: 1124  |  总提交次数: 1560  |  通过率: 72.1%\n难度: 简单   标签: 2023, 贪心, 省赛, 二分\n解题思路对于一个时间点 $x$，如果此时所有传感器都能检测到水流，那么当时间点大于 $x$ 时也一定保证所有传感器都能检测到水流。题目要求我们找到满足条件的最小时间点，因为答案具有二段性，所以我们可以想到二分答案。\n有了二分的思路后，问题转换为对于一个确定的时间点 $x$，我们如何判断此时所有传感器都能检测到水流？仔细思考，当时间确定后，对于一个位于 $a_i$ 且开启时间为 $S_i(S_i \\leq x)$ 的阀门，它的水流实际就是一条覆盖区间 $[a_i-(x-S_i),a_i+(x-S_i)]$ 的线段。\n我们可以将所有 $S_i \\leq x$ 的阀门都进行转换，实际上得到的就是若干条线段。判断所有传感器是否都能检测到水流，等价于判断能否用这若干条线段覆盖区间 $[1,\\text{len}]$，问题接着转换为区间覆盖问题。\n区间覆盖是一个经典问题。我们可以按区间的左端点来排序这些区间。接下来，我们检查这些区间是否覆盖了整个管道。如果第一个区间的左端点大于 $1$，那么表示管道的开始部分没有被覆盖，直接返回 false。否则我们设一个变量 $r$ 表示可到达的最远距离，$r$ 的初始值为第一个区间的右端点。我们接着检查其他区间是否与 $r$ 相邻或重叠。如果当前区间和 $r$ 相邻或重叠，我们将当前区间的右端点和 $r$ 取最大值。最后如果 $r \\geq \\text{len}$ 则说明成功覆盖所有区间，否则说明没有。\n回过头来考虑如何书写二分，设 $l$ 为答案的下界，$r$ 为答案的上界，如果二分得到的时间点 $\\text{mid}$ 符合条件，因为大于 $\\text{mid}$ 的时间点也一定符合条件，所以更新 $r=\\text{mid}$，否则更新 $l=\\text{mid+1}$。我们重复这个过程，直到搜索范围的左右端点相等，此时就找到了最早的时间。 当然 $l,r$ 的初始值我们也需要思考，$l$ 显然为 $1$，而 $r$ 我们需要考虑极限情况，即只存在一个最左或最右的阀门在最晚的时间点打开，显然此时需要的时间为 $2 \\times 10^9$，所以 $r$ 的初始值为 $2 \\times 10^9$。\n时间复杂度：$O(n\\log n^2)$。\nAC_Code\nC++\n\n#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long LL;#define sz(s) ((int)s.size())int n, m;int main()&#123;    ios_base :: sync_with_stdio(false);    cin.tie(0); cout.tie(0);    cin &gt;&gt; n &gt;&gt; m;    vector&lt;int&gt; a(n), s(n);    for (int i = 0; i &lt; n; ++i) &#123;        cin &gt;&gt; a[i] &gt;&gt; s[i];    &#125;    auto check = [&amp;](LL t) &#123;        std::vector&lt;pair&lt;LL, LL&gt;&gt; v;        for (int i = 0; i &lt; n; ++i) &#123;            if (t &gt;= s[i]) v.push_back(&#123;a[i] - (t - s[i]), a[i] + (t - s[i])&#125;);        &#125;        sort(v.begin(), v.end());        if (sz(v) == 0 || v[0].first &gt; 1) return false;        LL r = v[0].second;        for (int i = 1; i &lt; sz(v); ++i) &#123;            if (v[i].first &lt;= r + 1) r = max(r, v[i].second);            else break;        &#125;        return r &gt;= m;    &#125;;    LL l = 1, r = 2e9;    while (l &lt; r) &#123;        LL mid = l + r &gt;&gt; 1;        if (check(mid)) r = mid;        else l = mid + 1;    &#125;    cout &lt;&lt; r &lt;&lt; &#x27;\\n&#x27;;    return 0;&#125;\n\nJava\n\nimport java.util.*;public class Main &#123;    static int n, m;    public static void main(String[] args) &#123;        Scanner sc = new Scanner(System.in);        n = sc.nextInt();        m = sc.nextInt();        int[] a = new int[n];        int[] s = new int[n];        for (int i = 0; i &lt; n; ++i) &#123;            a[i] = sc.nextInt();            s[i] = sc.nextInt();        &#125;        long l = 1, r = 2_000_000_000;        while (l &lt; r) &#123;            long mid = l + r &gt;&gt;&gt; 1;            if (check(mid, a, s)) r = mid;            else l = mid + 1;        &#125;        System.out.println(r);    &#125;    private static boolean check(long t, int[] a, int[] s) &#123;        List&lt;Pair&lt;Long, Long&gt;&gt; v = new ArrayList&lt;&gt;();        for (int i = 0; i &lt; n; ++i) &#123;            if (t &gt;= s[i]) &#123;                v.add(new Pair&lt;&gt;(a[i] - (t - s[i]), a[i] + (t - s[i])));            &#125;        &#125;        v.sort(Comparator.comparingLong(Pair::getKey));        if (v.size() == 0 || v.get(0).getKey() &gt; 1) return false;        long r = v.get(0).getValue();        for (int i = 1; i &lt; v.size(); ++i) &#123;            if (v.get(i).getKey() &lt;= r + 1) r = Math.max(r, v.get(i).getValue());            else break;        &#125;        return r &gt;= m;    &#125;    static class Pair&lt;K, V&gt; &#123;        private final K key;        private final V value;        public Pair(K key, V value) &#123;            this.key = key;            this.value = value;        &#125;        public K getKey() &#123;            return key;        &#125;        public V getValue() &#123;            return value;        &#125;    &#125;&#125;\n\nPython\n\nn, m = map(int, input().split())a = []s = []for i in range(n):    a_i, s_i = map(int, input().split())    a.append(a_i)    s.append(s_i)def check(t):    v = []    for i in range(n):        if t &gt;= s[i]:            v.append((a[i] - (t - s[i]), a[i] + (t - s[i])))    v.sort()    if len(v) == 0 or v[0][0] &gt; 1:        return False    r = v[0][1]    for i in range(1, len(v)):        if v[i][0] &lt;= r + 1:            r = max(r, v[i][1])        else:            break    return r &gt;= ml = 1r = 2_000_000_000while l &lt; r:    mid = (l + r) // 2    if check(mid):        r = mid    else:        l = mid + 1print(r)\n保险箱 - 蓝桥云课问题描述小蓝有一个保险箱，保险箱上共有 $n$ 位数字。\n小蓝可以任意调整保险箱上的每个数字，每一次操作可以将其中一位增加 $1$ 或减少 $1$。\n当某位原本为 $9$ 或 $0$ 时可能会向前（左边）进位/退位，当最高位（左边第一位）上的数字变化时向前的进位或退位忽略。\n例如： $00000$ 的第 $5$ 位减 $1$ 变为 $99999$； $99999$ 的第 $5$ 位减 $1$ 变为 $99998$； $00000$ 的第 $4$ 位减 $1$ 变为 $99990$； $97993$ 的第 $4$ 位加 $1$ 变为 $98003$； $99909$ 的第 $3$ 位加 $1$ 变为 $00009$。\n保险箱上一开始有一个数字 $x$，小蓝希望把它变成 $y$，这样才能打开它，问小蓝最少需要操作的次数。\n输入格式输入的第一行包含一个整数 $n$。\n第二行包含一个 $n$ 位整数 $x$。\n第三行包含一个 $n$ 位整数 $y$。\n输出格式输出一行包含一个整数表示答案。\n样例输入5 12349 54321\n样例输出11\n评测用例规模与约定对于 $30$% 的评测用例，$1 \\leq n \\leq 300$；\n对于 $60$% 的评测用例，$1 \\leq n \\leq 3000$；\n对于所有评测用例，$1 \\leq n \\leq 10^5$，$x,y$ 中仅包含数字 $0$ 至 $9$，可能有前导零。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n3s\n512M\n\n\nC\n3s\n512M\n\n\nJava\n5s\n512M\n\n\nPython3\n12s\n512M\n\n\nPyPy3\n12s\n512M\n\n\nGo\n12s\n512M\n\n\nJavaScript\n12s\n512M\n\n\n\n\n总通过次数: 724  |  总提交次数: 1125  |  通过率: 64.4%\n难度: 简单   标签: 2023, 省赛, 动态规划\n解题思路题目问的是将一个 $n$ 位的数字从 $x$ 变成 $y$ 需要进行几次操作，每次操作可以任意选择一位进行 +1 或者 -1，并且除了最高位以外，操作产生的进位和退位会保留。\n暴力思路最直接的解法是直接进行模拟，从最后一位数字开始进行比较，判断是加或减哪个能获得最小步骤，同时处理借位或退位的情况。\n动态规划状态设计由于这个题目每次对一位进行了加和减的操作之后，会产生进位和退位的后继影响，所以我们可以考虑使用动态规划来解决这个问题。从最低位（从右向左）开始考虑，低位的改变会对高位产生影响，而每一位会存在三种可能性：进位、退位、不退不进。\n因此我们可以使用一个 dp 数组对此进行记录：\n\n$dp[i][0]$表示第 $i$ 位既没有进位、也没有退位的最小所需操作数。\n$dp[i][1]$表示第 $i$ 位进行了进位的最小所需操作数。\n$dp[i][2]$表示第 $i$ 位进行了退位的最小所需操作数。\n\n最后对三种可能性取一个最小值，即可得到答案。\n初始化和状态转移将 $x$ 上第i位数字变成 $y$ 上第i位数字所需的最小操作数是当前位的操作数加上更低位的操作数，由于存在三种不同的情况，对于每一种情况，分别有以下几种转移：\ndp[i][0] = min(dp[i - 1][0] + abs(a[i] - b[i]), dp[i-1][1] + abs((a[i] + 1) - b[i]) ,  dp[i-1][2] + abs((a[i] - 1) - b[i]));dp[i][1] = min(dp[i - 1][0] + (10 - a[i] + b[i]), dp[i-1][1] +  10 - (a[i] + 1) + b[i], dp[i - 1][2] + 10 - (a[i] - 1)+ b[i]);dp[i][2] = min(dp[i - 1][0] + a[i] + 10 - b[i], dp[i - 1][1] + (a[i] + 1)+ 10 - b[i], dp[i - 1][2] + (a[i]-1) + 10 - b[i]);\n这三种情况分别对应了当前位置不进不退、进行了进位、进行了退位和上一位不进不退、进行了进位、进行了退位的组合结果，一共有 $3\\times3$ 种情况。\n最终答案最后的答案是第 $n$ 位上的三种情况的最小值，也就是对 $dp[n][0]$, $dp[n][1]$ 和 $dp[n][2]$ 取最小值：\nans = min(dp[n][0], dp[n][1], dp[n][2])\n时间复杂度为 $O(n)$。\nAC_Code\nC++\n\n#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;using namespace std;const int INF = 1000000000;int dp[1000010][3];int n, a[1000010], b[1000010];string x, y;int main() &#123;    cin &gt;&gt; n &gt;&gt; x &gt;&gt; y;    reverse(x.begin(), x.end());    reverse(y.begin(), y.end());        for (int i = 0; i &lt; n; ++i) &#123;        a[i] = x[i] - &#x27;0&#x27;;        b[i] = y[i] - &#x27;0&#x27;;    &#125;        for (int i = 0; i &lt; n; ++i) &#123;        if (!i) &#123;            dp[i][0] = abs(a[i] - b[i]);            dp[i][1] = 10 - a[i] + b[i];            dp[i][2] = a[i] + 10 - b[i];        &#125; else &#123;            dp[i][0] = min(&#123;dp[i - 1][0] + abs(a[i] - b[i]), dp[i - 1][1] + abs(a[i] + 1 - b[i]), dp[i - 1][2] + abs(a[i] - 1 - b[i])&#125;);            dp[i][1] = min(&#123;dp[i - 1][0] + (10 - a[i] + b[i]), dp[i - 1][1] + 10 - (a[i] + 1) + b[i], dp[i - 1][2] + 10 - (a[i] - 1) + b[i]&#125;);            dp[i][2] = min(&#123;dp[i - 1][0] + a[i] + 10 - b[i], dp[i - 1][1] + (a[i] + 1) + 10 - b[i], dp[i - 1][2] + (a[i] - 1) + 10 - b[i]&#125;);        &#125;    &#125;        int ans = dp[n-1][0];    ans = min(ans, dp[n - 1][1]);    ans = min(ans, dp[n - 1][2]);    cout &lt;&lt; ans &lt;&lt; endl;    return 0;&#125;\n\nJava\n\nimport java.util.Scanner;public class Main &#123;    static final int INF = 1000000000;    public static void main(String[] args) &#123;        Scanner scanner = new Scanner(System.in);        int n = scanner.nextInt();        scanner.nextLine(); // Consume newline                String x = new StringBuilder(scanner.nextLine()).reverse().toString();        String y = new StringBuilder(scanner.nextLine()).reverse().toString();                int[] a = new int[n];        int[] b = new int[n];        for (int i = 0; i &lt; n; ++i) &#123;            a[i] = x.charAt(i) - &#x27;0&#x27;;            b[i] = y.charAt(i) - &#x27;0&#x27;;        &#125;                int[][] dp = new int[1000010][3];                for (int i = 0; i &lt; n; ++i) &#123;            if (i == 0) &#123;                dp[i][0] = Math.abs(a[i] - b[i]);                dp[i][1] = 10 - a[i] + b[i];                dp[i][2] = a[i] + 10 - b[i];            &#125; else &#123;                dp[i][0] = Math.min(                    Math.min(dp[i - 1][0] + Math.abs(a[i] - b[i]), dp[i - 1][1] + Math.abs(a[i] + 1 - b[i])),                    dp[i - 1][2] + Math.abs(a[i] - 1 - b[i])                );                                dp[i][1] = Math.min(                    Math.min(dp[i - 1][0] + (10 - a[i] + b[i]), dp[i - 1][1] + 10 - (a[i] + 1) + b[i]),                    dp[i - 1][2] + 10 - (a[i] - 1) + b[i]                );                                dp[i][2] = Math.min(                    Math.min(dp[i - 1][0] + a[i] + 10 - b[i], dp[i - 1][1] + (a[i] + 1) + 10 - b[i]),                    dp[i - 1][2] + (a[i] - 1) + 10 - b[i]                );            &#125;        &#125;                int ans = Math.min(Math.min(dp[n - 1][0], dp[n - 1][1]), dp[n - 1][2]);        System.out.println(ans);    &#125;&#125;\n\nPython\n\nINF = 1000000000dp = [[INF for _ in range(3)] for _ in range(1000010)]n = int(input())x = input()[::-1]y = input()[::-1]a = [0] * nb = [0] * nfor i in range(n):    a[i] = int(x[i])    b[i] = int(y[i])for i in range(n):    if i == 0:        dp[i][0] = abs(a[i] - b[i])        dp[i][1] = 10 - a[i] + b[i]        dp[i][2] = a[i] + 10 - b[i]    else:        dp[i][0] = min(dp[i - 1][0] + abs(a[i] - b[i]), dp[i - 1][1] + abs(a[i] + 1 - b[i]), dp[i - 1][2] + abs(a[i] - 1 - b[i]))        dp[i][1] = min(dp[i - 1][0] + (10 - a[i] + b[i]), dp[i - 1][1] + 10 - (a[i] + 1) + b[i], dp[i - 1][2] + 10 - (a[i] - 1) + b[i])        dp[i][2] = min(dp[i - 1][0] + a[i] + 10 - b[i], dp[i - 1][1] + (a[i] + 1) + 10 - b[i], dp[i - 1][2] + (a[i] - 1) + 10 - b[i])ans = min(dp[n-1][0], dp[n-1][1], dp[n-1][2])print(ans)\n树上选点 - 蓝桥云课问题描述给定一棵树，树根为 $1$，每个点的点权为 $V_i$。 你需要找出若干个点 $P_i$，使得：\n\n每两个点 $P_x$、$P_y$ 互不相邻；\n每两个点 $P_x$、$P_y$ 与树根的距离互不相同；\n找出的点的点权之和尽可能大。\n\n请输出找到的这些点的点权和的最大值。\n输入格式输入的第一行包含一个整数 $n$。\n第二行包含 $n-1$ 个整数 $F_i$，相邻整数之间使用一个空格分隔，分别表示第 $2$ 至 $n$ 个结点的父结点编号。\n第三行包含 $n$ 个整数 $V_i$，相邻整数之间使用一个空格分隔，分别表示每个结点的点权。\n输出格式输出一行包含一个整数表示答案。\n样例输入5 1 2 3 2 2 1 9 3 5\n样例输出11\n评测用例规模与约定对于 $40$% 的评测用例，$n \\leq 5000$；\n对于所有评测用例，$1 \\leq n \\leq 2 \\times 10^5$，$1 \\leq F_i &lt; i$，$1 \\leq V_i \\leq 10^4$。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n3s\n512M\n\n\nC\n3s\n512M\n\n\nJava\n5s\n512M\n\n\nPython3\n20s\n512M\n\n\nPyPy3\n20s\n512M\n\n\nGo\n20s\n512M\n\n\nJavaScript\n20s\n512M\n\n\n\n\n总通过次数: 210  |  总提交次数: 457  |  通过率: 46%\n难度: 简单   标签: 2023, 省赛, 动态规划\n版权声明\n部分题目由用户贡献，若您是著作权持有人，请与我们联系。\n解题思路这个问题可以使用动态规划的策略进行解决。首先，我们要解析并存储树的结构，然后从叶子节点开始，通过动态规划的方法，逐步向上更新每个节点被选中和不被选中时能得到的最大权值和。\n状态定义\n我们定义两种状态，$f[u][1]$ 和 $f[u][0]$。$f[u][1]$ 表示选择节点 $u$ 的最大权值，$f[u][0]$ 表示不选择节点 $u$ 的最大权值。\n状态转移\n对于每一个节点 $u$，我们有以下状态转移方程：\n\n不选择当前节点 $u$：$f[u][0] = max(f[u][0], f[v][1])$，其中 $v$ 是 $u$ 的下一层节点，表示我们可以选择下一层的任何一个节点；\n选择当前节点 $u$：$f[u][1] = max(f[u][1], a[u] + f[v][0])$，表示我们选择当前节点 $u$，并且我们不能选择其子节点 $v$，但是我们可以选择 $v$ 的子节点。\n\n具体实现\n首先，我们读取输入数据，存储树的结构，并初始化状态矩阵。然后，我们从叶子节点开始，逐步向上更新每一个节点的状态。对于每一层的节点，我们先更新不选择该节点的方案，然后再更新选择该节点的方案。为了减少时间复杂度，我们使用了 multiset 来存储每一层能够转移的所有状态，可以直接找到最大值。\n时间复杂度分析\n每个节点我们都进行了一次状态更新操作，所以时间复杂度为 $O(n)$。在更新状态时，我们使用了 multiset 进行最大值查询，时间复杂度为 $O(\\log n)$，所以总的时间复杂度为 $O(n \\log n)$。\nAC_Code\nC++\n\n//c++#include &lt;bits/stdc++.h&gt;using namespace std;#define int long longconst int N = 200010;vector&lt;int&gt; g[N], depth[N];     // g[]用来存每个结点的儿子 , depth[] 用来存每一深度的结点int d[N], a[N], f[N][2], fa[N]; // d[]记录每个结点的深度,a[]是每个结点的值,f[][]第一维表示结点、第二维表示是否选择该节点multiset&lt;int&gt; s[N];             // 存每一层能够转移的所有状态signed main()&#123;    int n;    scanf(&quot;%lld&quot;, &amp;n);    d[1] = 1;          // 1是根，所以深度为1    int max_depth = 0; // 记录最大深度    for (int i = 2; i &lt;= n; i++)    &#123;        scanf(&quot;%lld&quot;, &amp;fa[i]);        g[fa[i]].push_back(i);            // 存结点的儿子        d[i] = d[fa[i]] + 1;              // 子节点深度等于父节点深度+1        max_depth = max(max_depth, d[i]); // 更新最大深度    &#125;    for (int i = 1; i &lt;= n; i++)        scanf(&quot;%lld&quot;, &amp;a[i]);    for (int i = 1; i &lt;= n; i++)    &#123;        depth[d[i]].push_back(i); // 记录每一层的结点    &#125;    for (int j = max_depth; j &gt;= 1; j--) // 从叶子结点开始更新结点最大值    &#123;        for (auto u : depth[j]) // 本层结点大小更新        &#123;            // 先来更新不选择该结点的方案            if (s[j + 1].size())                               // 如果下一层存在能转移过来的状态                f[u][0] = max(f[u][0], *prev(s[j + 1].end())); // 当前节点如果不选肯定选的是前一层的最大值(选或者不选都行)            // 再来更新选择该节点的方案            f[u][1] = a[u];     // 如果选择该结点,则该结点的最小值是结点本身的值            for (auto v : g[u]) // 选择能够转移到现在这个状态的状态            &#123;                s[j + 1].erase(s[j + 1].find(f[v][1])); // 因为不能选择相邻结点,把选取了它的儿子的方案除去,不能从这些最大值中更新            &#125;            if (s[j + 1].size()) // 如果下一层存在能转移过来的状态            &#123;                int mx = *prev(s[j + 1].end());    // 能够转移至这个状态的最大值                f[u][1] = max(f[u][1], a[u] + mx); // 如果选这个节点,那么要从他非儿子中选一个最大的(不选或选)或者从他儿子中选一个不选的最大的            &#125;            // 为下一次状态更新做准备            for (auto v : g[u])            &#123;                s[j + 1].insert(f[v][1]); // 刚刚为了更新选择该结点状态时删去了选它的儿子状态,现在再加回来,因为本层其他节点可能更新需要            &#125;            s[j].insert(f[u][1]);            s[j].insert(f[u][0]); // 当前节点或者不选都可以作为它们上一层节点的更新值        &#125;    &#125;    printf(&quot;%lld&quot;, max(f[1][0], f[1][1])); // 在选和不选1结点中的方案中的最大值就是答案    return 0;&#125;\n\nJava\n\nimport java.util.*;public class Main &#123;    private static final int N = 200010;    private static List&lt;Integer&gt;[] g = new ArrayList[N], depth = new ArrayList[N];    private static int[] d = new int[N], a = new int[N], fa = new int[N];    private static int[][] f = new int[N][2];    private static TreeMap&lt;Integer, Integer&gt;[] s = new TreeMap[N];    public static void main(String[] args) &#123;        Scanner scanner = new Scanner(System.in);        int n = scanner.nextInt();        d[1] = 1;        int max_depth = 0;        for (int i = 1; i &lt;= n; i++) &#123;            g[i] = new ArrayList&lt;&gt;();            depth[i] = new ArrayList&lt;&gt;();        &#125;        for (int i = 2; i &lt;= n; i++) &#123;            fa[i] = scanner.nextInt();            g[fa[i]].add(i);            d[i] = d[fa[i]] + 1;            max_depth = Math.max(max_depth, d[i]);        &#125;        for (int i = 1; i &lt;= n; i++) &#123;            a[i] = scanner.nextInt();        &#125;        for (int i = 1; i &lt;= n; i++) &#123;            depth[d[i]].add(i);        &#125;        for(int i = 0; i &lt;= max_depth + 1; i++)&#123;            s[i] = new TreeMap&lt;&gt;();        &#125;        for (int j = max_depth; j &gt;= 1; j--) &#123;            for (int u : depth[j]) &#123;                if (s[j + 1].size() &gt; 0) &#123;                    f[u][0] = Math.max(f[u][0], s[j + 1].lastKey());                &#125;                f[u][1] = a[u];                for (int v : g[u]) &#123;                    remove(s[j + 1], f[v][1]);                &#125;                if (s[j + 1].size() &gt; 0) &#123;                    int mx = s[j + 1].lastKey();                    f[u][1] = Math.max(f[u][1], a[u] + mx);                &#125;                for (int v : g[u]) &#123;                    add(s[j + 1], f[v][1]);                &#125;                add(s[j], f[u][1]);                add(s[j], f[u][0]);            &#125;        &#125;        System.out.println(Math.max(f[1][0], f[1][1]));        scanner.close();    &#125;    private static void add(TreeMap&lt;Integer, Integer&gt; map, int x) &#123;        map.put(x, map.getOrDefault(x, 0) + 1);    &#125;    private static void remove(TreeMap&lt;Integer, Integer&gt; map, int x) &#123;        if (map.containsKey(x)) &#123;            if (map.get(x) == 1) &#123;                map.remove(x);            &#125; else &#123;                map.put(x, map.get(x) - 1);            &#125;        &#125;    &#125;&#125;\n\nPython\n\nfrom collections import Counterfrom typing import ListN = 200010g = [[] for _ in range(N)]depth = [[] for _ in range(N)]d = [0] * Na = [0] * Nfa = [0] * Nf = [[0] * 2 for _ in range(N)]s = [Counter() for _ in range(N)]n = int(input())d[1] = 1max_depth = 0arrt = [int(n) for n in input(&quot;&quot;).split()]for i in range(2, n + 1):    fa[i] = arrt[i - 2]#int(input())    g[fa[i]].append(i)    d[i] = d[fa[i]] + 1    max_depth = max(max_depth, d[i])arrt = [int(n) for n in input(&quot;&quot;).split()]for i in range(1, n + 1):    a[i] = arrt[i - 1] #int(input())for i in range(1, n + 1):    depth[d[i]].append(i)for j in range(max_depth, 0, -1):    for u in depth[j]:        if s[j + 1]:            f[u][0] = max(f[u][0], max(s[j + 1].keys()))        f[u][1] = a[u]        for v in g[u]:            s[j + 1][f[v][1]] -= 1            if s[j + 1][f[v][1]] == 0:                del s[j + 1][f[v][1]]        if s[j + 1]:            mx = max(s[j + 1].keys())            f[u][1] = max(f[u][1], a[u] + mx)        for v in g[u]:            s[j + 1][f[v][1]] += 1        s[j][f[u][1]] += 1        s[j][f[u][0]] += 1print(max(f[1][0], f[1][1]))\nT字消除 - 蓝桥云课问题描述小蓝正在玩一款游戏，游戏中有一个 $n \\times n$ 大小的 $01$ 矩阵 $A_{i,j}$。 小蓝每次需要选择一个 $T$ 字型的区域，且这个区域内至少要有一个 $1$。选中后，这个区域内所有的元素都会变成 $0$。 给定游戏目前的矩阵，小蓝想知道他最多可以进行多少次上述操作。 $T$ 字型区域是指形如 $(x-1,y)\\to(x,y)\\to(x+1,y)\\to(x,y+1)$ 的四个点所形成的区域。其旋转 $90^\\circ,180^\\circ,270^\\circ$ 的形式同样也视作 $T$ 字形区域。\n输入格式输入包含多组数据。\n输入的第一行包含一个整数 $D$ 表示数据组数。\n对于每组数据，第一行包含一个整数 $n$。\n接下来 $n$ 行每行包含 $n$ 个 $0$ 或 $1$，表示矩阵 $A_{i,j}$ 的每个位置的值。\n输出格式输出 $D$ 行，每行包含一个整数表示小蓝最多可以对当前询问中的矩阵操作的次数。\n样例输入1 3 001 011 111\n样例输出5\n样例说明我们用 $X$ 表示某次操作选中的 $T$ 字形，以下给出一种可行方案：\n001 XXX 0X0 00X 0X0 X00 011 =&gt; 0X1 =&gt; XXX =&gt; 0XX =&gt; XX0 =&gt; XX0 111 111 111 11X 1X0 X00\n评测用例规模与约定对于 $10$% 的评测用例，$n = 3$；\n对于 $40$% 的评测用例，$n \\leq 30$；\n对于所有评测用例，$3 \\leq n \\leq 2000$，矩阵中仅含 $0$ 和 $1$。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n3s\n512M\n\n\nC\n3s\n512M\n\n\nJava\n5s\n512M\n\n\nPython3\n999s\n512M\n\n\nPyPy3\n999s\n512M\n\n\nGo\n999s\n512M\n\n\nJavaScript\n999s\n512M\n\n\n\n\n总通过次数: 44  |  总提交次数: 199  |  通过率: 22.1%\n难度: 简单   标签: 2023, 模拟, 省赛\n解题思路这个问题可以使用动态规划的策略进行解决。首先，我们要解析并存储树的结构，然后从叶子节点开始，通过动态规划的方法，逐步向上更新每个节点被选中和不被选中时能得到的最大权值和。\n状态定义\n我们定义两种状态，$f[u][1]$ 和 $f[u][0]$。$f[u][1]$ 表示选择节点 $u$ 的最大权值，$f[u][0]$ 表示不选择节点 $u$ 的最大权值。\n状态转移\n对于每一个节点 $u$，我们有以下状态转移方程：\n\n不选择当前节点 $u$：$f[u][0] = max(f[u][0], f[v][1])$，其中 $v$ 是 $u$ 的下一层节点，表示我们可以选择下一层的任何一个节点；\n选择当前节点 $u$：$f[u][1] = max(f[u][1], a[u] + f[v][0])$，表示我们选择当前节点 $u$，并且我们不能选择其子节点 $v$，但是我们可以选择 $v$ 的子节点。\n\n具体实现\n首先，我们读取输入数据，存储树的结构，并初始化状态矩阵。然后，我们从叶子节点开始，逐步向上更新每一个节点的状态。对于每一层的节点，我们先更新不选择该节点的方案，然后再更新选择该节点的方案。为了减少时间复杂度，我们使用了 multiset 来存储每一层能够转移的所有状态，可以直接找到最大值。\n时间复杂度分析\n每个节点我们都进行了一次状态更新操作，所以时间复杂度为 $O(n)$。在更新状态时，我们使用了 multiset 进行最大值查询，时间复杂度为 $O(\\log n)$，所以总的时间复杂度为 $O(n \\log n)$。\nAC_Code\nC++\n\n//c++#include &lt;bits/stdc++.h&gt;using namespace std;#define int long longconst int N = 200010;vector&lt;int&gt; g[N], depth[N];     // g[]用来存每个结点的儿子 , depth[] 用来存每一深度的结点int d[N], a[N], f[N][2], fa[N]; // d[]记录每个结点的深度,a[]是每个结点的值,f[][]第一维表示结点、第二维表示是否选择该节点multiset&lt;int&gt; s[N];             // 存每一层能够转移的所有状态signed main()&#123;    int n;    scanf(&quot;%lld&quot;, &amp;n);    d[1] = 1;          // 1是根，所以深度为1    int max_depth = 0; // 记录最大深度    for (int i = 2; i &lt;= n; i++)    &#123;        scanf(&quot;%lld&quot;, &amp;fa[i]);        g[fa[i]].push_back(i);            // 存结点的儿子        d[i] = d[fa[i]] + 1;              // 子节点深度等于父节点深度+1        max_depth = max(max_depth, d[i]); // 更新最大深度    &#125;    for (int i = 1; i &lt;= n; i++)        scanf(&quot;%lld&quot;, &amp;a[i]);    for (int i = 1; i &lt;= n; i++)    &#123;        depth[d[i]].push_back(i); // 记录每一层的结点    &#125;    for (int j = max_depth; j &gt;= 1; j--) // 从叶子结点开始更新结点最大值    &#123;        for (auto u : depth[j]) // 本层结点大小更新        &#123;            // 先来更新不选择该结点的方案            if (s[j + 1].size())                               // 如果下一层存在能转移过来的状态                f[u][0] = max(f[u][0], *prev(s[j + 1].end())); // 当前节点如果不选肯定选的是前一层的最大值(选或者不选都行)            // 再来更新选择该节点的方案            f[u][1] = a[u];     // 如果选择该结点,则该结点的最小值是结点本身的值            for (auto v : g[u]) // 选择能够转移到现在这个状态的状态            &#123;                s[j + 1].erase(s[j + 1].find(f[v][1])); // 因为不能选择相邻结点,把选取了它的儿子的方案除去,不能从这些最大值中更新            &#125;            if (s[j + 1].size()) // 如果下一层存在能转移过来的状态            &#123;                int mx = *prev(s[j + 1].end());    // 能够转移至这个状态的最大值                f[u][1] = max(f[u][1], a[u] + mx); // 如果选这个节点,那么要从他非儿子中选一个最大的(不选或选)或者从他儿子中选一个不选的最大的            &#125;            // 为下一次状态更新做准备            for (auto v : g[u])            &#123;                s[j + 1].insert(f[v][1]); // 刚刚为了更新选择该结点状态时删去了选它的儿子状态,现在再加回来,因为本层其他节点可能更新需要            &#125;            s[j].insert(f[u][1]);            s[j].insert(f[u][0]); // 当前节点或者不选都可以作为它们上一层节点的更新值        &#125;    &#125;    printf(&quot;%lld&quot;, max(f[1][0], f[1][1])); // 在选和不选1结点中的方案中的最大值就是答案    return 0;&#125;\n\nJava\n\nimport java.util.*;public class Main &#123;    private static final int N = 200010;    private static List&lt;Integer&gt;[] g = new ArrayList[N], depth = new ArrayList[N];    private static int[] d = new int[N], a = new int[N], fa = new int[N];    private static int[][] f = new int[N][2];    private static TreeMap&lt;Integer, Integer&gt;[] s = new TreeMap[N];    public static void main(String[] args) &#123;        Scanner scanner = new Scanner(System.in);        int n = scanner.nextInt();        d[1] = 1;        int max_depth = 0;        for (int i = 1; i &lt;= n; i++) &#123;            g[i] = new ArrayList&lt;&gt;();            depth[i] = new ArrayList&lt;&gt;();        &#125;        for (int i = 2; i &lt;= n; i++) &#123;            fa[i] = scanner.nextInt();            g[fa[i]].add(i);            d[i] = d[fa[i]] + 1;            max_depth = Math.max(max_depth, d[i]);        &#125;        for (int i = 1; i &lt;= n; i++) &#123;            a[i] = scanner.nextInt();        &#125;        for (int i = 1; i &lt;= n; i++) &#123;            depth[d[i]].add(i);        &#125;        for(int i = 0; i &lt;= max_depth + 1; i++)&#123;            s[i] = new TreeMap&lt;&gt;();        &#125;        for (int j = max_depth; j &gt;= 1; j--) &#123;            for (int u : depth[j]) &#123;                if (s[j + 1].size() &gt; 0) &#123;                    f[u][0] = Math.max(f[u][0], s[j + 1].lastKey());                &#125;                f[u][1] = a[u];                for (int v : g[u]) &#123;                    remove(s[j + 1], f[v][1]);                &#125;                if (s[j + 1].size() &gt; 0) &#123;                    int mx = s[j + 1].lastKey();                    f[u][1] = Math.max(f[u][1], a[u] + mx);                &#125;                for (int v : g[u]) &#123;                    add(s[j + 1], f[v][1]);                &#125;                add(s[j], f[u][1]);                add(s[j], f[u][0]);            &#125;        &#125;        System.out.println(Math.max(f[1][0], f[1][1]));        scanner.close();    &#125;    private static void add(TreeMap&lt;Integer, Integer&gt; map, int x) &#123;        map.put(x, map.getOrDefault(x, 0) + 1);    &#125;    private static void remove(TreeMap&lt;Integer, Integer&gt; map, int x) &#123;        if (map.containsKey(x)) &#123;            if (map.get(x) == 1) &#123;                map.remove(x);            &#125; else &#123;                map.put(x, map.get(x) - 1);            &#125;        &#125;    &#125;&#125;\n\nPython\n\nfrom collections import Counterfrom typing import ListN = 200010g = [[] for _ in range(N)]depth = [[] for _ in range(N)]d = [0] * Na = [0] * Nfa = [0] * Nf = [[0] * 2 for _ in range(N)]s = [Counter() for _ in range(N)]n = int(input())d[1] = 1max_depth = 0arrt = [int(n) for n in input(&quot;&quot;).split()]for i in range(2, n + 1):    fa[i] = arrt[i - 2]#int(input())    g[fa[i]].append(i)    d[i] = d[fa[i]] + 1    max_depth = max(max_depth, d[i])arrt = [int(n) for n in input(&quot;&quot;).split()]for i in range(1, n + 1):    a[i] = arrt[i - 1] #int(input())for i in range(1, n + 1):    depth[d[i]].append(i)for j in range(max_depth, 0, -1):    for u in depth[j]:        if s[j + 1]:            f[u][0] = max(f[u][0], max(s[j + 1].keys()))        f[u][1] = a[u]        for v in g[u]:            s[j + 1][f[v][1]] -= 1            if s[j + 1][f[v][1]] == 0:                del s[j + 1][f[v][1]]        if s[j + 1]:            mx = max(s[j + 1].keys())            f[u][1] = max(f[u][1], a[u] + mx)        for v in g[u]:            s[j + 1][f[v][1]] += 1        s[j][f[u][1]] += 1        s[j][f[u][0]] += 1print(max(f[1][0], f[1][1]))\n异或和 - 蓝桥云课问题描述给一棵含有 $n$ 个结点的有根树，根结点为 $1$，编号为 $i$ 的点有点权 $a_i$（$i \\in [1,n]$）。现在有两种操作，格式如下：\n\n$1\\ x\\ y$：该操作表示将点 $x$ 的点权改为 $y$。\n$2\\ x$：该操作表示查询以结点 $x$ 为根的子树内的所有点的点权的异或和。\n\n现有长度为 $m$ 的操作序列，请对于每个第二类操作给出正确的结果。\n输入格式输入的第一行包含两个正整数 $n,m$，用一个空格分隔。\n第二行包含 $n$ 个整数 $a_1,a_2,\\ldots,a_n$，相邻整数之间使用一个空格分隔。\n接下来 $n-1$ 行，每行包含两个正整数 $u_i,v_i$，表示结点 $u_i$ 和 $v_i$ 之间有一条边。\n接下来 $m$ 行，每行包含一个操作。\n输出格式输出若干行，每行对应一个查询操作的答案。\n样例输入4 4 1 2 3 4 1 2 1 3 2 4 2 1 1 1 0 2 1 2 2\n样例输出4 5 6\n评测用例规模与约定对于 $30$% 的评测用例，$n,m \\leq 1000$；\n对于所有评测用例，$1 \\leq n,m \\leq 100000$，$0 \\leq a_i,y \\leq 100000$，$1 \\leq u_i,v_i,x \\leq n$。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n3s\n512M\n\n\nC\n3s\n512M\n\n\nJava\n5s\n512M\n\n\nPython3\n17s\n512M\n\n\nPyPy3\n17s\n512M\n\n\nGo\n17s\n512M\n\n\nJavaScript\n17s\n512M\n\n\n\n\n总通过次数: 367  |  总提交次数: 453  |  通过率: 81%\n难度: 简单   标签: 2023, DFS序, 图论, 树状数组, 省赛\n解题思路考虑第二个操作，查询以节点 $x$ 为根的子树内的所有点的点权的异或和。\n类似这种子树查询问题，我们通常使用 DFS 序对树进行预处理。具体地说，在 DFS 遍历中，我们从根节点开始，依次遍历它的每个子节点。对于每个子节点，我们首先遍历它的子树，然后回溯到该子节点，继续遍历它的兄弟节点。在遍历的过程中，我们可以记录每个节点在 DFS 序中的遍历顺序，即第一次遍历到该节点的时间戳和最后一次遍历到该节点的时间戳。这里的时间戳可以使用一个计数器来实现，每次遍历到一个新节点时，计数器加 $1$，表示当前节点的时间戳。当回溯到该节点时，表示当前节点的最后一次遍历时间戳。\n这样操作有什么作用呢？假设我们有一个长度大于 $n$ 的数组 $a$，我们记进入每个点 $i$ 的时间戳为 $\\text{in}[i]$，回溯到点 $i$ 的时间戳为 $\\text{out}[i]$，同时将每个点的点权赋值到 $a[\\text{in}[i]]$ 上。这样对于一个根为 $x$ 的子树内所有点的点权异或和就等价于 $a$ 数组区间 $[\\text{in}[x],\\text{out}[x]]$ 的异或和。这样我们就将复杂的树上询问，转化为我们熟悉的数组区间查询问题。\n接下来考虑操作 $1$，将点 $x$ 的点权改为 $y$。\n结合上述分析，该操作即是将 $a[\\text{in}[x]]$ 改为 $y$。\n综上所述，我们需要对 $a$ 数组进行一个单点修改和区间查询的操作，这个经典操作我们可以使用树状数组或者线段树来维护，代码中使用的是树状数组。具体地说，我们使用一个树状数组 $a$ 来维护树的 DFS 序的前缀异或序列，$a_i$ 表示区间 $[1,i]$ 的异或和。\n\n操作 $1$：将 $a[\\text{in}[x]]$ 修改为 $y$。\n操作 $2$：求解 $[\\text{in}[x],\\text{out}[x]]$ 的异或和，根据异或性质 $[1,r] \\oplus[1,l-1]=[l,r]$，我们只需要求解 $a_{\\text{in}[x]-1} \\oplus a_r$ 即可求得答案。\n\n时间复杂度为 $O(n \\log n)$。\nAC_Code\nC++\n\n#include&lt;bits/stdc++.h&gt;using namespace std;const int N = 100010;template &lt;typename T&gt;struct Fenwick &#123;    int n;    std::vector&lt;T&gt; a;    Fenwick(int n = 0) &#123;        init(n);    &#125;    void init(int n) &#123;        this-&gt;n = n;        a.assign(n + 1, T());    &#125;    void add(int x, T v) &#123;        for (; x &lt;= n; x += x &amp; (-x)) &#123;            a[x] ^= v;        &#125;    &#125;    T sum(int x) &#123;        auto ans = T();        for (; x; x -= x &amp; (-x)) &#123;            ans ^= a[x];        &#125;        return ans;    &#125;    T rangeSum(int l, int r) &#123;        return sum(r) ^ sum(l);    &#125;&#125;;int n, m, tot;int a[N], in[N], out[N];std::vector&lt;int&gt; e[N];void dfs(int u, int fa) &#123;    in[u] = ++tot;    for (auto v : e[u]) &#123;        if (v == fa) continue;        dfs(v, u);    &#125;    out[u] = tot;&#125;int main()&#123;    ios_base :: sync_with_stdio(false);    cin.tie(0); cout.tie(0);    cin &gt;&gt; n &gt;&gt; m;    Fenwick&lt;int&gt; tr(n);    for (int i = 1; i &lt;= n; ++i) cin &gt;&gt; a[i];    for (int i = 0; i &lt; n - 1; ++i) &#123;        int u, v;        cin &gt;&gt; u &gt;&gt; v;        e[u].push_back(v);        e[v].push_back(u);    &#125;    dfs(1, 0);    for (int i = 1; i &lt;= n; ++i) tr.add(in[i], a[i]);    int op, x, y;    for (int i = 0; i &lt; m; ++i) &#123;        cin &gt;&gt; op &gt;&gt; x;        if (op == 1) &#123;            cin &gt;&gt; y;            int v = tr.rangeSum(in[x] - 1, in[x]);            tr.add(in[x], y ^ v);        &#125; else &#123;            cout &lt;&lt; tr.rangeSum(in[x] - 1, out[x]) &lt;&lt; &#x27;\\n&#x27;;        &#125;    &#125;    return 0;&#125;\n\nJava\n\nimport java.util.*;import java.io.*; public class Main &#123;    static int N = 100010;    static int n, m, tot;    static int[] a = new int[N], in = new int[N], out = new int[N], b = new int[N];    static List&lt;Integer&gt;[] e = new List[N];     static void add(int x, int v) &#123;        for (; x &lt;= n; x += x &amp; (-x)) &#123;            b[x] ^= v;        &#125;    &#125;     static int sum(int x) &#123;        int ans = 0;        if (x == 0) return 0;        for (; x &gt; 0; x -= x &amp; (-x)) &#123;            ans ^= b[x];        &#125;        return ans;    &#125;     static int rangeSum(int l, int r) &#123;        return sum(r) ^ sum(l);    &#125;     static void dfs(int u, int fa) &#123;        in[u] = ++tot;        for (int v : e[u]) &#123;            if (v == fa) continue;            dfs(v, u);        &#125;        out[u] = tot;    &#125;     public static void main(String[] args) throws IOException &#123;        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));        String[] temp = reader.readLine().split(&quot; &quot;);        n = Integer.parseInt(temp[0]);        m = Integer.parseInt(temp[1]);        temp = reader.readLine().split(&quot; &quot;);        for (int i = 1; i &lt;= n; ++i) &#123;            a[i] = Integer.parseInt(temp[i - 1]);            e[i]=new ArrayList&lt;&gt;();        &#125;        for (int i = 0; i &lt; n - 1; ++i) &#123;            temp = reader.readLine().split(&quot; &quot;);            int u = Integer.parseInt(temp[0]);            int v = Integer.parseInt(temp[1]);            e[u].add(v);            e[v].add(u);        &#125;        dfs(1, 0);        for (int i = 1; i &lt;= n; ++i) &#123;            add(in[i], a[i]);        &#125;        for (int i = 0; i &lt; m; ++i) &#123;            temp = reader.readLine().split(&quot; &quot;);            int op = Integer.parseInt(temp[0]);            int x = Integer.parseInt(temp[1]);            if (op == 1) &#123;                int y = Integer.parseInt(temp[2]);                int v = rangeSum(in[x] - 1, in[x]);                add(in[x], y ^ v);            &#125; else &#123;                writer.write(rangeSum(in[x] - 1, out[x]) + &quot;\\n&quot;);            &#125;        &#125;        reader.close();        writer.flush();        writer.close();    &#125;&#125;\n\nPython\n\nimport sysN = 100010n, m, tot = 0, 0, 0a = [0]*Nin_ = [0]*Nout = [0]*Nb = [0]*Ne = [[] for _ in range(N)]def add(x, v):    while x &lt;= n:        b[x] ^= v        x += x &amp; (-x)def sum_(x):    ans = 0    if x == 0:        return ans    while x &gt; 0:        ans ^= b[x]        x -= x &amp; (-x)    return ansdef rangeSum(l, r):    return sum_(r) ^ sum_(l)def dfs(u, fa):    global tot    in_[u] = tot = tot + 1    for v in e[u]:        if v == fa:            continue        dfs(v, u)    out[u] = totdef main():    global n, m, tot    n, m = map(int, sys.stdin.readline().split())    a[1:n+1] = map(int, sys.stdin.readline().split())    for _ in range(n - 1):        u, v = map(int, sys.stdin.readline().split())        e[u].append(v)        e[v].append(u)    dfs(1, 0)    for i in range(1, n+1):        add(in_[i], a[i])    for _ in range(m):        op, x, *extra = map(int, sys.stdin.readline().split())        if op == 1:            y = extra[0]            v = rangeSum(in_[x] - 1, in_[x])            add(in_[x], y ^ v)        else:            print(rangeSum(in_[x] - 1, out[x]))if __name__ == &quot;__main__&quot;:    main()\n混乱的数组 - 蓝桥云课问题描述给定一个正整数 $x$，请找出一个尽可能短的仅含正整数的数组 $A$，使得 $A$ 中恰好有 $x$ 对 $i, j$ 满足 $i &lt; j$ 且 $A_i &gt; A_j$。如果存在多个这样的数组，请输出字典序最小的那个。\n输入格式输入一行包含一个整数表示 $x$。\n输出格式输出两行。\n第一行包含一个整数 $n$，表示所求出的数组长度。\n第二行包含 $n$ 个整数 $A_i$，相邻整数之间使用一个空格分隔，依次表示数组中的每个数。\n样例输入3\n样例输出3 3 2 1\n评测用例规模与约定对于 $30$% 的评测用例，$x \\leq 10$；\n对于 $60$% 的评测用例，$x \\leq 100$；\n对于所有评测用例，$1 \\leq x \\leq 10^9$。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n3s\n512M\n\n\nC\n3s\n512M\n\n\nJava\n5s\n512M\n\n\nPython3\n12s\n512M\n\n\nPyPy3\n12s\n512M\n\n\nGo\n12s\n512M\n\n\nJavaScript\n12s\n512M\n\n\n\n\n总通过次数: 127  |  总提交次数: 411  |  通过率: 30.9%\n难度: 简单   标签: 2023, 思维, 构造, 省赛\n解题思路问题分析题目要求我们构造出一个字典序最小且有 $x$ 个逆序对的可重复数字的数组。\n我们可以假设一种特殊情况。我们知道，一个严格递减的数组一共有 $\\dfrac{n\\times(n-1)}{2}$ 个逆序对，也是长度为 $n$ 的序列最大逆序对数量，例如 $3,2,1$ 就有 $3$ 个逆序对。\n因此我们可以通过该公式找出 $\\ge x$ 的第一个严格递减数组。我们可以 $2$ 分 $n$，也可以暴力求 $n$，暴力求 $n$ 的复杂度是 $\\sqrt{x}$。\n构造答案如果 $\\dfrac{n\\times(n-1)}{2}$ 恰好等于 $x$，那么答案就是 $n \\sim 1$。\n如果 $\\dfrac{n\\times(n-1)}{2}$ 大于 $x$，则说明答案序列一定长度为 $n$。因为我们求出来 $\\dfrac{n\\times (n-1)}{2} \\ge x &gt; \\dfrac{(n-1)\\times(n-2)}{2}$。\n现在假设 $x=13$，则序列 $a=[6,5,4,3,2,1]$，该序列有 $15$ 个逆序对。我们将 $6$ 变为 $4$，该序列就有 $13$ 个逆序对了。也就是 $a=[4,5,4,3,2,1]$，但这并不是最小的答案，我们有如下修改方式：\n\n我们将 $a[3]$ 修改为 $3$，序列为 $[4,5,3,3,2,1]$，可以发现 $a[3]$ 和 $a[4]$ 构成不了逆序对，但 $a[1]$ 和 $a[3]$ 构成了逆序对，此时逆序对数不变，字典序变小。\n我们将 $a[4]$ 修改为 $2$，序列为 $[4,5,3,2,2,1]$，可以发现 $a[3]$ 和 $a[4]$ 构成了逆序对，$a[4]$ 和 $a[5]$ 构不成逆序对了。\n\n因此我们若想修改 $a_i$，则 $1\\sim i-1$ 中等于 $a_i$ 的数量要等于 $i+1\\sim n$ 中等于 $a_i-1$ 的数量，就能在保持逆序对不变的情况下修改。继续按照上述结论修改为 $[4,5,3,2,1,1]$。\n我们发现，$a[2]$ 修改为 $4$ 依旧不影响结果，现在序列变为 $[4,4,3,2,1,1]$。然后根据之前所述规则，将 $a[2]$ 改为 $3$，然后 $a[3]$ 也可以修改为 $2$，最终答案为 $[4,3,2,2,1,1]$。\n从做题经验来说：构造题大多都是有规律的构造，而非暴力构造，我们可以尝试寻找规律：\n对于 $x=(11\\sim 14)$ 我们均可以一一尝试：\n$\\text{[2 4 3 2 1 1 ],[3 3 2 2 1 1 ],[4 3 2 2 1 1],[5 4 3 2 1 1 ]}$。到这里发现可能后缀很像，但是依旧无法解题，我们继续找规律：\n$x=(16\\sim21)$：\n$\\text{[2 5 4 3 2 1 1 ],[3 4 3 2 2 1 1],[4 3 3 2 2 1 1 ],[5 4 3 2 2 1 1],[6 5 4 3 2 1 1 ],[7,6,5,4,3,2,1]}$。\n我们发现后缀是从 $\\text{[1 1] [2 2 1 1] [3 3 2 2 1 1][2 2 1 1][1 1]}$ 这种形式出现。\n而前缀规律为 $[2,5,4,3,2][3,4,3],[4],[5,4,3],[6,5,4,3,2]$。\n因此前后缀规律出现，跟是否是当前一半有关，因此寻找出规律。\n因此若 $x-\\dfrac{n\\times(n-1)}{2}\\le \\dfrac{n}{2}$，则我们首项填 $1+x-\\dfrac{n\\times(n-1)}{2}$，第二项从 $n-2$ 开始递减填充，最后填充值大小与首项一样，然后最后构造数量和 $x-\\dfrac{n\\times(n-1)}{2}$ 相关的 $[1,1][2,2][3,3]…$。\n该方法成立原因如下：\n以 $17,\\text{[3 4 3 2 2 1 1]}$ 为例：\n我们在末置部分构造 $\\text{2 2 1 1}$，已经有 $4$ 个逆序对了，首项一定比末置部分构造要大，因此对首项贡献为 $4$ 个逆序对，然后第二项开始递减填充了 $2$ 次，末置部分构造对齐贡献了 $8$ 个逆序对，他们互相之间构造了 $1$ 个逆序对，因此答案为 $4+4+8+1=17$。设 $x-\\dfrac{n\\times(n-1)}{2}=x_1$，则末置部分构造长度为 $x_1\\times2$，首项大小为 $x_1+1$，递减长度为 $n-x_1\\times2-1$。则构造出的逆序对数量为： $\\dfrac{(x_1\\times(x1-1))}{2}\\times 4+\\dfrac{(x_1\\times(x1-1))}{2}\\times 4+(n-x_1\\times2-1)\\times\\dfrac{(x_1\\times(x1-1))}{2}\\times 4+\\dfrac{(n-x_1\\times2-1)\\times((n-x_1\\times2-2))}{2}$ $\\dfrac{(x_1\\times(x1-1))}{2}\\times 4$ 是末置部分构造出的逆序对数量。\n$x-\\dfrac{n\\times(n-1)}{2}&gt;\\dfrac{n}{2}$ 证明也同理。\n综上，该方案是一个合理的构造方案。\nAC_Code\nC++\n\n#include &lt;bits/stdc++.h&gt;using namespace std;int x, n, a[100005], res, k, r;int main() &#123;  scanf(&quot;%d&quot;, &amp;x);  n = 1;  while (n * (n - 1) / 2 &lt; x) n++;  printf(&quot;%d\\n&quot;, n);  if (n * (n - 1) / 2 == x) &#123;    for (int i = 1; i &lt;= n; i++)      a[i] = n - i + 1;  &#125; else &#123;    res = n * (n - 1) / 2 - x;    if (res &lt;= n / 2) &#123;      r = n;      for (int i = 1; i &lt;= res; i++) &#123;        a[r--] = i;        a[r--] = i;      &#125;      for (int i = r; i &gt;= 1; i--) a[i] = res + (r - i + 1);    &#125; else &#123;      res = n - res - 1;      r = n;      for (int i = 1; i &lt;= res; i++) &#123;        a[r--] = i;        a[r--] = i;      &#125;      for (int i = r; i &gt;= 2; i--) a[i] = res + (r - i + 1);      a[1] = res + 1;    &#125;  &#125;  for (int i = 1; i &lt;= n; i++) printf(&quot;%d%c&quot;, a[i], i == n? &#x27;\\n&#x27; : &#x27; &#x27;);  return 0;&#125;\n\nJava\n\nimport java.util.Scanner;public class Main &#123;    public static void main(String[] args) &#123;        Scanner in = new Scanner(System.in);        int x = in.nextInt();        int n = 1;                while (n * (n - 1) / 2 &lt; x) &#123;            n++;        &#125;                System.out.println(n);                if (n * (n - 1) / 2 == x) &#123;            int[] a = new int[n + 1];            for (int i = 1; i &lt;= n; i++) &#123;                a[i] = n - i + 1;            &#125;            for (int i = 1; i &lt;= n; i++) &#123;                System.out.print(a[i]);                if (i == n) &#123;                    System.out.println();                &#125; else &#123;                    System.out.print(&quot; &quot;);                &#125;            &#125;        &#125; else &#123;            int[] a = new int[n + 1];            int res = n * (n - 1) / 2 - x;            int r;                        if (res &lt;= n / 2) &#123;                r = n;                for (int i = 1; i &lt;= res; i++) &#123;                    a[r--] = i;                    a[r--] = i;                &#125;                for (int i = r; i &gt;= 1; i--) &#123;                    a[i] = res + (r - i + 1);                &#125;            &#125; else &#123;                res = n - res - 1;                r = n;                for (int i = 1; i &lt;= res; i++) &#123;                    a[r--] = i;                    a[r--] = i;                &#125;                for (int i = r; i &gt;= 2; i--) &#123;                    a[i] = res + (r - i + 1);                &#125;                a[1] = res + 1;            &#125;                        for (int i = 1; i &lt;= n; i++) &#123;                System.out.print(a[i]);                if (i == n) &#123;                    System.out.println();                &#125; else &#123;                    System.out.print(&quot; &quot;);                &#125;            &#125;        &#125;    &#125;&#125;\n\nPython\n\nx = int(input())n = 1while n * (n - 1) // 2 &lt; x:    n += 1print(n)if n * (n - 1) // 2 == x:    a = [0] * (n + 1)        for i in range(1, n + 1):        a[i] = n - i + 1        print(a[i], end=&quot; &quot;)        print()else:    a = [0] * (n + 1)    res = n * (n - 1) // 2 - x    r = 0        if res &lt;= n // 2:        r = n        for i in range(1, res + 1):            a[r] = i            r -= 1            a[r] = i            r -= 1                for i in range(r, 0, -1):            a[i] = res + (r - i + 1)    else:        res = n - res - 1        r = n                for i in range(1, res + 1):            a[r] = i            r -= 1            a[r] = i            r -= 1                for i in range(r, 1, -1):            a[i] = res + (r - i + 1)                a[1] = res + 1        for i in range(1, n + 1):        print(a[i], end=&quot; &quot;)        print()\n","categories":["算法学习笔记"],"tags":["蓝桥杯备赛"]},{"title":"2023年蓝桥杯省赛c组试题","url":"/2024/03/31/2023%E5%B9%B4%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%81%E8%B5%9Bc%E7%BB%84%E8%AF%95%E9%A2%98/","content":"题目总览\n1.求和\n2.分糖果\n3.三国游戏\n4.平均\n5.填充\n6.棋盘\n7.子矩阵\n8.公因数匹配\n9.异或和之差\n10.太阳\n\n3.求和 - 蓝桥云课 (lanqiao.cn)问题描述求 $1$ （含）至 $20230408$ （含）中每个数的和。\n答案提交这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nJava\n2s\n256M\n\n\nPython3\n3s\n256M\n\n\nPyPy3\n3s\n256M\n\n\nGo\n3s\n256M\n\n\nJavaScript\n3s\n256M\n\n\n\n\n总通过次数: 7339  |  总提交次数: 8165  |  通过率: 89.9%\n难度: 中等   标签: 2023, 模拟, 省赛\n参考答案print(sum(range(20240409)))\n计算结果是204634714038436\n0分糖果 - 蓝桥云课 (lanqiao.cn)问题描述两种糖果分别有 $9$ 个和 $16$ 个，要全部分给 $7$ 个小朋友，每个小朋友得到的糖果总数最少为 $2$ 个最多为 $5$ 个，问有多少种不同的分法。糖果必须全部分完。\n只要有其中一个小朋友在两种方案中分到的糖果不完全相同，这两种方案就算作不同的方案。\n答案提交这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。\n运行限制\n最大运行时间：1s\n最大运行内存: 256M\n\n总通过次数: 2122  |  总提交次数: 2351  |  通过率: 90.3%\n难度: 困难   标签: 2023, 枚举, 省赛, DFS\n参考答案ans = 0def dfs(depth, n, m):    global ans    if depth == 7:        if n == 0 and m == 0:            ans += 1        return    for i in range(n + 1):        for j in range(m + 1):            if 2 &lt;= i + j &lt;= 5 and i &lt;= n and j &lt;= m:                dfs(depth + 1, n - i, m - j)dfs(0,9,16)print(ans)\nans = 0path = [[0,0] for i in range(7)]def dfs(depth):    global ans    if depth == 7:        sum1 = sum2 = 0        for i in range(7):            sum1 += path[i][0]            sum2 += path[i][1]        if sum1 == 9 and sum2 == 16:            ans += 1        return    for i in range(0,6):        for j in range(0,6):            if 2 &lt;= i + j &lt;= 5:                path[depth][0] = i                path[depth][1] = j                dfs(depth + 1)dfs(0)print(ans)\n计算结果是5067671\n10.三国游戏 - 蓝桥云课 (lanqiao.cn)问题描述小蓝正在玩一款游戏。游戏中魏($X$)、蜀($Y$)、吴($Z$)三个国家各自拥有一定数量的士兵$X, Y, Z$（一开始可以认为都为 $0$）。游戏有 $n$ 个可能会发生的事件，每个事件之间相互独立且最多只会发生一次，当第 $i$ 个事件发生时会分别让 $X, Y, Z$ 增加$A_i, B_i,C_i$。\n当游戏结束时（所有事件的发生与否已经确定），如果 $X, Y, Z$ 的其中一个大于另外两个之和，我们认为其获胜。例如，当 $X &gt; Y + Z$ 时，我们认为魏国获胜。小蓝想知道游戏结束时如果有其中一个国家获胜，最多发生了多少个事件?如果不存在任何能让某国获胜的情况，请输出 $-1$。\n输入格式输入的第一行包含一个整数 $n$。\n第二行包含 $n$ 个整数表示 $A_i$，相邻整数之间使用一个空格分隔。\n第三行包含 $n$ 个整数表示 $B_i$，相邻整数之间使用一个空格分隔。\n第四行包含 $n$ 个整数表示 $C_i$，相邻整数之间使用一个空格分隔。\n输出格式输出一行包含一个整数表示答案。\n样例输入31 2 22 3 21 0 7\n样例输出2\n评测用例规模与约定对于 $40$% 的评测用例，$n \\leq 500$；\n对于 $70$% 的评测用例，$n \\leq 5000$；\n对于所有评测用例，$1 \\leq n \\leq 10^5$，$1 \\leq A_i, B_i, C_i \\leq 10^9$。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nJava\n2s\n256M\n\n\nPython3\n3s\n256M\n\n\nPyPy3\n3s\n256M\n\n\nGo\n3s\n256M\n\n\nJavaScript\n3s\n256M\n\n\n\n\n总通过次数: 2106  |  总提交次数: 3250  |  通过率: 64.8%\n难度: 困难   标签: 2023, 贪心, 排序, 省赛\n参考答案​    首先明确游戏结束时（所以发事情发生与否已经确定）仅仅只表示一次游戏会发生1，2…n这几件事情。可能在过程中会出现比如X&gt;Y+Z的情况，此时并不表示某魏国获胜了。而是要等到全部事情发生后比对X与Y+Z的情况才能判断。理解后难度就直线下降了。因此可以枚举魏、蜀、吴三个国家想要获胜最多事情数量，然后取最大值即是答案。    假设魏国获胜：令new_X =[ Ai - Bi - Ci].  1&lt;=i&lt;=n    为使发生的事件最多，需要从new_Xi最大的地方开始发生，sum_X += new_Xi    当sum_X&lt;=0时，结束。\nn = int(input())A = list(map(int,input().split()))B = list(map(int,input().split()))C = list(map(int,input().split()))new_X = sorted([ A[_] - B[_] - C[_] for _ in range(n) ],reverse=True)new_Y = sorted([ B[_] - A[_] - C[_] for _ in range(n) ],reverse=True)new_Z = sorted([ C[_] - A[_] - B[_] for _ in range(n) ],reverse=True)ans,resX,resY,resZ,sum_X,sum_Y,sum_Z = 0,0,0,0,0,0,0for i in range(n):    sum_X,sum_Y,sum_Z =  sum_X + new_X[i], sum_Y + new_Y[i], sum_Z + new_Z[i]    resX = resY = resZ = i + 1    if sum_X&gt;0:ans = max(ans,resX)    if sum_Y&gt;0:ans = max(ans,resY)    if sum_Z&gt;0:ans = max(ans,resZ)    if sum_X&lt;=0 and sum_Y&lt;=0 and sum_Z&lt;=0:breakprint(ans if ans else -1)\n0平均 - 蓝桥云课 (lanqiao.cn)问题描述有一个长度为 $n$ 的数组（$n$ 是 $10$ 的倍数），每个数 $a_i$ 都是区间 $[0, 9]$ 中的整数。小明发现数组里每种数出现的次数不太平均，而更改第 $i$ 个数的代价为 $b_i$，他想更改若干个数的值使得这 $10$ 种数出现的次数相等（都等于 $\\frac{n}{10}$），请问代价和最少为多少。\n输入格式输入的第一行包含一个正整数 $n$。\n接下来 $n$ 行，第 $i$ 行包含两个整数 $a_i, b_i$ ，用一个空格分隔。\n输出格式输出一行包含一个正整数表示答案。\n样例输入101 11 21 32 42 52 63 73 83 94 10\n样例输出27\n样例说明只更改第 $1, 2, 4, 5, 7, 8$ 个数，需要花费代价 $1 + 2 + 4 + 5 + 7 + 8 = 27$。\n评测用例规模与约定对于 $20$% 的评测用例，$n \\leq 1000$；\n对于所有评测用例，$n \\leq 10^5$，$0 &lt; b_i \\leq 2 \\times 10^5$。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n3s\n512M\n\n\nC\n3s\n512M\n\n\nJava\n4s\n512M\n\n\nPython3\n5s\n512M\n\n\nPyPy3\n5s\n512M\n\n\nGo\n5s\n512M\n\n\nJavaScript\n5s\n512M\n\n\n\n\n参考答案n = int(input())lst = []num = n / 10dic = &#123;&#125;for i in range(n):    a, b = map(int, input().split())    lst.append((a, b))    if a in dic.keys():#记录a的数量        dic[a] += 1    else:        dic[a] = 1lst = sorted(lst, key=lambda x: x[1]) #以代价大小进行排序value = 0for i in range(n):    a, b = lst[i]#取出最小代价的a    if dic.get(a, 0) &gt; num: #判断a的数量是否大于num        value += b            dic[a]-=1  #计算完a的数量要减1print(value)\n1.填充 - 蓝桥云课 (lanqiao.cn)问题描述有一个长度为 $n$ 的 $01$ 串，其中有一些位置标记为 $?$，这些位置上可以任意填充 $0$ 或者 $1$，请问如何填充这些位置使得这个 $01$ 串中出现互不重叠的 $00$ 和 $11$ 子串最多，输出子串个数。\n输入格式输入一行包含一个字符串。\n输出格式输出一行包含一个整数表示答案。\n样例输入1110?0\n样例输出2\n样例说明如果在问号处填 $0$ ，则最多出现一个 $00$ 和一个 $11$：$111000$。\n评测用例规模与约定对于所有评测用例，$1 \\leq n \\leq 10^6$。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nJava\n2s\n256M\n\n\nPython3\n3s\n256M\n\n\nPyPy3\n3s\n256M\n\n\nGo\n3s\n256M\n\n\nJavaScript\n3s\n256M\n\n\n\n\n总通过次数: 2622  |  总提交次数: 3071  |  通过率: 85.4%\n难度: 中等   标签: 2023, 贪心, 省赛, 动态规划\n参考答案import osimport syss=input()n=len(s)&#x27;&#x27;&#x27;judge=[&#x27;00&#x27;,&#x27;11&#x27;,&#x27;0?&#x27;,&#x27;1?&#x27;,&#x27;?0&#x27;,&#x27;?1&#x27;,&#x27;??&#x27;]ans=0i=1while i&lt;n:  if s[i-1:i+1] in judge:    ans+=1    i+=2  else:    i+=1print(ans)&#x27;&#x27;&#x27;f=[0]*nfor i in range(1,n):  if s[i]==s[i-1] or s[i]==&#x27;?&#x27; or s[i-1]==&#x27;?&#x27;:    f[i]=f[i-2]+1  else:    f[i]=f[i-1]print(f[-1])\n1.棋盘 - 蓝桥云课 (lanqiao.cn)问题描述小蓝拥有 $n\\times n$ 大小的棋盘，一开始棋盘上全都是白子。小蓝进行了 $m$ 次操作，每次操作会将棋盘上某个范围内的所有棋子的颜色取反（也就是白色棋子变为黑色，黑色棋子变为白色）。请输出所有操作做完后棋盘上每个棋子的颜色。\n输入格式输入的第一行包含两个整数 $n$，$m$，用一个空格分隔，表示棋盘大小与操作数。\n接下来 $m$ 行每行包含四个整数 $x_1$，$y_1$，$x_2$，$y_2$，相邻整数之间使用一个空格分隔，表示将在 $x_1$ 至 $x_2$ 行和 $y_1$ 至 $y_2$ 列中的棋子颜色取反。\n输出格式输出 $n$ 行，每行 $n$ 个 $0$ 或 $1$ 表示该位置棋子的颜色。如果是白色则输出 $0$，否则输出 $1$。\n样例输入&lt;span&gt;3 &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;1 &lt;/span&gt;&lt;span&gt;1&lt;/span&gt; &lt;span&gt;2&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;2 &lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;3&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;1 &lt;/span&gt;&lt;span&gt;1&lt;/span&gt; &lt;span&gt;3&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;\n样例输出001010100\n评测用例规模与约定对于 $30$% 的评测用例，$n,m\\leq 500$ ；\n对于所有评测用例，$1\\leq n,m\\leq 2000$，$1\\leq x_1\\leq x_2\\leq n$，$1\\leq y_1\\leq y_2\\leq m$。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n3s\n512M\n\n\nC\n3s\n512M\n\n\nJava\n4s\n512M\n\n\nPython3\n10s\n512M\n\n\nPyPy3\n10s\n512M\n\n\nGo\n10s\n512M\n\n\nJavaScript\n10s\n512M\n\n\n\n\n参考答案​    第一种方法：（超时） 这部分代码通过输入获取棋盘大小 n 和操作数 m。 然后创建一个 n x n 大小的二维数组 board，并将其所有元素初始化为0。 接下来，执行 m 次操作：对于每次操作，从输入中获取操作的范围 x1, y1, x2, y2。 在指定的范围内，对棋盘上的棋子颜色进行取反操作，即白变黑，黑变白。 最后，遍历 board 中的每一行，并使用 join() 和 map() 将每行中的数字连接成字符串并打印出来，确保数字之间有空格分隔。 整个代码的功能是模拟了对一个棋盘进行了 m 次操作，每次操作对指定范围内的棋子颜色进行了取反，并输出了最终每个位置的棋子颜色。\n​     第二种方法：（优化） 在这段代码中，可能的性能瓶颈在于对棋盘的操作。对于每次操作，它使用了两层嵌套的循环来更新棋盘范围内的所有棋子颜色。这样的做法在棋盘较大且操作次数较多的情况下可能会导致性能问题。 一种改进方式是尝试避免在每次操作时都对指定范围内的棋子颜色进行更新。你可以考虑使用差分数组（Difference Array）来优化这一过程。 差分数组是一个数组，用于记录相邻两个元素之间的差值。在这个问题中，可以利用差分数组来记录每一行每个位置的颜色变化次数，而不是直接更新整个棋盘。 这段代码中，我们使用了一个 (n + 1) x (n + 1) 大小的二维数组 diff 来表示差分数组。在操作输入时，我们只更新了差分数组中的值，最后根据差分数组的值计算出最终的棋盘状态。这种方式能够减少更新棋盘的次数，从而提高效率。\n# 这段代码会超时，下面使用差分方法进行优化# n,m = map(int,input().split())# chessboard = [[0]*n for _ in range(n)]# for _ in range(m):#   x1,y1,x2,y2 = map(int,input().split())#   for i in range(x1-1,x2):#     for j in range(y1-1,y2):#       chessboard[i][j] = 1 - chessboard[i][j]# for row in chessboard:#     print(&#x27;&#x27;.join(map(str, row)))n, m = map(int, input().split())# 初始化一个全为0的(n + 1) x (n + 1)的二维数组来表示差分数组diff = [[0] * (n + 2) for _ in range(n + 2)]# 执行m次操作for _ in range(m):    x1, y1, x2, y2 = map(int, input().split())    # 更新差分数组的操作范围    diff[x1][y1] += 1    diff[x1][min(y2 + 1, n + 1)] -= 1    diff[min(x2 + 1, n + 1)][y1] -= 1    diff[min(x2 + 1, n + 1)][min(y2 + 1, n + 1)] += 1# 计算最终棋盘状态for i in range(1, n + 1):    for j in range(1, n + 1):        diff[i][j] += diff[i][j - 1] + diff[i - 1][j] - diff[i - 1][j - 1]        # 棋盘上该位置为偶数时为0，奇数时为1        print(1 if diff[i][j] % 2 == 1 else 0, end=&#x27;&#x27;)    print()\n​    用差分前缀和的思想，二维转化为一维一维地处理，由于数据量不大，是可以接受的。另外转换棋子可以使用异或的思想，运行可以快一些。\nn, m = map(int, input().split())mp = [[0] * n for _ in range(n)]for _ in range(m):    x1, y1, x2, y2 = map(int, input().split())    for i in range(x1, x2+1):        mp[i-1][y1-1] ^= 1        if y2 != n:             mp[i-1][y2] ^= 1for i in range(n):    for j in range(1, n):        mp[i][j] ^= mp[i][j-1]    print(*mp[i], sep=&#x27;&#x27;)\n2.子矩阵 - 蓝桥云课 (lanqiao.cn)问题描述给定一个 $n \\times m$ （$n$ 行 $m$ 列）的矩阵。设一个\n矩阵的价值为其所有数中的最大值和最小值的乘积。求给定矩阵的所有大小为 $a \\times b$ （$a$ 行 $b$ 列）的子矩阵的价值的和。\n答案可能很大，你只需要输出答案对 $998244353$ 取模后的结果。\n输入格式输入的第一行包含四个整数分别表示 $n$，$m$，$a$，$b$，相邻整数之间使用一个空格分隔。接下来\n$n$ 行每行包含 $m$ 个整数，相邻整数之间使用一个空格分隔，表示矩阵中的每个数 $A_{i,j}$。\n输出格式输出一行包含一个整数表示答案。\n样例输入2 3 1 21 2 34 5 6\n样例输出58\n样例说明$1 \\times 2 + 2 \\times 3 + 4 \\times 5 + 5 \\times 6 = 58$。\n评测用例规模与约定对于 $40$% 的评测用例，$1 \\leq n,m \\leq 100$；\n对于 $70$% 的评测用例，$1 \\leq n,m \\leq 500$；\n对于所有评测用例，$1 \\leq a \\leq n \\leq 1000$，$1 \\leq b \\leq m \\leq 1000$，$1 \\leq A_{i,j} \\leq 10^9$。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n2s\n256M\n\n\nC\n2s\n256M\n\n\nJava\n4s\n256M\n\n\nPython3\n4s\n256M\n\n\nPyPy3\n4s\n256M\n\n\nGo\n4s\n256M\n\n\nJavaScript\n4s\n256M\n\n\n\n\n总通过次数: 648  |  总提交次数: 1534  |  通过率: 42.2%\n难度: 困难   标签: 2023, 单调队列, 省赛\n参考答案​    暴力是显然不能通过全部测试数据的，需要得到每一个a*b大小的矩阵的最大值和最小值，可以先考虑得到每一行长度为b的窗口中的最大值和最小值，然后在这个基础上求出每一列长度为a的窗口的最大值和最小值。就可以预处理出来每个子矩阵中的最大值和最小值。要求一个滑动窗口中的最大值和最小值是一个基本的单调队列问题。\nn, m, a, b = map(int, input().split())s,num_max,num_min,n_max,n_min,res = [[0] * (n + 2) for _ in range(n + 2)],[],[],[],[],0for i in range(1, n + 1):    s[i][1:m + 1] = map(int, input().split())def get_min(a, k, m):    tep,q,hh,tt = [],[0]*1010,0,-1    for i in range(1, m + 1):        if hh &lt;= tt and q[hh] &lt;= i - k: hh += 1  # 判断是否出了窗口        while hh &lt;= tt and a[i] &lt;= a[q[tt]]: tt -= 1        tt,q[tt] = tt + 1,i        if i - k &gt;= 0: tep.append(a[q[hh]])    return tepdef get_max(a, k, m):    tep,q,hh,tt = [],[0]*1010,0,-1    for i in range(1, m + 1):        if hh &lt;= tt and q[hh] &lt;= i - k: hh += 1  # 判断是否出了窗口        while hh &lt;= tt and a[i] &gt;= a[q[tt]]: tt -= 1        tt,q[tt] = tt + 1,i        if i - k &gt;= 0: tep.append(a[q[hh]])    return tepfor i in range(1, n + 1):    temp = [0] + get_max(s[i][:m + 1], b, m)    num_max.append(temp)    temp = [0] + get_min(s[i][:m + 1], b, m)    num_min.append(temp)for i in range(1, m - b + 2):    t1 = [0]    for _ in range(n):        t1.append(num_max[_][i])    t1.append(0)    temp = get_max(t1, a, n)    n_max.append(temp)    t2 = [0]    for _ in range(n):        t2.append(num_min[_][i])    t2.append(0)    temp = get_min(t2, a, n)    n_min.append(temp)for i in range(len(n_max)):    for j in range(len(n_max[0])):        res += n_max[i][j] * n_min[i][j]print(res)\n1.公因数匹配 - 蓝桥云课 (lanqiao.cn)问题描述给定 $n$ 个正整数 $A_i$，请找出两个数 $i$，$j$ 使得 $i &lt; j$ 且 $A_i$ 和 $A_j$ 存在大于 $1$ 的公因数。\n如果存在多组 $i$，$j$，请输出 $i$ 最小的那组。如果仍然存在多组 $i$，$j$，请输出 $i$ 最小的所有方案中 $j$ 最小的那组。\n输入格式输入的第一行包含一个整数 $n$。\n第二行包含 $n$ 个整数分别表示 $A_1$，$A_2$，$\\ldots$，$A_n$，相邻整数之间使用一个空格分隔。\n输出格式输出一行包含两个整数分别表示题目要求的 $i$，$j$，用一个空格分隔。\n样例输入55 3 2 6 9\n样例输出2 4\n评测用例规模与约定对于 $40$% 的评测用例，$n \\leq 5000$；\n对于所有评测用例，$1 \\leq n \\leq 10^5$，$1 \\leq A_i \\leq 10^6$。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n3s\n256M\n\n\nC\n3s\n256M\n\n\nJava\n4s\n256M\n\n\nPython3\n5s\n256M\n\n\nPyPy3\n5s\n256M\n\n\nGo\n5s\n256M\n\n\nJavaScript\n5s\n256M\n\n\n\n\n参考答案import osimport sys# 核心方法：任何一个正整数都可以等于多个质数的乘积 所以将每一个输入分解成质因数，然后输出质因数相同的最小输入位置 该位置通过一个dict储存# 请在此输入您的代码prime=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009]dic=&#123;&#125;le = int(input())li = list(map(int,input().split()))resi = le # i&lt;jresj = lefor i in range(le):  a = li[i]  # a 为列表第i+1个元素  if a == 1 : # 当第i+1个元素为1时  则输入首位和当前值的位置    resi = 1    resj = i + 1    break  else:    if dic.get(a) == None: # 遍历dict 如果dict里面没有存放此元素则存入位置      dic[a] = i + 1    else: # 如果存在此元素则比较其位置和此时位置的大小 此时位置在后面则替换位置      if resi &gt; dic[a]:        resi = dic[a]        resj = i + 1# 将此位置用resj存储  for j in prime:# 遍历质数表 进行求质因数过程    if a &lt; j: # 如果当前质数表对象比输入对象大则终止      break    if(a % j == 0): # 找到质因数 要除尽此质因数在继续      while a % j == 0:        a = a / j      if dic.get(j) == None: # 同前面一样判断dict里面        dic[j] = i + 1      else:        if resi &gt; dic[j]:          resi = dic[j]          resj = i + 1print(resi,resj)\nN = int(1e5 + 5)index = &#123;&#125;  # prime : first indexa = [0 for i in range(N)]len = 0def devidePrime(x: int) -&gt; int:    global index, a, len    pos = len + 1    n = a[x]    i = 2    while (i * i &lt;= n):        if (n % i == 0):            while (n % i == 0):                n //= i            if (i in index.keys()):                if index[i] &lt; pos:                    pos = index[i]            else:                index[i] = x        i += 1    if (n):        if (n in index.keys()):            if index[n] &lt; pos:                pos = index[n]        else:            index[n] = x    if pos == len + 1:        return 0    return posdef solve():    global a, len    len = int(input())    a = [0] + [int(_) for _ in input().split(&quot; &quot;)]    ansi, ansj = len+1, len+1    for j in range(1, len+1):        i = devidePrime(j)        if (i and (i &lt; ansi)):            ansi = i            ansj = j    print(str(ansi) + &quot; &quot; + str(ansj))solve()\n2.异或和之差 - 蓝桥云课 (lanqiao.cn)问题描述给定一个含有 $n$ 个元素的数组 $A_i$，你可以选择两个不相交的子段。求出这两个子段内的数的异或和的差值的最大值。\n输入格式输入的第一行包含一个整数 $n$。\n第二行包含 $n$ 个整数 $A_i$，相邻整数之间使用一个空格分隔。\n输出格式输出一行包含一个整数表示答案。\n样例输入61 2 4 9 2 7\n样例输出14\n样例说明两个子段可以分别选 $1$ 和 $4,9,2$，差值为 $15-1=14$。\n评测用例规模与约定对于 $40%$ 的评测用例，$n \\leq 5000$；\n对于所有评测用例，$2 \\leq n \\leq 2 \\times 10^5$，$0 \\leq A_i \\leq 2^{20}$。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nJava\n2s\n256M\n\n\nPython3\n10s\n256M\n\n\nPyPy3\n10s\n256M\n\n\nGo\n10s\n256M\n\n\nJavaScript\n10s\n256M\n\n\n\n\n参考答案ii = lambda: int(input())  si = lambda: input().split()mi = lambda: map(int, si())li = lambda: list(mi())from typing import Listn = ii()a = li()b_length = max(a).bit_length()+1class TrieNode:    def __init__(self):        self.children = [None, None]    def insert(self, num: int):        node = self        for i in range(b_length, -1, -1):            bit = (num &gt;&gt; i) &amp; 1            if not node.children[bit]:                node.children[bit] = TrieNode()            node = node.children[bit]    def query_max(self, num: int) -&gt; int:        node = self        res = 0        for i in range(b_length, -1, -1):            bit = (num &gt;&gt; i) &amp; 1            if node.children[1 - bit]:                res += (1 &lt;&lt; i)                node = node.children[1 - bit]            else:                node = node.children[bit]        return res    def query_min(self, num: int) -&gt; int:        node = self        res = 0        for i in range(b_length, -1, -1):            bit = (num &gt;&gt; i) &amp; 1            if node.children[bit]:                node = node.children[bit]            else:                res += (1 &lt;&lt; i)                node = node.children[1 - bit]        return reslmax = [0] * (n + 2)lmin = [inf] * (n + 2)rmax = [0] * (n + 2)rmin = [inf] * (n + 2)ltrie = TrieNode()ltrie.insert(0)ls = [0] * (n + 1)for i in range(1, n + 1):    ls[i] = ls[i - 1] ^ a[i - 1]    lmax[i] = max(lmax[i - 1], ltrie.query_max(ls[i]))    lmin[i] = min(lmin[i - 1], ltrie.query_min(ls[i]))    ltrie.insert(ls[i])rtrie = TrieNode()rtrie.insert(0)rs = [0] * (n + 2)for i in range(n, 0, -1):    rs[i] = rs[i + 1] ^ a[i - 1]    rmax[i] = max(rmax[i + 1], rtrie.query_max(rs[i]))    rmin[i] = min(rmin[i + 1], rtrie.query_min(rs[i]))    rtrie.insert(rs[i])ans = 0for i in range(1, n):    ans = max(ans, max(lmax[i] - rmin[i + 1], rmax[i + 1] - lmin[i]))print(ans)\n​    01字典树+前缀异或和+后缀异或和 具体实现时：以某一个数字为分界线，分别计算以其为结尾以及以其为起点的最大/最小前缀异或和以及最大/最小后缀异或和，共四个数组，最后答案就是针对各分界点的左侧最大-右侧最小以及右侧最大-左侧最小之间的最大值 ps：pypy提交能过，但python会超时\nn = int(input())nums = [0] + list(map(int, input().split()))N, cnt = int(2e5+10), 0trie = [[0, 0] for _ in range(4 * N)]  # 建立01字典树def insert(x):    global cnt    p = 0    for i in range(20, -1, -1):        y = (x &gt;&gt; i) &amp; 1  # 计算二进制形式的x在当前位上是0还是1        # 任何数与1做与操作，奇数得1，偶数得0        if not trie[p][y]:  # 如果当前结点未建立            cnt += 1            trie[p][y] = cnt        p = trie[p][y]def query_max(x):    p = res = 0    for i in range(20, -1, -1):        y = (x &gt;&gt; i) &amp; 1        if trie[p][not y]:            res += 2 ** i            p = trie[p][not y]        else:            p = trie[p][y]    return resdef query_min(x):    p = res = 0    for i in range(20, -1, -1):        y = (x &gt;&gt; i) &amp; 1        if trie[p][y]:            p = trie[p][y]        else:            p = trie[p][not y]            res += 2 ** i    return resrmx, rmn = [0] * N, [0] * N  # 前缀异或和最大值，最小值rmn[0] = float(&#x27;inf&#x27;)sumv = 0for j in range(1, n + 1):  # j作为枚举量枚举左边界    insert(sumv)    sumv ^= nums[j]    rmx[j] = max(rmx[j - 1], query_max(sumv))    rmn[j] = min(rmn[j - 1], query_min(sumv))trie = [[0, 0] for _ in range(4 * N)]cnt = 0lmx, lmn = [0] * N, [0] * Nlmn[n + 1] = float(&#x27;inf&#x27;)sumv = 0  # j作为枚举量枚举右边界for j in range(n, -1, -1):    insert(sumv)    sumv ^= nums[j]    lmx[j] = max(lmx[j + 1], query_max(sumv))    lmn[j] = min(query_min(sumv), lmn[j + 1])ans = 0for i in range(1, n):    ans = max(ans, lmx[i] - rmn[i + 1], rmx[i] - lmn[i + 1])print(ans)\n1.太阳 - 蓝桥云课 (lanqiao.cn)问题描述这天，小蓝在二维坐标系的点 $(X, Y)$ 上放了一个太阳，看做点光源。他拿来了 $n$ 条线段，将它们平行于 $x$ 轴放置在了坐标系中，第 $i$ 条线段的左端点在 $(x_i, y_i)$，长度为 $l_i$。线段之间不会有重合或部分重合的情况（但可能出现端点相交）。小蓝想知道有多少条线段能被太阳照亮（一条线段有长度大于 $0$ 的部分被照亮就算）。\n输入格式输入的第一行包含三个正整数 $n$, $X$, $Y$，相邻整数之间使用一个空格分隔。\n接下来 $n$ 行，第 $i$ 行包含三个整数 $x_i$, $y_i$, $l_i$，相邻整数之间使用一个空格分隔。\n输出格式输出一行包含一个正整数表示答案。\n样例输入&lt;span&gt;3 &lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;2000000&lt;/span&gt;&lt;span&gt;5 &lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;&lt;span&gt;6 &lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;4&lt;/span&gt;&lt;span&gt;0 &lt;/span&gt;&lt;span&gt;1&lt;/span&gt; &lt;span&gt;10&lt;/span&gt;\n样例输出2\n样例说明第一条线段在最上面被照亮，第二条线段被第一条完全挡住，第三条线段左边的一段能被照亮。\n评测用例规模与约定对于 $30$% 的评测用例，$n \\leq 1000$；\n对于所有评测用例，$1 \\leq n \\leq 100000$，$0 \\leq x_i, X \\leq 10^7$，$0 &lt; y_i \\leq 10^5$，$0 &lt; l_i \\leq 100$，$10^6 &lt; Y \\leq 10^7$。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n2s\n256M\n\n\nC\n2s\n256M\n\n\nJava\n3s\n256M\n\n\nPython3\n4s\n256M\n\n\nPyPy3\n4s\n256M\n\n\nGo\n4s\n256M\n\n\nJavaScript\n4s\n256M\n\n\n\n\n总通过次数: 170  |  总提交次数: 421  |  通过率: 40.4%\n难度: 中等   标签: 2023, 思维, 省赛, 计算几何\n参考答案n, X, Y = map(int, input().split())class Seg:    def __init__(self, x, y, i):        self.x = x        self.y = y        self.i = i    def __lt__(self, other):        a = 1 * other.y * self.x        b = 1 * self.y * other.x        return a &lt; b    def __eq__(self, other):        return 1 * other.y * self.x == 1 * self.y * other.xvec = []vis = [False] * (n + 1)for i in range(1, n + 1):    x, y, l = map(int, input().split())    vec.append(Seg(x - X, Y - y, i))    vec.append(Seg(x + l - X, Y - y, -i))vec.sort()st = set()pre = Seg(-1, 1, 0)for t in vec:    if t != pre:        if st:            vis[min(st)[1]] = True        pre = t    if t.i &gt; 0:        st.add((t.y, t.i))    else:        st.remove((t.y, -t.i))ans = sum(vis)print(ans)\n","categories":["算法学习笔记"],"tags":["蓝桥杯备赛"]},{"title":"19-23年蓝桥杯真题","url":"/2024/04/11/19-23%E5%B9%B4%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%9F%E9%A2%98/","content":"\nP8678 [蓝桥杯 2019 省 A] 填空问题\nP8679 [蓝桥杯 2019 省 B] 填空问题\nP8680 [蓝桥杯 2019 省 B] 特别数的和\nP8681 [蓝桥杯 2019 省 AB] 完全二叉树的权值\nP8682 [蓝桥杯 2019 省 B] 等差数列\nP8683 [蓝桥杯 2019 省 B] 后缀表达式\nP8684 [蓝桥杯 2019 省 B] 灵能传输\nP8685 [蓝桥杯 2019 省 A] 外卖店优先级\nP8686 [蓝桥杯 2019 省 A] 修改数组\nP8687 [蓝桥杯 2019 省 A] 糖果\nP8688 [蓝桥杯 2019 省 A] 组合数问题\nP8704 [蓝桥杯 2020 省 A1] 填空问题\nP8705 [蓝桥杯 2020 省 B1] 填空问题\nP8706 [蓝桥杯 2020 省 AB1] 解码\nP8707 [蓝桥杯 2020 省 AB1] 走方格\nP8708 [蓝桥杯 2020 省 A1] 整数小拼接\nP8709 [蓝桥杯 2020 省 A1] 超级胶水\nP8710 [蓝桥杯 2020 省 AB1] 网络分析\nP8711 [蓝桥杯 2020 省 B1] 整除序列\nP8712 [蓝桥杯 2020 省 B1] 整数拼接\nP8713 [蓝桥杯 2020 省 A2] 填空问题\nP8714 [蓝桥杯 2020 省 B2] 填空问题\nP8715 [蓝桥杯 2020 省 AB2] 子串分值\nP8716 [蓝桥杯 2020 省 AB2] 回文日期\nP8717 [蓝桥杯 2020 省 AB2] 成绩分析\nP8718 [蓝桥杯 2020 省 A2] 荒岛探测\nP8719 [蓝桥杯 2020 省 AB2] 字串排序\nP8720 [蓝桥杯 2020 省 B2] 平面切分\nP8721 [蓝桥杯 2020 省 AB3] 填空问题(缺少 inc.txt, E 题数据)\nP8722 [蓝桥杯 2020 省 AB3] 日期识别\nP8723 [蓝桥杯 2020 省 AB3] 乘法表\nP8724 [蓝桥杯 2020 省 AB3] 限高杆\nP8725 [蓝桥杯 2020 省 AB3] 画中漂流\nP8726 [蓝桥杯 2020 省 AB3] 旅行家\nP8740 [蓝桥杯 2021 省 A] 填空问题\nP8741 [蓝桥杯 2021 省 B] 填空问题\nP8742 [蓝桥杯 2021 省 AB] 砝码称重\nP8743 [蓝桥杯 2021 省 A] 异或数列\nP8744 [蓝桥杯 2021 省 A] 左孩子右兄弟\nP8745 [蓝桥杯 2021 省 AB] 括号序列\nP8746 [蓝桥杯 2021 省 A] 分果果\nP8747 [蓝桥杯 2021 省 B] 双向排序\nP8748 [蓝桥杯 2021 省 B] 时间显示\nP8749 [蓝桥杯 2021 省 B] 杨辉三角形\nP8750 [蓝桥杯 2021 省 A2] 填空问题\nP8751 [蓝桥杯 2021 省 B2] 填空问题\nP8752 [蓝桥杯 2021 省 B2] 特殊年份\nP8753 [蓝桥杯 2021 省 AB2] 小平方\nP8754 [蓝桥杯 2021 省 AB2] 完全平方数\nP8755 [蓝桥杯 2021 省 AB2] 负载均衡\n\n","categories":["刷题","蓝桥"],"tags":["蓝桥杯"]},{"title":"ASP.NET登录页面验证码实现","url":"/2024/03/30/ASP-NET%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%E9%AA%8C%E8%AF%81%E7%A0%81%E5%AE%9E%E7%8E%B0/","content":"ASP.NET登录页面验证码实现验证码应该满足的条件：\n（1）验证码应该是图片格式，不能是文字格式，即无法用鼠标选中。\n\n（2）验证码上应该有噪点和干扰线条。\n\n（3）验证码应该回避相似字符，如“0”和“o”“I”和“1”等。\n\n（4）验证码至少是数字和字母（含大小写）的组合，不应该是单纯的数字或字母，可以出现汉字。应该实现输入验证码字母字母“不区分大小写”。验证码中的内容，应该是随机生成。\n\n（5）验证码，可以通过点击图片或旁边文字实现“看不清，换一张”的功能。\n\n（6）应当有个用于核对验证码输入是否正确的tbx和btn，当点击btn时，弹窗提示验证码输入的是正确或错误。\n\n\n制作效果：代码实现：&lt;add name=&quot;BookShopWeb.ConnectionStr&quot;            connectionString=&quot;Server=localhost;Database=mybookshop;Uid=root;Pwd=123456;charset=utf8;pooling=true;&quot;           providerName=&quot;System.Data.SqlClient&quot; /&gt;\n\n","categories":["ASP.NET框架学习"],"tags":["ASP.NET"]},{"title":"BookShop说明文档","url":"/2024/05/22/BookShop%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/","content":"zdx-BookShop介绍ASP.NET应用系统设计与开发实战项目BookShop，完整项目在BookShop目录下\n项目演示当当网上书店首页\n当当网图书分类显示按照图书分类\n按照出版品牌商\n当当网图书详情页\n当当网新增订单演示\n当当网用户登录\n当当网个人信息\n当当网购物车\n搜索功能演示\n后台管理系统用户登录\n管理员用户管理用户信息查询\n\n后端新增用户\n\n管理员图书分类管理\n管理员出版社管理\n管理员图书管理图书分类查询\n添加图书信息\n修改图书信息\n管理员订单管理订单管理列表\n订单详细信息\n项目特点使用Common类库统一管理DBHelper具体内容请参考项目对应代码，此处举例\n\n采用MD5加密用户密码信息可以有效防止数据库泄露用户密码信息泄露的情况\n\n\n\n软件架构项目结构\nBookShop.WebUI：ASP.NET MVC Web应用程序项目，包含视图、控制器、路由等。\n\nBookShop.Common：包含通用工具和辅助类的类库项目，用于数据访问层（DAL）和其他服务。\n\nBookShop.DAL：数据访问层（DAL）类库项目，包含数据访问逻辑和接口。\n\nBookShop.Model：包含数据模型（如书籍、作者、类别等）的类库项目。\n\nBookShop.BLL：业务逻辑层（BLL）类库项目，包含业务规则和服务。\n\n\n\nCommon类库\n数据库连接字符串管理：在Common类库中，可以定义一个配置管理器类，用于从配置文件（如web.config或appsettings.json）中读取和解析数据库连接字符串。\n数据库提供程序工厂：创建一个数据库提供程序工厂类，该类能够根据配置的连接字符串类型（如SQL Server、MySQL等）创建和返回相应的数据库上下文或连接对象。\n\n数据访问层（DAL）\n接口定义：在BookShop.Data项目中，为每种数据模型定义接口（如IBookRepository、IAuthorRepository等），这些接口包含CRUD（创建、读取、更新、删除）操作的方法。\n实现类：为每个接口创建实现类（如SqlBookRepository、MySqlBookRepository等），这些类将使用Common类库中的数据库提供程序工厂来建立与数据库的连接并执行操作。\n\nMySQL数据源处理\n在Common里面配置符合MySql的DBHelper\n\nMySQL连接字符串：在web.config配置文件中添加MySQL数据库的连接字符串。\n\nMySQL提供程序：在Common类库中实现或集成MySQL数据库提供程序（如使用MySQL Connector/NET）。\n\n业务逻辑层（BLL）\n服务类：在BookShop.BLL项目中，创建服务类（如BookService、AuthorService等），这些类将调用数据访问层中的接口来执行业务逻辑。服务类应该是无状态的，并且只应包含与业务逻辑相关的代码。\n\n控制器和视图\n控制器：在BookShop.WebUI项目中，创建MVC控制器，这些控制器将调用业务逻辑层中的服务类来处理请求并返回数据。\n视图：创建MVC视图来显示数据并允许用户与应用程序进行交互。视图应该只包含与显示相关的代码，并且应该通过控制器来与业务逻辑层进行通信。\n\n安装教程\n拉取项目\n运行安装BookShop/mysql-connection-net文件夹中的文件，并添加引用\n添加mybookshop数据库，运行mysql脚本\n清理并重新生成解决方案\n运行项目\n\n使用说明\n本项目使用.net4.5.2，可以向上兼容\n\n在项目运行前请安装BookShop/mysql-connection-net文件夹中的文件，并添加引用\n\n测试账号信息如下：\n| 测试账号 | 测试用户类型 |   密码   || :———: | :—————: | :———: ||  admin   |    管理员    |  123456  || jingjing |   普通用户   | jingjing ||   bobo   |   VIP用户    |  123456  |\n\n\n","categories":["ASP.NET学习"],"tags":["ASP.NET"]},{"title":"Django开发","url":"/2024/07/28/Django%E5%BC%80%E5%8F%91/","content":"介绍Django 是一个高级的 Python 网络框架，可以快速开发安全和可维护的网站。由经验丰富的开发者构建，Django 负责处理网站开发中麻烦的部分，因此你可以专注于编写应用程序，而无需重新开发。 它是免费和开源的，有活跃繁荣的社区，丰富的文档，以及很多免费和付费的解决方案。\nDjango 可以使你的应用具有以下优点：\n\n完备性\nDjango 遵循“功能完备”的理念，提供开发人员可能想要“开箱即用”的几乎所有功能。因为你需要的一切都是一个”产品“的一部分，它们都可以无缝结合在一起，遵循一致性设计原则，并且具有广泛和最新的文档.\n\n通用性\nDjango 可以（并已经）用于构建几乎任何类型的网站—从内容管理系统和维基，到社交网络和新闻网站。它可以与任何客户端框架一起工作，并且可以提供几乎任何格式（包括 HTML，Rss 源，JSON，XML 等）的内容。你正在阅读的网站就是基于 Django。在内部，尽管它为几乎所有可能需要的功能（例如几个流行的数据库，模版引擎等）提供了选择，但是如果需要，它也可以扩展到使用其他组件。\n\n安全性\nDjango 帮助开发人员通过提供一个被设计为“做正确的事情”来自动保护网站的框架来避免许多常见的安全错误。例如，Django 提供了一种安全的方式来管理用户账户和密码，避免了常见的错误，比如将 session 放在 cookie 中这种易受攻击的做法（取而代之的是 cookies 只包含一个密钥，实际数据存储在数据库中）或直接存储密码而不是密码哈希。密码哈希是通过密码散列函数发送密码而创建的固定长度值。Django 能通过运行哈希函数并将输出的哈希值与存储的哈希值进行比较来检查输入的密码是否正确。然而由于功能的“单向”性质，即使存储的哈希值被泄漏，攻击者也难以破解原始密码。默认情况下，Django 可以防范许多漏洞，包括 SQL 注入，跨站点脚本，跨站点请求伪造和点击劫持 (请参阅 网站安全 相关信息，如有兴趣).\n\n可扩展\nDjango 使用基于组件的“无共享”架构 (架构的每一部分独立于其他架构，因此可以根据需要进行替换或更改). 在不用部分之间有明确的分隔意味着它可以通过在任何级别添加硬件来扩展服务：缓存服务器，数据库服务器或应用程序服务器。一些最繁忙的网站已经成功地缩放了 Django，以满足他们的需求（例如 Instagram 和 Disqus，仅举两个例子，可自行添加）。\n\n可维护性\nDjango 代码编写是遵照设计原则和模式，鼓励创建可维护和可重复使用的代码。特别是它使用了不要重复自己（DRY）原则，所以没有不必要的重复，减少了代码的数量。Django 还将相关功能分组到可重用的“应用程序”中，并且在较低级别将相关代码分组或模块（ 模型视图控制器 (MVC) 模式).\n\n灵活性\nDjango 是用 Python 编写的，它在许多平台上运行。这意味着你不受任务特定的服务器平台的限制，并且可以在许多种类的 Linux，Windows 和 Mac OsX 上运行应用程序。此外，Django 得到许多网络托管提供商的好评，他们经常提供特定的基础设施和托管 Django 网站的文档。\n\n\n开发环境操作系统\nDjango web 应用程序能运行在几乎任何可以运行 Python3 的计算机上：Windows，Mac OSX，Linux/Unix，Solaris，仅举几例。几乎任何计算机都具备在开发期间运行 Django 所需的性能。\n\n数据库\nDjango 支持四个主要数据库（PostgreSQL，MySQL，Oracle 和 SQLite），还有一些社区库可以为其他流行的 SQL 和 NOSQL 数据库提供不同级别的支持。\n\n安装Django初级使用Django框架完全指南：从入门到高级应用-腾讯云开发者社区-腾讯云 (tencent.com)\n","categories":["python Django"],"tags":["python Django"]},{"title":"Flask开发入门","url":"/2024/07/16/Flask%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/","content":"介绍对于springboot+vue、asp.net还是其他一些技术，我们实现网页都需要较长的学习时间，因此，为了快速开发，满足需求，我参考Python的Flask编写了这篇文章。\n我使用的是flask+mysql的web网页集成开发。\n参考文献如下：\n Flask官方文档\nFlask 入门教程\n既然介绍说完了，那就开始吧。\n准备工作\n\n    在学习Flask之前，你需要具备Python和Html的基本知识，如果没有这方面的知识，可以先去学习一下再回到本文章\n    \n\n\n\n    \n        Python的本地环境建议3.9.0以上版本，对于IDE工具，你可以使用PyCharm、VsCode、VisualStudio\n    \n\n\n安装Flaskpip install flask\n安装成功后就可以正式写代码了\n\n一、你的第一个Flask应用初始化项目我使用的是PyCharm，当然你也可以选择其他IDE工具\n\n\n新建一个项目，然后创建一个基于本地python解释器的虚拟环境（防止污染本地环境）\n\n\n编写代码在main.py中编写以下代码，这样你就成功拥有了第一个Flask应用\n\nfrom flask import Flaskapp = Flask(__name__)@app.route(&#x27;/&#x27;)def hello():    return &#x27;Welcome to My Watchlist!&#x27;\n\n代码分析如上面所见，我们成功初始化了一个flask项目，那么我们都做了什么呢？\nfrom flask import Flaskapp = Flask(__name__)\n\n    \n        我们导入了flask库，实例化了这个类\n    \n\n\n@app.route(&#x27;/&#x27;)def hello():    return &#x27;Welcome !!!&#x27;\n\n    \n        我们创建了一个函数，在这个函数前面，我们使用了@app.route('/')装饰器，它将我们导向了对应的url\n        我们可以在这里做一些数据的处理，然后你就可以启动服务后访问到它\n        对于函数名，我们可以自由定义\n    \n\n\n此处函数的return值可以被html解析成html，也可以是其他数据。\n\n装饰器的一些使用原则\n  关于@app.route(‘/‘)URL规则\n\n1.route内部的url都可以运行在部署的端口上，其编写规则是以斜线 /作为开头。@app.route(&#x27;/login&#x27;)def hello():    return &#x27;Welcome !!!&#x27;\n2.对于一个函数，可以附加多个装饰器@app.route(‘/‘)。@app.route(&#x27;/&#x27;)@app.route(&#x27;/login&#x27;)@app.route(&#x27;/admin&#x27;)def login():    return open(html_path+&quot;login.html&quot;, &quot;r&quot;, encoding=&quot;utf-8&quot;).read()\n3.对于@app.route(‘/‘)，我们还可以定义变量。@app.route(&#x27;/user/&lt;username&gt;&#x27;)def user_page(username):    return &#x27;欢迎你&#x27; + username\n\n\n用户输入的数据会包含恶意代码，所以不能直接作为响应返回，需要使用 MarkupSafe（Flask 的依赖之一）提供的 escape() 函数对 name 变量进行转义处理，比如把 &lt; 转换成 &lt;。这样在返回响应时浏览器就不会把它们当做代码执行。\n\nfrom markupsafe import escape@app.route(&#x27;/user/&lt;username&gt;&#x27;)def user_page(username):    return f&#x27;User: &#123;escape(username)&#125;&#x27;\n\n视图函数的一些技巧我们可以通过url查看使用哪个函数\n作为代表某个路由的端点（endpoint），同时用来生成视图函数对应的 URL。\n对于程序内的 URL,Flask 提供了一个 url_for 函数来生成 URL，它接受的第一个参数就是端点值，默认为视图函数的名称\nfrom flask import url_for@app.route(&#x27;/test&#x27;)def test_url_for():    # 下面是一些调用示例（请访问 http://localhost:5000/test 后在命令行窗口查看输出的 URL）：    print(url_for(&#x27;login&#x27;))  # 生成 login 视图函数对应的 URL，将会输出：/admin    # 注意下面两个调用是如何生成包含 URL 变量的 URL 的    print(url_for(&#x27;user_page&#x27;, username=&#x27;greyli&#x27;))  # 输出：/user/greyli    print(url_for(&#x27;user_page&#x27;, username=&#x27;peter&#x27;))  # 输出：/user/peter    print(url_for(&#x27;test_url_for&#x27;))  # 输出：/test    # 下面这个调用传入了多余的关键字参数，它们会被作为查询字符串附加到 URL 后面。    print(url_for(&#x27;test_url_for&#x27;, num=2))  # 输出：/test?num=2    return &#x27;Test page&#x27;\n\n举例我导入一个html文件，然后返回这个html页面\n\nmain.py\n\nimport os.pathfrom flask import Flaskapp = Flask(__name__)html_path = os.path.dirname(__file__) + &quot;\\\\views\\\\&quot;@app.route(&#x27;/&#x27;)def login():    return open(html_path+&quot;login.html&quot;, &quot;r&quot;, encoding=&quot;utf-8&quot;).read()if __name__ == &#x27;__main__&#x27;:    app.run(debug=True)\n\nlogin.html\n\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;!-- https://codepen.io/danielkvist/pen/LYNVyPL --&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;  &lt;title&gt;Document&lt;/title&gt;  &lt;style&gt;    :root &#123;      /* COLORS */      --white: #e9e9e9;      --gray: #333;      --blue: #0367a6;      --lightblue: #008997;      /* RADII */      --button-radius: 0.7rem;      /* SIZES */      --max-width: 758px;      --max-height: 420px;      font-size: 16px;      font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen,        Ubuntu, Cantarell, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;    &#125;    body &#123;      align-items: center;        /* 决定背景图像的位置是在视口内固定，或者随着包含它的区块滚动。 */      /* https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-attachment */        background: var(--white) url(&quot;https://res.cloudinary.com/dbhnlktrv/image/upload/v1599997626/background_oeuhe7.jpg&quot;) no-repeat fixed center;        background-size: cover;      display: grid;      height: 100vh;      place-items: center;    &#125;    .form__title &#123;      font-weight: 300;        margin: 0 0 1.25rem;    &#125;    .link &#123;      color: var(--gray);      font-size: 0.9rem;      margin: 1.5rem 0;      text-decoration: none;    &#125;    .container &#123;      background-color: var(--white);      border-radius: var(--button-radius);      box-shadow: 0 0.9rem 1.7rem rgba(0, 0, 0, 0.25),        0 0.7rem 0.7rem rgba(0, 0, 0, 0.22);      height: var(--max-height);      max-width: var(--max-width);      overflow: hidden;      position: relative;      width: 100%;    &#125;    .container__form &#123;      height: 100%;      position: absolute;      top: 0;      transition: all 0.6s ease-in-out;    &#125;    .container--signin &#123;      left: 0;      width: 50%;      z-index: 2;    &#125;    .container.right-panel-active .container--signin &#123;      transform: translateX(100%);    &#125;    .container--signup &#123;      left: 0;      opacity: 0;      width: 50%;      z-index: 1;    &#125;    .container.right-panel-active .container--signup &#123;      animation: show 0.6s;      opacity: 1;      transform: translateX(100%);      z-index: 5;    &#125;    .container__overlay &#123;      height: 100%;      left: 50%;      overflow: hidden;      position: absolute;      top: 0;      transition: transform 0.6s ease-in-out;      width: 50%;      z-index: 100;    &#125;    .container.right-panel-active .container__overlay &#123;      transform: translateX(-100%);    &#125;    .overlay &#123;        background: var(--lightblue) url(&quot;https://cdn.pixabay.com/photo/2018/08/14/13/23/ocean-3605547_1280.jpg&quot;) no-repeat fixed center;        background-size: cover;      height: 100%;      left: -100%;      position: relative;      transform: translateX(0);      transition: transform 0.6s ease-in-out;      width: 200%;    &#125;    .container.right-panel-active .overlay &#123;      transform: translateX(50%);    &#125;    .overlay__panel &#123;      align-items: center;      display: flex;      flex-direction: column;      height: 100%;      justify-content: center;      position: absolute;      text-align: center;      top: 0;      transform: translateX(0);      transition: transform 0.6s ease-in-out;      width: 50%;    &#125;    .overlay--left &#123;      transform: translateX(-20%);    &#125;    .container.right-panel-active .overlay--left &#123;      transform: translateX(0);    &#125;    .overlay--right &#123;      right: 0;      transform: translateX(0);    &#125;    .container.right-panel-active .overlay--right &#123;      transform: translateX(20%);    &#125;    .btn &#123;      background-color: var(--blue);      background-image: linear-gradient(90deg, var(--blue) 0%, var(--lightblue) 74%);      border-radius: 20px;      border: 1px solid var(--blue);      color: var(--white);      cursor: pointer;      font-size: 0.8rem;      font-weight: bold;      letter-spacing: 0.1rem;      padding: 0.9rem 4rem;      text-transform: uppercase;      transition: transform 80ms ease-in;    &#125;    .form&gt;.btn &#123;      margin-top: 1.5rem;    &#125;    .btn:active &#123;      transform: scale(0.95);    &#125;    .btn:focus &#123;      outline: none;    &#125;    .form &#123;      background-color: var(--white);      display: flex;      align-items: center;      justify-content: center;      flex-direction: column;      padding: 0 3rem;      height: 100%;      text-align: center;    &#125;    .input &#123;      background-color: #fff;      border: none;      padding: 0.9rem 0.9rem;      margin: 0.5rem 0;      width: 100%;    &#125;    @keyframes show &#123;      0%,      49.99% &#123;        opacity: 0;        z-index: 1;      &#125;      50%,      100% &#123;        opacity: 1;        z-index: 5;      &#125;    &#125;  &lt;/style&gt;&lt;/head&gt;&lt;body&gt;  &lt;div class=&quot;container right-panel-active&quot;&gt;    &lt;!-- Sign Up --&gt;    &lt;div class=&quot;container__form container--signup&quot;&gt;      &lt;form action=&quot;#&quot; class=&quot;form&quot; id=&quot;form1&quot;&gt;        &lt;h2 class=&quot;form__title&quot;&gt;Sign Up&lt;/h2&gt;          &lt;label&gt;              &lt;input type=&quot;text&quot; placeholder=&quot;User&quot; class=&quot;input&quot; /&gt;          &lt;/label&gt;          &lt;label&gt;              &lt;input type=&quot;email&quot; placeholder=&quot;Email&quot; class=&quot;input&quot; /&gt;          &lt;/label&gt;          &lt;label&gt;              &lt;input type=&quot;password&quot; placeholder=&quot;Password&quot; class=&quot;input&quot; /&gt;          &lt;/label&gt;          &lt;button class=&quot;btn&quot;&gt;Sign Up&lt;/button&gt;      &lt;/form&gt;    &lt;/div&gt;    &lt;!-- Sign In --&gt;    &lt;div class=&quot;container__form container--signin&quot;&gt;      &lt;form action=&quot;#&quot; class=&quot;form&quot; id=&quot;form2&quot;&gt;        &lt;h2 class=&quot;form__title&quot;&gt;Sign In&lt;/h2&gt;          &lt;label&gt;              &lt;input type=&quot;email&quot; placeholder=&quot;Email&quot; class=&quot;input&quot; /&gt;          &lt;/label&gt;          &lt;label&gt;              &lt;input type=&quot;password&quot; placeholder=&quot;Password&quot; class=&quot;input&quot; /&gt;          &lt;/label&gt;          &lt;a href=&quot;#&quot; class=&quot;link&quot;&gt;Forgot your password?&lt;/a&gt;        &lt;button class=&quot;btn&quot;&gt;Sign In&lt;/button&gt;      &lt;/form&gt;    &lt;/div&gt;    &lt;!-- Overlay --&gt;    &lt;div class=&quot;container__overlay&quot;&gt;      &lt;div class=&quot;overlay&quot;&gt;        &lt;div class=&quot;overlay__panel overlay--left&quot;&gt;          &lt;button class=&quot;btn&quot; id=&quot;signIn&quot;&gt;Sign In&lt;/button&gt;        &lt;/div&gt;        &lt;div class=&quot;overlay__panel overlay--right&quot;&gt;          &lt;button class=&quot;btn&quot; id=&quot;signUp&quot;&gt;Sign Up&lt;/button&gt;        &lt;/div&gt;      &lt;/div&gt;    &lt;/div&gt;  &lt;/div&gt;  &lt;script&gt;    const signInBtn = document.getElementById(&quot;signIn&quot;);    const signUpBtn = document.getElementById(&quot;signUp&quot;);    const fistForm = document.getElementById(&quot;form1&quot;);    const secondForm = document.getElementById(&quot;form2&quot;);    const container = document.querySelector(&quot;.container&quot;);    signInBtn.addEventListener(&quot;click&quot;, () =&gt; &#123;      container.classList.remove(&quot;right-panel-active&quot;);    &#125;);    signUpBtn.addEventListener(&quot;click&quot;, () =&gt; &#123;      container.classList.add(&quot;right-panel-active&quot;);    &#125;);    fistForm.addEventListener(&quot;submit&quot;, (e) =&gt; e.preventDefault());    secondForm.addEventListener(&quot;submit&quot;, (e) =&gt; e.preventDefault());  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;\n\n运行截图\n\n\n二、HTML模板在一般的 Web 程序里，访问一个地址通常会返回一个包含各类信息的 HTML 页面。\n因为我们的程序是动态的，页面中的某些信息需要根据不同的情况来进行调整，比如对登录和未登录用户显示不同的信息，所以页面需要在用户访问时根据程序逻辑动态生成。\n我们把包含变量和运算逻辑的 HTML 或其他格式的文本叫做模板，执行这些变量替换和逻辑计算工作的过程被称为渲染，这个工作我们使用模板渲染引擎——Jinja2 来完成。\n通常来讲，会新建一个templates目录来存放模板，static目录存放静态文件。\n模板基本语法&lt;h1&gt;&#123;&#123; username &#125;&#125;的个人主页&lt;/h1&gt;&#123;% if bio %&#125;    &lt;p&gt;&#123;&#123; bio &#125;&#125;&lt;/p&gt;  &#123;# 这里的缩进只是为了可读性，不是必须的 #&#125;&#123;% else %&#125;    &lt;p&gt;自我介绍为空。&lt;/p&gt;&#123;% endif %&#125;  &#123;# 大部分 Jinja 语句都需要声明关闭 #&#125;\nJinja2 的语法和 Python 大致相同，你在后面会陆续接触到一些常见的用法。在模板里，你需要添加特定的定界符将 Jinja2 语句和变量标记出来，下面是三种常用的定界符：\n\n&#123;&#123; ... &#125;&#125; 用来标记变量。\n&#123;% ... %&#125; 用来标记语句，比如 if 语句，for 语句等。\n`` 用来写注释。\n\n编写主页模板我们先在 templates 目录下创建一个 index.html 文件，作为主页模板。主页需要显示电影条目列表和个人信息，代码如下所示：\ntemplates/index.html：主页模板\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;utf-8&quot;&gt;    &lt;title&gt;&#123;&#123; name &#125;&#125;&#x27;s Watchlist&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;h2&gt;&#123;&#123; name &#125;&#125;&#x27;s Watchlist&lt;/h2&gt;    &#123;# 使用 length 过滤器获取 movies 变量的长度 #&#125;    &lt;p&gt;&#123;&#123; movies|length &#125;&#125; Titles&lt;/p&gt;    &lt;ul&gt;        &#123;% for movie in movies %&#125;  &#123;# 迭代 movies 变量 #&#125;        &lt;li&gt;&#123;&#123; movie.title &#125;&#125; - &#123;&#123; movie.year &#125;&#125;&lt;/li&gt;  &#123;# 等同于 movie[&#x27;title&#x27;] #&#125;        &#123;% endfor %&#125;  &#123;# 使用 endfor 标签结束 for 语句 #&#125;    &lt;/ul&gt;    &lt;footer&gt;        &lt;small&gt;&amp;copy; 2018 &lt;a href=&quot;http://helloflask.com/book/3&quot;&gt;HelloFlask&lt;/a&gt;&lt;/small&gt;    &lt;/footer&gt;&lt;/body&gt;&lt;/html&gt;\n为了方便对变量进行处理，Jinja2 提供了一些过滤器，语法形式如下：\n&#123;&#123; 变量|过滤器 &#125;&#125;\n左侧是变量，右侧是过滤器名。比如，上面的模板里使用 length 过滤器来获取 movies 的长度，类似 Python 里的 len() 函数。\n\n提示 访问 https://jinja.palletsprojects.com/en/3.0.x/templates/#builtin-filters 查看所有可用的过滤器。\n\n准备虚拟数据为了模拟页面渲染，我们需要先创建一些虚拟数据，用来填充页面内容：\napp.py：定义虚拟数据\nname = &#x27;Grey Li&#x27;movies = [    &#123;&#x27;title&#x27;: &#x27;My Neighbor Totoro&#x27;, &#x27;year&#x27;: &#x27;1988&#x27;&#125;,    &#123;&#x27;title&#x27;: &#x27;Dead Poets Society&#x27;, &#x27;year&#x27;: &#x27;1989&#x27;&#125;,    &#123;&#x27;title&#x27;: &#x27;A Perfect World&#x27;, &#x27;year&#x27;: &#x27;1993&#x27;&#125;,    &#123;&#x27;title&#x27;: &#x27;Leon&#x27;, &#x27;year&#x27;: &#x27;1994&#x27;&#125;,    &#123;&#x27;title&#x27;: &#x27;Mahjong&#x27;, &#x27;year&#x27;: &#x27;1996&#x27;&#125;,    &#123;&#x27;title&#x27;: &#x27;Swallowtail Butterfly&#x27;, &#x27;year&#x27;: &#x27;1996&#x27;&#125;,    &#123;&#x27;title&#x27;: &#x27;King of Comedy&#x27;, &#x27;year&#x27;: &#x27;1999&#x27;&#125;,    &#123;&#x27;title&#x27;: &#x27;Devils on the Doorstep&#x27;, &#x27;year&#x27;: &#x27;1999&#x27;&#125;,    &#123;&#x27;title&#x27;: &#x27;WALL-E&#x27;, &#x27;year&#x27;: &#x27;2008&#x27;&#125;,    &#123;&#x27;title&#x27;: &#x27;The Pork of Music&#x27;, &#x27;year&#x27;: &#x27;2012&#x27;&#125;,]\n渲染主页模板使用 render_template() 函数可以把模板渲染出来，必须传入的参数为模板文件名（相对于 templates 根目录的文件路径），这里即 &#39;index.html&#39;。为了让模板正确渲染，我们还要把模板内部使用的变量通过关键字参数传入这个函数，如下所示：\napp.py：返回渲染好的模板作为响应\nfrom flask import Flask, render_template# ...@app.route(&#x27;/&#x27;)def index():    return render_template(&#x27;index.html&#x27;, name=name, movies=movies)\n为了更好的表示这个视图函数的作用，我们把原来的函数名 login 改为 index，意思是“索引”，即主页。\n在传入 render_template() 函数的关键字参数中，左边的 movies 是模板中使用的变量名称，右边的 movies 则是该变量指向的实际对象。这里传入模板的 name 是字符串，movies 是列表，但能够在模板里使用的不只这两种 Python 数据结构，你也可以传入元组、字典、函数等。\nrender_template() 函数在调用时会识别并执行 index.html 里所有的 Jinja2 语句，返回渲染好的模板内容。在返回的页面中，变量会被替换为实际的值（包括定界符），语句（及定界符）则会在执行后被移除（注释也会一并移除）。\n\n三、静态文件静态文件（static files）和我们的模板概念相反，指的是内容不需要动态生成的文件。比如图片、CSS 文件和 JavaScript 脚本等。\n在 Flask 中，我们需要创建一个 static 文件夹来保存静态文件，它应该和程序模块、templates 文件夹在同一目录层级。\n生成静态文件 URL在 HTML 文件里，引入这些静态文件需要给出资源所在的 URL。为了更加灵活，这些文件的 URL 可以通过 Flask 提供的 url_for() 函数来生成。\n举例：\n&lt;img src=&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;foo.jpg&#x27;) &#125;&#125;&quot;&gt;\n在 Python 脚本里，`url_for()` 函数需要从 `flask` 包中导入，而在模板中则可以直接使用，因为 Flask 把一些常用的函数和对象添加到了模板上下文（环境）里。\n\n添加 FaviconFavicon（favourite icon） 是显示在标签页和书签栏的网站头像。你需要准备一个 ICO、PNG 或 GIF 格式的图片，大小一般为 16×16、32×32、48×48 或 64×64 像素。把这个图片放到 static 目录下，然后像下面这样在 HTML 模板里引入它：\ntemplates/index.html：引入 Favicon\n&lt;head&gt;    ...    &lt;link rel=&quot;icon&quot; href=&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;favicon.ico&#x27;) &#125;&#125;&quot;&gt;&lt;/head&gt;\n保存后刷新页面，即可在浏览器标签页上看到这个图片。\n添加图片为了让页面不那么单调，我们来添加两个图片：一个是显示在页面标题旁边的头像，另一个是显示在页面底部的龙猫动图。我们在 static 目录下面创建一个子文件夹 images，把这两个图片都放到这个文件夹里：\n$ cd static$ mkdir images\n创建子文件夹并不是必须的，这里只是为了更好的组织同类文件。同样的，如果你有多个 CSS 文件，也可以创建一个 css 文件夹来组织他们。下面我们在页面模板中添加这两个图片，注意填写正确的文件路径：\ntemplates/index.html：添加图片\n&lt;h2&gt;    &lt;img alt=&quot;Avatar&quot; src=&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;images/avatar.png&#x27;) &#125;&#125;&quot;&gt;    &#123;&#123; name &#125;&#125;&#x27;s Watchlist&lt;/h2&gt;...&lt;img alt=&quot;Walking Totoro&quot; src=&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;images/totoro.gif&#x27;) &#125;&#125;&quot;&gt;\n\n提示 这两张图片你可以自己替换为任意的图片（注意更新文件名），也可以在示例程序的 GitHub 仓库下载。\n\n添加 CSS虽然添加了图片，但页面还是非常简陋，因为我们还没有添加 CSS 定义。下面在 static 目录下创建一个 CSS 文件 style.css，内容如下：\nstatic/style.css：定义页面样式\n/* 页面整体 */body &#123;    margin: auto;    max-width: 580px;    font-size: 14px;    font-family: Helvetica, Arial, sans-serif;&#125;/* 页脚 */footer &#123;    color: #888;    margin-top: 15px;    text-align: center;    padding: 10px;&#125;/* 头像 */.avatar &#123;    width: 40px;&#125;/* 电影列表 */.movie-list &#123;    list-style-type: none;    padding: 0;    margin-bottom: 10px;    box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);&#125;.movie-list li &#123;    padding: 12px 24px;    border-bottom: 1px solid #ddd;&#125;.movie-list li:last-child &#123;    border-bottom:none;&#125;.movie-list li:hover &#123;    background-color: #f8f9fa;&#125;/* 龙猫图片 */.totoro &#123;    display: block;    margin: 0 auto;    height: 100px;&#125;\n接着在页面的 &lt;head&gt; 标签内引入这个 CSS 文件：\ntemplates/index.html：引入 CSS 文件\n&lt;head&gt;    ...    &lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;style.css&#x27;) &#125;&#125;&quot; type=&quot;text/css&quot;&gt;&lt;/head&gt;\n\n提示 当你把 CSS 写到单独的文件后，浏览器获取到这个文件后会对其进行缓存（其他静态文件同理，比如 JavaScript 文件）。Flask 从 2.0 版本开始支持自动重载静态文件的变化，如果你使用的仍然是旧版本的 Flask，那么每当你对 CSS 文件的内容进行更新后，都需要使用下面的快捷键清除缓存：\n\nGoogle Chrome（Mac）：Command + Shift + R\nGoogle Chrome（Windows &amp; Linux）：Ctrl + F5\nFirefox（Mac）：Command + Shift + R\nFirefox（Windows &amp; Linux）：Ctrl + F5\nSafari：Command + Option + R\n\n\n最后要为对应的元素设置 class 属性值，以便和对应的 CSS 定义关联起来：\ntemplates/index.html：添加 class 属性\n&lt;h2&gt;    &lt;img alt=&quot;Avatar&quot; class=&quot;avatar&quot; src=&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;images/avatar.png&#x27;) &#125;&#125;&quot;&gt;    &#123;&#123; name &#125;&#125;&#x27;s Watchlist&lt;/h2&gt;...&lt;ul class=&quot;movie-list&quot;&gt;    ...&lt;/ul&gt;&lt;img alt=&quot;Walking Totoro&quot; class=&quot;totoro&quot; src=&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;images/totoro.gif&#x27;) &#125;&#125;&quot;&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n四、数据库使用 SQLAlchemy 操作数据库为了简化数据库操作，我们将使用 SQLAlchemy——一个 Python 数据库工具（ORM，即对象关系映射）。借助 SQLAlchemy，你可以通过定义 Python 类来表示数据库里的一张表（类属性表示表中的字段 / 列），通过对这个类进行各种操作来代替写 SQL 语句。这个类我们称之为模型类，类中的属性我们将称之为字段。\nFlask 有大量的第三方扩展，这些扩展可以简化和第三方库的集成工作。我们下面将使用一个叫做 Flask-SQLAlchemy 的扩展来集成 SQLAlchemy。\n但是我的开发更喜欢用MySQL数据库或者SqlServer，这里不对这个数据库进行过多介绍。\n使用MySQL数据库在python中，可以使用pymysql库进行数据库操作\n# 安装pymysqlpip install pymysql\n在mysql数据库中新建\n\n编写一个mysql配置类\nimport pymysqlfrom pymysql import cursorsclass DbConfig:    def __init__(self):        self.conn = pymysql.connect(            host=&#x27;127.0.0.1&#x27;,  # 主机名（或IP地址）            port=3306,  # 端口号，默认为3306            user=&#x27;root&#x27;,  # 用户名            password=&#x27;123456&#x27;,  # 密码            charset=&#x27;utf8mb4&#x27;,  # 设置字符编码            autocommit=True,  # 自动提交更改            database=&#x27;flask_study&#x27;,  # 数据库名称            cursorclass=cursors.DictCursor  # 转换成字典格式输出        )        self.cursor = self.conn.cursor()    def findUser(self):        self.cursor.execute(&#x27;select * from user where id=1&#x27;)        users = self.cursor.fetchall()        return users    def findMovies(self):        self.cursor.execute(&#x27;select * from movies&#x27;)        movies = self.cursor.fetchall()        return movies    def __del__(self):        self.cursor.close()        self.conn.close()\n在使用数据的时候可以像下面这样写\nname = DbConfig().findUser()[0][&#x27;username&#x27;]movies = DbConfig().findMovies()\n完整的代码：\nimport pymysqlfrom flask import Flask, render_templatefrom pymysql import cursorsclass DbConfig:    def __init__(self):        self.conn = pymysql.connect(            host=&#x27;127.0.0.1&#x27;,  # 主机名（或IP地址）            port=3306,  # 端口号，默认为3306            user=&#x27;root&#x27;,  # 用户名            password=&#x27;123456&#x27;,  # 密码            charset=&#x27;utf8mb4&#x27;,  # 设置字符编码            autocommit=True,  # 自动提交更改            database=&#x27;flask_study&#x27;,  # 数据库名称            cursorclass=cursors.DictCursor  # 转换成字典格式输出        )        self.cursor = self.conn.cursor()    def findUser(self):        self.cursor.execute(&#x27;select * from user where id=1&#x27;)        users = self.cursor.fetchall()        return users    def findMovies(self):        self.cursor.execute(&#x27;select * from movies&#x27;)        movies = self.cursor.fetchall()        return movies    def __del__(self):        self.cursor.close()        self.conn.close()app = Flask(__name__)@app.route(&#x27;/&#x27;)def index():    name = DbConfig().findUser()[0][&#x27;username&#x27;]    movies = DbConfig().findMovies()    return render_template(&#x27;index.html&#x27;, name=name, movies=movies)if __name__ == &#x27;__main__&#x27;:    app.run(debug=True)\n\n大体上就是这个样子了\n这种开发满足了基本需求，开发周期短，但是想要好看的页面，可以使用json数据做一个前后端分离或者整合的项目。\n","categories":["python Flask"],"tags":["python Flask"]},{"title":"EF框架","url":"/2024/04/10/EF%E6%A1%86%E6%9E%B6/","content":"演示[video(video-xcdU9b91-1704040286495)(type-csdn)(url-https://live.csdn.net/v/embed/355757)(image-https://video-community.csdnimg.cn/vod-84deb4/a090dd94a7e271eebfde0675b3ed0102/snapshots/8ea7d139d04a45018cee00f5941a4830-00004.jpg?auth_key=4857630234-0-0-fd49d3e2a45ced4ff569beca2381b74b)(title-EF框架演示)]\n运行环境Visual Studio 2019SQL ServerEntityFramework 6.2.0\n一、创建项目，编写数据库创建一个Windows窗体应用(.NET Framework)添加新项目创建后再创建下图：\n创建SQL数据库，创建表创建数据库StudyEF，创建表如下：在这里要强调一点，在创建表的时候一定设置主键，不然创建后的ef框架会有问题。往表里面添加几条数据，方便进行测试\n给项目添加EF实体数据模型添加一个ADO.NET实体数据模型，我将其命名为EFData，然后进行下面操作然后就是完成，漫长的等待创建完成\n\n二、DataGridView绑定数据源下一步，下一步，然后选择连接下一步，下一步，一直到下图，选中表，点击完成添加完成后，dgv控件自动显示字段名这里的表头可以根据需求修改运行测试，数据显示正常\n三、实现添加按钮编写代码首先添加一个Add的windows窗体如图所示：鼠标双击添加按钮，在添加按钮事件里面开始编写：\nString username = textBox1.Text;       String name = textBox2.Text;       String password = textBox3.Text;       String age = textBox4.Text;       String phone = textBox5.Text;       String email = textBox6.Text;       String address = textBox7.Text;       using (var study = new StudyEFEntities())       &#123;           var test = new TestData // 假设TestData是您的实体类             &#123;               // 在此处设置test对象的属性，例如：                 password = password,               username=username,               name=name,               age=age,               phone=phone,               email=email,               address=address           &#125;;           // 将test对象添加到数据库中             study.TestData.Add(test);           // 保存更改到数据库             study.SaveChanges();       &#125;       MessageBox.Show(&quot;添加成功&quot;);       Main f1 = (Main)this.Owner;       f1.Refresh_Method();       f1.Activate();       this.Hide();\n在主页面（原来我写的是Test窗体，但是重新生成解决方案了也没有显示，估计是重名了与其他功能，于是我主界面换成了Main窗体）的添加按钮里面编写new一个窗体，并且写一个让数据刷新的方法，通过owner在添加窗体调用，这样添加完成原来的窗体更新数据。\nprivate void button1_Click(object sender, EventArgs e)     &#123;         Add f1 = new Add();         f1.Owner = this;         f1.Show();     &#125;     internal void Refresh_Method()     &#123;         this.testDataTableAdapter.Fill(this.studyEFDataSet1.TestData);     &#125;\n\n运行测试测试没有问题。\n四、实现删除按钮编写代码在Main窗体里面，双击删除按钮\n//删除按钮        private void button2_Click(object sender, EventArgs e)        &#123;            var dev1 = this.dataGridView1.CurrentRow;            using (var study = new StudyEFEntities())            &#123;                if (dev1.Cells[0].Value != null)                &#123;                    int idToDelete;                    if (int.TryParse(dev1.Cells[0].Value.ToString(), out idToDelete))                    &#123;                        var ToDelete = study.TestData.FirstOrDefault(u =&gt; u.id == idToDelete);                        if (ToDelete != null)                        &#123;                            study.TestData.Remove(ToDelete);                            study.SaveChanges();                        &#125;                    &#125;                &#125;                this.testDataTableAdapter.Fill(this.studyEFDataSet1.TestData);            &#125;        &#125;\n\n运行测试测试没有问题，点击删除删除选中数据，并且刷新数据（原理是重新绑定数据）\n五、实现修改按钮编写代码窗体之间传递参数因为修改，修改是要有数据显示才能方便，不然就成重写了，在这里我觉得需要做一个参数传递。\nMain窗体中修改按钮事件//修改按钮       private void button3_Click(object sender, EventArgs e)       &#123;           if (this.dataGridView1.SelectedRows.Count &gt; 0)           &#123;               var dev1 = this.dataGridView1.CurrentRow;               Update frm = new Update(dev1);               frm.Owner = this;               frm.Show();           &#125;           else           &#123;               MessageBox.Show(&quot;请先选择一条数据&quot;);           &#125;       &#125;\n\n在update窗体中添加参数绑定public Update(DataGridViewRow dev1)        &#123;            InitializeComponent();            textBox8.Text = dev1.Cells[0].Value.ToString();            textBox1.Text = dev1.Cells[1].Value.ToString();            textBox2.Text = dev1.Cells[2].Value.ToString();            textBox3.Text = dev1.Cells[3].Value.ToString();            textBox4.Text = dev1.Cells[4].Value.ToString();            textBox5.Text = dev1.Cells[5].Value.ToString();            textBox6.Text = dev1.Cells[6].Value.ToString();            textBox7.Text = dev1.Cells[7].Value.ToString();        &#125;\n在update窗体中添加修改按钮代码private void button1_Click(object sender, EventArgs e)       &#123;           int id = int.Parse(textBox8.Text);           string username = textBox1.Text;           string name = textBox2.Text;           string password = textBox3.Text;           string age = textBox4.Text;           string phone = textBox5.Text;           string email = textBox6.Text;           string address = textBox7.Text;           using (var study = new StudyEFEntities())           &#123;               // 假设你要更新的是用户信息                 var ToUpdate = study.TestData.FirstOrDefault(u =&gt; u.id == id);               if (ToUpdate != null)               &#123;                   // 更新用户的属性                     ToUpdate.username = username;                   ToUpdate.name = name;                   ToUpdate.password = password;                   ToUpdate.age = age;                   ToUpdate.phone = phone;                   ToUpdate.email = email;                   ToUpdate.address = address;                   // 保存更改到数据库                     study.SaveChanges();               &#125;           &#125;               MessageBox.Show(&quot;修改成功&quot;);               Main f1 = (Main)this.Owner;               f1.Refresh_Method();               f1.Activate();               this.Hide();       &#125;\n测试运行运行测试没有问题。\n六、实现查询按钮新建表checkname，给下拉框添加数据添加字段\n去vs里更新模型数据\n在main窗体里面绑定数据\n编写代码//查询按钮实现       private void button4_Click(object sender, EventArgs e)       &#123;           using (var study = new StudyEFEntities())           &#123;               // 查询满足条件的用户                if (comboBox1.SelectedValue.ToString() == &quot;u.id&quot;)                &#123;                   int ToCheck;                   if (int.TryParse(textBox1.Text, out ToCheck))                   &#123;                       var test = study.TestData.Where(u =&gt; u.id == ToCheck);                       this.dataGridView1.DataSource = test.ToList();                    &#125;               &#125;               if (comboBox1.SelectedValue.ToString() == &quot;u.username&quot;)               &#123;                   var test = study.TestData.Where(u =&gt; u.username == textBox1.Text);                   this.dataGridView1.DataSource = test.ToList();               &#125;               if (comboBox1.SelectedValue.ToString() == &quot;u.name&quot;)               &#123;                   var test = study.TestData.Where(u =&gt; u.name == textBox1.Text);                   this.dataGridView1.DataSource = test.ToList();               &#125;               if (comboBox1.SelectedValue.ToString() == &quot;u.password&quot;)               &#123;                   var test = study.TestData.Where(u =&gt; u.password == textBox1.Text);                   this.dataGridView1.DataSource = test.ToList();               &#125;               if (comboBox1.SelectedValue.ToString() == &quot;u.phone&quot;)               &#123;                   var test = study.TestData.Where(u =&gt; u.phone == textBox1.Text);                   this.dataGridView1.DataSource = test.ToList();               &#125;               if (comboBox1.SelectedValue.ToString() == &quot;u.email&quot;)               &#123;                   var test = study.TestData.Where(u =&gt; u.email == textBox1.Text);                   this.dataGridView1.DataSource = test.ToList();               &#125;               if (comboBox1.SelectedValue.ToString() == &quot;u.phone&quot;)               &#123;                   var test = study.TestData.Where(u =&gt; u.phone == textBox1.Text);                   this.dataGridView1.DataSource = test.ToList();               &#125;           &#125;       &#125;       //重置按钮实现       private void button5_Click(object sender, EventArgs e)       &#123;           textBox1.Text = &quot;&quot;;           comboBox1.Text = &quot;&quot;;           using (var study = new StudyEFEntities())           &#123;                               var test = study.TestData;               this.dataGridView1.DataSource = test.ToList();           &#125;       &#125;\n运行测试\n"},{"title":"PyQt应用开发","url":"/2024/07/17/PyQt%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/","content":"1、GUI开发框架简介1.1 通用开发框架\n[x] winform：基于C#语言，用于开发桌面应用程序，可以使用NanUI之类的UI库，开发选择多，运行占用内存大\n[x] javafx：基于java，主要用于跨平台桌面程序开发\n[ ] electorn：基于node-js，跨平台，开发成本低，运行效率低\n[ ] qt：基于C++，跨平台，效率高，开发成本高\n[ ] flutter：基于dart语言，谷歌开源移动UI框架，可以快速在iOS和Android上构建高质量的原生用户界面\n\n1.2 Python方案\nPyQT：PyQt5是Qt v5的Python版本，功能强大复杂，提供QT Designer设计UI （GPL V3协议，开源，商用收费）\nPyside: PySide2是来自QT for Python项目的官方Python模块 （LGPL协议，闭源商用）\nTkinter：Python标准库，Tk GUI 工具包的接口 ，布局通过代码实现，简单易用，但开发效率低\nWxPython：开源免费，提供wxFormbuilder，压缩版PyQT\n\n本文主要详细介绍下PyQt5完整入门教程，包含环境配置，使用Qt Designer设计UI，最终完成一个天气预报的GUI实例开发。\n参考文献：PyQt完整入门教程\n2.PyQt环境配置2.1 PyQt5 及 pyqt5-tools 安装直接pip安装即可：\npip install PyQt5pip install pyqt5-tools\n建议使用国内源，进行快速安装：\npip install -i https://pypi.tuna.tsinghua.edu.cn/simple pyqt5pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pyqt5-tools\n2.2 PyCharm配置环境启动PyCharm后，新建一个PyQt5空项目后，需要配置Qt Designer、pyuic、pyrcc工具，相关配置方法如下：\n2.2.1 Qt DesignerQt Designer 是通过拖拽的方式放置控件，并实时查看控件效果进行快速UI设计。\n最终生成.ui文件（实质上是XML格式的文件），可以通过pyuic5工具转换成.py文件。\n在Pycharm中，依次打开 File - Settings - Tools - External Tools，点击 + Create Tool，配置如下：\nName: QtDisignerProgram : E:\\pyqy\\venv\\Lib\\site-packages\\qt5_applications\\Qt\\bin\\designer.exe # 当前designer目录，请根据实际修改Working directory: $FileDir$\n\n2.2.2 Qt Designer 汉化在这里说明一下，新版本的QT Designer不需要汉化，打开默认是中文版本\n\n默认Qt Designer是英文版的，可以使用翻译文件进行汉化，下载地址：百度网盘，提取码：kxvx\n下载文件 designer_zh_CN.qm后， 拷贝至本地pyqt5_tools的translations文件夹下即可，示例目录：&lt;/span&gt;\nE:\\pyqy\\venv\\Lib\\site-packages\\qt5_applications\\Qt\\bin\\translations\n在PyCharm主界面，依次点击 Tools - External Tools - QtDisigner，即可启动中文界面的Qt Disigner\n\n2.2.3 PyUIC配置PyUIC主要是把Qt Designer生成的.ui文件换成.py文件。\n在Pycharm中，依次打开 File - Settings - Tools - External Tools，点击 + Create Tool，配置如下：\nName: PyUICProgram : C:\\Python38\\python.exe # 当前Python目录，请根据实际修改Arguments: -m PyQt5.uic.pyuic $FileName$ -o $FileNameWithoutExtension$.pyWorking directory: $FileDir$\n\n2.2.4 PyRCC配置PyRCC主要是把编写的.qrc资源文件换成.py文件。\n在Pycharm中，依次打开 File - Settings - Tools - External Tools，点击 + Create Tool，配置如下：\nName: PyRCCProgram : C:\\Python38\\Scripts\\pyrcc5.exe # 当前rcc工具目录，请根据实际修改Arguments: $FileName$ -o $FileNameWithoutExtension$_rc.pyWorking directory: $FileDir$\n\n3、实例开发下面我们以一个简单的城市天气预报为例，演示使用PyQt5开发一个GUI程序的基本流程。\n3.1 获取天气数据主要逻辑是通过Http接口调用免费的API接口获取相关城市天气数据，详见天气API说明\n如测试一下请求天津的天气，链接为：http://t.weather.sojson.com/api/weather/city/101030100\n返回成功状态（status）为：200 ，失败为非200，返回数据为json数据，直接解析获取即可。\n3.1 设计界面UI打开Qt Designer，可参考下图设计Weather.ui:\n3.1 获取天气数据主要逻辑是通过Http接口调用免费的API接口获取相关城市天气数据，详见天气API说明\n如测试一下请求天津的天气，链接为：http://t.weather.sojson.com/api/weather/city/101030100\n返回成功状态（status）为：200 ，失败为非200，返回数据为json数据，直接解析获取即可。\n3.1 设计界面UI打开Qt Designer，可参考下图设计Weather.ui:\n\n我们主要用到的控件有Button, GroupBox, Label,ComboBox,TextEdit，同时定义了两个按钮queryBtn及clearBtn，分别用来查询及清空天气数据。我们需要绑定槽函数，方法如下：\n\n在Qt Designer右下角选择 信号/槽编辑器，点击+号新增\n分别选择queryBtn及clearBtn，选择信号 clicked(), 接收者 Dialog 及槽 accept() （我没找到绑定自定义槽函数的方法…）\n\n\n最后选择保存为 Weather.ui文件。\n3.2 转换.ui文件为.py文件在PyCharm中选中Weather.ui文件后，右键选择 External Tools - PyUIC，即可生成Weather.py，实际运行命令如下：\nC:\\Python38\\python.exe -m PyQt5.uic.pyuic Weather.ui -o Weather.py\n其中，我们需要把两个按钮绑定的槽函数：\nself.queryBtn.clicked.connect(Dialog.accept)self.clearBtn.clicked.connect(Dialog.accept)\n修改为自定义函数：\nself.queryBtn.clicked.connect(Dialog.queryWeather)self.clearBtn.clicked.connect(Dialog.clearText)\n3.3 调用MainDialog在MainDialog中调用界面类Ui_Dialog，然后在其中中添加查询天气的业务逻辑代码，这样就做到了界面显示和业务逻辑的分离。\n新增demo.py文件， 在MainDialog类中定义了两个槽函数queryWeather()和clearText(),以便在界面文件Weather.ui中定义的两个按钮(queryBtn 和clearBtn) 触发clicked 信号与这两个槽函数进行绑定。\n# coding:utf-8import sysimport Weatherfrom PyQt5.QtWidgets import QApplication, QDialogimport requestsclass MainDialog(QDialog):    def __init__(self, parent=None):        super(QDialog, self).__init__(parent)        self.ui = Weather.Ui_Dialog()        self.ui.setupUi(self)        def queryWeather(self):        cityName = self.ui.comboBox.currentText()        cityCode = self.getCode(cityName)                r = requests.get(&quot;http://t.weather.sojson.com/api/weather/city/&#123;&#125;&quot;.format(cityCode))                print(r.json())                if r.json().get(&#x27;status&#x27;) == 200:            weatherMsg = &#x27;城市：&#123;&#125;\\n日期：&#123;&#125;\\n天气：&#123;&#125;\\nPM 2.5：&#123;&#125; &#123;&#125;\\n温度：&#123;&#125;\\n湿度：&#123;&#125;\\n风力：&#123;&#125;\\n\\n&#123;&#125;&#x27;.format(                r.json()[&#x27;cityInfo&#x27;][&#x27;city&#x27;],                r.json()[&#x27;data&#x27;][&#x27;forecast&#x27;][0][&#x27;ymd&#x27;],                r.json()[&#x27;data&#x27;][&#x27;forecast&#x27;][0][&#x27;type&#x27;],                int(r.json()[&#x27;data&#x27;][&#x27;pm25&#x27;]),                r.json()[&#x27;data&#x27;][&#x27;quality&#x27;],                r.json()[&#x27;data&#x27;][&#x27;wendu&#x27;],                r.json()[&#x27;data&#x27;][&#x27;shidu&#x27;],                r.json()[&#x27;data&#x27;][&#x27;forecast&#x27;][0][&#x27;fl&#x27;],                r.json()[&#x27;data&#x27;][&#x27;forecast&#x27;][0][&#x27;notice&#x27;],            )        else:            weatherMsg = &#x27;天气查询失败，请稍后再试！&#x27;                self.ui.textEdit.setText(weatherMsg)        def getCode(self, cityName):        cityDict = &#123;&quot;北京&quot;: &quot;101010100&quot;,                    &quot;上海&quot;: &quot;101020100&quot;,                    &quot;天津&quot;: &quot;101030100&quot;&#125;                return cityDict.get(cityName, &#x27;101010100&#x27;)        def clearText(self):        self.ui.textEdit.clear()if __name__ == &#x27;__main__&#x27;:    myapp = QApplication(sys.argv)    myDlg = MainDialog()    myDlg.show()    sys.exit(myapp.exec_())\n最终运行显示效果如下：\n\n","categories":["python PyQT"],"tags":["python PyQT"]},{"title":"Kivy中文说明文档v1.0","url":"/2024/07/09/Kivy%E4%B8%AD%E6%96%87%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3v1-0/","content":"Kivy简介Kivy是Python的Gui的一种。\n网上关于使用python进行ui设计的文档很少，因此为了自己方便，也为了这个领域的发展，于是编写初稿。\n注：本版本是在windows环境下使用的，后期其他系统可能会添加。\n参考文献\n安装官网原文档链接\nInstallation on Windows\nInstallation on Linux\nInstallation on Mac OS\n安装前提首先你得有一个合适的python环境\n官方文档里面提及的是3.9的版本\n国内安装比较慢，可以采用国内的开源镜像站\n阿里云开源镜像站\n之后最好设置下载镜像源为国内的，国外的比较慢\n安装过程安装了Python之后，打开命令行工具cmd，然后按照下面的命令来进行Kivy的安装。\n\n首先要保证已经安装了最新的pip和wheel：\n\npython -m pip install --upgrade pip wheel setuptools\n\n然后安装必要的依赖包(其中gstreamer大小接近139MB，如果不需要用，就可以跳过不安装这个包:\n\npython -m pip install docutils pygments pypiwin32 kivy.deps.sdl2 kivy.deps.glewpython -m pip install kivy.deps.gstreamer --extra-index-url https://kivy.org/downloads/packages/simple/\n\n如果上一步都成功了没什么报错，就可以安装Kivy了:\n\npython -m pip install kivy\n\n在环境变量中添加一些路径到PATH来避免遇到各种issues (在你的python.exe所在的路径下运行下面的命令):\n\nset PATH=%PATH%;%cd%\\share\\sdl2\\bin;%cd%\\share\\glew\\bin\n基础原文地址\nKivy环境安装搭建Kivy要依赖很多Python包，比如 pygame, gstreamer, PIL, Cairo 等等还有好多。这些包并非都是必需的，要根据你的运行平台来看具体情况，有时候缺那么一两个包就可能导致安装失败，或者运行过程中出错等等，这就挺痛苦的。所以Kivy官方针对Windows和MacOS X提供了集成好关键部件的压缩包，解压缩之后直接就能用。具体的安装过程可以参考下面链接中的中文安装指南：\n\nKivy中文安装指南\n\n如果你非要自己从零开始安装，那最起码要确保安装有Cython和Pygame。这两个包可以通过pip来安装，如下所示：\npip install cythonpip install pygamepip install kivy\nKivy的开发版本也可以通过git来安装：\ngit clone https://github.com/kivy/kivymake\n创建一个应用创建一个Kivy应用大概步骤如下：\n\n基于App类创建一个子类；\n把build()方法实现为返回一个控件实例(这个控件的实例也就是你整个应用的根控件)。\n创建一个这个类的实例，然后调用run()方法。\n\n下面的代码就是上述思路的最小化实现：\nimport kivykivy.require(&#x27;1.0.6&#x27;) # 注意要把这个版本号改变成你现有的Kivy版本号!from kivy.app import App # 译者注：这里就是从kivy.app包里面导入App类from kivy.uix.label import Label # 译者注：这里是从kivy.uix.label包中导入Label控件，这里都注意开头字母要大写class MyApp(App):    def build(self): # 译者注：这里是实现build()方法        return Label(text=&#x27;Hello world&#x27;) # 译者注：在这个方法里面使用了Label控件if __name__ == &#x27;__main__&#x27;:    MyApp().run() # 译者注：这里就是运行了。\n把上面的代码以文本形式复制到一个文本文件中，保存成py文件，例如main.py，然后运行，就行了。\n\nKivy应用的生命周期如上图所示，不论什么用途和目的，咱们应用的入口都是这个run()方法，在本文的样例代码中，就是“MyApp().run()”。\n下面就一行一行开始详细解释了：\nfrom kivy.app import App\n为什么要导入这个App类呢？因为咱们自定义的这个App要继承这个类。这个类的位置在kivy安装目录下的kivy目录下的app.py文件中。\n如果你想要深入挖掘一下，去了解这个Kivy的App类到底是怎么个内容，你可以打开这个app.py文件，亲自来看看。Kivy作者特别鼓励大家去阅读源码。Kivy基于Python，用Sphinx编写的文档，所以每个类的文档都在对应的文件内。\n然后咱们回过头来，继续看本文这次的代码的第二行：\nfrom kivy.uix.label import Label\n这里一定要特别注意各种包和类的导入。”kivy.uix”这个包的作用是容纳用户界面元素，比如各种输出布局和控件。\n接下来看到这一行：\nclass MyApp(App):\n这一行定义了咱们这次的Kivy应用的基类。如果你要做修改的话，把MyApp改成你要设定的应用名字就可以了。\n接着往下看：\ndef build(self):\n在上面的生命周期图中加粗强调的部分表明，build函数所处的是要进行初始化和返回根控件的位置。根控件返回的操作在下面这一行中实现：\nreturn Label(text=&#x27;Hello world&#x27;)\n这里我们用文本‘Hello World’对Label这一控件进行了初始化，并且返回了其实例。这个Label就是咱们这个应用的根控件了。\nPython是用缩进来区别代码块的，所以一定要注意上面代码的缩进和层次，尤其是函数定义那部分。\n然后咱们继续，到了真正让应用开始运行的这部分了：\nif __name__ == &#x27;__main__&#x27;:    MyApp().run()\n这里对MyApp这个类进行了初始化，然后调用了这个类的run()方法。这样就初始化并启动了我们的Kivy应用了。\n运行应用接下来就是要在不同操作系统平台上来运行咱们刚刚写好的应用了：\nTo run the application, follow the instructions for your operating system:\n\nWindows 可以在CMD中以如下方式运行：\n\n$ python main.py #用系统Python运行C:\\appdir&gt;kivy.bat main.py #用kivy.bat来运行，注意这里要设定好正确的路径\n\nAndroid 下面要运行还需要一些复杂的文件，所以等以后深入了之后再给讲解这部分了。\n\n这个应用运行之后的具体效果就是下面图片所示这样，会打开一个窗口，然后展示出一个Label，上面写着文本‘Hello World’，这个Label会覆盖该窗口的全部区域。就这样了。\n\n修改定制这个应用增加一个用户名/密码输入的页面\nfrom kivy.app import Appfrom kivy.uix.gridlayout import GridLayoutfrom kivy.uix.label import Labelfrom kivy.uix.textinput import TextInputclass LoginScreen(GridLayout):    def __init__(self, **kwargs):        super(LoginScreen, self).__init__(**kwargs)        self.cols = 2        self.add_widget(Label(text=&#x27;User Name&#x27;))        self.username = TextInput(multiline=False)        self.add_widget(self.username)        self.add_widget(Label(text=&#x27;password&#x27;))        self.password = TextInput(password=True, multiline=False)        self.add_widget(self.password)class MyApp(App):    def build(self):        return LoginScreen()if __name__ == &#x27;__main__&#x27;:    MyApp().run()\n\n在下面这行代码中，我们导入了一种名为Gridlayout的布局：\nfrom kivy.uix.gridlayout import GridLayout\n这个类被我们用作基类来制作根控件LoginScreen，在如下代码中进行了定义：\nclass LoginScreen(GridLayout):\n如下代码中，我们在LoginScreen类中重新定义了初始化方法init()，这样来增加一些控件，并且定义了这些控件的行为：\ndef __init__(self, **kwargs):    super(LoginScreen, self).__init__(**kwargs)\n一定要注意这里要加super，才能把现有的新初始化方法覆盖掉继承来的旧初始化方法。另外也要注意，这里调用super的时候没有省略掉**kwargs，这是一种好习惯。\n然后继续往下看：\nself.cols = 2self.add_widget(Label(text=&#x27;User Name&#x27;))self.username = TextInput(multiline=False)self.add_widget(self.username)self.add_widget(Label(text=&#x27;password&#x27;))self.password = TextInput(password=True, multiline=False)self.add_widget(self.password)\n上面的代码中，我们让GridLayout来管理子控件，把子控件设置为两栏，然后加上用户名和密码的Label字符显示控件和TextInput字符输入控件。\n运行上面的代码，得到的窗口效果大概如下图：\n\n尝试着重新缩放一下窗口大小，你会发现上面的控件会相对整个窗口的尺寸而自行调整大小，并不需要人为去操作了。这是因为这些控件都使用了默认的尺寸。\n环境英文原文\nKivy的初始化和很多行为都可以通过各种环境变量来控制。\n例如，若要严格设定用PIL进行文本渲染，可以通过如下方式来实现：\n$ KIVY_TEXT=pil python main.py\n(译者注：PIL，Python Imaging Library, Python 下常用的绘图库)\n所有的这些环境变量的修改设定都需要在导入Kivy之前进行，具体如下所示：\nimport osos.environ[&#x27;KIVY_TEXT&#x27;] = &#x27;pil&#x27;import kivy\n路径控制\n从Kivy1.0.7版本开始提供\n\nYou can control the default directories where config files, modules and kivy data are located.\nKivy的配置文件、模块以及数据存储的默认目录，都可手动设定所在位置。\n\nKIVY_DATA_DIR\n\n这个是Kivy的数据目录，默认值为/data 。\n\nKIVY_MODULES_DIR\n\n这个是Kivy的模块目录，默认值为/modules 。\n\nKIVY_HOME\n\n这个是Kivy的HOME目录，该目录是用来存放本地配置文件的，必须是一个可以写入的位置。对应不同系统也有不同位置：\n* Desktop: /.kivy* Android: /.kivy* iOS: /Documents/.kivy\n\n从Kivy1.9.0版本开始提供\n\n\nKIVY_SDL2_PATH\n\n这个变量若设定了，编译Kivy的时候就会使用该位置的SDL2库文件，而不再使用系统的库文件。在环境变量PATH的开头部位就要设定好这个变量，这样在运行一个Kivy应用的时候才能也使用相同的SDL2库文件。\n\n从Kivy1.9.0版本开始提供\n\n特别注意刚刚这个SDL2路径是用来编译Kivy的。运行程序的话就用不着了。\n配置文件\nKIVY_USE_DEFAULTCONFIG\n\n若设定了此环境变量，Kivy会读取制定的配置文件。\n\nKIVY_NO_CONFIG\n\n若设定了此环境变量，Kivy将不会读取也不会写入任何配置文件。也适用于用户配置文件夹的位置。（译者注：这句话我还没弄明白，因为没有这样尝试。）\n\nKIVY_NO_FILELOG\n\n若设定了此环境变量，日志将不再输出到文件内。\n\nKIVY_NO_CONSOLELOG\n\n若设定了此环境变量，日志将不再输出到控制台。\n\nKIVY_NO_ARGS\n\n若设定了此环境变量，命令行传递的参数将不会被Kivy解析和使用。也就是说，可以不用 – 定义符，就能随便创建一个使用自己参数的脚本或者应用：\nimport osos.environ[&quot;KIVY_NO_ARGS&quot;] = &quot;1&quot;import kivy\n\n从Kivy1.9.0版本开始提供\n\n限定Kivy.core核心，使用特定版本Kivy.core会尝试使用所在平台的最优实现。如果要测试或者定制安装，你可能要把选择器设定为某个特定版本的kivy.core。\n\nKIVY_WINDOW\n\n这一变量是用来设定如何创建窗口，可用值：sdl2, pygame, x11, egl_rpi\n\nKIVY_TEXT\n\n这一变量是用来设定如何渲染文本，可用值：sdl2, pil, pygame, sdlttf\n\nKIVY_VIDEO\n\n这一变量是用来设定如何渲染视频，可用值：pygst, gstplayer, pyglet, ffpyplayer, ffmpeg, gi, null\n\nKIVY_AUDIO\n\n这一变量是用来设定如何播放声音，可用值：sdl2, gstplayer, pygst, ffpyplayer, pygame, gi, avplayer\n\nKIVY_IMAGE\n\n这一变量是用来设定如何读取图像，可用值：sdl2, pil, pygame, imageio, tex, dds, gif\n\nKIVY_CAMERA\n\n这一变量是用来设定如何读取摄像头，可用值：videocapture, avfoundation, pygst, opencv\n\nKIVY_SPELLING\n\n这一变量是用来设定拼写，可用值： enchant, osxappkit\n\nKIVY_CLIPBOARD\n\n这一变量是用来设定剪切板管理组件，可用值：sdl2, pygame, dummy, android\n设置单位\nKIVY_DPI\n\n这个是用来设定Metrics.dpi的dpi值的。\n\n从Kivy1.4.0版本开始提供\n\n\nKIVY_METRICS_DENSITY\n\n这个是用来设定Metrics.density，像素密度。\n\n从Kivy1.5.0版本开始提供\n\n\nKIVY_METRICS_FONTSCALE\n\n这个是用来设定Metrics.fontscale，字体大小。\n\n从Kivy1.5.0版本开始提供\n\n图形输出\nKIVY_GL_BACKEND\n\n此变量用于设定使用的OpenGL后端，更多细节参考cgl.\n\nKIVY_GL_DEBUG\n\n此变量用于设定是否对OpenGL调用进行日志记录，更多细节参考cgl.\n\nKIVY_GRAPHICS\n\n此变量用于设定是否使用OpenGL ES2，更多细节参考cgl.\n\nKIVY_GLES_LIMITS\n\n此变量用于设定是否强制设定GLES2（默认值为启用，设置为1）。如果设定为false，Kivy将不再兼容GLES2。（译者注：这部分我不懂，就直接生硬翻译了原文，建议大家参考一下原文去理解。）如果设置为true，可能有下表中所示的潜在的不兼容情况：\n\n\n\n\nMesh indices\nIf true, the number of indices in a mesh is limited to 65535\n\n\n\n\nTexture blit\nWhen blitting to a texture, the data (color and buffer) format must be the same format as the one used at the texture creation. On desktop, the conversion of different color is correctly handled by the driver, while on Android, most of devices fail to do it. Ref: https://github.com/kivy/kivy/issues/1600\n\n\n\n\n\n从Kivy1.8.1版本开始提供\n\n\nKIVY_BCM_DISPMANX_ID\n\n此变量是针对Raspberry Pi树莓派平台的，用于设定所选择的视频输出端口。默认值为0，下面列表中是在vc_dispmanx_types.h这个头文件中存储的可供选择的变量值：\n\n0: DISPMANX_ID_MAIN_LCD\n1: DISPMANX_ID_AUX_LCD\n2: DISPMANX_ID_HDMI\n3: DISPMANX_ID_SDTV\n4: DISPMANX_ID_FORCE_LCD\n5: DISPMANX_ID_FORCE_TV\n6: DISPMANX_ID_FORCE_OTHER\n\n（译者注：上面0-6分别是不同的显示输出端口，相信很容易看懂，大家探索一下吧。）\n配置英文原文\nKivy的配置文件是一个名为config.ini的文本，符合标准INI格式。\n找到配置文件位置Kivy的配置文件存放在环境变量KIVY_HOME所制定的位置：\nKIVY_HOME&gt;/config.ini\n在桌面平台上，默认的位置如下：\nHOME_DIRECTORY&gt;/.kivy/config.ini\n所以，假设你的用户名是“tito”，在各个操作系统下的配置文件位置则如下所示：\n\nWindows: C:\\Users\\tito\\.kivy\\config.ini\nOS X: /Users/tito/.kivy/config.ini\nLinux: /home/tito/.kivy/config.ini\n\n（译者注：这里要注意，tito只是原文的一个示范，相当于张三李四这样，新手可别照着复制找不到，要用自己操作系统中具体的用户名。）\n在Android系统中位置如下：\nANDROID_APP_PATH&gt;/.kivy/config.ini\n假如你的Kivy应用的包名称为“org.kivy.launcher”,那么该Kivy应用的配置文件位于:\n/data/data/org.kivy.launcher/files/.kivy/config.ini\n在iOS上Kivy的默认配置文件位于：\nHOME_DIRECTORY&gt;/Documents/.kivy/config.ini\n本地配置有时候用户或者开发者可能需要针对特定的应用来修改配置，或者对Kivy的某个组件进行测试，比如输入模块之类的。这时候就可以用如下命令创建一份新的配置文件：\nfrom kivy.config import ConfigConfig.read(file&gt;)# set configConfig.write()\n有时候本地配置只有一个.ini文件还不够用，比如说可能你要单独使用某个garden、Kivy日志或者其他什么模块，这时候就要把KIVY_HOME这个环境变量进行修改了，指定到目标位置就行：\nimport osos.environ[&#x27;KIVY_HOME&#x27;] = folder&gt;\n还有一种思路，就是在运行Kivy应用之前，在终端中手动修改一下这个环境变量：\n\nWindows: set KIVY_HOME=folder&gt;\nLinux &amp; OSX: export KIVY_HOME=folder&gt;\n\n在设置了KIVY_HOME之后，所指定的这个文件夹就会被当做默认的.kivy文件夹来用。\n详细理解配置项在kivy.config 模块中可以看到全部的配置项的解释。\n架构英文原文\n本章我们将从软件工程的角度，来简单介绍一下Kivy的设计。这对于理解各个部分如何配合工作会有帮助。如果你只关注代码，可能有时候会遇到这样一种情况，就是你已经有了一个初步的想法了，但具体怎么去实现可能还是一头雾水，所以本章就针对这种情况，来更深入地讲解一下Kivy的一些基本思想。你也可以先跳过这一章，等以后再翻回来看，不过我们建议开发者还是先看一下这些内容比较好，起码可以快速略读一下有个印象。\nKivy包含的若干个模块，我们将对这些模块一一进行简要说明。下面这幅图是Kivy整个架构的概括图示：\n\n核心模块和输入模块对理解Kivy的设计内涵，模块化和抽象化的思想是至关重要的。我们试图把各种基本的任务进行抽象，比如打开窗口、显示图像和文本、播放音频、从摄像头获取图像、拼写校正等等。我们将这些部分称为核心任务。这样也使得API接口用起来比较简单，扩展起来也容易。更重要的是，这种思路可以让Kivy应用在运行的时候，使用各个运行平台所提供的对应功能的API接口。例如，在苹果的MacOS操作系统、Linux操作系统和Windows操作系统中，就都有各自不同的原生API接口提供各种核心功能。所以就有一部分代码，调用这些不同接口中的某一个，一方面与操作系统进行通信，另一方面与Kivy进行交互，起到中间人的角色，我们称之为核心模块。针对不同的操作系统平台要使用各自对应的核心模块，这样的好处是达到一种均衡状态，既能够充分利用操作系统提供的功能，又能尽量提高开发效率。（译者注：我的理解是这样大家平时不用针对不同操作系统去学习和使用各自的API，而只要专心使用Kivy的核心模块进行调用就行了。）这也允许用户来自由选择，使用Kivy提供的核心模块，或者直接使用各个操作系统的API接口。此外，由于使用了各个平台所提供的链接库文件，我们大大减小了Kivy发型版本的体积，也使得打包发布更加容易。这有助于将Kivy应用移植到其他平台。比如Android平台上的Kivy应用就体现了这一特性的好处了。\n在输入模块这部分，我们也遵循了同样的思路。输入模块，是一段代码，用于针对各种输入设备提供支持，比如苹果公司的Trackpad触摸板，TUIO多点触摸设备，或者是鼠标模拟器等等。如果你需要对某一种新的输入设备添加支持，只需要提供一个新的类，用这个类来读取输入设备的数据，然后传递给Kivy基本事件，就可以了。\n图形接口Kivy的图形接口是对OpenGL的抽象。在最底层，Kivy使用OpenGL的命令来进行硬件加速的图形绘制。不过写OpenGL的代码可还是挺复杂的，新手就更难以迅速掌握了。所以我们就提供了一系列的图形接口，利用这些接口可以很简单地进行图形绘制，这些接口中用到了例如画布Canvas、矩形Rectangle等几何概念，比OpenGL里面简单不少。\nKivy自带的所有控件，都使用了这个图形接口；出于性能的考虑，此图形接口是用C语言来实现的。\n这个图形接口的另一个好处是可以对你代码中的绘图指令进行自动优化。这个很有用，尤其是在你对OpenGL的优化不太熟悉的情况下。这能让你的绘图代码更高效。\n当然了，你也可以坚持使用原生的OpenGL命令。目前Kivy在所有操作系统平台上用的都是是OpenGL 2.0 ES (GLES2)，所以如果你希望保持跨平台的兼容性，我们建议你只是用GLES2兼容的函数。\n核心模块核心模块也就是kivy.core，这个包里面提供了常用的各种功能，比如：\n\nClock\n时钟类，可以用于安排计时器事件。同时支持一次性计时和周期性计时。\n\nCache\nIf you need to cache something that you use often, you can use our class for that instead of writing your own.\n缓存类，如果有一些经常用到的数据需要缓存，就可以用这个类，而不用自己写了。\n\nGesture Detection\n手势识别，这个可以用来识别各种划动行为，比如画个圆圈或者方块之类的。可以训练来识别你自己设计的图形。\n\nKivy Language\nKivy语言，这个是用来简洁高效地描述Kivy应用的用户界面的。\n\nProperties\n这里这些属性和Python语言中的属性不同。这里是我们专门写的一些类，通过用户界面描述来连接控件代码。\n\n\nUIX（控件和布局）UIX用户界面模块，包含了常用的各种控件和布局，可以通过复用来快速构建用户界面。\n\nWidgets 控件\n控件是各种用户界面元素，可以添加到程序中来提供各种功能。有的可见，有的不可见。文件浏览器，按钮、滑动页、列表等等，这都属于控件。控件接收动作事件。\n\nLayouts 布局\n布局是控件的排列方式。当然，你也可以自己自定义控件的位置，不过从我们提供的预设布局中选择一个来使用，会更方便很多。网格布局、箱式布局等等，都是布局了。你还可以试试复杂的多层网状布局。\n\n\n模块化如果你用某一种现代的网络浏览器，并且通过一些附加组件对其进行定制，那么你应该就理解了我们提供的各种模块类的基本思想了。各种模块可以用来向Kivy程序中添加功能，即便原作者没有提供的功能也可以加进去了。\n例如，有一个模块就能显示当前应用的FPS（Frame Per Second，每秒帧数，即帧率），然后还能统计一段时间的FPS变化。\n你可以自己写各种模块添加到应用中。\n输入事件（Touches）Kivy抽象了各种输入类型和输入设备，比如触控，鼠标按键，多点触摸等等。这些输入类型有一个共同点，就是都可以把各种输入事件映射成屏幕上对应的一种2D形态。（当然了，还有的输入设备就没法用2D形态来表示，比如通过加速度传感器来衡量设备倾斜角度等。这种情况就得另外考虑了。下面我们讨论的只是那些能用2D形态表示的输入事件，复杂的类型以后再说。）\n这些输入类型，在Kivy中都用Touch()类的实例来表示。（请注意，这里可不仅仅是针对手指去触摸的那种touch，而是所有可以这样抽象表示的输入事件。这里用Touch只是为了方便而这么简称一下。就想象一下，这些Touches就是在用户界面或者显示屏上面的那些个点击行为。 ）Touch的实例或者对象，有三种状态。当这个Touch进入了其中的某一个状态，你的程序就会被告知此事件的发生。Touch的三种状态如下：\n\nDown 落下\n处于落下状态，只能有一次，就是在发生Touch事件的初始时刻。\n\nMove 移动\n这个状态的时间无上限。在一个Touch的生命周期中可以没有这个状态。移动状态只发生在Touch的2D平面位置发生变化的情况下。\n\nUp 抬起\nA touch goes up at most once, or never. In practice you will almost always receive an up event because nobody is going to hold a finger on the screen for all eternity, but it is not guaranteed. If you know the input sources your users will be using, you will know whether or not you can rely on this state being entered.\n一个Touch要么只能抬起一次，要么就不发生。而实际应用中你会经常遇到Up时间，因为没有人会一直把手指按到屏幕上，不过也有未必就绝对不会有这种情况。若事先知道用户用的输入设备，就可以确定能否完全依靠用户的输入状态。\n（译者注：以手指触摸屏幕为例，只有开始接触的时候是Down手指落下这个状态，之后移动就是接下来的Move移动状态，手指抬起来的时候就是Up即抬起状态了；如果以鼠标左键点击为例，按下去左键的时候是Down，按住左键不放进行拖动就是Move，松开左键就是Up了。这段我特别解释一下，因为自己翻译的太生硬了。）\n\n\n控件和事件调度在图形化的软件开发语境下，控件这个词经常出现，一般是来描述程序中用于和用户进行交互的组件。在Kivy中，控件是用来接收各种输入事件的。所以并不一定非要在屏幕上能看得到。Kivy当中所有控件都以控件树的形式来管理，学过计算机科学中数据结构相关知识的话，就会意识到这是一种树形结构：一个控件可以有任意多个子控件，也可以没有子控件。根控件就只能有一个，处于树形结构的顶端，根控件不具有父控件，并且所有其他控件都是根控件的直接或者间接子控件（就像树根一样，所以叫根控件）。\n当新的输入数据可用的时候，Kivy会针对每一个Touch发出一个事件。控件树种的根控件首先接收到这个事件。Touch的不同状态，on_touch_down, on_touch_move和on_touch_up （Down落下、Move移动和Up），会作为Touch的参数，提供给根控件，根控件会调用对应的事件Handler来作出反应。\n包括根控件在内，控件树种的每个控件都可以有两种选择，处理该事件，或者将该事件传递下去。如果一个事件的Handler返回True，就意味着这个事件已经被接收并妥善处理。这个事件就也到此为止了。如果不是这样，事件的Handler会跳过此处的空间，调用父类中的对应事件的Handler实现，传递给该控件的子控件。这样的过程可以一路走到最基础的控件类Widget，在它的Touch事件Handler中，只是把Touch传递给子控件，而不进行其他的操作。\n# This is analogous for move/up:def on_touch_down(self, touch):    for child in self.children[:]:        if child.dispatch(&#x27;on_touch_down&#x27;, touch):            return True\n说起来挺麻烦，看上去挺复杂，实际上要简单得多。下一章就会讲解如何使用这种特性来快速创建应用了。\n经常有一种情况，就是你可能要让一个控件只在屏幕上某个特定的区域来监听Touch事件。这时候就可以使用控件的collide_point()方法来实现此目的。只需要把Touch的位置发给该方法，然后如果此位置位于监听区域则返回True，反之返回False。默认情况下，这个方法会监听屏幕上的一个矩形区域，根据控件的中心坐标（x &amp; y坐标系），以及空间尺寸（宽度和高度），不过你也可以用自己的类覆盖掉这一行为。\nTitle: Kivy Widgets Date: 2017-02-26 Category: Kivy Tags: Python,Kivy\n控件英文原文\n控件简介控件Widget是 Kivy 图形界面中的基本元素。控件提供了一个画布Canvas，这是用来在屏幕上进行绘制的。控件接收事件，并且对事件作出反应。想要对 控件Widget进行更深入的了解，可以去看看这个模块的文档。\n操作控件树Kivy 以树的形式来组织控件。你的应用程序会有一个根控件，通常会含有若干的子控件 children，这些子控件还可以有自己的子控件。一个控件的子控件会以 children属性的形式表述，这个属性是 Kivy 中的一个列表属性 ListProperty\n可以用一下方法来操作控件树：\n\nadd_widget(): 添加一个控件作为子控件；\nremove_widget(): 从子控件列表中去掉一个控件；\nclear_widgets(): 清空一个控件的所有子控件。\n\n例如下面的代码，就是在一个盒式布局 BoxLayout 中添加一个按钮：\nlayout = BoxLayout(padding=&lt;span&gt;10&lt;/span&gt;)button = Button(text=&lt;span&gt;&#x27;My first button&#x27;&lt;/span&gt;)layout.add_widget(button)\n这个按钮就添加到布局当中去了：按钮的 parent 属性会被设置为这个布局；这个按钮也会被添加到布局中的子控件列表。要把这个按钮从这个布局中删掉也很简单：\nlayout.remove_widget(button)\n移除了之后，这个按钮的 parent 属性就会被设置为 None，也会被从布局的子控件列表中移除。\n要是想清空一个控件中的所有自科技，那就用 clear_widgets()方法就可以了：\nlayout.clear_widgets()\n特别注意千万别自己手动去操作子控件列表，除非你确定自己掌控得非常深入透彻。因为控件树是和绘图树联系在一起的。例如，如果你添加了一个控件到子控件列表，但没有添加这个新子控件的画布到绘图树上，那么就会出现这种情况：这个控件确实成了一个子控件，但是屏幕上不会显示出来。此外，如果你后续使用添加、移除、清空控件这些操作，可能还会遇到问题。\n遍历控件树控件类实例的子控件children列表属性中包含了所有的子控件。所以可以用如下的方式来进行遍历：\nroot = BoxLayout()&lt;span&gt;# ... add widgets to root ...&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; child &lt;span&gt;in&lt;/span&gt; root.children:    print(child)\n然而，这样的操作可得谨慎使用。如果你要用之前一节中提到的方法来修改这个子控件列表电话，请一定用下面这种方法来做一下备份：\n&lt;span&gt;for&lt;/span&gt; child &lt;span&gt;in&lt;/span&gt; root.children[:]:    &lt;span&gt;# manipulate the tree. For example here, remove all widgets that have a&lt;/span&gt;    &lt;span&gt;# width&lt;/span&gt;    &lt;span&gt;if&lt;/span&gt; child.width  &lt;span&gt;100&lt;/span&gt;:        root.remove_widget(child)\n默认情况下，控件是不会对子控件的尺寸/位置进行改变的。位置属性 pos是屏幕坐标系上的绝对值（除非你使用相对布局relativelayout，这个以后再说），而尺寸属性 size就是一个绝对的尺寸大小。\n控件索引Z控件绘制的顺序，是基于各个控件在控件树中的位置。添加控件方法 add_widget 可以接收一个索引参数，这样就能指定该新增控件在控件树中的位置。\nroot.add_widget(widget, index)\n索引值小的控件会被绘制在索引值大的控件之上。一定要记住，默认值是 0 ，所以后添加的控件总会在所有控件的最顶层，除非指定了索引值。\n整理布局布局 layout是一种特别的控件，它会控制自己子控件的尺寸和位置。有各种不同的布局，这些布局分别为子控件提供拜托你个的自动组织整理。这些布局使用尺寸推测 size_hint和位置推测 pos_hint这两个属性来决定子控件children的尺寸 size 和 位置pos。\n盒式布局 BoxLayout: 所有控件充满整个空间，以互相挨着的方块的方式来分布，横着或者竖着排列都可以。子控件的 size_hint 属性可以用来改变每个子控件的比例，也可以设置为固定尺寸。\n  \n网格布局 GridLayout: 以一张网格的方式来安排控件。你必须指定好网格的维度，确定好分成多少格，这样 Kivy 才能计算出每个元素的尺寸并且确定如何安排这些元素的位置。\n栈状布局 StackLayout: 挨着放一个个控件，彼此邻近，在某一个维度上有固定大小，而使它们填充整个空间。 这适合用来显示相同预定义大小的子控件。\n锚式布局 AnchorLayout: 一种非常简单的布局，只关注子控件的位置。 将子控件放在布局的边界位置。 不支持size_hint。\n浮动布局 FloatLayout: 允许放置具任意位置和尺寸的子控件，可以是绝对尺寸，也可以是相对布局的相对尺寸。 默认的 size_hint（1，1）会让每个子控件都与整个布局一样大，所以如果你多个子控件就要修改这个值。可以把 size_hint 设置成 (None, None)，这样就可以使用 size 这个绝对尺寸属性。控件也支持 pos_hint，这个属性是一个 dict 词典，用来设置相对布局的位置。\n相对布局 RelativeLayout: 和浮动布局 FloatLayout 差不多，不同之处在于子控件的位置是相对于布局空间的，而不是相对于屏幕。\n想要深入理解各种布局的话，可以仔细阅读各种文档。\nsize_hint 和 pos_hint:\n\nfloatlayout\nboxlayout\ngridlayout\nstacklayout\nrelativelayout\nanchorlayout\n\nsize_hint 是一个 引用列表属性 ReferenceListProperty ，包括 size_hint_x 和size_hint_y 两个变量。接收的变量值是从0到1的各种数值，或者 None， 默认值为 (1, 1)。这表示如果控件处在布局之内，布局将会在两个方向分配全部尺寸（相对于布局大小）给该控件。\n举个例子，设置size_hint 为 (0.5, 0.8)，就会给该控件Widget 分配布局 layout 内50% 宽，80% 高的尺寸。\n例如下面这个例子：\nBoxLayout:    Button:        text: &lt;span&gt;&#x27;Button 1&#x27;&lt;/span&gt;        &lt;span&gt;# default size_hint is 1, 1, we don&#x27;t need to specify it explicitly&lt;/span&gt;        &lt;span&gt;# however it&#x27;s provided here to make things clear&lt;/span&gt;        size_hint: &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;\n加载 Kivy 目录：\ncd $KIVYDIR/examples/demo/kivycatalogpython main.py\n把上面代码中的 $KIVYDIR 替换成你的 Kivy 安装位置。在左边点击标注有 Box Layout 的按钮。 然后将上面的代码粘贴到窗口右侧的编辑器内。\n\n然后你就可以看到上图这样的界面了，这个按钮 Button 会占据整个布局尺寸 size的 100%。\n修改size_hint_x/size_hint_y 为 .5 这就会把控件 Widget 调整为布局 layout 的50% 宽度 width/高度 height。\n\n这时候效果如上图所示，虽然我们已经同时指定了 size_hint_x 和 size_hint_y 为 .5，但似乎只有对 size_hint_x 的修改起作用了。这是因为在盒式布局 boxlayout中，当orientation被设置为竖直方向（vertical） 的时候，size_hint_y 由布局来控制，而如果orientation 被设置为水平方向（horizontal）的时候， size_hint_x 由布局来控制，所以这些情况手动设定就无效了。 这些受控维度的尺寸，是根据子控件 children 在 盒式布局 boxlayout中的总编号来计算的。在上面的例子中，这个子控件的size_hint_y 是受控的(.5/.5 = 1)。所以，这里控件就占据了上层布局的整个高度。\n接下来咱们再添加一个按钮 Button到这个 布局 layout看看有什么效果。\n\n盒式布局 boxlayout 默认对其所有的子控件 children分配了等大的空间。在咱们这个例子里面，比例是50-50，因为有两个子控件 children。那么接下来咱们就对其中的一个子控件设置一下 size_hint，然后看看效果怎么样。\n\n从上图可以看出，如果一个子控件有了一个指定的 size_hint，这就会决定该控件 Widget使用盒式布局 boxlayout提供的空间中的多大比例，来作为自己的尺寸 size 。在我们这个例子中，第一个按钮 Button 的size_hint_x设置为了 .5。那么这个控件分配到的空间计算方法如下：\nfirst child&#x27;s size_hint divided byfirst child&#x27;s size_hint + second child&#x27;s size_hint + ...n(no of children).5/(.5+1) = .333...\n盒式布局 BoxLayout 的剩余宽度 width会分配给另外的一个子控件 children。在我们这个例子中，这就意味着第二个按钮 Button 会占据整个布局 layout的 66.66% 宽度 width 。\n修改 size_hint 探索一下来多适应一下吧。\n如果你想要控制一个控件 Widget的绝对尺寸 size ，可以把size_hint_x/size_hint_y当中的一个或者两个都设置成 None，这样的话该控件的宽度 width 和高度 height的属性值就会生效了。\npos_hint 是一个词典 dict，默认值是空。相比于size_hint，布局对pos_hint的处理方式有些不同，不过大体上你还是可以对pos 的各种属性设定某个值来设定控件 Widget在父控件 parent中的相对位置（可以设定的属性包括：x, y, right, top, center_x, center_y）。\n咱们用下面 kivycatalog 中的代码来可视化地理解一下pos_hint：\nFloatLayout:    Button:        text: &lt;span&gt;&quot;We Will&quot;&lt;/span&gt;        pos: &lt;span&gt;100&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;        size_hint: &lt;span&gt;.2&lt;/span&gt;, &lt;span&gt;.4&lt;/span&gt;    Button:        text: &lt;span&gt;&quot;Wee Wiill&quot;&lt;/span&gt;        pos: &lt;span&gt;200&lt;/span&gt;, &lt;span&gt;200&lt;/span&gt;        size_hint: &lt;span&gt;.4&lt;/span&gt;, &lt;span&gt;.2&lt;/span&gt;    Button:        text: &lt;span&gt;&quot;ROCK YOU!!&quot;&lt;/span&gt;        pos_hint: &#123;&lt;span&gt;&#x27;x&#x27;&lt;/span&gt;: &lt;span&gt;.3&lt;/span&gt;, &lt;span&gt;&#x27;y&#x27;&lt;/span&gt;: &lt;span&gt;.6&lt;/span&gt;&#125;        size_hint: &lt;span&gt;.5&lt;/span&gt;, &lt;span&gt;.2&lt;/span&gt;\n这份代码的输出效果如下图所示：\n\n说了半天size_hint，你不妨自己试试探索一下 pos_hint，来理解一下这个属性对控件位置的效果。\n给布局添加背景关于布局，有一个问题经常被问道：\n“怎么给一个布局添加背景图片/颜色/视频/等等……”\n本来默认的各种布局都是没有视觉呈现的：因为布局不像控件，布局是默认不含有绘图指令的。不过呢，还是你可以给一个布局实例添上绘图指令，也就可以添加一个彩色背景了：\n在 Python 中的实现方法：\n&lt;span&gt;from&lt;/span&gt; kivy.graphics &lt;span&gt;import&lt;/span&gt; Color, Rectangle&lt;span&gt;with&lt;/span&gt; layout_instance.canvas.before:    Color(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;) &lt;span&gt;# green; colors range from 0-1 instead of 0-255&lt;/span&gt;    self.rect = Rectangle(size=layout_instance.size,                           pos=layout_instance.pos)\n然而很不幸，这样只能在布局的初始化位置以布局的初始尺寸绘制一个矩形。所以还要对布局的尺寸和位置变化进行监听，然后对矩形的尺寸位置进行更新，这样才能保证这个矩形一直绘制在布局的内部。可以用如下方式实现：\n&lt;span&gt;with&lt;/span&gt; layout_instance.canvas.before:    Color(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;) &lt;span&gt;# green; colors range from 0-1 instead of 0-255&lt;/span&gt;    self.rect = Rectangle(size=layout_instance.size,                           pos=layout_instance.pos)&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;update_rect&lt;/span&gt;&lt;span&gt;(instance, value)&lt;/span&gt;:&lt;/span&gt;    instance.rect.pos = instance.pos    instance.rect.size = instance.size&lt;span&gt;# listen to size and position changes&lt;/span&gt;layout_instance.bind(pos=update_rect, size=update_rect)\n在 kv 文件中：\nFloatLayout:    canvas.before:        Color:            rgba: &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;        Rectangle:            &lt;span&gt;# self here refers to the widget i.e BoxLayout&lt;/span&gt;            pos: self.pos            size: self.size\n上面的 Kv 文件中的生命，就建立了一个隐含的绑定：上面 Kv 代码中的最后两行保证了矩形的位置 pos和尺寸 size会在浮动布局 floatlayout的位置 pos发生变化的时候进行更新。\n接下来咱们把上面的代码片段放进 Kivy 应用里面。\n纯 Python 方法：\n&lt;span&gt;from&lt;/span&gt; kivy.app &lt;span&gt;import&lt;/span&gt; App&lt;span&gt;from&lt;/span&gt; kivy.graphics &lt;span&gt;import&lt;/span&gt; Color, Rectangle&lt;span&gt;from&lt;/span&gt; kivy.uix.floatlayout &lt;span&gt;import&lt;/span&gt; FloatLayout&lt;span&gt;from&lt;/span&gt; kivy.uix.button &lt;span&gt;import&lt;/span&gt; Button&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;RootWidget&lt;/span&gt;&lt;span&gt;(FloatLayout)&lt;/span&gt;:&lt;/span&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self, **kwargs)&lt;/span&gt;:&lt;/span&gt;        &lt;span&gt;# make sure we aren&#x27;t overriding any important functionality&lt;/span&gt;        super(RootWidget, self).__init__(**kwargs)        &lt;span&gt;# let&#x27;s add a Widget to this layout&lt;/span&gt;        self.add_widget(            Button(                text=&lt;span&gt;&quot;Hello World&quot;&lt;/span&gt;,                size_hint=(&lt;span&gt;.5&lt;/span&gt;, &lt;span&gt;.5&lt;/span&gt;),                pos_hint=&#123;&lt;span&gt;&#x27;center_x&#x27;&lt;/span&gt;: &lt;span&gt;.5&lt;/span&gt;, &lt;span&gt;&#x27;center_y&#x27;&lt;/span&gt;: &lt;span&gt;.5&lt;/span&gt;&#125;))&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MainApp&lt;/span&gt;&lt;span&gt;(App)&lt;/span&gt;:&lt;/span&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;build&lt;/span&gt;&lt;span&gt;(self)&lt;/span&gt;:&lt;/span&gt;        self.root = root = RootWidget()        root.bind(size=self._update_rect, pos=self._update_rect)        &lt;span&gt;with&lt;/span&gt; root.canvas.before:            Color(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;)  &lt;span&gt;# green; colors range from 0-1 not 0-255&lt;/span&gt;            self.rect = Rectangle(size=root.size, pos=root.pos)        &lt;span&gt;return&lt;/span&gt; root    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;_update_rect&lt;/span&gt;&lt;span&gt;(self, instance, value)&lt;/span&gt;:&lt;/span&gt;        self.rect.pos = instance.pos        self.rect.size = instance.size&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;&#x27;__main__&#x27;&lt;/span&gt;:    MainApp().run()\n使用 Kv 语言：\n&lt;span&gt;from&lt;/span&gt; kivy.app &lt;span&gt;import&lt;/span&gt; App&lt;span&gt;from&lt;/span&gt; kivy.lang &lt;span&gt;import&lt;/span&gt; Builderroot = Builder.load_string(&lt;span&gt;&#x27;&#x27;&#x27;FloatLayout:    canvas.before:        Color:            rgba: 0, 1, 0, 1        Rectangle:            # self here refers to the widget i.e FloatLayout            pos: self.pos            size: self.size    Button:        text: &#x27;Hello World!!&#x27;        size_hint: .5, .5        pos_hint: &#123;&#x27;center_x&#x27;:.5, &#x27;center_y&#x27;: .5&#125;&#x27;&#x27;&#x27;&lt;/span&gt;)&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MainApp&lt;/span&gt;&lt;span&gt;(App)&lt;/span&gt;:&lt;/span&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;build&lt;/span&gt;&lt;span&gt;(self)&lt;/span&gt;:&lt;/span&gt;        &lt;span&gt;return&lt;/span&gt; root&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;&#x27;__main__&#x27;&lt;/span&gt;:    MainApp().run()\n上面这两个应用的效果都如下图所示： \n给自定义布局规则/类增加背景色上面那一段中咱们对布局实例增加背景的方法，如果用到很多歌布局里面，那就很快变得特别麻烦了。要解决这种需求，就可以基于布局类 Layout 创建一个自定义的布局子类，给自定义的这个类增加一个背景。\n使用 Python：\n&lt;span&gt;from&lt;/span&gt; kivy.app &lt;span&gt;import&lt;/span&gt; App&lt;span&gt;from&lt;/span&gt; kivy.graphics &lt;span&gt;import&lt;/span&gt; Color, Rectangle&lt;span&gt;from&lt;/span&gt; kivy.uix.boxlayout &lt;span&gt;import&lt;/span&gt; BoxLayout&lt;span&gt;from&lt;/span&gt; kivy.uix.floatlayout &lt;span&gt;import&lt;/span&gt; FloatLayout&lt;span&gt;from&lt;/span&gt; kivy.uix.image &lt;span&gt;import&lt;/span&gt; AsyncImage&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;RootWidget&lt;/span&gt;&lt;span&gt;(BoxLayout)&lt;/span&gt;:&lt;/span&gt;    &lt;span&gt;pass&lt;/span&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;CustomLayout&lt;/span&gt;&lt;span&gt;(FloatLayout)&lt;/span&gt;:&lt;/span&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self, **kwargs)&lt;/span&gt;:&lt;/span&gt;        &lt;span&gt;# make sure we aren&#x27;t overriding any important functionality&lt;/span&gt;        super(CustomLayout, self).__init__(**kwargs)        &lt;span&gt;with&lt;/span&gt; self.canvas.before:            Color(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;)  &lt;span&gt;# green; colors range from 0-1 instead of 0-255&lt;/span&gt;            self.rect = Rectangle(size=self.size, pos=self.pos)        self.bind(size=self._update_rect, pos=self._update_rect)    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;_update_rect&lt;/span&gt;&lt;span&gt;(self, instance, value)&lt;/span&gt;:&lt;/span&gt;        self.rect.pos = instance.pos        self.rect.size = instance.size&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MainApp&lt;/span&gt;&lt;span&gt;(App)&lt;/span&gt;:&lt;/span&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;build&lt;/span&gt;&lt;span&gt;(self)&lt;/span&gt;:&lt;/span&gt;        root = RootWidget()        c = CustomLayout()        root.add_widget(c)        c.add_widget(            AsyncImage(                source=&lt;span&gt;&quot;http://www.everythingzoomer.com/wp-content/uploads/2013/01/Monday-joke-289x277.jpg&quot;&lt;/span&gt;,                size_hint= (&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;.5&lt;/span&gt;),                pos_hint=&#123;&lt;span&gt;&#x27;center_x&#x27;&lt;/span&gt;:&lt;span&gt;.5&lt;/span&gt;, &lt;span&gt;&#x27;center_y&#x27;&lt;/span&gt;:&lt;span&gt;.5&lt;/span&gt;&#125;))        root.add_widget(AsyncImage(source=&lt;span&gt;&#x27;http://www.stuffistumbledupon.com/wp-content/uploads/2012/05/Have-you-seen-this-dog-because-its-awesome-meme-puppy-doggy.jpg&#x27;&lt;/span&gt;))        c = CustomLayout()        c.add_widget(            AsyncImage(                source=&lt;span&gt;&quot;http://www.stuffistumbledupon.com/wp-content/uploads/2012/04/Get-a-Girlfriend-Meme-empty-wallet.jpg&quot;&lt;/span&gt;,                size_hint= (&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;.5&lt;/span&gt;),                pos_hint=&#123;&lt;span&gt;&#x27;center_x&#x27;&lt;/span&gt;:&lt;span&gt;.5&lt;/span&gt;, &lt;span&gt;&#x27;center_y&#x27;&lt;/span&gt;:&lt;span&gt;.5&lt;/span&gt;&#125;))        root.add_widget(c)        &lt;span&gt;return&lt;/span&gt; root&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;&#x27;__main__&#x27;&lt;/span&gt;:    MainApp().run()\n使用 Kv 语言：\n&lt;span&gt;from&lt;/span&gt; kivy.app &lt;span&gt;import&lt;/span&gt; App&lt;span&gt;from&lt;/span&gt; kivy.uix.floatlayout &lt;span&gt;import&lt;/span&gt; FloatLayout&lt;span&gt;from&lt;/span&gt; kivy.uix.boxlayout &lt;span&gt;import&lt;/span&gt; BoxLayout&lt;span&gt;from&lt;/span&gt; kivy.lang &lt;span&gt;import&lt;/span&gt; BuilderBuilder.load_string(&lt;span&gt;&#x27;&#x27;&#x27;&amp;lt;CustomLayout&amp;gt;    canvas.before:        Color:            rgba: 0, 1, 0, 1        Rectangle:            pos: self.pos            size: self.size&amp;lt;RootWidget&amp;gt;    CustomLayout:        AsyncImage:            source: &#x27;http://www.everythingzoomer.com/wp-content/uploads/2013/01/Monday-joke-289x277.jpg&#x27;            size_hint: 1, .5            pos_hint: &#123;&#x27;center_x&#x27;:.5, &#x27;center_y&#x27;: .5&#125;    AsyncImage:        source: &#x27;http://www.stuffistumbledupon.com/wp-content/uploads/2012/05/Have-you-seen-this-dog-because-its-awesome-meme-puppy-doggy.jpg&#x27;    CustomLayout        AsyncImage:            source: &#x27;http://www.stuffistumbledupon.com/wp-content/uploads/2012/04/Get-a-Girlfriend-Meme-empty-wallet.jpg&#x27;            size_hint: 1, .5            pos_hint: &#123;&#x27;center_x&#x27;:.5, &#x27;center_y&#x27;: .5&#125;&#x27;&#x27;&#x27;&lt;/span&gt;)&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;RootWidget&lt;/span&gt;&lt;span&gt;(BoxLayout)&lt;/span&gt;:&lt;/span&gt;    &lt;span&gt;pass&lt;/span&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;CustomLayout&lt;/span&gt;&lt;span&gt;(FloatLayout)&lt;/span&gt;:&lt;/span&gt;    &lt;span&gt;pass&lt;/span&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MainApp&lt;/span&gt;&lt;span&gt;(App)&lt;/span&gt;:&lt;/span&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;build&lt;/span&gt;&lt;span&gt;(self)&lt;/span&gt;:&lt;/span&gt;        &lt;span&gt;return&lt;/span&gt; RootWidget()&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;&#x27;__main__&#x27;&lt;/span&gt;:    MainApp().run()\n上面这两个应用的效果都如下图所示：\n\n在自定义布局类中定义了背景之后，就是要确保在自定义布局的各个实例中使用到这个新特性。\n首先，要在全局上增加一个图形或者颜色给内置的 Kivy 布局的背景，这就需要将所用布局的默认 Kv 规则进行覆盖。\n就拿网格布局 GridLayout 举例吧：\n&amp;lt;GridLayout&amp;gt;    canvas.before:        Color:            rgba: &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;        BorderImage:            source: &lt;span&gt;&#x27;../examples/widgets/sequenced_images/data/images/button_white.png&#x27;&lt;/span&gt;            pos: self.pos            size: self.size\n接下来把这段代码放到一个 Kivy 应用里面：\n&lt;span&gt;from&lt;/span&gt; kivy.app &lt;span&gt;import&lt;/span&gt; App&lt;span&gt;from&lt;/span&gt; kivy.uix.floatlayout &lt;span&gt;import&lt;/span&gt; FloatLayout&lt;span&gt;from&lt;/span&gt; kivy.lang &lt;span&gt;import&lt;/span&gt; BuilderBuilder.load_string(&lt;span&gt;&#x27;&#x27;&#x27;&amp;lt;GridLayout&amp;gt;    canvas.before:        BorderImage:            # BorderImage behaves like the CSS BorderImage            border: 10, 10, 10, 10            source: &#x27;../examples/widgets/sequenced_images/data/images/button_white.png&#x27;            pos: self.pos            size: self.size&amp;lt;RootWidget&amp;gt;    GridLayout:        size_hint: .9, .9        pos_hint: &#123;&#x27;center_x&#x27;: .5, &#x27;center_y&#x27;: .5&#125;        rows:1        Label:            text: &quot;I don&#x27;t suffer from insanity, I enjoy every minute of it&quot;            text_size: self.width-20, self.height-20            valign: &#x27;top&#x27;        Label:            text: &quot;When I was born I was so surprised; I didn&#x27;t speak for a year and a half.&quot;            text_size: self.width-20, self.height-20            valign: &#x27;middle&#x27;            halign: &#x27;center&#x27;        Label:            text: &quot;A consultant is someone who takes a subject you understand and makes it sound confusing&quot;            text_size: self.width-20, self.height-20            valign: &#x27;bottom&#x27;            halign: &#x27;justify&#x27;&#x27;&#x27;&#x27;&lt;/span&gt;)&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;RootWidget&lt;/span&gt;&lt;span&gt;(FloatLayout)&lt;/span&gt;:&lt;/span&gt;    &lt;span&gt;pass&lt;/span&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MainApp&lt;/span&gt;&lt;span&gt;(App)&lt;/span&gt;:&lt;/span&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;build&lt;/span&gt;&lt;span&gt;(self)&lt;/span&gt;:&lt;/span&gt;        &lt;span&gt;return&lt;/span&gt; RootWidget()&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;&#x27;__main__&#x27;&lt;/span&gt;:    MainApp().run()\n效果大概如下图所示：\n\n我们已经对网格布局 GridLayout 类的规则进行了覆盖，所以接下来在应用中使用这个类就都会显示那幅图片了。\n动画背景怎么弄呢？\n就像在矩形Rectangle/ 边界图像BorderImage /椭圆Ellipse/等里面添加设置绘图指令一样，可以用一个特定的纹理属性 texture ：\nRectangle:    texture: reference to a texture\n可以用下面的代码实现一个动画背景：\n&lt;span&gt;from&lt;/span&gt; kivy.app &lt;span&gt;import&lt;/span&gt; App&lt;span&gt;from&lt;/span&gt; kivy.uix.floatlayout &lt;span&gt;import&lt;/span&gt; FloatLayout&lt;span&gt;from&lt;/span&gt; kivy.uix.gridlayout &lt;span&gt;import&lt;/span&gt; GridLayout&lt;span&gt;from&lt;/span&gt; kivy.uix.image &lt;span&gt;import&lt;/span&gt; Image&lt;span&gt;from&lt;/span&gt; kivy.properties &lt;span&gt;import&lt;/span&gt; ObjectProperty&lt;span&gt;from&lt;/span&gt; kivy.lang &lt;span&gt;import&lt;/span&gt; BuilderBuilder.load_string(&lt;span&gt;&#x27;&#x27;&#x27;&amp;lt;CustomLayout&amp;gt;    canvas.before:        BorderImage:            # BorderImage behaves like the CSS BorderImage            border: 10, 10, 10, 10            texture: self.background_image.texture            pos: self.pos            size: self.size&amp;lt;RootWidget&amp;gt;    CustomLayout:        size_hint: .9, .9        pos_hint: &#123;&#x27;center_x&#x27;: .5, &#x27;center_y&#x27;: .5&#125;        rows:1        Label:            text: &quot;I don&#x27;t suffer from insanity, I enjoy every minute of it&quot;            text_size: self.width-20, self.height-20            valign: &#x27;top&#x27;        Label:            text: &quot;When I was born I was so surprised; I didn&#x27;t speak for a year and a half.&quot;            text_size: self.width-20, self.height-20            valign: &#x27;middle&#x27;            halign: &#x27;center&#x27;        Label:            text: &quot;A consultant is someone who takes a subject you understand and makes it sound confusing&quot;            text_size: self.width-20, self.height-20            valign: &#x27;bottom&#x27;            halign: &#x27;justify&#x27;&#x27;&#x27;&#x27;&lt;/span&gt;)&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;CustomLayout&lt;/span&gt;&lt;span&gt;(GridLayout)&lt;/span&gt;:&lt;/span&gt;    background_image = ObjectProperty(        Image(            source=&lt;span&gt;&#x27;../examples/widgets/sequenced_images/data/images/button_white_animated.zip&#x27;&lt;/span&gt;,            anim_delay=&lt;span&gt;.1&lt;/span&gt;))&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;RootWidget&lt;/span&gt;&lt;span&gt;(FloatLayout)&lt;/span&gt;:&lt;/span&gt;    &lt;span&gt;pass&lt;/span&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MainApp&lt;/span&gt;&lt;span&gt;(App)&lt;/span&gt;:&lt;/span&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;build&lt;/span&gt;&lt;span&gt;(self)&lt;/span&gt;:&lt;/span&gt;        &lt;span&gt;return&lt;/span&gt; RootWidget()&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;&#x27;__main__&#x27;&lt;/span&gt;:    MainApp().run()\n要理解这里到底发生了什么，得从第 13 行开始看：\ntexture: self.background_image.texture\n这里是指定让边界图像 BorderImage 的纹理属性在背景图像 background_image 的纹理属性发生更新的时候进行同步更新。背景图像 background_image 属性的定义是在第 40 行：\nbackground_image = ObjectProperty(...\n这一句代码是将背景图像 background_image 设置成一个对象属性 ObjectProperty，这样就可以在其中添加一个图形控件 Image。图像控件有一个纹理属性（texture property）；在前面的 self.background_image.texture 这句代码中，就是建立了一个名为 texture 的到这个属性的引用。图形控件 Image 支持动画（animation）：随着动画的改变，图像的纹理会同步更新，在这个过程中，边界图像 BorderImage 指令的 texture 纹理属性也会同步更新。\n（译者注：texture of BorderImage instruction，这里我对 instruction 的翻译应该是不太对的，不过我还没理清楚该怎么表述。）\n也可以直接传递自定义数据到纹理属性 texture。更多细节可以参考纹理 Texture 的文档。\n网状布局嗯，看看这个过程如何扩展是很有趣的。\n尺寸和位置度量Kivy 的默认长度单位是像素 pixel，所有的尺寸和位置都用这个单位来表达。你也可以用其他单位来衡量，在跨平台多种设备的时候，这有助于实现更好的连续性体验（这些设备会把尺寸自动转换到像素）。\n可用单位包括 pt， mm，cm, inch， dp and sp。可以在度量文档 metrics 中了解更多相关内容。\n你还可以探索一下屏幕模块 screen的用法，这个可以模拟出不同设备的屏幕，供测试应用。\n使用屏幕管理器进行屏幕分割如果你的应用程序要包含多个程序，那可能就需要从一个屏幕 Screen到另一个屏幕 Screen提供一个导航的通道。幸运的是，正好有一个屏幕管理器类ScreenManager，这个类允许你来定义分开的各个屏幕，设置屏幕管理器的TransitionBase就可以实现从一个屏幕到另一个屏幕的跳转导航。\n图形英文原文\n译者前言这一章节比前两章节简单很多，翻译的也比较顺了。\n简介CanvasKivy中控件图形呈现是使用Canvas完成的，可以将其看作一个无限的绘图板，也是一组绘图指令。有很多种绘图指令都可以应用或者添加到你的Canvas伤，不过总体上分为两类：\n\ncontext instructions环境指令\nvertex instructions顶点指令\n\ncontext instructions环境指令不绘制任何图形，但会改变vertex instructions顶点指令的绘制结果。\nCanvas都包含两个指令分支。分别是canvas.before和canvas.after 这两种指令群。这两组指令分别在Canvas图形绘制前后执行。 绘制前的会被绘制的图形覆盖掉，绘制后的会覆盖在图形上层。这些指令都在用户对它们读取之后才会被创建。\n要对一个控件添加Canvas绘图指令，需要使用Canvas环境指令：\nclass MyWidget(Widget):    def __init__(self, **kwargs):        super(MyWidget, self).__init__(**kwargs)        with self.canvas:            # add your instruction for main canvas here            # 这里是增加一个座位主绘图的指令        with self.canvas.before:            # you can use this to add instructions rendered before            # 这里可以在绘图之前添加指令        with self.canvas.after:            # you can use this to add instructions rendered after            # 这里可以在绘图之后添加指令\n环境指令环境指令是用于操作opengl环境。 可以旋转，翻译和缩放画布。还可以附加纹理或更改绘图颜色。下面这段代码里面的是最常用到的更改颜色的指令，其他的环境指令也都很有用处：\nwith self.canvas.before:    Color(1, 0, .4, mode=&#x27;rgb&#x27;)\n绘图指令绘图指令可简可繁，最简单的比如画一个多边形，更复杂的比如绘制网格或者贝塞尔曲线都可以：\nwith self.canvas:   # draw a line using the default color   # 用默认颜色画一条线   Line(points=(x1, y1, x2, y2, x3, y3))   # lets draw a semi-transparent red square   # 接下来画一个半透明的红方块   Color(1, 0, 0, .5, mode=&#x27;rgba&#x27;)   Rectangle(pos=self.pos, size=self.size)\n操作指令有时候可能需要把之前添加到Canvas绘图上的指令进行更改或者删除，这可以有很多种办法，要根据具体需求来选择：\n可以给指令创建一个引用然后对其进行更新：\nclass MyWidget(Widget):    def __init__(self, **kwargs):        super(MyWidget, self).__init__(**kwargs)        with self.canvas:            self.rect = Rectangle(pos=self.pos, size=self.size)        self.bind(pos=self.update_rect)        self.bind(size=self.update_rect)    def update_rect(self, *args):        self.rect.pos = self.pos        self.rect.size = self.size\n或者也可以清空Canvas画布然后重新画：\nclass MyWidget(Widget):    def __init__(self, **kwargs):        super(MyWidget, self).__init__(**kwargs)        self.draw_my_stuff()        self.bind(pos=self.draw_my_stuff)        self.bind(size=self.draw_my_stuff)    def draw_my_stuff(self):        self.canvas.clear()        with self.canvas:            self.rect = Rectangle(pos=self.pos, size=self.size)\n要注意更新指令的方法是更好的选择，因为这样减少了开销，并且避免了创建新指令。\n","tags":["Python"]},{"title":"Ubuntu部署记录","url":"/2024/07/09/Ubuntu%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/","content":"ubuntu-20.04.6-live-server-amd64安装部署1. 制作一个U盘启动盘Ubuntu iso下载地址\n清华大学开源软件镜像站\n官网下载\n制作工具下载\n推荐使用rufus，因为免费\n安装地址\n准备一个U盘，插上U盘，打开rufus，选择镜像文件，具体配置如下：\n\n然后点击开始就行了\n等U盘制作完成就可以开始下一步了\n2. 设置开机启动项对于不同的电脑，开机boot方法不同，根据主板品牌，大致如下：\n笔记本电脑主要按键：Delete, ESC, F1, F2, F10\n品牌笔记本电脑ibm/thinkpad（冷开机按f1，部分新型号可以在重新启动时启动按f1，少数机型是Fn+F1或F2）\n惠普hp（启动和重新启动时按f2或者F10，或者先按ESC再按F10）\n索尼sony（启动和重新启动时按f2或者ASSIST键）\n戴尔dell（启动和重新启动时按f2）\n宏碁acer（启动和重新启动时按f2）\n东芝toshiba（冷开机时按esc然后按f1，或者F2）\n惠普康柏hp compaq（开机到右上角出现闪动光标时按f10，或者开机时按f10）\n富士通fujitsu（启动和重新启动时按f2）\n三星Samsung（启动和重新时按f2）\n联想Lenovo(启动时按F2或Fn+F2，部分机型需关机时按Novo恢复键)\n华硕Asus（启动时按F2）\n微星msi（启动时按Delete）\n神舟Hasee（启动时按F2）\n小米、海尔、明基、技嘉、方正、清华同方、雷神、未来人类、外星人、七喜等品牌笔记本也是F2\n台式电脑主要按键：DEL, ESC, F1, F2, F8, F9, F10, F12\n组装机不同主板台式机Award BIOS：按“Del”键\nAMI BIOS：按“Del”或“ESC”键\nPhoenix BIOS：按“F2”键\n品牌台式机ibm/thinkpad（冷开机按f1，部分新型号可以在重新启动时启动按f1）\n惠普hp（启动和重新启动时按f2或者F10）\n索尼sony（启动和重新启动时按f2）\n戴尔dell（启动和重新启动时按f2）\n宏碁acer（启动和重新启动时按f2）\n东芝toshiba（冷开机时按esc然后按f1）\n惠普康柏hp compaq（开机到右上角出现闪动光标时按f10，或者开机时按f10）\n富士通fujitsu（启动和重新启动时按f2）\n三星Samsung（启动和重新时按f2）\n联想Lenovo(启动时按F2或Fn+F2，部分机型需关机时按Novo恢复键)\n华硕Asus（启动时按F2）\n大多数中国大陆国产和台湾品牌（启动和重新启动时按f2）\n进入BIOS之后，设置启动方式为移动盘启动用u盘装系统bios怎么设置u盘启动_快启动官网 (kqidong.com)\n我测试的时候使用的电脑不支持UEFI,所以选择的是下面这个：（Remouable Dev.移动盘启动)\n\n设置好之后，按F10进行保存重启，进入下一步\n3. 系统安装参考文章\n4. 设置允许ssh使用22端口连接参考文章\nubuntu-20.04.6-desktop-amd64.iso参考文章\n桌面版安装比较简单，制作U盘启动盘前面有样例，故不在记录\n使用宝塔面板进行管理宝塔面板官网\n安装脚本\nwget -O install.sh https://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh ed8484bec\n在ubuntu命令行中运行即可安装\n使用1panel面板进行管理1panel官网链接\ncurl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh &amp;&amp; sudo bash quick_start.sh\n","tags":["系统部署"]},{"title":"hexo——安装部署使用","url":"/2024/03/09/hexo%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E4%BD%BF%E7%94%A8/","content":"Hexo安装可以参照hexo官网给出的文档，官网文档：https://hexo.io/zh-cn/docs/\n安装前需要先安装git工具和nodejs\n\ngit工具 官网： https://git-scm.com/download/win\nnodejs 下载地址：https://registry.npmmirror.com/binary.html?path=node/（淘宝镜像-国内官网访问慢）\n\n安装hexo（全局）\n$ npm install -g hexo-cli\n安装hexo（在当前文件夹）\n$ npm install hexo\nHexo网站搭建使用以下命令进行建站\n$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install\n完成以上命令后，修改folder目录下的_config.yml文件\n# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Site 站点信息title: zdx-1subtitle: &#x27;&#x27;description: 个人学习的一些笔记记录，只用于学习交流keywords: zdx-1author: Dexin Zhanglanguage: zh-CNtimezone: &#x27;&#x27;# URL 你的网站地址源## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;url: http://zdx-1.github.iopermalink: :year/:month/:day/:title/permalink_defaults:pretty_urls:  trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks  trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link:  enable: true # Open external links in new tab  field: site # Apply to the whole site  exclude: &#x27;&#x27;filename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truesyntax_highlighter: highlight:  line_number: true  auto_detect: false  tab_replace: &#x27;&#x27;  wrap: true  hljs: falseprismjs:  preprocess: true  line_number: true  tab_replace: &#x27;&#x27;# Home page setting# path: Root path for your blogs index page. (default = &#x27;&#x27;)# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator:  path: &#x27;&#x27;  per_page: 10  order_by: -date# Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Metadata elements## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/metameta_generator: true# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss## updated_option supports &#x27;mtime&#x27;, &#x27;date&#x27;, &#x27;empty&#x27;updated_option: &#x27;mtime&#x27;# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Include / Exclude file(s)## include:/exclude: options only apply to the &#x27;source/&#x27; folderinclude:exclude:ignore:# Extensions 设置使用的主题## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: 3-hexo# Deployment 上传到github的方式，上传到哪个分支## Docs: https://hexo.io/docs/one-command-deploymentdeploy:  type: git  repo: git@github.com:zdx-1/zdx-1.github.io.git  branch: main\nHexo配置git上传插件$ npm install hexo-deployer-git --save\nHexo上传github清理缓存，生成文件，上传文件\n$ hexo cl &amp;&amp; hexo g &amp;&amp; hexo d\n清理缓存，生成文件，本地预览\n$ hexo cl &amp;&amp; hexo g &amp;&amp; hexo s\n","categories":["Hexo"],"tags":["hexo使用"]},{"title":"NanUI使用文档","url":"/2024/07/11/NanUI%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/","content":"NanUI简介NanUI是WinForm UI库的一种，它可以让应用程序里面内嵌html+css写的页面，可以样式更加多样化。\n项目库地址：https://gitee.com/dotnetchina/NanUI.git\n示例代码\nMinimal WinFormium App - 介绍 WinFormium 的基本用法。\n\n🔗 第三方库引用和工具集\nCEF - https://bitbucket.org/chromiumembedded/cef\nXilium.CefGlue - https://gitlab.com/xiliumhq/chromiumembedded/cefglue\nVanara.Library - https://github.com/dahall/Vanara/\nVortice.Windows - https://github.com/amerkoleci/Vortice.Windows\nSkiaSharp - https://github.com/mono/SkiaSharp\nReact - https://github.com/facebook/react\nReact-Router - https://github.com/remix-run/react-router\nVite - https://github.com/vitejs/vite\n\n🖥️ 环境要求开发环境\n\n.NET Framework 4.6.2 或更高版本 / .NET 6.0 或更高版本\nVisual Studio 2019 或更高版本（强烈建议使用 VS2022）\n\n部署环境\n\nMicrosoft Windows 7 Service Pack 1 或更高版本\n.Net Framework 4.6.2 或更高版本\n.NET 6.0 需要 Windows 7 Service Pack 1 或更高版本\n.NET 7.0/8.0 需要 Windows 10 或 Windows 11\n\n这是一个 仅限 Windows 的框架，所以它目前不能在 Linux 或者 MacOS 环境运行。\n支持的最低 Windows 版本是 Windows 7 Service Pack 1，并且 Windows 7 不支持某些功能（例如 DirectComposition 离屏渲染）。\n🧰 入门按照以下步骤即可创建一个简单的 WinFormium 应用程序：\n1. 通过默认模板创建一个 WinForm 应用程序。\n2. 安装 WinFormium NuGet 包\n打开 NuGet 包管理器来安装或使用 NuGet 包管理器控制台，然后运行以下命令来安装 WinFormium nuget 包：\nPM&gt; Install-Package NetDimension.NanUI\n安装 WinFormium 所依赖的 Chromium Embedded Framework 依赖项：\nPM&gt; Install-Package NetDimension.NanUI.Runtime\nCEF 运行库巨大，再加上众所周知的原因，中国内地玩家请自行设置 NuGet 使用国内镜像。\n\nAzure CDN - https://nuget.cdn.azure.cn/v3/index.json\n华为云 - https://repo.huaweicloud.com/repository/nuget/v3/index.json\n\n3. 一个基本的 WinFormium 应用程序需要以下代码：\n按如下示例修改 Program.cs 文件中的代码：\nusing WinFormium;class Program&#123;    [STAThread]    static void Main(string[] args)    &#123;        var builder = WinFormiumApp.CreateBuilder();        builder.UseWinFormiumApp&lt;MyApp&gt;();        var app = builder.Build();        app.Run();    &#125;&#125;\n创建一个类继承 WinFormiumStartup 来配置应用程序：\nusing WinFormium;class MyAPP : WinFormiumStartup&#123;    protected override MainWindowCreationAction? UseMainWindow(MainWindowOptions opts)    &#123;        // 设置应用程序的主窗体        return opts.UseMainFormium&lt;MyWindow&gt;();    &#125;    protected override void WinFormiumMain(string[] args)    &#123;        // Main函数中的代码应该在这里，该函数只在主进程中运行。这样可以防止子进程运行一些不正确的初始化代码。        ApplicationConfiguration.Initialize();    &#125;    protected override void ConfigurationChromiumEmbedded(ChromiumEnvironmentBuiler cef)    &#123;        // 在此处配置 Chromium Embedded Framwork    &#125;    protected override void ConfigureServices(IServiceCollection services)    &#123;        // 在这里配置该应用程序的服务    &#125;&#125;\n创建一个类实现 Formium，用于配置应用程序的主窗口：\nusing WinFormium;using WinFormium.Forms;class MyWindow : Formium&#123;    public MyWindow()    &#123;        Url = &quot;https://www.google.com&quot;;    &#125;    protected override FormStyle ConfigureWindowStyle(WindowStyleBuilder builder)    &#123;        // 此处配置窗口的样式和属性，或留空以使用默认样式        var style = builder.UseSystemForm();        style.TitleBar = false;        style.DefaultAppTitle = &quot;My first WinFomrim app&quot;;        return style;    &#125;&#125;\n4. 生成并运行你的第一个 WinFormium 应用程序\n","categories":["WinForm"],"tags":["WinForm"]},{"title":"Hello World","url":"/2024/03/09/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\nMore info: Writing\nRun server$ hexo server\nMore info: Server\nGenerate static files$ hexo generate\nMore info: Generating\nDeploy to remote sites$ hexo deploy\nMore info: Deployment\n","categories":["Hexo"],"tags":["hexo使用"]},{"title":"hexo存在问题解决方案","url":"/2024/03/10/hexo%E5%AD%98%E5%9C%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","content":"Hexo主题开发经验杂谈 | MARKSZのBlog (molunerfinn.com)\n注意事项../../source/images/${filename}\n在使用pandoc本地导出文件后，hexo-renderer-marked存在bug，需要在清除导出使用pandoc路径后执行npm命令二次安装\nnpm install hexo-renderer-marked --save\n否则图片，公式在生成的静态网站上显示失败，且排错难以找到原因（大概率命名冲突，覆盖重写了一些文件）\nHEXO插件问题添加一行数据\n123456延迟还能接受​\n如果图片，公式显示错误npm install hexo-renderer-marked --save\n图片显示关联插件npm install hexo-renderer-marked --save\n该插件在卸载情况会出现图片不显示\nHEXO插件问题Hexo更改主题后启动服务器，界面显如下字符:extends includes/layout.pug block content include includes/recent-posts.pug include includes/partial\n解决方案:执行如下命令#下载对应的插件驱动npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive#清除缓存hexo clean#生成静态文件即可hexo g\nHEXO公式无法正常显示更换Hexo的markdown渲染引擎先后执行下面的两条命令，第一条表示将默认的渲染引擎hexo-renderer-marked卸载，第二条命令是安装hexo-renderer-kramed渲染引擎，此渲染引擎修改了hexo-renderer-marked渲染引擎的一些bug。\nnpm uninstall hexo-renderer-marked --savenpm install hexo-renderer-kramed --savenpm install hexo-math --save\n修改node_modules\\kramed\\lib\\rules\\inline.js文件hexo-renderer-marked渲染引擎仍然存在一些语义冲突问题，到博客的根目录下，找到node_modules\\kramed\\lib\\rules\\inline.js，把第11行的escape变量的值做相应的修改：\n//  escape: /^\\\\([\\\\`*&#123;&#125;\\[\\]()#$+\\-.!_&gt;])/,  escape: /^\\\\([`*\\[\\]()#$+\\-.!_&gt;])/,\n这一步是在原基础上取消了对\\,{,}的转义(escape)。\n同时把第20行的em变量也要做相应的修改。\n//  em: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,  em: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n在主题中开启mathjax开关到博客根目录下，找到themes/next/_config.yml，把math默认的flase修改为true，具体如下：\n# Math Equations Render Supportmath:  enable: true  per_page: true  engine: mathjax\n# 数学公式显示问题mathjax:  tags: none # 或 &#x27;ams&#x27; 或 &#x27;all&#x27;  single_dollars: true # 启用单个美元符号作为内联（行内）数学公式定界符  cjk_width: 0.9 # 相对 CJK 字符宽度  normal_width: 0.6 # 相对正常（等宽）宽度  append_css: true # 将 CSS 添加到每个页面  every_page: true # 如果为 true，那么无论每篇文章的前题中的 `mathjax` 设置如何，每页都将由 mathjax 呈现  per_page: true  cdn: //cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML\n在文章的Front-matter里打开mathjax开关如果你写的文章里面用到了数学公式，需要在文章Front-matter里打开mathjax开关。如果用不到数学公式，则不需要管它。\n---title: index.htmldate: 2018-12-5 01:30:30tags:mathjax: true--\n重启hexohexo clean #清除缓存文件hexo g -d  #生成并部署hexo\n到这里，hexo中无法显示数学公式的问题就得到解决了！\n如果还不行\n【个人网站搭建】hexo框架下支持显示MathJax数学公式_hexo使用mathjax显示公式-CSDN博客\nHexo博客数学公式显示 | Dreamland (monkey0105.github.io)\n参考文献：成功解决在hexo中无法显示数学公式的问题 | 初心 (runninggump.github.io)\n在Hexo中渲染MathJax数学公式\n","categories":["Hexo"],"tags":["hexo使用"]},{"title":"js基本语法&vue基本语法","url":"/2024/04/17/js%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95-vue%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/","content":"&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;JavaScript学习&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;!-- 对象的增删改查 --&gt;    &lt;script&gt;        // 创建一个对象        let obj=&#123;&#125;        let obj2=&#123;&#125;        // 添加属性        obj.a=1        console.log(obj)        obj2.a=2        console.log(obj2)        // 删除属性        delete obj.a        console.log(obj)        // 添加属性        let user=&#123;            name:&#x27;张三&#x27;,            age:18,            sex:&#x27;男&#x27;        &#125;        // 添加属性        user[&quot;address&quot;]=&quot;北京&quot;        console.log(user)        console.log(&quot;深拷贝1&quot;)        let teacher=&#123;&#125;        // 把user里面的属性转给teacher,安全的对象转移方式        Object.assign(teacher,user) //深拷贝        console.log(&quot;user===&quot;,user)        console.log(&quot;teacher===&quot;,teacher)        // 深拷贝方式2        console.log(&quot;深拷贝2&quot;)        let teacher1=JSON.parse(JSON.stringify(user))        console.log(&quot;teacher1===&quot;,teacher1)        teacher1.xxx=&quot;测试&quot;        console.log(&quot;teacher1===&quot;,teacher1)        console.log(&quot;user===&quot;,user)        // 深拷贝方式3        console.log(&quot;深拷贝3&quot;)        let teacher2=Object.assign(&#123;&#125;,user)        console.log(&quot;teacher2===&quot;,teacher2)        teacher2.xxx=&quot;测试&quot;        console.log(&quot;teacher2===&quot;,teacher2)        console.log(&quot;user===&quot;,user)        // 浅拷贝        console.log(&quot;浅拷贝&quot;)        let teacher3=teacher2 //浅拷贝        teacher3.yyy=&quot;测试&quot; // teacher3和teacher2指向同一个对象        console.log(&quot;teacher3===&quot;,teacher3)        console.log(&quot;teacher2===&quot;,teacher2)        //从对象中拿到属性        let user1=&#123;            name:&#x27;张三&#x27;,            age:18,            sex:&#x27;男&#x27;        &#125;        console.log(&quot;从对象中拿到属性&quot;)        // 三种方式        console.log(&quot;方式1&quot;)        console.log(user1.name)        console.log(&quot;方式2&quot;)        console.log(user1[&quot;name&quot;])        console.log(&quot;方式3&quot;)        console.log(&quot;解构语法&quot;)        let &#123;name&#125; = user1        console.log(name)        let a=null        //let c=a.x        //console.log(&quot;c===&quot;,c)        console.log(&quot;拿到空数据&quot;)        console.log(&quot;使用?.解决拿到空数据报错问题&quot;)        let b=a ?.x        console.log(&quot;b===&quot;,b)        console.log(&quot;使用??解决拿到空数据报错问题&quot;)        let d=null        let e=1        let f= d ?? e        console.log(&quot;f===&quot;,f)        console.log(localStorage.getItem(&quot;user&quot;))        let n=JSON.parse(localStorage.getItem(&quot;user&quot;)??&quot;&#123;&#125;&quot;)        console.log(&quot;n===&quot;,n)        console.log(&quot;使用||解决拿到空数据报错问题&quot;)        let res;        let res1=res||&#123;&#125;        console.log(res1.name)        console.log(&quot;左边为null则取右边的值&quot;)        a=1        b=null        console.log(a ??= b)        let jsObj=&#123;            name:&quot;张三&quot;,            age:18,            sex:&quot;男&quot;,            1:&quot;1&quot;,            2:&quot;2&quot;        &#125;        console.log(jsObj[1])        // debugger        for (const key in jsObj)&#123;            console.log(&quot;key===&quot;,key)            jsObj[key]+=&quot;---测试&quot;            console.log(&quot;jsObj[key]===&quot;,jsObj[key])            if (key===&quot;name&quot;)&#123;                console.log(&quot;name===&quot;,jsObj[key])            &#125;        &#125;    &lt;/script&gt;    &lt;!-- 数组的增删改查 --&gt;    &lt;script&gt;        let arr=new Array()        arr.push(1)        console.log(arr)        let arr1=[1,2,3,4,5]        console.log(arr1)        //arr增加元素        console.log(&quot;arr增加元素&quot;)        arr1[0]=1        console.log(arr1)        arr1.push(2)        console.log(arr1)        //修改元素        console.log(&quot;修改元素&quot;)        arr1[0]=3        console.log(arr1)        //删除元素        console.log(&quot;删除元素&quot;)        console.log(&quot;pop尾部删除&quot;)        arr1.pop()        console.log(arr1)        console.log(&quot;shift头部删除&quot;)        arr1.shift()        console.log(arr1)        console.log(&quot;splice左闭右开区间删除&quot;)        arr1.splice(0,2)        console.log(arr1)        //切片        console.log(&quot;切片--截取元素，左闭右开&quot;)        let arrNew=[1,2,3]        let arrNew1=arrNew.slice(0,2)        console.log(&quot;arrNew===&quot;,arrNew)        console.log(&quot;arrNew1===&quot;,arrNew1)        //合并数组        console.log(&quot;合并数组&quot;)        let arrNew2=[1,2,3]        let arrNew3=[4,5,6]        let arrNew4=arrNew2.concat(arrNew3)        console.log(&quot;arrNew2===&quot;,arrNew2)        console.log(&quot;arrNew3===&quot;,arrNew3)        console.log(&quot;arrNew4===&quot;,arrNew4)        //split        console.log(&quot;split&quot;)        let str=&quot;1,2,3,4,5&quot;        let arrNew5=str.split(&quot;,&quot;)        console.log(&quot;arrNew5===&quot;,arrNew5)        str=&quot;ceshi,shigfd&quot;        console.log(str.split(&quot;,&quot;))        //join        console.log(&quot;join&quot;)        let arrNew6=[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;]        console.log(arrNew6.join(&quot;,&quot;))        console.log(arrNew6.join(&quot;&quot;))        console.log(arrNew6.join(&quot;---&quot;))        //sort 排序排的是字典序 unicode码        console.log(&quot;sort 排序&quot;)        let arrNew7=[1,2,10,15,22,20,11,8,9,6,5]        console.log(arrNew7.sort())        console.log(&quot;按照数值大小排序&quot;)        console.log(arrNew7.sort((a,b)=&gt;a-b))        console.log(arrNew7.sort((a,b)=&gt;b-a))        //reverse        console.log(&quot;reverse&quot;)        console.log(arrNew7.reverse())        console.log(arrNew7.sort((a,b)=&gt;b-a))//降序        //indexOf        console.log(&quot;indexOf&quot;)        let arrNew8=[1,2,3,4,5]        console.log(arrNew8.indexOf(3))//没有返回-1，有返回下标        //filter        console.log(&quot;filter&quot;)        let arrNew9=[1,2,3,4,5]        console.log(&quot;查找大于3的元素&quot;)        let arrNew10=arrNew9.filter(item=&gt;item&gt;3)        console.log(arrNew10)        let arrNew11=[&#123;name:&quot;张三&quot;,age:18&#125;,&#123;name:&quot;李四&quot;,age:19&#125;,&#123;name:&quot;王五&quot;,age:20&#125;]        console.log(&quot;查找大于18岁的元素&quot;)        let arrNew12=arrNew11.filter(item=&gt;item.age&gt;18)        console.log(arrNew12)        //删除数组的某一项        console.log(&quot;删除数组的某一项&quot;)        let arrNew13=[&#123;name:&quot;张三&quot;,age:18&#125;,&#123;name:&quot;李四&quot;,age:19&#125;,&#123;name:&quot;王&quot;,age:20&#125;]        console.log(arrNew13)        let arrNew14= arrNew13.filter(item=&gt;item.name!==&quot;王&quot;)        console.log(arrNew14)        //find        console.log(&quot;find&quot;)        let arrNew15=[&#123;name:&quot;张三&quot;,age:18&#125;,&#123;name:&quot;李四&quot;,age:19&#125;,&#123;name:&quot;王五&quot;,age:20&#125;]        console.log(&quot;查找李四&quot;)        let arrNew16=arrNew15.find(item=&gt;item.name===&quot;李四&quot;)        console.log(arrNew16)        //findIndex        console.log(&quot;findIndex&quot;)        let arrNew17=[&#123;name:&quot;张三&quot;,age:18&#125;,&#123;name:&quot;李四&quot;,age:19&#125;,&#123;name:&quot;王五&quot;,age:20&#125;]        console.log(&quot;查找李四的下标&quot;)        let arrNew18=arrNew17.findIndex(item=&gt;item.name===&quot;李四&quot;)        console.log(arrNew18)        //map        console.log(&quot;map&quot;)        let arrNew19=[&#123;name:&quot;张三&quot;,age:18&#125;,&#123;name:&quot;李四&quot;,age:19&#125;,&#123;name:&quot;王五&quot;,age:20&#125;]        console.log(&quot;遍历数组&quot;)        let arrNew20=arrNew19.map(item=&gt;&#123;return &#123;name:item.name, age:item.age+1&#125;&#125;)        console.log(arrNew20)        console.log(&quot;遍历数组，只取name&quot;)        let arrNew21=arrNew19.map(item=&gt;&#123;return item.name&#125;)        console.log(arrNew21)        console.log(&quot;遍历数组，只取name，并拼接&quot;)        let arrNew22=arrNew19.map(item=&gt;&#123;return item.name+&quot;---&quot;&#125;)        console.log(arrNew22)        let arrNew23=arrNew19.map(item=&gt;item.name+&quot;---&quot;)        console.log(arrNew23)        //forEach        console.log(&quot;forEach&quot;)        let arrNew24=[&#123;name:&quot;张三&quot;,age:18&#125;,&#123;name:&quot;李四&quot;,age:19&#125;,&#123;name:&quot;王五&quot;,age:20&#125;]        console.log(&quot;遍历数组&quot;)        arrNew24.forEach(item=&gt;&#123;console.log(item)&#125;)        //reduce        console.log(&quot;reduce&quot;)        let arrNew25=[1,2,3,4,5]        console.log(&quot;求和&quot;)        //pre 前一个值 cur 当前值        let sum=arrNew25.reduce((pre,cur)=&gt;&#123;return pre+cur&#125;,0)        console.log(sum)        //统计        console.log(&quot;统计出现的次数&quot;)        let count=arrNew24.reduce((pre,cur)=&gt;&#123;            if (cur.name in pre)&#123;                pre[cur.name]++            &#125;else&#123;                pre[cur.name]=1            &#125;            return pre        &#125;,&#123;&#125;)        console.log(count)        //json        let json=&#123;            &quot;name&quot;:&quot;张三&quot;,            &quot;age&quot;:18,            &quot;sex&quot;:&quot;男&quot;,            &quot;address&quot;:&#123;                &quot;province&quot;:&quot;四川&quot;,                &quot;city&quot;:&quot;成都&quot;            &#125;,            &quot;hobby&quot;:[&quot;吃饭&quot;,&quot;睡觉&quot;,&quot;打豆豆&quot;],            &quot;children&quot;:[                &#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:18&#125;,                &#123;&quot;name&quot;:&quot;李四&quot;,&quot;age&quot;:19&#125;,                &#123;&#x27;name&#x27;:&quot;王五&quot;,&quot;age&quot;:20&#125;            ]        &#125;        console.log(json)        console.log(&quot;[]是引用类型，&#123;&#125;是值类型&quot;)        //http://www.json.cn/ json验证    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;vue学习&lt;/title&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;&gt;&lt;/script&gt;    &lt;style&gt;        .active&#123;            color: red;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;app&quot;&gt;        &lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;        &lt;div&gt;            &#123;&#123;num&#125;&#125; &lt;!--运算会有问题尽量不要在这里做运算--&gt;        &lt;/div&gt;        &lt;div&gt;            &#123;&#123;bool&#125;&#125;        &lt;/div&gt;        &lt;div&gt;            &#123;&#123;bool ? &#x27;a&#x27;:&#x27;b&#x27;&#125;&#125;        &lt;/div&gt;        &lt;div&gt;            &#123;&#123;bool2 ? &#x27;a&#x27;:&#x27;b&#x27;&#125;&#125;        &lt;/div&gt;        &lt;div&gt;            &#123;&#123;arr[0].name&#125;&#125;        &lt;/div&gt;        &lt;div&gt;            &#123;&#123;arr.find(item=&gt;item.name===&quot;张三&quot;)&#125;&#125;        &lt;/div&gt;        &lt;div v-html=&quot;htmlStr&quot;&gt;&lt;a&gt;v-html渲染&lt;/a&gt;&lt;/div&gt;        &lt;div&gt;            &lt;input type=&quot;text&quot; v-model=&quot;value&quot;&gt;            &lt;a&gt;v-model是双向绑定的&lt;/a&gt;            &lt;div&gt;&#123;&#123;value&#125;&#125;&lt;/div&gt;        &lt;/div&gt;        &lt;div&gt;            &lt;div v-if=&quot;color===&#x27;red&#x27;&quot;&gt;红色&lt;/div&gt;            &lt;div v-if=&quot;color===&#x27;绿色&#x27;&quot;&gt;绿色&lt;/div&gt;            &lt;div v-else-if=&quot;color===&#x27;蓝色&#x27;&quot;&gt;蓝色&lt;/div&gt;            &lt;div v-else&gt;黑色&lt;/div&gt;        &lt;/div&gt;        &lt;div&gt;            &lt;a v-bind:href=&quot;url&quot;&gt;搜索一下&lt;/a&gt;            &lt;a&gt;v-bind:href可以简写成:href&lt;/a&gt;            &lt;a :href=&quot;url&quot;&gt;搜索一下&lt;/a&gt;        &lt;/div&gt;        &lt;div id=&quot;von&quot; style=&quot;width: 100px;height: 100px;background-color: red;&quot; @click=&quot;clickDiv&quot;&gt;            &lt;a id=&quot;von1&quot; &gt;v-on绑定事件简写@&lt;/a&gt;        &lt;/div&gt;        &lt;div&gt;            &lt;a v-for=&quot;item in fruits&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/a&gt;&lt;br/&gt;            &lt;a v-for=&quot;(item,index) in fruits&quot;&gt;&#123;&#123;index+1&#125;&#125;:&#123;&#123;item&#125;&#125;&lt;/a&gt;&lt;br/&gt;            &lt;a v-for=&quot;(item,index) in fruitsS&quot;&gt;&#123;&#123;index+1&#125;&#125;:&#123;&#123;item.name&#125;&#125;:&#123;&#123;item.price&#125;&#125;&lt;/a&gt;&lt;br/&gt;            &lt;a v-for=&quot;(item,index) in fruitsS&quot; v-bind:key=&quot;index&quot;&gt;&#123;&#123;index+1&#125;&#125;:&#123;&#123;item.name&#125;&#125;:&#123;&#123;item.price&#125;&#125;&lt;/a&gt;        &lt;/div&gt;        &lt;div style=&quot;display: flex;margin-top: 30px;&quot;&gt;            &lt;select v-model=&quot;cur_menu&quot;&gt;                &lt;option v-for=&quot;item in menu&quot; :key=&quot;item&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/option&gt;            &lt;/select&gt;            &lt;div style=&quot;padding: 0 10px&quot; :class=&quot;&#123;&#x27;active&#x27;:item ===cur_menu&#125;&quot;                 v-for=&quot;item in menu&quot; :key=&quot;item&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;script&gt;        var app=new Vue(&#123;            el:&quot;#app&quot;,   // 绑定元素            data: &#123;                msg: &quot;hello vue&quot;,                num:1,                bool:true,                bool2:false,                arr:[&#123;name:&quot;张三&quot;,age:18&#125;],                htmlStr:&quot;&lt;a href=&#x27;http://www.baidu.com&#x27;&gt;百度&lt;/a&gt;&lt;br/&gt;&lt;strong&gt;v-html渲染&lt;/strong&gt;&quot;,                value:&quot;&quot;,                color:&#x27;red&#x27;,                url:&quot;https://www.baidu.com&quot;,                fruits:[&quot;苹果&quot;,&quot;香蕉&quot;,&quot;西瓜&quot;],                fruitsS:[&#123;name:&quot;苹果&quot;,price:5&#125;,&#123;name:&quot;香蕉&quot;,price:3&#125;,&#123;name:&quot;西瓜&quot;,price:10&#125;],                menu:[&quot;首页&quot;,&quot;详情&quot;,&quot;购物车&quot;,&quot;我的&quot;],                cur_menu:&#x27;首页&#x27;,            &#125;,            methods:&#123;                clickDiv()&#123;                    console.log(&quot;点击了div&quot;)                    let color=document.getElementById(&quot;von&quot;).style.backgroundColor                    document.getElementById(&quot;von&quot;).style.backgroundColor= color === &quot;red&quot; ? &quot;green&quot; : &quot;red&quot;                    let color1=document.getElementById(&quot;von1&quot;).style.backgroundColor                    document.getElementById(&quot;von1&quot;).style.backgroundColor= color1 === &quot;red&quot; ? &quot;green&quot; : &quot;red&quot;                &#125;            &#125;        &#125;)    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;\n","categories":["Vue2&&JavaScript"],"tags":["vue&&JavaScript"]},{"title":"python网络爬虫","url":"/2024/07/16/python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/","content":"第1章 爬虫介绍爬虫用途\n爬虫分类按照使用场景：通用爬虫全网爬虫从一些种子url扩展到整个WEB爬虫，是搜索引擎的重要组成部分\n特点：\n爬取范围广\n对硬件要求高（CPU,存储空间）\n更新频率低\n\n聚焦爬虫主题爬虫只爬取相关主题页面\n特点：\n爬虫范围窄\n对硬件要求低\n更新频率快\n\n按爬取方式：累积式爬虫从某个时间开始，遍历所有的能够爬取的URL，爬取相关数据，只要硬件和时间允许就可以累计大量数据\n特点\n\n爬取页面比较多\n对硬件要求高\n数据更新慢\n\n增量式爬虫在有客观数据基础上，只能爬取没有的数据或者更新的数据，而对于没有变化的数据就不在爬取了\n特点\n爬取页面比较少\n对硬件要求不高\n数据更新比较快\n\n按爬取页面存在的方式：表层网络爬虫表层页面\n通过url就能直接获取的HTML页面\n\n爬取表层页面的爬虫深层网络爬虫深层网页\n通过AJAX请求才能获取数据，动态生成的数据\n登录之后才能访问的数据\n\n爬取深层网页的爬虫第2章 爬虫的实现原理和技术第3章 网页请求原理第4章 抓取网页数据第5章 数据解析第6章 并发下载第7章 抓取动态内容第8章 图像识别与文字处理第9章 存储爬虫数据第10章 初识爬虫框架Scrapy第11章 Scrapy终端与核心组件第12章 自动抓取网页的爬虫CrawlSpider第13章 Scrapy-Redis分布式爬虫","categories":["python爬虫"],"tags":["python爬虫"]},{"title":"python内置函数","url":"/2024/03/16/python%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/","content":"本文将这68个内置函数综合整理为12大类，正在学习Python基础的读者一定不要错过，建议收藏学习！内置函数就是Python给你提供的，拿来直接用的函数，比如print.，input等。截止到python版本3.6.2 ，python一共提供了68个内置函数，具体如下abs() dict() help() min() setattr() all() dir() hex() next() slice() any() divmod() id() object() sorted() ascii() enumerate() input() oct() staticmethod() bin() eval() int() open() str() bool() exec() isinstance() ord() sum() bytearray() ﬁlter() issubclass() pow() super() bytes() ﬂoat() iter() print() tuple() callable() format() len() property() type() chr() frozenset() list() range() vars() classmethod() getattr() locals() repr() zip() compile() globals() map() reversed() __import__() complex() hasattr() max() round() delattr() hash() memoryview() set()和数字相关1. 数据类型  \n\nbool : 布尔型(True,False)\nint : 整型(整数)\nfloat : 浮点型(小数)\ncomplex : 复数\n\n2. 进制转换  \n\nbin() 将给的参数转换成二进制\notc() 将给的参数转换成八进制\nhex() 将给的参数转换成十六进制\n\nprint(bin(10)) # 二进制:0b1010 print(hex(10)) # 十六进制:0xa print(oct(10)) # 八进制:0o123. 数学运算  \n\nabs() 返回绝对值\ndivmode() 返回商和余数\nround() 四舍五入\npow(a, b) 求a的b次幂, 如果有三个参数. 则求完次幂后对第三个数取余\nsum() 求和\nmin() 求最小值\nmax() 求最大值\n\nprint(abs(-2)) # 绝对值:2 print(divmod(20,3)) # 求商和余数:(6,2) print(round(4.50)) # 五舍六入:4 print(round(4.51)) #5 print(pow(10,2,3)) # 如果给了第三个参数. 表示最后取余:1 print(sum([1,2,3,4,5,6,7,8,9,10])) # 求和:55 print(min(5,3,9,12,7,2)) #求最小值:2 print(max(7,3,15,9,4,13)) #求最大值:15和数据结构相关1. 序列（1）列表和元组  \n\nlist() 将一个可迭代对象转换成列表\ntuple() 将一个可迭代对象转换成元组\n\nprint(list((1,2,3,4,5,6))) #[1, 2, 3, 4, 5, 6] print(tuple([1,2,3,4,5,6])) #(1, 2, 3, 4, 5, 6)（2）相关内置函数  \n\nreversed() 将一个序列翻转, 返回翻转序列的迭代器\nslice() 列表的切片\n\nlst = “你好啊” it = reversed(lst) # 不会改变原列表. 返回一个迭代器, 设计上的一个规则 print(list(it)) #[‘啊’, ‘好’, ‘你’] lst = [1, 2, 3, 4, 5, 6, 7] print(lst[1:3:1]) #[2,3] s = slice(1, 3, 1) # 切片用的 print(lst[s]) #[2,3]（3）字符串  \n\nstr() 将数据转化成字符串\n\nprint(str(123)+’456’) #123456 format() 与具体数据相关, 用于计算各种小数, 精算等. s = “hello world!” print(format(s, “^20”)) #剧中 print(format(s, “20”)) #右对齐 # hello world! # hello world! # hello world! print(format(3, ‘b’ )) # 二进制:11 print(format(97, ‘c’ )) # 转换成unicode字符:a print(format(11, ‘d’ )) # ⼗进制:11 print(format(11, ‘o’ )) # 八进制:13 print(format(11, ‘x’ )) # 十六进制(⼩写字母):b print(format(11, ‘X’ )) # 十六进制(大写字母):B print(format(11, ‘n’ )) # 和d⼀样:11 print(format(11)) # 和d⼀样:11 print(format(123456789, ‘e’ )) # 科学计数法. 默认保留6位小数:1.234568e+08 print(format(123456789, ‘0.2e’ )) # 科学计数法. 保留2位小数(小写):1.23e+08 print(format(123456789, ‘0.2E’ )) # 科学计数法. 保留2位小数(大写):1.23E+08 print(format(1.23456789, ‘f’ )) # 小数点计数法. 保留6位小数:1.234568 print(format(1.23456789, ‘0.2f’ )) # 小数点计数法. 保留2位小数:1.23 print(format(1.23456789, ‘0.10f’)) # 小数点计数法. 保留10位小数:1.2345678900 print(format(1.23456789e+3, ‘F’)) # 小数点计数法. 很大的时候输出INF:1234.567890  \n\nbytes() 把字符串转化成bytes类型\n\nbs = bytes(“今天吃饭了吗”, encoding=”utf-8”) print(bs) #b’\\\\xe4\\\\xbb\\\\x8a\\\\xe5\\\\xa4\\\\xa9\\\\xe5\\\\x90\\\\x83\\\\xe9\\\\xa5\\\\xad\\\\xe4\\\\xba\\\\x86\\\\xe5\\\\x90\\\\x97’ bytearray() 返回一个新字节数组. 这个数字的元素是可变的, 并且每个元素的值得范围是[0,256) ret = bytearray(“alex” ,encoding =’utf-8’) print(ret[0]) #97 print(ret) #bytearray(b’alex’) ret[0] = 65 #把65的位置A赋值给ret[0] print(str(ret)) #bytearray(b’Alex’)  \n\nord() 输入字符找带字符编码的位置\nchr() 输入位置数字找出对应的字符\nascii() 是ascii码中的返回该值 不是就返回u\n\nprint(ord(‘a’)) # 字母a在编码表中的码位:97 print(ord(‘中’)) # ‘中’字在编码表中的位置:20013 print(chr(65)) # 已知码位,求字符是什么:A print(chr(19999)) #丟 for i in range(65536): #打印出0到65535的字符 print(chr(i), end=” “) print(ascii(“@”)) #’@’  \n\nrepr() 返回一个对象的string形式\n\ns = “今天\\\\n吃了%s顿\\\\t饭” % 3 print(s)#今天# 吃了3顿 饭 print(repr(s)) # 原样输出,过滤掉转义字符 \\\\n \\\\t \\\\r 不管百分号% #’今天\\\\n吃了3顿\\\\t饭’2. 数据集合  \n\n字典：dict 创建一个字典\n集合：set 创建一个集合\n\nfrozenset() 创建一个冻结的集合，冻结的集合不能进行添加和删除操作。3. 相关内置函数  \n\nlen() 返回一个对象中的元素的个数\nsorted() 对可迭代对象进行排序操作 (lamda)\n\n语法：sorted(Iterable, key=函数(排序规则), reverse=False)  \n\nIterable: 可迭代对象\nkey: 排序规则(排序函数), 在sorted内部会将可迭代对象中的每一个元素传递给这个函数的参数. 根据函数运算的结果进行排序\nreverse: 是否是倒叙. True: 倒叙, False: 正序\n\nlst = [5,7,6,12,1,13,9,18,5] lst.sort() # sort是list里面的一个方法 print(lst) #[1, 5, 5, 6, 7, 9, 12, 13, 18] ll = sorted(lst) # 内置函数. 返回给你一个新列表 新列表是被排序的 print(ll) #[1, 5, 5, 6, 7, 9, 12, 13, 18] l2 = sorted(lst,reverse=True) #倒序 print(l2) #[18, 13, 12, 9, 7, 6, 5, 5, 1] #根据字符串长度给列表排序 lst = [‘one’, ‘two’, ‘three’, ‘four’, ‘five’, ‘six’] def f(s): return len(s) l1 = sorted(lst, key=f, ) print(l1) #[‘one’, ‘two’, ‘six’, ‘four’, ‘five’, ‘three’]  \n\nenumerate() 获取集合的枚举对象\n\nlst = [‘one’,’two’,’three’,’four’,’five’] for index, el in enumerate(lst,1): # 把索引和元素一起获取,索引默认从0开始. 可以更改 print(index) print(el) # 1 # one # 2 # two # 3 # three # 4 # four # 5 # five  \n\nall() 可迭代对象中全部是True, 结果才是True\nany() 可迭代对象中有一个是True, 结果就是True\n\nprint(all([1,’hello’,True,9])) #True print(any([0,0,0,False,1,’good’])) #True  \n\nzip() 函数用于将可迭代的对象作为参数, 将对象中对应的元素打包成一个元组, 然后返回由这些元组组成的列表. 如果各个迭代器的元素个数不一致, 则返回列表长度与最短的对象相同\n\nlst1 = [1, 2, 3, 4, 5, 6] lst2 = [‘醉乡民谣’, ‘驴得水’, ‘放牛班的春天’, ‘美丽人生’, ‘辩护人’, ‘被嫌弃的松子的一生’] lst3 = [‘美国’, ‘中国’, ‘法国’, ‘意大利’, ‘韩国’, ‘日本’] print(zip(lst1, lst1, lst3)) # for el in zip(lst1, lst2, lst3): print(el) # (1, ‘醉乡民谣’, ‘美国’) # (2, ‘驴得水’, ‘中国’) # (3, ‘放牛班的春天’, ‘法国’) # (4, ‘美丽人生’, ‘意大利’) # (5, ‘辩护人’, ‘韩国’) # (6, ‘被嫌弃的松子的一生’, ‘日本’)  \n\nfiter() 过滤 (lamda)\n\n语法：fiter(function. Iterable)function: 用来筛选的函数. 在ﬁlter中会自动的把iterable中的元素传递给function. 然后根据function返回的True或者False来判断是否保留留此项数据 , Iterable: 可迭代对象def func(i): # 判断奇数 return i % 2 == 1 lst = [1,2,3,4,5,6,7,8,9] l1 = filter(func, lst) #l1是迭代器 print(l1) # print(list(l1)) #[1, 3, 5, 7, 9]  \n\nmap() 会根据提供的函数对指定序列列做映射(lamda)\n\n语法 : map(function, iterable)可以对可迭代对象中的每一个元素进行映射. 分别去执行 functiondef f(i): return i lst = [1,2,3,4,5,6,7,] it = map(f, lst) # 把可迭代对象中的每一个元素传递给前面的函数进行处理. 处理的结果会返回成迭代器print(list(it)) #[1, 2, 3, 4, 5, 6, 7]和作用域相关  \n\nlocals() 返回当前作用域中的名字\nglobals() 返回全局作用域中的名字\n\ndef func(): a = 10 print(locals()) # 当前作用域中的内容 print(globals()) # 全局作用域中的内容 print(“今天内容很多”) func() # {‘a’: 10} # {‘__name__‘: ‘__main__‘, ‘__doc__‘: None, ‘__package__‘: None, ‘__loader__‘: # &lt;_frozen_importlib_external.SourceFileLoader object at 0x0000026F8D566080&gt;, # ‘__spec__‘: None, ‘__annotations__‘: {}, ‘__builtins__‘: , ‘__file__‘: ‘D:/pycharm/练习/week03/new14.py’, ‘__cached__‘: None, # ‘func’: } # 今天内容很多和迭代器生成器相关  \n\nrange() 生成数据\nnext() 迭代器向下执行一次, 内部实际使⽤用了__ next__()⽅方法返回迭代器的下一个项目\niter() 获取迭代器, 内部实际使用的是__ iter__()⽅方法来获取迭代器\n\nfor i in range(15,-1,-5): print(i) # 15 # 10 # 5 # 0 lst = [1,2,3,4,5] it = iter(lst) # __iter__()获得迭代器 print(it.__next__()) #1 print(next(it)) #2 __next__() print(next(it)) #3 print(next(it)) #4字符串类型代码的执行  \n\neval() 执行字符串类型的代码. 并返回最终结果\nexec() 执行字符串类型的代码\ncompile() 将字符串类型的代码编码. 代码对象能够通过exec语句来执行或者eval()进行求值\n\ns1 = input(“请输入a+b:”) #输入:8+9 print(eval(s1)) # 17 可以动态的执行代码. 代码必须有返回值 s2 = “for i in range(5): print(i)” a = exec(s2) # exec 执行代码不返回任何内容 # 0 # 1 # 2 # 3 # 4 print(a) #None # 动态执行代码 exec(“”” def func(): print(“ 我是周杰伦”) “”” ) func() #我是周杰伦 code1 = “for i in range(3): print(i)” com = compile(code1, “”, mode=”exec”) # compile并不会执行你的代码.只是编译 exec(com) # 执行编译的结果 # 0 # 1 # 2 code2 = “5+6+7” com2 = compile(code2, “”, mode=”eval”) print(eval(com2)) # 18 code3 = “name = input(‘请输入你的名字:’)” #输入:hello com3 = compile(code3, “”, mode=”single”) exec(com3) print(name) #hello输入输出  \n\nprint() : 打印输出\ninput() : 获取用户输出的内容\n\nprint(“hello”, “world”, sep=”*“, end=”@”) # sep:打印出的内容用什么连接,end:以什么为结尾 #hello*world@内存相关hash() : 获取到对象的哈希值(int, str, bool, tuple). hash算法:(1) 目的是唯一性 (2) dict 查找效率非常高, hash表.用空间换的时间 比较耗费内存s = ‘alex’print(hash(s)) #-168324845050430382lst = [1, 2, 3, 4, 5]print(hash(lst)) #报错,列表是不可哈希的 id() : 获取到对象的内存地址s = ‘alex’print(id(s)) #2278345368944文件操作相关  \n\nopen() : 用于打开一个文件, 创建一个文件句柄\n\nf = open(‘file’,mode=’r’,encoding=’utf-8’) f.read() f.close()模块相关  \n\n__ import__() : 用于动态加载类和函数\n\n# 让用户输入一个要导入的模块 import os name = input(“请输入你要导入的模块:”) __import__(name) # 可以动态导入模块帮 助  \n\nhelp() : 函数用于查看函数或模块用途的详细说明\n\nprint(help(str)) #查看字符串的用途调用相关  \n\ncallable() : 用于检查一个对象是否是可调用的. 如果返回True, object有可能调用失败, 但如果返回False. 那调用绝对不会成功\n\na = 10 print(callable(a)) #False 变量a不能被调用 # def f(): print(“hello”) print(callable(f)) # True 函数是可以被调用的查看内置属性  \n\ndir() : 查看对象的内置属性, 访问的是对象中的__dir__()方法\n\nprint(dir(tuple)) #查看元组的方法\n我是猿子，一起加油！\n\n","categories":["Python"],"tags":["Python"]},{"title":"typora配置图片上传（gitee仓库版）","url":"/2024/07/31/typora%E9%85%8D%E7%BD%AE%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%EF%BC%88gitee%E4%BB%93%E5%BA%93%E7%89%88%EF%BC%89/","content":"使用原因使用markdown来写文档用起来很方便，各种样式可以嵌入，但是图片存放路径有时候是一个问题，路径设置好了还好说，如果设置不好，写的文章多了就比较麻烦了，为了避免图片加载不出来，我才用gitee仓库作为图库，相对加载速度快，使用起来也方便\n配置步骤1.在gitee上创建一个仓库，一定是公开的仓库，最好也初始化一下2.生成gitee私人令牌打开设置，找到私人令牌&gt; 生成新令牌\n3.配置tyopra打开Typora，找到 文件 &gt; 偏好设置 &gt; 图像：\n\n\n","categories":["typora"],"tags":["typora"]},{"title":"一篇文章学完自动化测试","url":"/2024/07/29/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%AD%A6%E5%AE%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/","content":"","categories":["自动化测试"],"tags":["自动化测试"]},{"title":"vue","url":"/2024/07/01/vue/","content":"01.Vue简介\n02.第一个Vue程序官方文档\n\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;        &lt;title&gt;Document&lt;/title&gt;        &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;        &lt;body&gt;        &lt;div id=&quot;app&quot;&gt;            &#123;&#123;message&#125;&#125;        &lt;/div&gt;        &lt;script&gt;            var app = new Vue(&#123;                el: &#x27;#app&#x27;,                data: &#123;                    message: &#x27;Hello Vue!&#x27;                &#125;            &#125;)        &lt;/script&gt;    &lt;/body&gt;    &lt;/head&gt;&lt;/html&gt;\n\n03.el挂载点el挂载可以使用各种选择器，但是建议使用id选择器，还有就是el不能挂载在body和html标签上。\n\n\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;        &lt;title&gt;el: 挂载点&lt;/title&gt;        &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;        &lt;body&gt;        &lt;div id=&quot;app&quot;&gt;            &#123;&#123;message&#125;&#125;            &lt;div&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;        &lt;/div&gt;        &lt;script&gt;            var app = new Vue(&#123;                                el: &#x27;#app&#x27;,                data: &#123;                    message: &#x27;Hello Vue!&#x27;                &#125;            &#125;)        &lt;/script&gt;    &lt;/body&gt;    &lt;/head&gt;&lt;/html&gt;\n\n04.data数据对象\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;        &lt;/meta&gt;        &lt;/meta&gt;        &lt;title&gt;data数据对象&lt;/title&gt;        &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div id=&quot;app&quot;&gt;            &#123;&#123;message&#125;&#125;            &lt;div&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;            &lt;h2&gt;&#123;&#123;school&#125;&#125;&lt;/h2&gt;            字典获取类型：&lt;h2&gt;&#123;&#123;school.name&#125;&#125;&lt;/h2&gt;            &lt;h2&gt;&#123;&#123;campus&#125;&#125;&lt;/h2&gt;            数组获取类型：&lt;h2&gt;&#123;&#123;campus[0]&#125;&#125;&lt;/h2&gt;        &lt;/div&gt;        &lt;script&gt;            var app = new Vue(&#123;                el: &#x27;#app&#x27;,                data: &#123;                    message: &#x27;Hello Vue!&#x27;,                    school:&#123;                        name:&#x27;北京大学&#x27;,                        address:&#x27;北京市海淀区&#x27;                    &#125;,                campus:[                    &#x27;北京校区&#x27;,                    &#x27;上海校区&#x27;,                    &#x27;广州校区&#x27;                ]                &#125;            &#125;)        &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;\n\n05.本地应用v-text\n\n\n\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;        &lt;title&gt;v-test&lt;/title&gt;        &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;            &lt;/head&gt;    &lt;body&gt;        &lt;div id=&quot;app&quot;&gt;            &lt;span v-text=&quot;message&quot;&gt;&lt;/span&gt;            &lt;div v-text=&quot;school.name+&#x27;!&#x27;&quot;&gt;&lt;/div&gt;支持字符串拼接&lt;br&gt;            &lt;/br&gt;            &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;        &lt;/div&gt;        &lt;script&gt;            var app = new Vue(&#123;                el: &#x27;#app&#x27;,                data: &#123;                    message: &#x27;Hello Vue!&#x27;,                    show:true,                    school:&#123;                        name:&#x27;北京大学&#x27;,                        address:&#x27;北京市海淀区&#x27;                    &#125;               &#125;            &#125;)        &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;\n\n06.v-html\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;        &lt;title&gt;v-html&lt;/title&gt;        &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;           &lt;/head&gt;    &lt;body&gt;        &lt;div id=&quot;app&quot;&gt;            &lt;p v-html=&quot;message&quot;&gt;&lt;/p&gt;            &lt;p v-text=&quot;message&quot;&gt;&lt;/p&gt;&quot;        &lt;/div&gt;        &lt;script&gt;            var app = new Vue(&#123;                el: &#x27;#app&#x27;,                data: &#123;                    message: &#x27;&lt;a href=&quot;https://www.baidu.com&quot;&gt;百度&lt;/a&gt;&#x27;,                &#125;            &#125;)        &lt;/script&gt;&lt;/html&gt;\n\n07.v-on元素绑定事件\n\n\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;        &lt;title&gt;v-on&lt;/title&gt;        &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div id=&quot;app&quot;&gt;            &lt;input type=&quot;button&quot; value=&quot;v-on指令&quot; v-on:click=&quot;show&quot;/&gt;            &lt;input type=&quot;button&quot; value=&quot;v-on简写&quot; @click=&quot;show&quot;/&gt;            &lt;input type=&quot;button&quot; value=&quot;双击事件&quot; @dblclick=&quot;show&quot;/&gt;            &lt;input type=&quot;button&quot; value=&quot;change事件&quot; @click=&quot;changeFood&quot;/&gt;            &lt;h2&gt;&#123;&#123;food&#125;&#125;&lt;/h2&gt;        &lt;/div&gt;        &lt;script&gt;            var app = new Vue(&#123;                el: &#x27;#app&#x27;,                data: &#123;                    message: &#x27;Hello Vue!&#x27;,                    food:&#x27;苹果&#x27;                &#125;,                methods:&#123;                    show:function()&#123;                        alert(&#x27;show&#x27;)                    &#125;,                    changeFood:function()&#123;                        this.food=&#x27;香蕉&#x27;                    &#125;                            &#125;            &#125;)        &lt;/script&gt;&lt;/html&gt;\n\n08.计数器\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;        &lt;title&gt;计数器&lt;/title&gt;        &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div id=&quot;app&quot;&gt;            点击直接加减&lt;br&gt;            &lt;/br&gt;            &lt;button @click=&quot;count++&quot;&gt;+&lt;/button&gt;            &lt;button @click=&quot;count--&quot;&gt;-&lt;/button&gt;            &lt;button @click=&quot;count=0&quot;&gt;reset&lt;/button&gt;            &lt;div&gt;&#123;&#123;count&#125;&#125;&lt;/div&gt;            &lt;div&gt;                点击调用事件&lt;br&gt;                &lt;/br&gt;                &lt;button @click=&quot;add&quot;&gt;+&lt;/button&gt;                &lt;button @click=&quot;sub&quot;&gt;-&lt;/button&gt;                &lt;button @click=&quot;reset&quot;&gt;reset&lt;/button&gt;            &lt;/div&gt;        &lt;/div&gt;        &lt;script&gt;            var app = new Vue(&#123;                el: &#x27;#app&#x27;,                data: &#123;                    count:0                &#125;,                methods:&#123;                    add:function()&#123;                        this.count++                    &#125;,                    sub:function()&#123;                        this.count--                    &#125;,                    reset:function()&#123;                        this.count=0                    &#125;                &#125;            &#125;)        &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;\n\n09.v-show\n\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;        &lt;title&gt;v-show&lt;/title&gt;        &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;            &lt;/head&gt;        &lt;body&gt;        &lt;div id=&quot;app&quot;&gt;            &lt;span v-show=&quot;show&quot;&gt;Hello Vue!&lt;/span&gt;            &lt;div v-show=&quot;show&quot;&gt;Hello Vue!&lt;/div&gt;            &lt;button @click=&quot;show=!show&quot;&gt;显示/隐藏&lt;/button&gt;            &lt;h2&gt;&#123;&#123;show&#125;&#125;&lt;/h2&gt;            &lt;input type=&quot;button&quot; value=&quot;显示/隐藏&quot; @click=&quot;changeShow&quot;&gt;        &lt;/div&gt;        &lt;script&gt;            var app = new Vue(&#123;                el: &#x27;#app&#x27;,                data: &#123;                    show:true               &#125;,               methods:&#123;                   changeShow()&#123;                       this.show=!this.show                   &#125;               &#125;            &#125;)        &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;\n\n10.v-if\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;        &lt;title&gt;v-if&lt;/title&gt;        &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;           &lt;/head&gt;    &lt;body&gt;        &lt;div id=&quot;app&quot;&gt;            &lt;button @click=&quot;show=!show&quot;&gt;切换&lt;/button&gt;&lt;br/&gt;            &lt;div v-if=&quot;show&quot;&gt;Hello Vue!&lt;/div&gt;            &lt;div v-if=&quot;show&quot;&gt;Hello Vue!&lt;/div&gt;            &lt;div v-show=&quot;show&quot;&gt;Hello Vue!&lt;/div&gt;            &lt;div v-if=&quot;times&gt;10&quot;&gt;Hello Vue!&lt;/div&gt;        &lt;/div&gt;        &lt;script&gt;            var app = new Vue(&#123;                el: &#x27;#app&#x27;,                data: &#123;                    times:20,                    show:true                &#125;            &#125;)        &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;\n\n11.v-bind设置元素的属性\n\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;        &lt;title&gt;v-bind&lt;/title&gt;        &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;        &lt;style&gt;            .active&#123;                color:red;            &#125;            .disabled&#123;                color:gray;            &#125;        &lt;/style&gt;    &lt;/head&gt;    &lt;body&gt;        v-bind        &lt;div id=&quot;app&quot;&gt;            &lt;a v-bind:href=&quot;url&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/a&gt;            &lt;a :href=&quot;url&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/a&gt;            &lt;a :href=&quot;url&quot; :title=&quot;name&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/a&gt;            &lt;a :href=&quot;url&quot; :title=&quot;name&quot; :class=&quot;&#123;active:isActive&#125;&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/a&gt;            &lt;a :href=&quot;url&quot; :title=&quot;name&quot; :class=&quot;&#123;active:isActive,disabled:isDisabled&#125;&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/a&gt;            &lt;a :href=&quot;url&quot; :title=&quot;name&quot; :class=&quot;classObject&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/a&gt;            &lt;button :class=&quot;&#123;active:isActive,disabled:isDisabled&#125;&quot; @click=&quot;changeActive&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/button&gt;        &lt;/div&gt;        &lt;script&gt;            var app = new Vue(&#123;                el: &#x27;#app&#x27;,                data: &#123;                    url:&#x27;https://www.baidu.com&#x27;,                    name:&#x27;百度&#x27;,                    isActive:true,                    isDisabled:false,                    classObject:&#123;                        active:true,                        disabled:false                    &#125;                &#125;,                methods:&#123;                    changeActive()&#123;                        this.isActive=!this.isActive;                    &#125;                &#125;            &#125;)        &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;\n\n12.图片切换\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;        &lt;title&gt;切换图片&lt;/title&gt;        &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div id=&quot;app&quot;&gt;            切换图片&lt;br&gt;            &lt;img :src=&quot;imgUrls[index]&quot; alt=&quot;&quot;&gt;&lt;br&gt;            &lt;button @click=&quot;index=0&quot;&gt;切换到百度&lt;/button&gt;            &lt;button @click=&quot;index=1&quot;&gt;切换到QQ&lt;/button&gt;            &lt;button @click=&quot;index=2&quot;&gt;切换到新浪&lt;/button&gt;                        &lt;/br&gt;&lt;/img&gt;                    &lt;/div&gt;        &lt;script&gt;            var app = new Vue(&#123;                el: &#x27;#app&#x27;,                data: &#123;                    index:0,                    imgUrls: [                        &#x27;https://www.baidu.com/img/bd_logo1.png&#x27;,                        &#x27;https://www.qq.com/favicon.ico&#x27;,                        &#x27;https://www.sina.com.cn/favicon.ico&#x27;                    ],                &#125;            &#125;)        &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;\n\n13.v-for\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;    &lt;title&gt;v-for&lt;/title&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;    &lt;/meta&gt;    &lt;/meta&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;app&quot;&gt;        &lt;div v-for=&quot;school,index in schools&quot;&gt;            &lt;h2&gt;&#123;&#123;index&#125;&#125;&lt;/h2&gt;            &lt;h2&gt;&#123;&#123;school.name&#125;&#125;&lt;/h2&gt;            &lt;p&gt;&#123;&#123;school.address&#125;&#125;&lt;/p&gt;        &lt;/div&gt;        &lt;div v-for=&quot;food in food&quot;&gt;            &lt;span&gt;&#123;&#123;food.name&#125;&#125;&lt;/span&gt;            &lt;span&gt;&#123;&#123;food.price&#125;&#125;&lt;/span&gt;        &lt;/div&gt;        &lt;br/&gt;        添加食物        &lt;input type=&quot;text&quot; v-model=&quot;food.name&quot;&gt;        &lt;/input&gt;        &lt;input type=&quot;text&quot; v-model=&quot;food.price&quot;&gt;        &lt;/input&gt;        &lt;button @click=&quot;addFood&quot;&gt;添加&lt;/button&gt;        &lt;br/&gt;删除食物        &lt;input type=&quot;text&quot; v-model=&quot;food.name&quot;&gt;        &lt;/input&gt;        &lt;button @click=&quot;removeFood&quot;&gt;删除&lt;/button&gt;    &lt;/div&gt;    &lt;script&gt;        var app = new Vue(&#123;            el: &#x27;#app&#x27;,            data: &#123;                message: &#x27;Hello Vue!&#x27;,                schools:[                    &#123;name:&#x27;北京大学&#x27;,address:&#x27;北京市海淀区&#x27;&#125;,                    &#123;name:&#x27;清华大学&#x27;,address:&#x27;北京市海淀区&#x27;&#125;,                     &#123;name:&#x27;北京大学&#x27;,address:&#x27;北京市海淀区&#x27;&#125;,                    &#123;name:&#x27;北京大学&#x27;,address:&#x27;北京市海淀区&#x27; &#125;,                ],                food:[                    &#123;name:&#x27;苹果&#x27;,price:10&#125;,                    &#123;name:&#x27;香蕉&#x27;,price:20&#125;,                    &#123;name:&#x27;西瓜&#x27;,price:30&#125;,                    &#123;name:&#x27;葡萄&#x27;,price:40&#125;,                    &#123;name:&#x27;草莓&#x27;,price:50&#125;,                    &#123;name:&#x27;火龙果&#x27;,price:60&#125;,                    &#123;name:&#x27;苹果&#x27;,price:10&#125;,                    &#123;name:&#x27;香蕉&#x27;,price:20&#125;,                    &#123;name:&#x27;西瓜&#x27;,price:30&#125;,                ]            &#125;,            methods:&#123;                addFood()&#123;                    this.food.push(&#123;                        name:this.food.name,                        price:this.food.price                    &#125;)                &#125;,                removeFood()&#123;                    for(var i=0;i&lt;this.food.length;i++)&#123;                        if(this.food[i].name==this.food.name)&#123;                            this.food.splice(i,1)                        &#125;                    &#125;                &#125;            &#125;        &#125;)    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;\n\n14.v-on补充\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;    &lt;title&gt;v-on补充&lt;/title&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;app&quot;&gt;        &lt;button @click=&quot;show&quot;&gt;点我&lt;/button&gt;    &lt;/div&gt;    &lt;script&gt;        var app = new Vue(&#123;            el: &#x27;#app&#x27;,            data: &#123;                message: &#x27;Hello Vue!&#x27;            &#125;,            methods: &#123;                show: function () &#123;                    alert(&#x27;show&#x27;)                                   &#125;            &#125;        &#125;)    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;\n\n15.v-model双向数据绑定\n\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;        &lt;title&gt;v-model&lt;/title&gt;        &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;           &lt;/head&gt;    &lt;body&gt;        &lt;div id=&quot;app&quot;&gt;            &lt;button @click=&quot;message=&#x27;Hello World!&#x27;&quot;&gt;点我&lt;/button&gt;&lt;br/&gt;            &lt;input type=&quot;text&quot; v-model=&quot;message&quot;&gt;            &lt;div&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;        &lt;/div&gt;        &lt;script&gt;            var app = new Vue(&#123;                el: &#x27;#app&#x27;,                data: &#123;                    message: &#x27;Hello Vue!&#x27;                &#125;            &#125;)        &lt;/script&gt;    &lt;/body&gt;    &lt;/body&gt;&lt;/html&gt;\n\n16.记事本-add\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;        &lt;title&gt;记事本&lt;/title&gt;        &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div id=&quot;app&quot;&gt;                        &lt;div class=&quot;title&quot;&gt;                &lt;input type=&quot;text&quot; v-model=&quot;title&quot; @keyup.enter=&quot;add&quot;&gt;            &lt;/div&gt;            &lt;div class=&quot;content&quot;&gt;                &lt;textarea name=&quot;&quot; id=&quot;&quot; cols=&quot;30&quot; rows=&quot;10&quot; v-model=&quot;content&quot;&gt;&lt;/textarea&gt;            &lt;/div&gt;            &lt;div class=&quot;btn&quot;&gt;                &lt;button @click=&quot;add&quot;&gt;添加&lt;/button&gt;               &lt;button @click=&quot;clear&quot;&gt;清空&lt;/button&gt;            &lt;/div&gt;            &lt;div class=&quot;list&quot;&gt;                &lt;div class=&quot;title&quot;&gt;笔记列表&lt;/div&gt;                &lt;div class=&quot;item&quot; v-for=&quot;(item,index) in list&quot; :key=&quot;index&quot;&gt;                    &lt;span class=&quot;title&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;/span&gt;                    &lt;span class=&quot;content&quot;&gt;&#123;&#123;item.content&#125;&#125;&lt;/span&gt;                &lt;/div&gt;            &lt;/div&gt;        &lt;/div&gt;        &lt;script&gt;            var app = new Vue(&#123;                el: &#x27;#app&#x27;,                data: &#123;                    title:&#x27;&#x27;,                    content:&#x27;&#x27;,                    list:[                        &#123;title:&#x27;标题1&#x27;,content:&#x27;内容1&#x27;&#125;,                        &#123;title:&#x27;标题2&#x27;,content:&#x27;内容2&#x27;&#125;,                        &#123;title:&#x27;标题3&#x27;,content:&#x27;内容3&#x27;&#125;,                        &#123;title:&#x27;标题4&#x27;,content:&#x27;内容4&#x27;&#125;,                        &#123;title:&#x27;标题5&#x27;,content:&#x27;内容5&#x27;&#125;,                        &#123;title:&#x27;标题6&#x27;,content:&#x27;内容6&#x27;&#125;,                        &#123;title:&#x27;标题7&#x27;,content:&#x27;内容7&#x27;&#125;,                       &#123;title:&#x27;标题8&#x27;,content:&#x27;内容8&#x27;&#125;,                    ]                &#125;,                methods: &#123;                    add()&#123;                        this.list.push(&#123;                            title:this.title,                            content:this.content                        &#125;)                        this.title = &#x27;&#x27;                        this.content = &#x27;&#x27;                    &#125;,                    clear()&#123;                        this.list = []                    &#125;                &#125;            &#125;)        &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;\n\n17.记事本-remove\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;        &lt;title&gt;记事本&lt;/title&gt;        &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div id=&quot;app&quot;&gt;                        &lt;div class=&quot;title&quot;&gt;                &lt;input type=&quot;text&quot; v-model=&quot;title&quot; @keyup.enter=&quot;add&quot;&gt;            &lt;/div&gt;            &lt;div class=&quot;content&quot;&gt;                &lt;textarea name=&quot;&quot; id=&quot;&quot; cols=&quot;30&quot; rows=&quot;10&quot; v-model=&quot;content&quot;&gt;&lt;/textarea&gt;            &lt;/div&gt;            &lt;div class=&quot;btn&quot;&gt;                &lt;button @click=&quot;add&quot;&gt;添加&lt;/button&gt;               &lt;button @click=&quot;clear&quot;&gt;清空&lt;/button&gt;            &lt;/div&gt;            &lt;div class=&quot;list&quot;&gt;                &lt;div class=&quot;title&quot;&gt;笔记列表&lt;/div&gt;                &lt;div class=&quot;item&quot; v-for=&quot;(item,index) in list&quot; :key=&quot;index&quot;&gt;                    &lt;span class=&quot;title&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;/span&gt;                    &lt;span class=&quot;content&quot;&gt;&#123;&#123;item.content&#125;&#125;&lt;/span&gt;                    &lt;button @click=&quot;remove(index)&quot;&gt;删除&lt;/button&gt;                &lt;/div&gt;            &lt;/div&gt;        &lt;/div&gt;        &lt;script&gt;            var app = new Vue(&#123;                el: &#x27;#app&#x27;,                data: &#123;                    title:&#x27;&#x27;,                    content:&#x27;&#x27;,                    list:[                        &#123;title:&#x27;标题1&#x27;,content:&#x27;内容1&#x27;&#125;,                        &#123;title:&#x27;标题2&#x27;,content:&#x27;内容2&#x27;&#125;,                        &#123;title:&#x27;标题3&#x27;,content:&#x27;内容3&#x27;&#125;,                        &#123;title:&#x27;标题4&#x27;,content:&#x27;内容4&#x27;&#125;,                        &#123;title:&#x27;标题5&#x27;,content:&#x27;内容5&#x27;&#125;,                        &#123;title:&#x27;标题6&#x27;,content:&#x27;内容6&#x27;&#125;,                        &#123;title:&#x27;标题7&#x27;,content:&#x27;内容7&#x27;&#125;,                       &#123;title:&#x27;标题8&#x27;,content:&#x27;内容8&#x27;&#125;,                    ]                &#125;,                methods: &#123;                    add()&#123;                        this.list.push(&#123;                            title:this.title,                            content:this.content                        &#125;)                        this.title = &#x27;&#x27;                        this.content = &#x27;&#x27;                    &#125;,                    clear()&#123;                        this.list = []                    &#125;,                    remove(index)&#123;                        this.list.splice(index,1)                    &#125;                &#125;            &#125;)        &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;\n\n18.记事本-count\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;        &lt;title&gt;记事本&lt;/title&gt;        &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div id=&quot;app&quot;&gt;                        &lt;div class=&quot;title&quot;&gt;                &lt;input type=&quot;text&quot; v-model=&quot;title&quot; @keyup.enter=&quot;add&quot;&gt;            &lt;/div&gt;            &lt;div class=&quot;content&quot;&gt;                &lt;textarea name=&quot;&quot; id=&quot;&quot; cols=&quot;30&quot; rows=&quot;10&quot; v-model=&quot;content&quot;&gt;&lt;/textarea&gt;            &lt;/div&gt;            &lt;div class=&quot;btn&quot;&gt;                &lt;button @click=&quot;add&quot;&gt;添加&lt;/button&gt;               &lt;button @click=&quot;clear&quot;&gt;清空&lt;/button&gt;            &lt;/div&gt;            &lt;div class=&quot;count&quot;&gt;                &lt;div class=&quot;title&quot;&gt;笔记数量&lt;/div&gt;                &lt;div class=&quot;count&quot;&gt;&#123;&#123;list.length&#125;&#125;&lt;/div&gt;            &lt;/div&gt;            &lt;div class=&quot;list&quot;&gt;                &lt;div class=&quot;title&quot;&gt;笔记列表&lt;/div&gt;                &lt;div class=&quot;item&quot; v-for=&quot;(item,index) in list&quot; :key=&quot;index&quot;&gt;                    &lt;span class=&quot;title&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;/span&gt;                    &lt;span class=&quot;content&quot;&gt;&#123;&#123;item.content&#125;&#125;&lt;/span&gt;                    &lt;button @click=&quot;remove(index)&quot;&gt;删除&lt;/button&gt;                &lt;/div&gt;            &lt;/div&gt;        &lt;/div&gt;        &lt;script&gt;            var app = new Vue(&#123;                el: &#x27;#app&#x27;,                data: &#123;                    title:&#x27;&#x27;,                    content:&#x27;&#x27;,                    list:[                        &#123;title:&#x27;标题1&#x27;,content:&#x27;内容1&#x27;&#125;,                        &#123;title:&#x27;标题2&#x27;,content:&#x27;内容2&#x27;&#125;,                        &#123;title:&#x27;标题3&#x27;,content:&#x27;内容3&#x27;&#125;,                        &#123;title:&#x27;标题4&#x27;,content:&#x27;内容4&#x27;&#125;,                        &#123;title:&#x27;标题5&#x27;,content:&#x27;内容5&#x27;&#125;,                        &#123;title:&#x27;标题6&#x27;,content:&#x27;内容6&#x27;&#125;,                        &#123;title:&#x27;标题7&#x27;,content:&#x27;内容7&#x27;&#125;,                       &#123;title:&#x27;标题8&#x27;,content:&#x27;内容8&#x27;&#125;,                    ]                &#125;,                methods: &#123;                    add()&#123;                        this.list.push(&#123;                            title:this.title,                            content:this.content                        &#125;)                        this.title = &#x27;&#x27;                        this.content = &#x27;&#x27;                    &#125;,                    clear()&#123;                        this.list = []                    &#125;,                    remove(index)&#123;                        this.list.splice(index,1)                    &#125;                &#125;            &#125;)        &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;\n\n19.记事本-clear&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;        &lt;title&gt;记事本&lt;/title&gt;        &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div id=&quot;app&quot;&gt;                        &lt;div class=&quot;title&quot;&gt;                &lt;input type=&quot;text&quot; v-model=&quot;title&quot; @keyup.enter=&quot;add&quot;&gt;            &lt;/div&gt;            &lt;div class=&quot;content&quot;&gt;                &lt;textarea name=&quot;&quot; id=&quot;&quot; cols=&quot;30&quot; rows=&quot;10&quot; v-model=&quot;content&quot;&gt;&lt;/textarea&gt;            &lt;/div&gt;            &lt;div class=&quot;btn&quot;&gt;                &lt;button @click=&quot;add&quot;&gt;添加&lt;/button&gt;               &lt;button @click=&quot;clear&quot;&gt;清空&lt;/button&gt;            &lt;/div&gt;            &lt;div class=&quot;count&quot;&gt;                &lt;div class=&quot;title&quot;&gt;笔记数量&lt;/div&gt;                &lt;div class=&quot;count&quot;&gt;&#123;&#123;list.length&#125;&#125;&lt;/div&gt;            &lt;/div&gt;            &lt;div class=&quot;list&quot;&gt;                &lt;div class=&quot;title&quot;&gt;笔记列表&lt;/div&gt;                &lt;div class=&quot;item&quot; v-for=&quot;(item,index) in list&quot; :key=&quot;index&quot;&gt;                    &lt;span class=&quot;title&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;/span&gt;                    &lt;span class=&quot;content&quot;&gt;&#123;&#123;item.content&#125;&#125;&lt;/span&gt;                    &lt;button @click=&quot;remove(index)&quot;&gt;删除&lt;/button&gt;                &lt;/div&gt;            &lt;/div&gt;        &lt;/div&gt;        &lt;script&gt;            var app = new Vue(&#123;                el: &#x27;#app&#x27;,                data: &#123;                    title:&#x27;&#x27;,                    content:&#x27;&#x27;,                    list:[                        &#123;title:&#x27;标题1&#x27;,content:&#x27;内容1&#x27;&#125;,                        &#123;title:&#x27;标题2&#x27;,content:&#x27;内容2&#x27;&#125;,                        &#123;title:&#x27;标题3&#x27;,content:&#x27;内容3&#x27;&#125;,                        &#123;title:&#x27;标题4&#x27;,content:&#x27;内容4&#x27;&#125;,                        &#123;title:&#x27;标题5&#x27;,content:&#x27;内容5&#x27;&#125;,                        &#123;title:&#x27;标题6&#x27;,content:&#x27;内容6&#x27;&#125;,                        &#123;title:&#x27;标题7&#x27;,content:&#x27;内容7&#x27;&#125;,                       &#123;title:&#x27;标题8&#x27;,content:&#x27;内容8&#x27;&#125;,                    ]                &#125;,                methods: &#123;                    add()&#123;                        this.list.push(&#123;                            title:this.title,                            content:this.content                        &#125;)                        this.title = &#x27;&#x27;                        this.content = &#x27;&#x27;                    &#125;,                    clear()&#123;                        this.list = []                    &#125;,                    remove(index)&#123;                        this.list.splice(index,1)                    &#125;                &#125;            &#125;)        &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;\n\n20.记事本-hidden没有数据时，隐藏元素（v-show,v-for）\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;        &lt;title&gt;记事本&lt;/title&gt;        &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div id=&quot;app&quot;&gt;                        &lt;div class=&quot;title&quot;&gt;                &lt;input type=&quot;text&quot; v-model=&quot;title&quot; @keyup.enter=&quot;add&quot;&gt;            &lt;/div&gt;            &lt;div class=&quot;content&quot;&gt;                &lt;textarea name=&quot;&quot; id=&quot;&quot; cols=&quot;30&quot; rows=&quot;10&quot; v-model=&quot;content&quot;&gt;&lt;/textarea&gt;            &lt;/div&gt;            &lt;div class=&quot;btn&quot;&gt;                &lt;button @click=&quot;add&quot;&gt;添加&lt;/button&gt;               &lt;button @click=&quot;clear&quot;&gt;清空&lt;/button&gt;            &lt;/div&gt;            &lt;div class=&quot;count&quot;&gt;                &lt;div class=&quot;title&quot;&gt;笔记数量&lt;/div&gt;                &lt;div class=&quot;count&quot;&gt;&#123;&#123;list.length&#125;&#125;&lt;/div&gt;            &lt;/div&gt;            &lt;div class=&quot;list&quot;&gt;                &lt;div class=&quot;title&quot; v-show=&quot;list.length&quot; style=&quot;background-color: aqua;&quot;&gt;笔记列表&lt;/div&gt;                &lt;div class=&quot;item&quot; v-for=&quot;(item,index) in list&quot; :key=&quot;index&quot;&gt;                    &lt;span class=&quot;title&quot; style=&quot;background-color: aquamarine;&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;/span&gt;                    &lt;span class=&quot;content&quot;&gt;&#123;&#123;item.content&#125;&#125;&lt;/span&gt;                    &lt;button @click=&quot;remove(index)&quot;&gt;删除&lt;/button&gt;                &lt;/div&gt;            &lt;/div&gt;        &lt;/div&gt;        &lt;script&gt;            var app = new Vue(&#123;                el: &#x27;#app&#x27;,                data: &#123;                    title:&#x27;&#x27;,                    content:&#x27;&#x27;,                    list:[                        &#123;title:&#x27;标题1&#x27;,content:&#x27;内容1&#x27;&#125;,                        &#123;title:&#x27;标题2&#x27;,content:&#x27;内容2&#x27;&#125;,                        &#123;title:&#x27;标题3&#x27;,content:&#x27;内容3&#x27;&#125;,                        &#123;title:&#x27;标题4&#x27;,content:&#x27;内容4&#x27;&#125;,                        &#123;title:&#x27;标题5&#x27;,content:&#x27;内容5&#x27;&#125;,                        &#123;title:&#x27;标题6&#x27;,content:&#x27;内容6&#x27;&#125;,                        &#123;title:&#x27;标题7&#x27;,content:&#x27;内容7&#x27;&#125;,                       &#123;title:&#x27;标题8&#x27;,content:&#x27;内容8&#x27;&#125;,                    ]                &#125;,                methods: &#123;                    add()&#123;                        this.list.push(&#123;                            title:this.title,                            content:this.content                        &#125;)                        this.title = &#x27;&#x27;                        this.content = &#x27;&#x27;                    &#125;,                    clear()&#123;                        this.list = []                    &#125;,                    remove(index)&#123;                        this.list.splice(index,1)                    &#125;                &#125;            &#125;)        &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;\n\n21.axios基本使用\n\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;        &lt;title&gt;axios基本使用&lt;/title&gt;        &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;        &lt;script src=&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div id=&quot;app&quot;&gt;            &lt;button @click=&quot;get&quot;&gt;get&lt;/button&gt;            &lt;button @click=&quot;post&quot;&gt;post&lt;/button&gt;        &lt;/div&gt;        &lt;script&gt;            var app = new Vue(&#123;                el: &#x27;#app&#x27;,                methods: &#123;                    get()&#123;                        axios.get(&#x27;https://api.github.com/users/zhongyuanzhi&#x27;)                       .then(function (response) &#123;                        var response = response.data;                        alert(response.url)                       &#125;)                       .catch(function (error) &#123;                        alert(error)                       &#125;);                    &#125;,                    post()&#123;                        axios.post(&#x27;Http://example.com/login?username=admin&amp;password=12345&#x27;)                       .then(function (response) &#123;                        var response = response.data;                        alert(response.url)                       &#125;)                       .catch(function (error) &#123;                        alert(error)                       &#125;);                    &#125;                &#125;            &#125;)        &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;\n\n22.axios+vue\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;        &lt;title&gt;axios基本使用&lt;/title&gt;        &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;        &lt;script src=&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div id=&quot;app&quot;&gt;            &lt;button @click=&quot;get&quot;&gt;get&lt;/button&gt;            &lt;button @click=&quot;post&quot;&gt;post&lt;/button&gt;            &lt;br/&gt;            &lt;textarea name=&quot;message&quot; rows=&quot;20&quot; cols=&quot;59&quot;&gt;&#123;&#123;tmp&#125;&#125;&lt;/textarea&gt;        &lt;/div&gt;        &lt;script&gt;            var app = new Vue(&#123;                el: &#x27;#app&#x27;,                data: &#123;                    tmp:&#x27;&#x27;                &#125;,                methods: &#123;                    get()&#123;                        var that =this;                        axios.get(&#x27;https://api.github.com/users/zhongyuanzhi&#x27;)                       .then(function (response) &#123;                        var response = response;                        that.tmp = JSON.stringify(response);                        alert(response.data.url)                       &#125;)                       .catch(function (error) &#123;                        alert(error)                       &#125;);                    &#125;,                    post()&#123;                        axios.post(&#x27;Http://example.com/login?username=admin&amp;password=12345&#x27;)                       .then(function (response) &#123;                        var response = response.data;                        alert(response.url)                       &#125;)                       .catch(function (error) &#123;                        alert(error)                       &#125;);                    &#125;                &#125;            &#125;)        &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;\n\n23.example-weather回车查询\n墨迹天气API点击查询\n&lt;!DOCTYPE html&gt;  &lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;      &lt;meta charset=&quot;UTF-8&quot;&gt;      &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;      &lt;title&gt;Weather App&lt;/title&gt;      &lt;!-- 引入Vue --&gt;      &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2&quot;&gt;&lt;/script&gt;      &lt;!-- 引入Axios --&gt;      &lt;script src=&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;      &lt;style&gt;          /* 简单的样式 */          #app &#123;              margin: 50px;              text-align: center;          &#125;          input, button &#123;              margin: 10px;          &#125;      &lt;/style&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;div id=&quot;app&quot;&gt;      &lt;input type=&quot;text&quot; v-model=&quot;city&quot; placeholder=&quot;Enter city name&quot; @keyup.enter=&quot;getWeather&quot;&gt;      &lt;button @click=&quot;getWeather&quot;&gt;Get Weather&lt;/button&gt;      &lt;br/&gt;    &#123;&#123;weather.location[0].fxLink&#125;&#125;    &lt;p v-html=&quot;weather.location[0].fxLink&quot;&gt;&lt;/div&gt;    &lt;script&gt;      // Vue实例      new Vue(&#123;          el: &#x27;#app&#x27;,          data: &#123;              city: &#x27;&#x27;,              weather: &#123;                    code:200,                    location:[                        &#123;                           name: &quot;海淀&quot;,                            id: &quot;101010200&quot;,                            lat: &quot;39.95607&quot;,                            lon: &quot;116.31032&quot;,                            adm2: &quot;北京&quot;,                            adm1: &quot;北京市&quot;,                            country: &quot;中国&quot;,                            tz: &quot;Asia/Shanghai&quot;,                            utcOffset: &quot;+08:00&quot;,                            isDst: &quot;0&quot;,                            type: &quot;city&quot;,                            rank: &quot;15&quot;,                            fxLink: &quot;https://www.qweather.com/weather/haidian-101010200.html&quot;                        &#125;                    ],                            &#125;          &#125;,          methods: &#123;              getWeather: function() &#123;                  if (!this.city) &#123;                      alert(&#x27;Please enter a city name!&#x27;);                      return;                  &#125;                  var vm = this;                  axios.get(                    &quot;https://geoapi.qweather.com/v2/city/lookup?location=&quot; + this.city + &quot;&amp;key=50a831558a6e47efaf68994e101b0e42&quot;)                      .then(function(response) &#123;                          vm.weather = response.data;                      &#125;)                      .catch(function(error) &#123;                          console.error(&#x27;Error fetching weather:&#x27;, error);                          alert(&#x27;Failed to fetch weather.&#x27;);                      &#125;);              &#125;          &#125;      &#125;);  &lt;/script&gt;    &lt;/body&gt;  &lt;/html&gt;\n","categories":["vue"],"tags":["vue"]},{"title":"一篇文章学完接口测试","url":"/2024/07/29/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%AD%A6%E5%AE%8C%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/","content":"","categories":["接口测试"],"tags":["接口测试"]},{"title":"专升本英语","url":"/2024/06/22/%E4%B8%93%E5%8D%87%E6%9C%AC%E8%8B%B1%E8%AF%AD/","content":"2024-6-181. 中英文句子的对比1.英语学习的最小单位是句子（而不是单词）2.什么是英语的句子？（1）英语的句子可以没有主语，那就是动词原形开头，成为祈使句，在表示“建决要命”（建议）（决定）（要求）（命令）时才可以用。\n放松。    \nRelax.    v.\n\n请进来。 \nPlease come in.||Come in,please.     please既可以在句首也可以句末。\n\n走吧。\n Let’s go.      let  就是动原（动词原形），“使，让”   let us go.\n\n别笑。\nDon’t laugh.否定句——要加否定词 not肯定句\n\n\n祈使句小结除了动词原形直接开头，还可以：\n\nplease&lt;==&gt;请\n\n如果是否定，需要加don’t,或者Never (laugh)\n\n有种特别常用的祈使句是let’s do\n\n\n(2)英语句子可以没有宾语，即动作后面没有承受者补充：主语是句中动作的发出者；宾语是句中动作的承受者\n\n她笑了    She laughs.\n=&gt;句中的动作要用动词表示，而英语中的动词是有变化的。(痛点)P26\n\n\n动词变化的五种形式：(跳转链接)\n\n原形\n三单（第三人称单数）——变形条件：\n\n​                a.主语是第三人称单数（人称分为第一人称，“我，我们”；第二人称“你，你们；第三人称”除了一二人称，都是第三==&gt;也就是说名词都是第三人称。\n​                b.时态是一般现在时\n\n现在分词    ==&gt;动词后面+ing\n过去式——变形条件：1时态是一般过去时2主语一般没有要求  ==&gt;一般动词后面+ed\n\n\n他失败了。\n 汉译英，很重要的一点是要判断时态\n==&gt;He failed. 汉语中的“了，过”，对应英语“-ed”\n\n\n主谓结构小结   动词后面没有宾语，称为“主谓”，这是完整句，此时的动词，在英语中称为“不及物动词vi”\n宾语小结宾语一般跟在动词和介词后，分别称为动宾和介宾\nlook at me/us/you/him/her/it/them\n(3)英语句子中必须有谓语，而且只能有一个（有且仅有）​    谓语是由动词来充当的，动词分为两种，一种表示动作，一种表示“非动作”\n\n阿珍爱阿强\nAzhen loves Aqiang.\n只有一般现在时，才需要考虑“动词的三单”形式\n\n中国人不骗中国人\n动词是“骗”，“不”是否定词\n先想时态——一般现在时\nChinese don’t cheat/pian Chinese.\n\n你很漂亮\n找动词——没有——是说明这句话中没有表示“动作”的词\nYou are very/so beautiful.\nare——是怎么来的\nare 是be的变形；be的意思是“是”\n你是很漂亮。\n补充：如果在汉译英过程中，汉语句中不体现动作，那么英语句子就要用以be为代表的一类动词——联系动词——不代表主语发出对宾语的动作，而是主语自己的状态、性质、变化……\n补充2：动词分为表示动作的“实义动词”和不表示动作的“联系动词-be”\n\n英语很重要\n无论用什么动词，都要先想时态\n一般现在时\nEnglish is exceedingly/extraordinarily important.\n很 very    ==>    exceedingly、extraordinarily\n\n\n\n小结​    表示动作的实义/意动词（英语中还有一种动词是“使役动词”，后面单独讲），动作如果能直接跟宾语，就是及物动词vt；如果不能直接跟宾语，就是不及物动词vi——P22\n\n遥墙机场就要到了\n\n补充：汉译英的步骤\n\n找汉语句中的动词\n\n判断动词表示的动作的发出者——主语\n\n然后判断发出者和动作的关系（主被动关系）\n\n然后确定句子的时态\n\n\nWe are arriving at Yaoqiang Airport.\nOur flight is arriving at Yaoqiang Airport.\nbe——变形    am,is,are\n\n我要去剪头\n主语是能够发出动作的人，句中主要的动作是“剪”\ncut hair\nTony will cut my hair.\n\n\n小结​        找句子的主语，一定要先判断句子的动词——主语就是能够发出这个动作的人或事（主语就是句中动作的发出者）\n2024-6-23\n飞机上有很多饮料\n-&gt;”汉语没有语法性？”,汉语省略了很多东西\n\n动词 —有\n\n动词发出者—-不明确，甚至可以说没有\nthere be “有”\n还有一个表示“有”——have\n—&gt;举例：\n​    我有女朋友。\n​    I have a girlfriend.\n\n\n\n\n   很多的表达————&gt;\n\n   ​    普通的：many/a lot of/a lots of \n\n   There are  &lt;font color=&quot;red&quot;&gt;various/a variety of&lt;/font&gt;    drinks on the plane.\n\n   &lt;font color=&quot;blue&quot;&gt;地点的前面要加介词。&lt;/font&gt;\n小结:there be 句型的使用条件\n句中的动作是“有”\n\n“有”的发出者不明确\n\n\n\n从前有座山\nThere was a mountain long long ago.\nLong long ago,there was a mountain.\n时间状语可以在句首或句尾\n\n有朋自远方来，不亦乐乎​有个朋友从远方来，我非常开心。\n\n先找动词\n\n有——动作发出者不明确\n\n一个句子中\n\n\n方案一：试试三个句子\nThere is a friend.Come from a far place.I am very happy.  \n祈使句：Come from a place.(“从远方来”)\n方案二：如果一个句中，有多余一个的谓动，可以保留一个做谓动，另外一个变成非谓语动词（由动词变化而来，不做谓语的形式——doing 主动/done 被动/to do 目的，将来）\nThere is a friend coming from a far place.Iam exceedingly delighted.\n​    补充例子：你爱我，我爱你，蜜雪冰城甜蜜蜜。\n​    方案一：You love me,I love you,MXBC  is sweet.\n​                英语中不存在叠词。\n​    方案二：You loving me,I loving you,MXBC is sweet.\n​    独立主格结构​    \n\n\n2.英语句子的标志专升本英语考试的最小单位是句子。英语句子的标志\n句首单词首字母大写\n句尾是三个标点（句号，问号，感叹号）英语的句号是.\n句中带有时态，语态，情态，主谓一致的谓语动词（3态1致）\n\n3.英语简单句的类型\n祈使句\nthere be\n主谓\n主谓宾\n主系表\n主谓双宾\n主谓宾宾补\n\n3.句子完整的概念1.简单句：有且仅有一个谓动的句子\n\n主干部分：主谓宾表补\n附属部分（修饰成分）：定语，状语，同位语\n\n2.并列句：由“并列连词”连接的两个或多个简单句\n3.主从复合句\n补充：\nnot是最常用的否定副词，但是有很多单词可以来代替它\nhardly 几乎不/never 绝不/rarely 几乎不/little 几乎不\nnot…but… 可以变成hardly…but…;never…but…;rarely…but rather…    不是…而是\n常考并列连词\n\n\n\n\n\n\n\n\n\n\n\n表示并列关系的并列连词\nand和\nboth……and……两者都\n\n\n\n\nnot only(just,merely,solely)……but(also)(too)(as well)不仅……而且……\n\n\n\n\nnot…but…/not…but only…/not…but rather…/hardly…but just…不是…而是…\n\n\n\n\nneither…nor…/not…nor… 既不…也不…\n\n\n表示选择关系的并列连词\nor或者\neither…or..或者…或者…,or else 或者\n\n\n表示对比关系的并列连词\nwhile/whereas而\n*作为并列连词，不放在句首\n\n\n表示转折关系的并列连词\nbut 但是/yet 然而，但是/only（但是，可是）\nand yet 然而，但是\n\n\n表示原因关系的并列连词\nfor\n*只能在句中，且在逗号后\n\n\n表示结果关系的并列连词\nso\n\n\n\n\n常考从句引导词\n\n\n\n\n最强搭配\nthat 引导词的从句类型最多，而且用法最多，使用频率最高看到that想从句\n\n\n\n\nwh-代词类\nwhat（表示名词），who（表示人），which（表示物，有时候会是“介词+which”），whose+n（表示谁的什么）\n\n\nwh-副词类\nwhen（和时间有关），where（和地点有关），why（和原因有关），how（和“怎样””多么“有关）\n\n\nwh-连词类\nwhether（一般和or not搭配使用，表示”是否“）\n\n\n其他常考引导词\n1. while/as 意思和用法都非常多2.although（虽然，尽管），though（尽管）（也可以做副词用）3.because（因为）4.before（和”前“有关），after（和”后“有关）5.since（意思很多，主要是”自从“）6.until（主要考点是not……until……直到……才……）7.if（如果）8.once（一旦）9.unless（除非）10.than（比）\n\n\n\n\n动词的五种形式\n\n\n\n\n类型\n原形\n三单\n现在分词\n过去式\n过去分词\n\n\n\n\n中规中矩型\nask\nasks\nasking\nasked\nasked\n\n\n\nlook\nlooks\nlooking\nlooked\nlooked\n\n\ny结尾变化型\ntry\ntries\ntrying\ntried\ntried\n\n\ny结尾不变型\nplay\nplays\nplaying\nplayed\nplayed\n\n\n双写型\nstop\nstops\nstopping\nstopped\nstopped\n\n\n\nbegin\nbegins\nbeginning\nbegan\nbegun\n\n\n\ncontrol\ncontrols\ncontrolling\ncontrolled\ncontrolled\n\n\n不双写型\nopen\nopens\nopening\nopened\nopened\n\n\n\nifx\nfixes\nfixing\nfixed\ndixed\n\n\n可双可不双型\ntravel\ntravels\ntravelling\ntravelled\ntravelled\n\n\n+es型\nwatch\nwatches\nwatching\nwatched\nwatched\n\n\n\ngo\ngoes\ngoing\nwent\ngone\n\n\n去e型\nlive\nlives\nliving\nlived\nlived\n\n\n-c结尾型\npicnic\npicnics\npicnicking\npicnicked\npicnicked\n\n\n一身反骨型\nhave\nhas\nhaving\nhad\nhad\n\n\n\nbe\n(am)is are\nbeing\nwas/were\nbeen\n\n\n\n\n选词填空的做题步骤：\n先看选项（15/12/10），重点看词尾\n\n看横线所在句，先标点（分区），再谓动，看是几个谓语动词，如果只有一个，那就是简单句，如果有多个，那就要考虑并列句（并列连词）或主从复合句（引导词）\n考点练习：\nA.helpful B.than C.attraction D.that E.who F.inG.respected H.win I.because J.giving K.without L.equally\nWhy are we not treated sometimes as expected?It’s     空 we do the same to others who have expectations from us. \n\n\n​    需要引导词或并列连词，看给出单词，没有并列连词，因此是引导词，than/that/who/because,此时一定先找考点”心中有丘壑，眼中有考点“——前why，后because\n2024-6-24P19 谓动的标志\n必要性：在词汇量不够大的情况下，能够识别最典型的谓动\n\nam is are was were\n\ndo does did\n\nhas have had\n\n情态动词（+动词原形）\n\n动词过去式\n\n\n\n\nPrecious metals gradually took over because they were portable,durable,recognizable,and divisible into larger and smaller of value.\n补充：从句从什么开始，到什么结束\n​        从引导词开始到标点结束或者引导词后面第二个谓动之前结束。\n补充：当多个逗号同时出现在附近的位置，且后面不远处就有并列连词，尤其是and，这些逗号，都是代替and\n谓语动词的要素3态1一致​            forecast 预测，预告        cancer 癌症     rate 率    ans：C indicates\n做题步骤：\n先看标点，找到逗号前后看，but是并列连词，说明前后是并列，而横线在后面，所以but前面的部分可以先不看。\n\n把but后面的内容当成一个整体，再切分，看到两个挨得很近的逗号，中间为插入语，,but the newest finding,先不看\n\n看到that想从句，看到have谓动标志，因此that…have…是从句，横线不在从句中\n\n看主句缺什么？缺谓动4要素：时态，语态，情态，主谓一致，在选词填空中，一般判断出来缺谓动，只需要考虑时态和主谓一致\n\n补充：英语的时态有16种，一般可以简单的分为2种（过去和现在）过去就是所有名称中带着过去的；其他都归于现在\nhas/have/done都是现在完成时，他们对应的就应该是现在的时态：一般现在时，现在进行时\n过去完成时 had done，对应过去的时态——一般过去时，过去进行时\n考点：4大金刚study是研究，    study/research\n调查    survey（investigation）实验   experiment(trial)\nfinding 发现（conclusion）\nindicate 表明\nhit…level 达到…水平/程度\n\n\n\n补充：句首的并列连词，作用是连接本句和上一句，因此，对本句后面的内容，就没有影响了。\n补充：like如果在逗号前或后，尤其是在插入语中，like是介词，“像…,比如说…”;多个逗号同时出现在附近，后面有and\n考点：并列考点\n看到and找并列，从前往后，一一对应，前面有什么，后面也要在词性，词形，\n​    fufillment满足感    achievement成就感\n看到and找并列从后往前\nbeside 除此之外    however 然而，前后是转折\n\n​                逗号后面有两个谓动，说明至少需要一个并列连词或引导词（并/引）    \nbroad 宽广的\nin the briadest sense 从最广义来说\nin…sense 从…意义上来说\n\nmoderate adj.适中的\nassure sb 让某人放心\n\n\n\n还要注意：有很多副词是由其形容词+ly变化而来，但是意思发生了改变\n\nP160    各种词性后缀常考不带ly的副词\n\n\n\n\n\n\n\n\n\n\n\n\n\nvery 非常\nmuch 非常\nwell 非常\nquite 非常\npretty 非常，特别\nrather 非常\n\n\noften 经常\nhard 勤奋地\nalready 已经\nalmost 几乎\nstill 仍然；但，不过\nthen 接着，另一个\n\n\nfast 快地\nperhaps 可能\nenough 足够的\njust 仅仅\nonce 一次\nlittle 很少的\n\n\neven 甚至\nalone 独自\n\n\n\n\n\n\n\n带ly但实际是形容词\n\n\n\n\n\n\n\n\n\n\n\n\n\nFriendly 友好的\nlovely 可爱的\nLively 活泼的\nlikely 可能的\nlonely 孤独的\nelderly 年纪较大的\n\n\ncostly 贵的\nWeekly 每周的\nMonthly 每月的\nquarterly 季度的\ndaily 每天的\ndeadly 致命的\n\n\nsilly 傻的\nfatherly 父亲般的\nmotherly 母亲般的\nbrotherly 兄弟般的\norderly 有秩序的\nugly 丑的\n\n\nkindly 善良的\n\n\n\n\n\n\n\n\n","categories":["专升本"],"tags":["专升本英语"]},{"title":"二分法的两种写法","url":"/2024/03/30/%E4%BA%8C%E5%88%86%E6%B3%95%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95/","content":"\n      \n        \n      \n      \n        \n          \n          \n            输入密码\n          \n        \n        \n      \n    \n    ","categories":["数据结构"],"tags":["数据结构"]},{"title":"二分查找跟遍历查找的区别","url":"/2024/03/25/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E8%B7%9F%E9%81%8D%E5%8E%86%E6%9F%A5%E6%89%BE%E7%9A%84%E5%8C%BA%E5%88%AB/","content":"\n      \n        \n      \n      \n        \n          \n          \n            输入密码\n          \n        \n        \n      \n    \n    ","categories":["数据结构"],"tags":["数据结构"]},{"title":"二分算法","url":"/2024/03/11/%E4%BA%8C%E5%88%86%E7%AE%97%E6%B3%95/","content":"二分查找算法知识点\n二分查找原理讲解\n在单调递增序列 a 中查找 x 或 x 的后继\n在单调递增序列 a 中查找 x 或 x 的前驱\n\n二分查找算法讲解枚举查找即顺序查找，实现原理是逐个比较数组 a[0:n-1] 中的元素，直到找到元素 x 或搜索整个数组后确定 x 不在其中。最坏情况下需要比较 N 次，时间复杂度是 O(n)，属于线性阶算法。\nclass Solution &#123;      public int search(int[] nums, int target) &#123;          int left = 0, right = nums.length;          while (left &lt; right) &#123;              int mid = left + ((right - left) &gt;&gt; 1); // 无符号右移等同于除以2取整              if (nums[mid] == target)                  return mid;              else if (nums[mid] &lt; target)                  left = mid + 1;              else if (nums[mid] &gt; target)                  right = mid - 1; // 修改这里，应该是 mid - 1          &#125;          return -1; // 如果循环结束还没有找到，说明目标值不存在于数组中      &#125;  &#125;\n折半查找的基本思想：\n在有序表中（low, high, low&lt;=high），取中间记录即 a[(high+low)/2] 作为比较对象。\n\n若给定值与中间记录的关键码相等，则查找成功。\n若给定值小于中间记录的关键码，则在中间记录的左半区继续查找。\n若给定值大于中间记录的关键码，则在中间记录的右半区继续查找。\n\n不断重复上述过程，直到查找成功或所查找的区域无记录，查找失败。\n二分查找的特征：\n\n答案具有单调性。\n二分答案的问题往往有固定的问法，例如：令最大值最小（最小值最大），求满足条件的最大（小）值等。\n\n折半查找一般过程：\n\nStep 1:假设存在一个有序数组：下标[ 0   1   2   3   4   5   6   7   8    9    10   11   12 ]数据[ 7   14  18  21  23  29  31  35   38   42   46   49  52 ]      ↑                                                   ↑    low=0                                              high=12                            mid=(low+high)/2                            mid=(0+12)/2                            mid=6                            [mid]=31 &gt; 14，所以选择左半部分操作：    此时令low不变，high=mid-1=5Step 2:下标[ 0   1   2   3   4   5   6   7   8    9    10   11   12 ]数据[ 7   14  18  21  23  29  31  35   38   42   46   49  52 ]      ↑                   ↑   low=0                 high=5            mid=(low+high)/2            mid=(0+6)/2            mid=3            [mid]=21 &gt; 14，所以选择左半部分操作：    此时令low不变，high=mid-1=2Step 3:下标[ 0   1   2   3   4   5   6   7   8    9    10   11   12 ]数据[ 7   14  18  21  23  29  31  35   38   42   46   49  52 ]      ↑       ↑   low=0    high=2            mid=(low+high)/2            mid=(0+2)/2            mid=1            [mid]=14 = 14  找到答案操作：    返回下标\n这个文本看起来更加清晰，修正了一些不规范的表达。\n整数二分法常用算法模板C++ 语言描述// 在单调递增序列a中查找&gt;=x的数中最小的一个（即x或x的后继）while (low &lt; high)&#123;    int mid = (low + high) / 2;    if (a[mid] &gt;= x)        high = mid;    else        low = mid + 1;&#125;// 在单调递增序列a中查找&lt;=x的数中最大的一个（即x或x的前驱）while (low &lt; high)&#123;    int mid = (low + high + 1) / 2;    if (a[mid] &lt;= x)        low = mid;    else        high = mid - 1;&#125;\nPython 语言描述\n#在单调递增序列a中查找&gt;=x的数中最小的一个（即x或x的后继）while low&lt;high:  mid=(low+high)/2  if(a[mid]&gt;=x):      high=mid  else:      low=mid+1#在单调递增序列a中查找&lt;=x的数中最大的一个（即x或x的前驱）while low&lt;high:  mid=(low+high+1)/2  if(a[mid]&lt;=x):      low=mid  else:      high = mid-1\nJava 语言描述\n// 在单调递增序列a中查找&gt;=x的数中最小的一个（即x或x的后继）while (low &lt; high) &#123;    int mid = (low + high) / 2;    if (a[mid] &gt;= x)      high= mid;  else      low = mid + 1;&#125;// 在单调递增序列a中查找&lt;=x的数中最大的一个（即x或x的前驱）while (low &lt; high) &#123;    int mid = (low + high + 1) / 2;    if (a[mid] &lt;= x)      low = mid;  else      high = mid - 1;&#125;\n此处我们先分整数的二分查找法的常用模版，关于实数的部分，我们后面再讲。\n\n下面可能会有同学会疑问道：为什么采用这一套代码的而不是采用查找等于的 X？\n是因为这样的适用范围更广，当有 X 时这套代码就返回 X 的位置。如果没有 X，就返回 &lt;=x 的数中最大的一个或者 &gt;=x 的数中最小的一个。\n\n分巧克力2017 年省赛真题链接。\n题目描述: 儿童节那天有 K 位小朋友到小明家做客。小明拿出了珍藏的巧克力招待小朋友们。\n小明一共有 $N$ 块巧克力，其中第 $i$ 块是 $H_i \\times Wi$ 的方格组成的长方形。为了公平起见，\n小明需要从这 $N$ 块巧克力中切出 K 块巧克力分给小朋友们。切出的巧克力需要满足：\n\n形状是正方形，边长是整数;\n大小相同;\n\n例如一块 6x5 的巧克力可以切出 6 块 2x2 的巧克力或者 2 块 3x3 的巧克力。\n当然小朋友们都希望得到的巧克力尽可能大，你能帮小明计算出最大的边长是多少么？\n输入描述:\n第一行包含两个整数 $N,K$ ($1  \\leq  N, K  \\leq  10^5$)。\n以下 N 行每行包含两个整数 $H_i,W_i$ ($1  \\leq  H_i, W_i  \\leq  10^5$)。\n输入保证每位小朋友至少能获得一块 1x1 的巧克力。\n输出描述:\n输出切出的正方形巧克力最大可能的边长。\n输入输出样例:\n示例:\n\n输入\n\n2 10 6 5 5 6\n\n输出\n\n2\n运行限制:\n\n最大运行时间：2s\n最大运行内存: 256M\n\n注意：\n\n请严格按要求输出，不要画蛇添足地打印类似：“请您输入…”的多余内容。\n不要调用依赖于编译环境或操作系统的特殊函数。\n所有依赖的函数必须明确地在源文件中\n不能通过工程设置而省略常用头文件。\n\n题目分析简单思路，边长的最大规模为 $100000$；我们可以枚举出所有的情况。按从大到小的顺序进行切割，直到找到满足要求的巧克力边长。\n在判断边长是否满足条件时：求一块长方形$（h  w）$最多被分成的正方形$（len  len）$巧克力个数为：\n$cnt = (h / len) * (w / len)$\nxxxxxxxxxx43 1import os2import sys3​4import heapq5​6a = []7b = []8​9n,k = map(int,input().split())10​11for _ in range(n):12  x,y = map(int,input().split())13  a.append(x)14  b.append(y)15​16​17q = []18​19for i in range(n-1):20  heapq.heappush(q,(a[i],i))21​22​23t = k24​25ans = 026​27while t &gt; 0:28  w,i = heapq.heappop(q)29​30  heapq.heappush(q,(b[i],i))31  ans += w32  t -= 133​34​35ans2 = 036if k &gt;= n:37  ans2 += sum(a) + (k-n) * min(b)38​39​40if k &gt;= n:41  print(min(ans,ans2))42else:43  print(ans)python\n即用在单调递增序列 $a$ 中查找 $&lt;=x$ 的数中最大的一个（即 $x$ 或 $x$ 的前驱）即可，原本这里的条件是 $&lt;=x$ ，我们将其换成验证即可。\n代码解答C++ 实现：\n#include&lt;bits/stdc++.h&gt;using namespace std;const int MAXN=100010;int n,k;int h[MAXN],w[MAXN];bool pd(int l)&#123;    int sum=0;    for(int i=0; i&lt;n; i++)    &#123;        sum+=(h[i]/l)*(w[i]/l);        if(sum&gt;=k)        &#123;            return true;        &#125;    &#125;    return false;&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;k;    for(int i=0; i&lt;n; i++)        cin&gt;&gt;h[i]&gt;&gt;w[i];    //找到二分查找的上界    int high=0;    for(int i=0; i&lt;n; i++)    &#123;        high=max(high,h[i]);        high=max(high,w[i]);    &#125;    // 二分下届由题意可得至少为1    int low=1;    // 由于本题目就是求符合要求的Mid 值所以要将mid定义在二分查找外边    int mid=0;    while(low&lt;high)    &#123;        mid = (low + high+1) / 2;        if(pd(mid))            low=mid;        else            high = mid - 1;//        cout&lt;&lt;low&lt;&lt;&quot; &quot;&lt;&lt;high&lt;&lt;endl;    &#125;    //因为low=high所以输出哪一个都一样    cout&lt;&lt;low;    return 0;&#125;\n查找上界这里可以直接输入的时候查询，这道题实际上是可以少次操作的，代码如下。\nPython 实现\nN=K=0h=[]w=[]def pd(l): sum1=0 for i in range(N):   sum1+= (h[i]//l)* (w[i]//l)   # Java C++ 的除法都是自己取整，Python会换成小数，Python的取整除法是//   if sum1&gt;=K :       return True return Falseif __name__ == &#x27;__main__&#x27;:   inFor = input().split()   N=int(inFor[0])   K=int(inFor[1])   #找到二分查找的上界   high=0   for _ in range(N):       wi, hi = map(int, input().split())       w.append(wi)       h.append(hi)       high=max(high,max((hi,wi)))   # 二分下届由题意可得至少为1   low=1   #由于本题目就是求符合要求的Mid 值所以要将mid定义在二分查找外边   mid=0   while low&lt;high :       mid= int ( (low+high+1)//2)       if pd(mid):           low=mid       else:           high=mid-1   #因为low=high所以输出哪一个都一样   print(low)\nJava 实现\nimport java.util.Scanner;import static java.lang.Integer.max;public class Main &#123;  static int n, k;  static int h[] = new int[100005];  static int w[] = new int[100005];  static boolean pd(int l) &#123;      int sum = 0;      for (int i = 1; i &lt;= n; i++) &#123;          sum += (h[i] / l) * (w[i] / l);          if (sum &gt;= k) &#123;              return true;          &#125;      &#125;      return false;  &#125;  public static void main(String[] args) &#123;      Scanner in = new Scanner(System.in);      n = in.nextInt();      k = in.nextInt();      //找到二分查找的上界      int high = 0;      for (int i = 1; i &lt;= n; i++) &#123;          h[i] = in.nextInt();          w[i] = in.nextInt();          high = max(high, h[i]);          high = max(high, w[i]);      &#125;      // 二分下届由题意可得至少为1      int low = 1;      // 由于本题目就是求符合要求的Mid 值所以要将mid定义在二分查找外边      int mid = 0;      while (low &lt; high) &#123;          mid = (low + high + 1) / 2;          if (pd(mid))              low = mid;          else              high = mid - 1;          //        cout&lt;&lt;low&lt;&lt;&quot; &quot;&lt;&lt;high&lt;&lt;endl      &#125;      //因为low=high所以输出哪一个都一样      System.out.println(low);  &#125;&#125;\n模板中的 &lt;= 和 =&gt; 都可以换成其他判定条件，像上面根据题目分析即可。\nM 次方根题目描述:\n小 A 最近在学高等数学，他发现了一道题，求$\\sqrt[3]{27}$ 。现在已知，小 A 开始计算，$1$ 的三次方得$1$，$2$ 的三次方得$8$，$3$ 的三次方得$27$，然后他很高兴的填上了$3$。\n接着他要求$\\sqrt[5]{164}$ 。然后他开始$1$ 的三次方得$1$，$2$ 的三次方得$8$，$3$ 的三次方得$27$…\n直到他算到了秃头，也没有找到答案。\n这时一旁的小 B 看不下去了，说这题答案又不是个整数。小 A 震惊，原来如此。作为程序高手的小 A，打算设计一个程序用于求解 $M$ 次根下$N$的值。\n但是由于要考虑精度范围，答案必须要保留 $7$ 位小数，连三次根号下$27$都要掰手指的小 A 又怎么会设计呢。请你帮小 A 设计一个程序用于求解 $M$ 次根号$N$。\n数据范围：\n$1 \\leq N \\leq 1e5$ $1 \\leq M \\leq 100$ 且 $M &lt; N$\n要求输入:\n输入描述:第一行输入整数 N 和 M，数据间用空格隔开。\n要求输出：\n输出描述: 输出一个整数，并保留 7 位小数。\n样例:\n输入样例：27 3输出样例：3.000000\n运行限制:\n最大运行时间：1s最大运行内存: 256M注意：1. 请严格按要求输出，不要画蛇添足地打印类似：“请您输入…” 的多余内容。2. 不要调用依赖于编译环境或操作系统的特殊函数。3. 所有依赖的函数必须明确地在源文件中。4. 不能通过工程设置而省略常用头文件。\n题目分析前面讲的都是整数二分，其实二分法还是可以用于实数。这个题目比较难，很多同学可能想不明白，想不明白就多读题，写写画画理解一下。这个题还有很多解法，现在告诉你了这道理用二分可以解答，请设计一个二分程序。\n首先是这道题我们怎么下手：\n根据前面的知识，我们要找到一个具有单调性的数列，去二分。这个题的关键是我们要去二分什么，这里可以二分的是 $a^M$ 中的 $a$，所以我们要先想办法设计出用于处理实数二分的代码。\n这里给大家两个模板，都可以大家选择一个使用即可：\nC++ 模版：\n//模版一：实数域二分，设置eps法//令 eps 为小于题目精度一个数即可。比如题目说保留4位小数，0.0001 这种的。那么 eps 就可以设置为五位小数的任意一个数 0.00001- 0.00009 等等都可以。//一般为了保证精度我们选取精度/100 的那个小数，即设置 eps= 0.0001/100 =1e-6while (l + eps &lt; r)&#123;    double mid = (l + r) / 2;    if (pd(mid))        r = mid;    else        l = mid;&#125;//模版二：实数域二分，规定循环次数法//通过循环一定次数达到精度要求，这个一般 log2N &lt; 精度即可。N 为循环次数，在不超过时间复杂度的情况下，可以选择给 N 乘一个系数使得精度更高。    for (int i = 0; i &lt; 100; i++)&#123;    double mid = (l + r) / 2;    if (pd(mid))        r = mid;    else        l = mid;&#125;\nPython 模版:\n# 实数域二分，设置eps法# 令eps 为小于题目精度一个数即可，比如题目说保留4位小数，0.0001 这种的。那么eps 就可以设置为五位小数的任意一个数 0.00001- 0.00009 等等都可以。一般为了保证精度我们选取精度/100 的那个小数eps = 1e-6while l + eps &lt; r:  mid = (l + r) / 2  if (pd(mid)):      r = mid  else:      l = mid# 实数域二分，规定循环次数法# 通过循环一定次数达到精度要求，这个一般 log2N&lt; 精度即可。N 为循环次数，在不超过时间复杂度的情况下，可以选择给N乘一个系数使得精度更高。for _ in range(100):  mid = (l + r) / 2  if (pd(mid)):      r = mid  else:      l = mid\nJava 模版:\n//令eps 为小于题目精度一个数即可。//比如题目说保留4位小数，0.0001 这种的。那么eps 就可以设置为五位小数的任意一个数 0.00001- 0.00009 等等都可以。一般为了保证精度我们选取精度 /100 的那个小数，即设置  eps= 0.0001/100 =1e-6。while (l + eps &lt; r) &#123;    double mid = (l + r) / 2;    if (pd(mid))      r = mid;  else      l = mid;&#125;// 实数域二分，规定循环次数法//通过循环一定次数达到精度要求，这个一般log2N&lt; 精度即可。N为循环次数，在不超过时间复杂度的情况下，可以选择给N乘一个系数使得精度更高。for (int i = 0; i &lt; 100; i++) &#123;    double mid = (l + r) / 2;    if (pd(mid))      r = mid;  else      l = mid;&#125;\n模板讲完了，然后我们就要考虑判定条件了，怎样判定是否存在满足大于平均值的区间。当然这个题你可以使用语言中自带开方软件，但是我们还是联系一下实数的二分代码。\n关于判定条件，我们应该设计一个代码用于比较 $a^m$ 和 $N$ 的大小关系。\n在我们代码中：\nif (pd(mid))    r = mid;else    l = mid;\n$pd$ 成功的情况，一定是 $pd$ 的 $mid$ 符合条件，且小于 $mid$ 的一定符合条件。因此我们要在大于 $mid$ 中继续查找，找到更大的 $mid$。\n所以我们可以设计出如下判定条件:\ndouble pd(double a,int m)&#123;    double c=1;    while(m&gt;0)    &#123;        c=c*a;        m--;    &#125;    if(c&gt;=n)        return true;    else        return false;&#125;\n代码解答C++ 实现：\n#include &lt;cstdio&gt;#include &lt;iostream&gt;#include&lt;iomanip&gt; //用于浮点数输出using namespace std;double n,l,r,mid;double eps=1e-8;bool pd(double a,int m)&#123;    double c=1;    while(m&gt;0)    &#123;        c=c*a;        m--;    &#125;    if(c&gt;=n)        return true;    else        return false;&#125;int main()&#123;    int m;    cin&gt;&gt;n&gt;&gt;m;//设置二分边界    l=0,r=n;//实数二分    while (l + eps &lt; r)    &#123;        double mid = (l + r) / 2;        if (pd(mid,m))            r = mid;        else            l = mid;    &#125;    cout&lt;&lt;fixed&lt;&lt;setprecision(7)&lt;&lt;l;    //一般使用print    //printf(&quot;%x.yf&quot;,n)    //其中X是固定整数长度，小数点前的整数位数不够，会在前面补0    //y是保留小数位数，不够补零    //printf(&quot;%.7f&quot;,l);    return 0;&#125;\n查找上界这里可以直接输入的时候查询，这道题实际上是可以少次操作的，代码如下。\nPython 实现\nn = 0.0m = 0l = 0.0r = 0.0mid = 0.0eps = 0.00000001def pd(a, m):  c = 1.0  cnt = int(m)  while cnt &gt; 0:      c = c * a      cnt -= 1  if c &gt;= n:      return True  else:      return Falseif __name__ == &#x27;__main__&#x27;:  n, m = input().split()  l = 0  r=n=int(n)  while l + eps &lt; r:      mid = (l + r) / 2      if (pd(mid, m)):          r = mid      else:          l = midprint(&quot;%.7f&quot; % l)\nJava 实现\npackage com.company;import java.util.Scanner;public class Main &#123;  static double n, l, r, mid;  static double eps = 1e-8;  static boolean pd(double a, int m) &#123;      double c = 1;      while (m &gt; 0) &#123;          c = c * a;          m--;      &#125;      if (c &gt;= n)          return true;      else          return false;  &#125;  public static void main(String[] args) &#123;      int m;      Scanner in =new Scanner(System.in);      n=in.nextDouble();      m=in.nextInt();//设置二分边界      l = 0;      r = n;//实数二分      while (l + eps &lt; r) &#123;          double mid = (l + r) / 2;          if (pd(mid, m))              r = mid;          else              l = mid;      &#125;      System.out.println(String.format(&quot;%.7f&quot;,l));  /*   关于string.format 的应用  double num = 123.4567899;  System.out.print(String.format(&quot;%f %n&quot;, num)); // 123.456790  System.out.print(String.format(&quot;%a %n&quot;, num)); // 0x1.edd3c0bb46929p6  System.out.print(String.format(&quot;%g %n&quot;, num)); // 123.457  可用标识：        -，在最小宽度内左对齐,不可以与0标识一起使用。        0，若内容长度不足最小宽度，则在左边用0来填充。        #，对8进制和16进制，8进制前添加一个0,16进制前添加0x。        +，结果总包含一个+或-号。        空格，正数前加空格，负数前加-号。        ,，只用与十进制，每3位数字间用,分隔。        (，若结果为负数，则用括号括住，且不显示符号。  可用转换符：        b，布尔类型，只要实参为非false的布尔类型，均格式化为字符串true，否则为字符串false。        n，平台独立的换行符, 也可通过System.getProperty(&quot;line.separator&quot;)获取。        f，浮点数型（十进制）。显示9位有效数字，且会进行四舍五入。如99.99。        a，浮点数型（十六进制）。        e，指数类型。如9.38e+5。        g，浮点数型（比%f，%a长度短些，显示6位有效数字，且会进行四舍五入）   */  &#125;&#125;\n总结二分的题目主要是必须要求是单调的，一般会有条件等字眼。做这种题目主要还是找到递增或者递减的序列，然后关于序列的判定条件。或者通过观察时间复杂度来看是否可以使用二分，二分法的题目相对来说比较明显，设计起来也比较简单，模板不用死记硬背，理解一下，很快就可以独立写出来。\n","categories":["蓝桥杯Note"],"tags":["蓝桥杯备赛","二分算法"]},{"title":"代码随想录突击版学习","url":"/2024/04/25/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AA%81%E5%87%BB%E7%89%88%E5%AD%A6%E4%B9%A0/","content":"二分查找给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。\n示例 1:\n输入: nums = [-1,0,3,5,9,12], target = 9     输出: 4       解释: 9 出现在 nums 中并且下标为 4     \n示例 2:\n输入: nums = [-1,0,3,5,9,12], target = 2     输出: -1        解释: 2 不存在 nums 中因此返回 -1        \n提示：\n\n你可以假设 nums 中的所有元素是不重复的。\nn 将在 [1, 10000]之间。\nnums 的每个元素都将在 [-9999, 9999]之间。\n\n思路首先，二分查找的使用限制：\n​    二分查找只使用于有序数组中，二分查找的边界需要进行判断\n使用python编写的模板：\n#在单调递增序列a中查找&gt;=x的数中最小的一个（即x或x的后继）def findMin(a,x,low,high):    while low&lt;high:        mid=int((low+high)/2)        if(a[mid]&gt;=x):            high=mid        else:            low=mid+1    print(a[high])#在单调递增序列a中查找&lt;=x的数中最大的一个（即x或x的前驱）def findMax(a,x,low,high):    while low&lt;high:        mid=int((low+high+1)/2)        if(a[mid]&lt;=x):            low=mid        else:            high = mid-1    print(a[low])a=[1,2,3,4,5,6,7,8,9,10]x=3low=0high=len(a)-1findMin(a,x,low,high)findMax(a,x,low,high)\t\t\t\n那么，使用java怎么实现呢？\n","categories":["数据结构"],"tags":["数据结构"]},{"title":"刷爆LeetCode","url":"/2024/07/29/%E5%88%B7%E7%88%86LeetCode/","content":"LeetCode 热题 100\n2024/7/29\n\n哈希\n\n1.两数之和链接\n知识点：数组哈希表\n暴力写法class Solution:    def twoSum(self, nums: List[int], target: int) -&gt; List[int]:        for i in range(len(nums)):            res=target-nums[i]            if res in nums[i+1:]:                return [i,nums[i+1:].index(res)+i+1]\nclass Solution &#123;public:    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123;        for(int i=0;;i++)&#123;            for(int j=i+1;j&lt;nums.size();j++)&#123;                if(nums[i]+nums[j]==target)&#123;                    return &#123;i,j&#125;;                &#125;            &#125;        &#125;    &#125;&#125;;\n哈希表写法class Solution:    def twoSum(self, nums: List[int], target: int) -&gt; List[int]:        idx = &#123;&#125;         for j, x in enumerate(nums):             if target - x in idx:                  return [idx[target - x], j]              idx[x] = j \nclass Solution &#123;public:    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123;        unordered_map&lt;int,int&gt; idx;        for(int j=0;;j++)&#123;            auto it =idx.find(target-nums[j]);            if(it!=idx.end())&#123;                return &#123;it-&gt;second,j&#125;;            &#125;            idx[nums[j]]=j;        &#125;    &#125;&#125;;\n49. 字母异位词分组链接\n知识点：数组哈希表字符串排序\nclass Solution:    def groupAnagrams(self, strs: List[str]) -&gt; List[List[str]]:        hashT=defaultdict(list)        for i in strs:            hashT[&quot;&quot;.join(sorted(i))].append(i)        return list(hashT.values())\nclass Solution &#123;public:    vector&lt;vector&lt;string&gt;&gt; groupAnagrams(vector&lt;string&gt;&amp; strs) &#123;        unordered_map&lt;string,vector&lt;string&gt;&gt; m;        for(auto &amp;s:strs)&#123;            string sorted_s=s;            ranges::sort(sorted_s);            m[sorted_s].push_back(s);        &#125;        vector&lt;vector&lt;string&gt;&gt; ans;        ans.reserve(m.size());        for(auto &amp;[_,value]:m)&#123;            ans.push_back(value);        &#125;        return ans;    &#125;&#125;;\n128. 最长连续序列链接\n知识点：并查集数组哈希表\nclass Solution:    def longestConsecutive(self, nums: List[int]) -&gt; int:        res = 0     # 记录最长连续序列的长度        num_set = set(nums)     # 记录nums中的所有数值        for num in num_set:            # 如果当前的数是一个连续序列的起点，统计这个连续序列的长度            if (num - 1) not in num_set:                seq_len = 1     # 连续序列的长度，初始为1                while (num + 1) in num_set:                    seq_len += 1                    num += 1    # 不断查找连续序列，直到num的下一个数不存在于数组中                res = max(res, seq_len)     # 更新最长连续序列长度        return res\n双指针\n\n283. 移动零链接\n知识点：数组双指针\nclass Solution:    def moveZeroes(self, nums: List[int]) -&gt; None:        offset = 0        for i in range(len(nums)):            if nums[i] == 0:                offset += 1            elif offset != 0:                nums[i - offset] = nums[i]                nums[i] = 0\n11. 盛最多水的容器链接\n知识点：贪心数组双指针\nclass Solution:    def maxArea(self, height: List[int]) -&gt; int:        i, j, res = 0, len(height) - 1, 0        while i &lt; j:            if height[i] &lt; height[j]:                res = max(res, height[i] * (j - i))                i += 1            else:                res = max(res, height[j] * (j - i))                j -= 1        return res\n\n2024/7/30\n\n15. 三数之和链接\n知识点：数组双指针排序\nclass Solution:    def threeSum(self, nums: List[int]) -&gt; List[List[int]]:                n=len(nums)        res=[]        if(not nums or n&lt;3):            return []        nums.sort()        res=[]        for i in range(n):            if(nums[i]&gt;0):                return res            if(i&gt;0 and nums[i]==nums[i-1]):                continue            L=i+1            R=n-1            while(L&lt;R):                if(nums[i]+nums[L]+nums[R]==0):                    res.append([nums[i],nums[L],nums[R]])                    while(L&lt;R and nums[L]==nums[L+1]):                        L=L+1                    while(L&lt;R and nums[R]==nums[R-1]):                        R=R-1                    L=L+1                    R=R-1                elif(nums[i]+nums[L]+nums[R]&gt;0):                    R=R-1                else:                    L=L+1        return res\n42. 接雨水链接\n知识点：栈数组双指针动态规划单调栈\nclass Solution:    def trap(self, height: List[int]) -&gt; int:        n = len(height)        pre_max = [0] * n  # pre_max[i] 表示从 height[0] 到 height[i] 的最大值        pre_max[0] = height[0]        for i in range(1, n):            pre_max[i] = max(pre_max[i - 1], height[i])        suf_max = [0] * n  # suf_max[i] 表示从 height[i] 到 height[n-1] 的最大值        suf_max[-1] = height[-1]        for i in range(n - 2, -1, -1):            suf_max[i] = max(suf_max[i + 1], height[i])        ans = 0        for h, pre, suf in zip(height, pre_max, suf_max):            ans += min(pre, suf) - h  # 累加每个水桶能接多少水        return ans\n滑动窗口\n\n3. 无重复字符的最长子串链接\n知识点：哈希表字符串滑动窗口\nclass Solution:    def lengthOfLongestSubstring(self, s: str) -&gt; int:        dic, res, i = &#123;&#125;, 0, -1        for j in range(len(s)):            if s[j] in dic:                i = max(dic[s[j]], i) # 更新左指针 i            dic[s[j]] = j # 哈希表记录            res = max(res, j - i) # 更新结果        return res\n438. 找到字符串中所有字母异位词链接\n知识点：哈希表字符串滑动窗口\nclass Solution:    def findAnagrams(self, s: str, p: str) -&gt; List[int]:        ans = []        lp = len(p)        cnt_p = Counter(p)        cnt_s = Counter()        for i in range(len(s)):            cnt_s[s[i]] += 1            if i &gt;= lp:                cnt_s[s[i-lp]] -= 1            if cnt_s == cnt_p:                ans.append(i-lp+1)            # print(cnt_s, cnt_p)        return ans\n子串\n\n560. 和为 K 的子数组链接\n知识点：数组哈希表前缀和\n参考题解：560. 和为 K 的子数组 - 力扣（LeetCode）\nclass Solution:    def subarraySum(self, nums: List[int], k: int) -&gt; int:        s = [0] * (len(nums) + 1)        for i, x in enumerate(nums):            s[i + 1] = s[i] + x        ans = 0        cnt = defaultdict(int)        for sj in s:            ans += cnt[sj - k]            cnt[sj] += 1        return ans\n","categories":["LeetCode"],"tags":["LeetCode"]},{"title":"刷爆码蹄集","url":"/2024/07/29/%E5%88%B7%E7%88%86%E7%A0%81%E8%B9%84%E9%9B%86/","content":" ","categories":["码蹄集"],"tags":["码蹄集"]},{"title":"刷爆蓝桥云课","url":"/2024/07/29/%E5%88%B7%E7%88%86%E8%93%9D%E6%A1%A5%E4%BA%91%E8%AF%BE/","content":"算法模板题\n2024/7/29\n\n蓝桥公园链接：1121蓝桥公园\n题目描述小明喜欢观景，于是今天他来到了蓝桥公园。\n已知公园有 $N$ 个景点，景点和景点之间一共有 $M$ 条道路。小明有 $Q$ 个观景计划，每个计划包含一个起点 $st$ 和一个终点 $ed$，表示他想从 $st$ 去到 $ed$。但是小明的体力有限，对于每个计划他想走最少的路完成，你可以帮帮他吗？\n输入描述输入第一行包含三个正整数 $N,M,Q$\n第 $2$ 到 $M + 1$ 行每行包含三个正整数 $u,v,w$，表示 $u\\leftrightarrow v$ 之间存在一条距离为 $w$ 的路。\n第 $M+2$ 到 $M + Q-1$ 行每行包含两个正整数 $st,ed$，其含义如题所述。\n$1\\leq N\\leq 400$，$1\\leq M \\leq \\dfrac{N\\times(N - 1)}{2}$，$Q\\leq 10^3$，$1\\leq u,v,st,ed \\leq n$，$1\\leq w \\leq 10^9$\n输出描述输出共 $Q$ 行，对应输入数据中的查询。\n若无法从 $st$ 到达 $ed$ 则输出 $-1$。\n输入输出样例示例 1\n输入\n\n3 3 31 2 11 3 52 3 21 21 32 3\n\n输出\n\n132\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n128M\n\n\nC\n1s\n128M\n\n\nPython3\n3s\n128M\n\n\nJava\n2s\n128M\n\n\nPyPy3\n3s\n128M\n\n\nGo\n3s\n128M\n\n\nJavaScript\n3s\n128M\n\n\n\n\n题解Floyd算法模板题\n#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;limits&gt;using namespace std;using ll = long long;#define INF 0x3f3f3f3f3f3f3f3fint main()&#123;    ios::sync_with_stdio(false);    cin.tie(0);    cout.tie(0);    ll N, M, Q;    cin &gt;&gt; N &gt;&gt; M &gt;&gt; Q;    vector&lt;vector&lt;ll&gt;&gt; G(N + 1, vector&lt;ll&gt;(N + 1, INF));    int i,j,k;    for (i = 1; i &lt;= N; i++) G[i][i] = 0;    for (i = 1; i &lt;= M; i++) &#123;        ll u, v, w;        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;        G[u][v] = min(G[u][v], w);        G[v][u] = min(G[v][u], w);    &#125;    for (k = 1; k &lt;= N; k++)        for (i = 1; i &lt;= N; i++)            for (j = 1; j &lt;= N; j++)                G[i][j] = min(G[i][j], G[i][k] + G[k][j]);    for (i = 1; i &lt;= Q; i++) &#123;        ll u, v;        cin &gt;&gt; u &gt;&gt; v;        if (G[u][v] == INF)            cout &lt;&lt; &quot;-1&quot; &lt;&lt; endl;        else            cout &lt;&lt; G[u][v] &lt;&lt; endl;    &#125;    return 0;&#125;\n","categories":["蓝桥云课"],"tags":["蓝桥云课"]},{"title":"力扣704. 二分查找","url":"/2024/03/30/%E5%8A%9B%E6%89%A3704-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/","content":"704. 二分查找 - 力扣（LeetCode）\n题目要求给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。\n示例 1:\n输入: nums = [-1,0,3,5,9,12], target = 9输出: 4解释: 9 出现在 nums 中并且下标为 4\n示例 2:\n输入: nums = [-1,0,3,5,9,12], target = 2输出: -1解释: 2 不存在 nums 中因此返回 -1\n提示：\n\n你可以假设 nums 中的所有元素是不重复的。\nn 将在 [1, 10000]之间。\nnums 的每个元素都将在 [-9999, 9999]之间。\n\n解题代码class Solution:    def search(self, nums: List[int], target: int) -&gt; int:        left=0        right=len(nums)-1        while left&lt;=right:            middle =int(left+((right-left)/2))            if nums[middle] &gt; target:                right =middle -1            elif nums[middle] &lt; target:                left=middle+1            else:                return middle        return -1\n","categories":["刷题","数据结构"],"tags":["数据结构","力扣"]},{"title":"力扣59. 螺旋矩阵 II","url":"/2024/03/30/%E5%8A%9B%E6%89%A359-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5-II/","content":"59. 螺旋矩阵 II\n题目要求给你一个正整数 n ，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix 。\n示例 1：\n\n输入：n = 3输出：[[1,2,3],[8,9,4],[7,6,5]]\n示例 2：\n输入：n = 1输出：[[1]]\n提示：\n\n1 &lt;= n &lt;= 20\n\n解题思路借鉴了编程文青李狗蛋的题解思路\n这是文章入口：ACM 选手图解 LeetCode 螺旋矩阵Ⅱ | 编程文青李狗蛋\nres = [[0 for _ in range(n)] for _ in range(n)]left,right,up,down=0,n-1,0,n-1cnt=1while cnt &lt;=n**2:    #从左到右    for i in range(left,right+1):        res[up][i]=cnt        cnt+=1    up+=1    #从上到下    for i in range(up,down+1):        res[i][right]=cnt        cnt+=1    right-=1    #从右到左    for i in range(right,left-1,-1):        res[down][i]=cnt        cnt+=1    down-=1    #从下到上    for i in range(down,up-1,-1):        res[i][left]=cnt        cnt+=1    left+=1return res\n","categories":["刷题","数据结构"],"tags":["数据结构","力扣"]},{"title":"动态规划","url":"/2024/03/11/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/","content":"动态规划（Dynamic Programming）实验介绍本节课我们进入动态规划课程的学习，动态规划是一种多阶段的决策过程最优化的问题。\n本课程对于算法学习非常重要，但是又比较难，我们讲解分 $3$ 个章节进行动态规划问题的讲解。\n今天的课程是动态规划系列的第一个章节。\n知识点\n动态规划的基本思想\n动态规划问题的基本套路与步骤\n\n为什么使用动态规划算法我们先回忆一下贪心问题。\n贪心又称贪婪算法。是一种在每一步选择中都采取在当前状态下最好或最优（即最有利）的选择，从而使得问题得到全局最优解。\n它的特点：\n贪心选择性质是指所求问题的整体最优解可以通过一系列局部最优的选择，即贪心选择来达到。\n这是贪心算法可行的第一个基本要素，也是贪心算法与动态规划算法的主要区别。\n贪心选择性质就是，该问题的每一步选择都在选择最优的情况下能够导致最终问题的答案也是最优。\n其实贪心和动态规划的区别，你可以理解为一个是正推，一眼就能看出来最优子结构，依次按照最优子结构选择每个过程最优选择即可。\n而动态规划是没办法按照题目的意思直接得到最有优子结构，如下文所述:\n多阶段决策过程最优化问题动态规划问题，是运筹学的一个分支，动态规划主要用于求解以时间划分阶段的动态过程的优化问题。\n在实际生活中，动态规划问题与贪心问题相似，都是完成某一事件的过程可以划分成多个阶段。\n但是与贪心不同的是动态规划的每个状态之间都会相互影响和相互干涉，也就是说在某一阶段做出的决策会影响整个事件的最终结果。\n因为阶段是有先后的，所以某一阶段的选取受之前阶段的影响，他也会影响后面的阶段。\n多阶段决策问题：\n多阶段决策过程问题，就是一类在每一阶段都需要做出选择，且某一阶段的决策受前面所有阶段决策后的状态影响，他的决策又会影响后续的决策。\n这样一类问题就是多阶段决策问题。\n多阶段决策过程最优化问题：\n在多阶段决策问题中，各个阶段采取的决策，通常与时间相关，但有时又与其他的线性的变量相关。\n我们前面说到，某个阶段的决策是在前面做完了的决策引发的某一个状态开始进行决策的。\n而现在做的决策又会使得状态进行转移，那么又影响了下次进行决策的状态。\n所以说作决策时的状态是动态的，规划是解决最优化问题的方式，所以解决这种多阶段决策过程最优化的方法叫做动态规划。\n动态规划中的术语解释\n阶段： 把所给求解问题的过程恰当地分成若干个相互联系的阶段，以便于求解，过程不同，阶段数就可能不同\n\n状态： 述事物的性质，不同事物有不同的性质，因而用不同的状态来刻画。对问题的求解状态的描述是分阶段的\n\n决策： 根据题意要求，对每个阶段所做出的某种选择性操作\n\n策略： 由每个阶段的决策组成的序列称为策略\n\n状态转移方程： 用数学公式描述与阶段相关的状态间的演变规律\n\n\n能采用动态规划求解的问题的性质\n最优化原理：\n如果问题的最优解所包含的子问题的解也是最优的，就称该问题具有最优子结构，即满足最优化原理。\n\n无后效性：\n即某阶段状态一旦确定，就不受这个状态以后决策的影响。也就是说，某状态以后的过程不会影响以前的状态，只与当前状态有关。\n\n有重叠子问题：\n即子问题之间是不独立的，一个子问题在下一阶段决策中可能被多次使用到。（该性质并不是动态规划适用的必要条件，但是如果没有这条性质，动态规划算法同其他算法相比就不具备优势）\n\n\n解题步骤\n拆分问题\n定义状态(并找出初状态)\n找到状态转移\n逆推找最优子结构\n写出 DP 状态转移方程。\n\n一般的模型方法\n递归搜索法\n记忆化搜索(记忆化暴力)\n递推式法\n\n经典例题数塔问题我们先来回顾一下我们之前讲过的数塔问题：\n题目描述:\n\n如图数字三角形。如下所示为一个数字三角形。请编一个程序计算从顶到底的某处的一条路径，使该路径所经过的数字总和最大。只要求输出总和。\n\n一步可沿左斜线向下或右斜线向下走；\n三角形行数小于等于 $100$；\n三角形中的数字为 $0，1，…，99$；\n\n测试数据通过键盘逐行输入。\n如上例数据应以样例所示格式输入：\n样例:\n输入：573 88 1 02 7 4 44 5 2 6 5\n输出：30\n运行限制:\n1. 最大运行时间：1s 2. 最大运行内存：128M\n题目分析:\n\n定义状态 假设 dp[i][j] 为处理 a[i][j] 后能达到的最大值。\n\n找出状态转移\ndp[i][j]怎么转移呢？按照题意他有两条路径可以转移\ndp[i+1][j]=dp[i][j]+a[i+1][j] 向下走\ndp[i+1][j+1]=dp[i][j]+a[i+1][j+1] 向右下走\n我们有办法知道这两条路径哪条更优吗？\n不能！因为通向了两个不同的决策过程。为什么贪心可以知道，因为贪心处理完之后通向的是同一个决策过程，这里dp[i+1][j]和dp[i+1][j+1]明显他们两个所能达到的状态是完全不同的，这就是动态规划和贪心的不同之处。\n那我们怎样处理呢，我们要做的就是达到同一个状态我们才能够判断那个是最优的，这就是最优子结构。\n\n逆推找最优子结构\n虽然我们进行了逆推，但是实际上不是因为我们逆推做了什么，只是因为我们找最优子结构的过程中恰好做了逆推的过程。\n我们要找最优子结构，我们刚才说了，要找到达同一状态的转移才能比较。那我们就考虑什么状态能够转移得到dp[i][j]，这时候我们直接看也能看出来是这两条路径dp[i+1][j]+a[i][j],dp[i+1][j+1]+a[i][j]。\n\n写出状态转移方程\n\n\n$dp[i][j] = max{dp[i+1][j]+a[i][j],dp[i+1][j+1]+a[i][j]}$\n空间优化，已知 dp[i][j] 的值只会被覆盖前使用一次，所以可以合并 dp[i][j] 和 a[i][j] 那么就变成了。\n$a[i][j] = max{a[i][j]+a[i+1][j],a[i][j]+a[i+1][j+1]}$\n则 逆推到出发点 a[1][1] 为题目所求答案，即第一层到第 N 层的最大值。\n答案解析：\nC++ 解题代码:\n#include&lt;iostream&gt;using namespace std;int main()&#123;    int n; //n层    int a[101][101]; //路径矩阵    cin&gt;&gt;n;    //输入数字三角形的值    for (int i=1; i&lt;=n; i++)    &#123;        for (int j=1; j&lt;=i; j++)        &#123;        cin&gt;&gt;a[i][j]; //输入原始数据        &#125;    &#125;    //递推开始    for (int i=n-1; i&gt;=1; i--)//从最后一层逆推    &#123;        for (int j=1; j&lt;=i; j++)        &#123;            if (a[i+1][j]&gt;=a[i+1][j+1])                a[i][j]+=a[i+1][j];     //路径选择            else                a[i][j]+=a[i+1][j+1];        &#125;    &#125;    cout&lt;&lt;a[1][1]&lt;&lt;endl;&#125;\nPython 解题代码:\na = [[0] * 101] * 101if __name__ == &#x27;__main__&#x27;:  n = int(input())  # 输入数字三角形的值  for i in range(1, n+1):      a[i] = input().split()      a[i] = list(map(int, a[i]))  # split 分割后都是 字符 这里是转化成数字  #  # for i in range(1, n + 1):  #     print(a[i]) # a = list(map(int, a)) # split 分割后都是 字符 这里是转化成数字  # 递推开始  for i in range(n - 1, 0, -1):      # 最后一层逆推      for j in range(0, i):          # 路径选择          if a[i + 1][j] &gt;= a[i + 1][j + 1]:              a[i][j] += a[i + 1][j]          else:              a[i][j] += a[i + 1][j + 1]  # for i in range(1, n + 1):  #     print(a[i])  print(a[1][0])\nJava 解题代码\npackage com.company;import java.util.Scanner;public class Main &#123;  static int [][]a=new int [101][101];  public static void main(String[] args) &#123;      int n;      Scanner in = new Scanner(System.in);      n = in.nextInt();      //输入数字三角形的值      for (int i=1; i&lt;=n; i++)      &#123;          for (int j=1; j&lt;=i; j++)          &#123;              a[i][j]=in.nextInt(); //输入原始数据          &#125;      &#125;      //递推开始      for (int i=n-1; i&gt;=1; i--)//从最后一层逆推      &#123;          for (int j=1; j&lt;=i; j++)          &#123;              if (a[i+1][j]&gt;=a[i+1][j+1])                  a[i][j]+=a[i+1][j];     //路径选择              else  a[i][j]+=a[i+1][j+1];          &#125;      &#125;      System.out.println(a[1][1]);  &#125;&#125;\n其实我们在讲这道题目中所用到的思想就是动态规划。\n我们换种方式在理解一遍。\n在用动态规划考虑数塔问题时可以自顶向下的分析，自底向上的计算。\n从顶点出发时到底向左走还是向右走应取决于是从左走能取到最大值还是从右走能取到最大值，只要左右两道路径上的最大值求出来了才能作出决策。\n同样的道理下一层的走向又要取决于再下一层上的最大值是否已经求出才能决策。\n这样一层一层推下去，直到倒数第二层时就非常明了。\n所以第一步对第五层的 $8$ 个数据，做如下四次决策：\n\n如果经过第四层 $2$，则在第五层的 $4$ 和 $5$ 中，决策选择的肯定是 $19$\n\n如果经过第四层 $7$，则在第五层的 $5$ 和 $2$ 中，决策选择的肯定是 $10$\n\n如果经过第四层第一个 $4$，则在第五层的 $2$ 和 $6$ 中，决策选择的肯定是 $6$\n\n如果经过第四层第二个 $4$，则在第五层的 $6$ 和 $5$ 中肯定是 $6$\n\n\n经过一次决策，问题降了一阶。$5$ 层数塔问题转换成 $4$ 层数塔问题，经过如此的决策，就将原来问题转换为一阶数塔问题。\n于是我们可以用我们上面的递推求解。\n这就是递推式法模型。\n我们通过这道简单的例题，大家首先要去找感觉，去分解问题的状态，去找决策，去找状态转移，而笔者认为动态规划问题，感觉是最重要的。\n有的人 $10$ 道题就能找到感觉，有的人 $100$ 道题也找不到感觉。\n游戏中的学问难度: 简单 标签: DP, JSOI, 2013\n题目链接：https://www.lanqiao.cn/problems/1436/learning/\n题目描述：\n大家应该都见过很多人手拉手围着篝火跳舞的场景吧？\n一般情况下，大家手拉手跳舞总是会围成一个大圈，每个人的左手拉着旁边朋友的右手，右手拉着另一侧朋友的左手。\n不过，如果每一个人都随机的拉住两个不同人的手，然后再慢慢散开，事情就变得有趣多了——此时大家依旧会形成圈，不过却可能会形成多个独立的圈。\n当然这里我们依然要求一个人的右手只能拉另一个人的左手，反之亦然。\n班里一共有 $N$ 个同学，由 $1$ 到 $N$ 编号。Will 想知道，究竟有多少种本质不同的拉手方案，使得最终大家散开后恰好形成 $k$ 个圈呢？\n给定两种方案，若存在一个人和他的一只手，满足在这两种方案中，拉着这只手的人的编号不同，则这两种方案本质不同。\n输入描述：\n输入一行包含三个正整数 N k P3&lt;=3k&lt;=N&lt;=3000，10^4&lt;=p&lt;=2×10^9\n输出描述：\n输出一行一个整数，表示本质不同的方案数对 p 的余数。保证 p 一定是一个质数。\n输入输出样例：\n\n样例 1： Input：\n3 1 1000000009\noutput：\n2\n\n\n答案解析：\n题目是说随即的拉住右手，共计 N 个人形成 k 个独立环的可能的情况有多少种。\n我们举个例子，A B C 三个人：\n\nA 的左手是 C A 的右手是 B B 的左手是 A B 的右手是 C C 的左手是 B C 的右手是 A\n\nA 的左手是 B A 的右手是 C B 的左手是 C B 的右手是 A C 的左手是 A C 的右手是 B\n这两种是不同的。\n最后对 P 取模。\n这道题目可以说是记忆化搜索，也可以说是递推法模型。\n定义状态：\n我们设 dp{i,j} 是 i 个人组成 j 个圈有多少种情况的状态\n找初始状态：\n由于最少是三个人围成 1 个圈\n所以 dp{3,1}=2\n找状态转移：\n我们考虑 dp&#123;4,1&#125; 的时候： 由于一开始三个人之间共计 3 个空位置，它可以见缝插针，所以就有 $3 \\times$ dp {$3,1$}，dp{$4,1$} = $3 \\times$ dp{$3,1$}\n接着考虑 dp&#123;x+1,y&#125; 和 dp&#123;x,y&#125; 的关系：\n假设 X 个人分成了 y 个环后每个环得人数是 X1 X2 ... Xy\n对于第一个环 X1 来说共有 X1 个空\n对于第二个环 X2 来说共有 X2 个空\n共计 X1+X2+...+Xy=X\n所以共有 X 个空，那么第 X+1 个人就用 X 种选择可以做。\n所以 dp{$x+1,y$} = $x \\times$ dp{$x,y$}，即 dp{$i,j$}=$(i-1) \\times$ dp{$i-1,j$}\n考虑 dp{$6,1$} 和 dp{$6,2$} ：\n大家考虑以下我们划分阶段得方式是什么，是圈数吗？\n如果是圈数，我们发现好像{$6,1$} 和 {$6,2$} 两个状态之间没有什么关系？\n单纯的圈数不存在关系。\n我们思考一下，至少需要 3 个人才能组成一个圈。\n所以第 i 个人加入时，要在前 i-1 个人中抽出两个人才能组成一个新圈。\n所以原本的 dp{$i-1,j$} 的状态就变成了，dp{$i-3,j$}了。\n由于是从 i-1 个人中抽出 2 个人所以，共计$C_{i-1}^{2}$的抽取方式，3 个人我们已知能组成两种方案。\n根据组合数求方案数的方式\n$2\\times C_{i-1}^{2}=2\\times \\frac{(i-1)!}{(i-3)!\\times2}$\n$2\\times C_{i-1}^{2}=(i-1)!/(i-3)!=(i-1)*(i-2)$\n所以 dp&#123;i,j+1&#125;=dp&#123;i-3,j&#125;×(i-1)×(i-2)\n即 dp&#123;i,j&#125;=dp&#123;i-3,j-1&#125;×(i-1)×(i-2)\n就此我们得到状态转移方程\n\ndp&#123;i,j&#125;=dp&#123;i-1,j&#125;×(i-1)\ndp&#123;i,j&#125;=dp&#123;i-3,j-1&#125;×(i-1)×(i-2)\n\n除此之外，我们还有要考虑的情况，即建不建立新圈都是 dp&#123;i,j&#125;的情况，所以这里不是等于，而是求和:\ndp&#123;i,j&#125;=dp&#123;i-1,j&#125;×(i-1)\ndp&#123;i,j&#125;=dp&#123;i,j&#125;+dp&#123;i-3,j-1&#125;×(i-1)×(i-2)\n比如：\ndp&#123;7,2&#125;可以由 dp&#123;6,2&#125;转移而来\ndp&#123;7,2&#125;也可以由 dp&#123;4,1&#125;转移而来\n为什么这两种情况没有重叠，而是绝对异构的：\ndp&#123;6,2&#125;由 dp&#123;3,1&#125;转移而来\ndp&#123;4,1&#125;由 dp&#123;3,1&#125;转移而来\ndp&#123;4,1&#125;中 1-4 号是在同一个圈内的。\ndp&#123;6,2&#125;中 两个圈中的任意 3 个在一个圈内\n不可能出现 1-4 在一个圈里的这种情况。\n所以推导 dp&#123;i,j&#125;\ndp&#123;i,j&#125;由 dp&#123;i-i,j&#125;转移而来 dp&#123;i,j&#125;也可以由 dp&#123;i-3,j-1&#125; 转移而来\ndp&#123;i-i,j&#125;可以由 dp&#123;i-2,j&#125;或者 dp&#123;i-4,j-1&#125; dp&#123;i-3,j-1&#125;可以由 dp&#123;i-4,j-1&#125;或者 dp&#123;i-6,j-2&#125;\n最终还是会到 3,1。\n所以通过 3，通过两种方式走向了完全不同的方向。\n至此我们轻松写出代码。\nC++ 描述：\n#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;cmath&gt;using namespace std;typedef long long LL;LL DP[3100][3100],mod;int n,k;int main()&#123;    cin&gt;&gt;n&gt;&gt;k&gt;&gt;mod;    DP[3][1]=2;    for(int i=4;i&lt;=n;i++)    &#123;        for(int j=1;3*j&lt;=i&amp;&amp;j&lt;=k;j++)        &#123;            DP[i][j]=DP[i-1][j]*(i-1)%mod;            DP[i][j]=(DP[i][j]+DP[i-3][j-1]*(i-1)*(i-2))%mod;        &#125;    &#125;    cout&lt;&lt;DP[n][k];    return 0;&#125;\nPython 语言描述：\nn, k, mod = map(int, input().split())DP=[[0 for i in range (3100)] for j in range (3100) ]DP[3][1]=2for i in range(4,n+1):    for j in range(1,k+1):        if 3*j&gt;i:            break        DP[i][j]=DP[i-1][j]*(i-1)%mod        DP[i][j]=(DP[i][j]+DP[i-3][j-1]*(i-1)*(i-2))%modprint(DP[n][k])\njava 语言描述：\nimport java.util.Scanner;// 1:无需package// 2: 类名必须Main, 不可修改public class Main &#123;    public static long DP[][]=new long [3100][3100];    public static int n,k; public static void main (String[] args) throws java.lang.Exception &#123;     Scanner in = new Scanner(System.in);     n=in.nextInt();     k=in.nextInt();    long mod=in.nextLong();     DP[3][1]=2;        for(int i=4;i&lt;=n;i++)        &#123;            for(int j=1;3*j&lt;=i&amp;&amp;j&lt;=k;j++)            &#123;                DP[i][j]=DP[i-1][j]*(i-1)%mod;                DP[i][j]=(DP[i][j]+DP[i-3][j-1]*(i-1)*(i-2))%mod;            &#125;        &#125;  System.out.println(DP[n][k]); &#125;&#125;\n跳跃难度: 简单 标签: 动态规划, 搜索, 2021, 模拟赛\n题目链接：https://www.lanqiao.cn/problems/553/learning/\n题目描述： 开始时，小蓝站在方格图的左上角，即第 $1$ 行第 $1$ 列。\n小蓝可以在方格图上走动，走动时，如果当前在第 $r$ 行第 $c$ 列，他不能走到行号比 $r$ 小的行，也不能走到列号比 $c$ 小的列。\n同时，他一步走的直线距离不超过 $3$。\n例如，如果当前小蓝在第 $3$ 行第 $5$ 列，他下一步可以走到\n第 $3$ 行第 $6$ 列 第 $3$ 行第 $7$ 列 第 $3$ 行第 $8$ 列 第 $4$ 行第 $5$ 列 第 $4$ 行第 $6$ 列 第 $4$ 行第 $7$ 列 第 $5$ 行第 $5$ 列 第 $5$ 行第 $6$ 列 第 $6$ 行第 $5$ 列 小蓝最终要走到第 $n$ 行第 $m$ 列。\n在图中，有的位置有奖励，走上去即可获得，有的位置有惩罚，走上去就要接受惩罚。奖励和惩罚最终抽象成一个权值，奖励为正，惩罚为负。\n小蓝希望，从第 $1$ 行第 $1$ 列走到第 $n$ 行第 $m$ 列后，总的权值和最大。请问最大是多少？\n输入描述：\n输入的第一行包含两个整数 $n, m$，表示图的大小。\n接下来 $n$ 行，每行 $m$ 个整数，表示方格图中每个点的权值。\n其中，$1\\leq n\\leq 100$，$-10^4\\leq$权值$\\leq 10^4$。\n输出描述：\n输出一个整数，表示最大权值和。\n输入输出样例：\n\n样例 1： Input：\n3 5-4 -5 -10 -3 17 5 -9 3 -1010 -2 6 -10 -4\noutput：\n15\n\n\n运行限制:\n\n最大运行时间：1s\n最大运行内存: 128M\n\n答案解析：\n由于这道题目数据较弱，大家可以使用搜索把所有情况都搜索到，每次到终点就保存最大值，知道遍历完所有的情况，然后输出最大值。\n大家一定要写一遍 DFS 然后在看后边的 DP ,有时动态规划要从状态出发，有时动态规划又可以看成暴力搜索的剪枝。\n我们先看一下搜索的解法：\n因为只能向右下方移动，不存再走回头路的情况，所以不需要设置 Vis 数组。\nC++ 语言描述：\n#include&lt;iostream&gt;#define MAX 105using namespace std;int n, m, sum = -0x3f3f3f3f;int map[MAX][MAX];int nextt[9][2] = &#123; &#123;0,1&#125;,&#123;1,0&#125;,&#123;0,2&#125;,&#123;2,0&#125;,&#123;0,3&#125;,&#123;3,0&#125;,&#123;1,1&#125;,&#123;1,2&#125;,&#123;2,1&#125; &#125;;void dfs(int x, int y,int value)&#123;    value += map[x][y];    if (x == n &amp;&amp; y == m)    &#123;        sum=max(sum,value);        return;    &#125;    for (int i = 0; i &lt; 9; i++)    &#123;        int tx = x + nextt[i][0];        int ty = y + nextt[i][1];        if (tx &lt;= n &amp;&amp; ty &lt;= m)            dfs(tx, ty, value);    &#125;&#125;int main()&#123;    cin &gt;&gt; n &gt;&gt; m;    for (int i = 1; i &lt;= n; i++)        for (int j = 1; j &lt;= m; j++)            cin &gt;&gt; map[i][j];    dfs(1, 1, 0);    cout &lt;&lt; sum;    return 0;&#125;\nPython 语言描述：\nimport osimport sys# 请在此输入您的代码n,m = map(int,input().strip().split())mapTable = [list(map(int,input().strip().split())) for i in range(n)]nextt = [[0,1],[0,2],[0,3],[1,0],[2,0],[3,0],[1,1],[1,2],[2,1]] #9种走的方式Sum=float(&#x27;-inf&#x27;)def dfs(x,y,value):    global Sum    value+=mapTable[x][y]    if x==n-1 and y==m-1 :        Sum=max(Sum,value)        return    for i in range(9):        tx = x+nextt[i][0]        ty = y+nextt[i][1]        if  tx&lt;n and  ty&lt;m :            dfs(tx,ty,value)dfs(0,0,0)print(Sum)\nJava 语言描述：\nimport osimport sys# 请在此输入您的代码n,m = map(int,input().strip().split())mapTable = [list(map(int,input().strip().split())) for i in range(n)]nextt = [[0,1],[0,2],[0,3],[1,0],[2,0],[3,0],[1,1],[1,2],[2,1]] #9种走的方式Sum=float(&#x27;-inf&#x27;)def dfs(x,y,value):    global Sum    value+=mapTable[x][y]    if x==n-1 and y==m-1 :        Sum=max(Sum,value)        return    for i in range(9):        tx = x+nextt[i][0]        ty = y+nextt[i][1]        if  tx&lt;n and  ty&lt;m :            dfs(tx,ty,value)dfs(0,0,0)print(Sum)\n我们再来看一下 DP 怎么解这个问题。\n定义状态：\n我们设 dp{$i,j$} 当走到第 $i$ 行第 $j$ 列的值。\n找初始状态：\ndp{$1,1$}\n找状态转移：\n对于dp{$i,j$} 会有 $9$ 种不同的状态转移，我们很难知道当前的选择去怎样影响后续的值，这就是上边的搜索问题，我们难以找到一种 DP 思路去求解这个问题，但是我们反向考虑，既然dp{$i,j$} 会有 $9$ 种转移方式，那么当这 $9$ 种状态的值为从这九种状态到达终点的最优解（最大值）时，那么我们就能轻易得到dp{$i,j$} 的最大值为这九种最优解的最大值。\n继续消解子问题，那么我们得到这 $9$ 种最优子状态，继续根据同样的原理得到这 $9$ 种最优的子状态的最优子状态。\n持续消解，发现只有到了 dp{$n,m$} 采用终止，这就是一个递归的过程。\nvalue[n+5][m+5]dp(x,y)&#123;    if(x==n&amp;&amp;y==m)        return value[n][m]    if(越界)        return 负无穷    value[x][y]=value[x][y]+max(dp(x+1,y)......,dp(2,1))    return dp(x,y)&#125;\n这个过程是正推，根据递归写出递推来就变成了逆推，其实并不是根据动态规划写出来的逆推式，而是用正推递归变递推变来的，当然有的同学一眼看出来，那是非常优秀的。\n这个题目数据量较小，用递归写不会爆，大家可以根据我的伪代码写写试试。\n正推也是可以写出递推式，大家有兴趣可以尝试下。\nC++ 语言描述：\n#include&lt;iostream&gt;#define MAX 105using namespace std;int n, m, sum = -0x3f3f3f3f;int map[MAX][MAX];int nextt[9][2] = &#123; &#123;0,1&#125;,&#123;1,0&#125;,&#123;0,2&#125;,&#123;2,0&#125;,&#123;0,3&#125;,&#123;3,0&#125;,&#123;1,1&#125;,&#123;1,2&#125;,&#123;2,1&#125; &#125;;int main()&#123;    cin &gt;&gt; n &gt;&gt; m;    for (int i = 1; i &lt;= n; i++)        for (int j = 1; j &lt;= m; j++)            cin &gt;&gt; map[i][j];    for(int i=n;i&gt;=1;i--)    &#123;      for(int j=m;j&gt;=1;j--)      &#123;        if(i==n&amp;&amp;j==m) continue;        int maxTemp=-0x3f3f3f3f;        for (int k = 0; k &lt; 9; k++)        &#123;          int tx = i + nextt[k][0];          int ty = j + nextt[k][1];          if (tx &gt; n || ty &gt; m) continue;          maxTemp=max(maxTemp,map[tx][ty]);        &#125;        map[i][j]+=maxTemp;      &#125;    &#125;        // for (int i = 1; i &lt;= n; i++)&#123;        //   for (int j = 1; j &lt;= m; j++)        //   cout &lt;&lt; map[i][j]&lt;&lt;&quot; &quot;;        //   cout&lt;&lt;endl;        // &#125;          cout &lt;&lt; map[1][1];    return 0;&#125;\nPython 语言描述：\nnextt = [[0, 1], [0, 2], [0, 3], [1, 0], [2, 0], [3, 0], [1, 1], [1, 2], [2, 1]]  # 9种走的方式n, m = map(int, input().split())DP = [list(map(int, input().split())) for i in range(n)]for i in range(n - 1, -1, -1):    for j in range(m - 1, -1, -1):        if i == n - 1 and j == m - 1:            continue        maxTemp = float(&#x27;-inf&#x27;)        for k in range(9):            tx = i + nextt[k][0]            ty = j + nextt[k][1]            if tx &gt;= n or ty &gt;= m:                continue            maxTemp = max(maxTemp, DP[tx][ty])        DP[i][j] += maxTempprint(DP[0][0])\njava 语言描述：\nimport java.io.*;import java.util.Scanner;public class test&#123;    public static int n, m, Sum = -0x3f3f3f3f;    public static int [][] mapTable=new int [105][105];    public static int nextt[][] =&#123; &#123;0,1&#125;,&#123;1,0&#125;,&#123;0,2&#125;,&#123;2,0&#125;,&#123;0,3&#125;,&#123;3,0&#125;,&#123;1,1&#125;,&#123;1,2&#125;,&#123;2,1&#125; &#125;; public static void main (String[] args) throws java.lang.Exception &#123;      Scanner in =new Scanner(System.in);      n=in.nextInt();      m=in.nextInt();     for (int i = 1; i &lt;= n; i++)            for (int j = 1; j &lt;= m; j++)                    mapTable[i][j]=in.nextInt();    for(int i=n;i&gt;=1;i--)    &#123;      for(int j=m;j&gt;=1;j--)      &#123;        if(i==n&amp;&amp;j==m) continue;        int maxTemp=-0x3f3f3f3f;        for (int k = 0; k &lt; 9; k++)        &#123;          int tx = i + nextt[k][0];          int ty = j + nextt[k][1];          if (tx &gt; n || ty &gt; m) continue;          maxTemp=Math.max(maxTemp,mapTable[tx][ty]);        &#125;        mapTable[i][j]+=maxTemp;      &#125;    &#125;  System.out.println(mapTable[1][1]); &#125;&#125;\n动态规划背包问题实验介绍本节课我们进入动态规划课程的学习，动态规划是一种多阶段的决策过程最优化的问题。\n本课程对于算法学习非常重要，但是又比较难，我们讲解分 $3$ 个章节进行动态规划问题的讲解。\n今天的课程是动态规划系列的第二个章节。\n知识点\n0-1 背包\n完全背包\n多重背包问题\n\n背包问题我们上一章课程讲解了动态规划算法的基本原理，包括动态规划的“为什么使用动态规划算法”、“多阶段决策过程最优化问题”、“动态规划中的术语解释”，“可解动态鬼规划的性质”等知识点。\n今天我们来讲一下，动态规划中的背包问题，背包问题，是比赛中常考的问题，也是动态规划入门的问题，其实动态规划并没有套路，只是这类问题有着明确的特点，如果你做的题足够多的话，你会发现很多问题都会有模板。\n背包问题基本都是不可拆分背包，因为可拆分背包是贪心去求解的问题。我们今天讲三种背包的基本模型：1.0-1 背包、2.完全背包、3.多重背包问题。\n0-1 背包问题0-1 背包是背包问题的入门的问题。但是背包问题的模板也是最简单的。\n0-1 背包的问题是什么呢？\n其问题的简单表述为，有 N 件物品，每件物品只有一件。每个物品都有一个价值$w_i$，每件物品都有一个占一个部分空间$c_i$,已知你的背包共计可承重 C(Contains),现在让你求你的背包最多装得下多少$w_{Max}$，即求你背包中物品的最大价值$w_{Max}$。\n对于这个问题我们有以下模板:\n1.定义变量并输入\nC++ 语言描述：\n// 定义V,W用于保存价值和质量#define Maxn 5000int c[Maxn],w[Maxn];int C;// 输入int n;cin&gt;&gt; n;for(int i=0;i&lt;n;i++)&#123;    cin&gt;&gt;c[i]&gt;&gt;w[i];&#125;cin&gt;&gt;C;//创建动态规划数组int dp[Maxn];\nPython 语言描述：\nimport osimport sysc = []w = []dp = []if __name__ == &#x27;__main__&#x27;:    n, C = map(int, input().strip().split())    for i in range(n):        tempC, tempW = map(int, input().strip().split())        c.append(tempC)        w.append(tempW)\njava 语言描述：\nimport java.util.Arrays;import java.util.Scanner;import static java.lang.Math.max;public  class  Main&#123;    static int []c;    static int []w;    static int dp[];   static int C;    static int n;    public static void main(String[] args)    &#123;        Scanner in = new Scanner(System.in);        n=in.nextInt();       C=in.nextInt();       c=new int[n+50];       w=new int[n+50];       dp=new int [C+50];        for (int i = 0; i &lt; n; i++) &#123;             c[i]=in.nextInt();             w[i]=in.nextInt();;        &#125;    &#125;&#125;\n2.执行算法\n我们先去找到状态转移方程\ndp[i][j]=max(dp[i][j],dp[i−1]j−c[i]]+w[i])\n含义，选到第 i 件物品，且背包现在重量为 j。\n那么考虑这个状态会由什么状态转移而来，肯定是选到第 i-1 件的时候。\n如果选了第 i 件，那么就是由 dp[i−1]j−c[i]]转移而来。\n如果不选第 i 件，那么就是由 dp[i][j]转移而来。\n那么已知 dp[i−1]j−c[i]]和 dp[i][j]都为各自最优的状态，那我们直接取最优状态即可。\nC++ 描述：\nfor(int i=0;i&lt;n;i++)&#123;    for(int j=0;j&lt;=C;j++)    &#123;        if(j&gt;=c[i])            dp[i][j]=max(dp[i][j],dp[i-1][j-c[i]]+w[i]);    &#125;&#125;\nPython 语言描述:\nfor i in range(n):    for j in reversed(C+1):        dp[i][j]=max(dp[i][j],dp[i-1][j-c[i]]+w[i])print(dp[C])\nJava 语言描述：\nfor(int i=0;i&lt;n;i++)&#123;    for(int j=0;j&lt;=C;j++)    &#123;        if(j&gt;=c[i])            dp[i][j]=max(dp[i][j],dp[i-1][j-c[i]]+w[i]);    &#125;&#125;        System.out.println(dp[C]);\n空间优化：\n因为状态转移每次只与上一层有关，所以用一个一维数组就可以。\n为什么从大到小遍历， 看 $dp[j]=dp[j-c[i]]+w[i]$ 这一状态转移，是根据小的改大的，如果先把小的改了，那小的还会被用到，数据就不对了，所以从小到大。\nC++ 描述；\nfor(int i=0;i&lt;n;i++) //遍历每一件物品    for(int j=C;j&gt;=c[i];j--)    //遍历背包容量，表示在上一层的基础上，容量为J时，第i件物品装或不装的最优解;        dp[j]=max(dp[j-c[i]]+w[i],dp[j]);\nPython 语言描述:\nfor i in range(n):    for j in reversed(range(c[i],C+1)):        dp[j] = max(dp[j - c[i]] + w[i], dp[j]);print(dp[C])\nJava 语言描述：\nfor (int i = 0; i &lt; n; i++) //遍历每一件物品&#123;    for (int j = C; j &gt;= c[i]; j--)        //遍历背包容量，表示在上一层的基础上，容量为J时，第i件物品装或不装的最优解;        dp[j] = max(dp[j - c[i]] + w[i], dp[j]);&#125;System.out.println(dp[C]);\n初始化细节：\n\n装满 $dp[0]=0$，其余赋值 $-INF$；\n不装满全初始化为 $0$；\n\nC++ 语言描述：\n//装满memset(dp, 0, sizeof(dp));dp[0]=0;//不装满memset(dp, -0x3f, sizeof(dp));\nPython 语言描述:\n# 装满for i in range(C + 50):    dp.append(-0x3f3f3f3f)dp[0]=0# 不装满for i in range(C + 50):    dp.append(0)\nJava 语言描述：\n//装满Arrays.fill(dp, -0x3f3f3f3f);dp[0]=0;//不装满memset(dp, -0x3f, sizeof(dp));\n题目描述:\n题目链接：https://www.lanqiao.cn/problems/1174/learning/\n小明有一个容量为 $V$ 的背包。\n这天他去商场购物，商场一共有 $N$ 件物品，第 $i$ 件物品的体积为 $w$ ，价值为 $v$，每种物品都只有一个。\n小明想知道在购买的物品总体积不超过 $V$ 的情况下所能获得的最大价值为多少，请你帮他算算。\n输入描述:\n输入第 $1$ 行包含两个正整数 $N,V$，表示商场物品的数量和小明的背包容量。\n第 $2∼N+1$ 行包含 $2$ 个正整数 $w,v$，表示物品的体积和价值。\n样例:\n输入：5 201 62 53 85 153 3\n输出： 37\n运行限制:\n1. 最大运行时间：1s 2. 最大运行内存：128M\n答案解析：\nC++ 解题代码\n#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;#define Maxn 5000int c[Maxn], w[Maxn];int dp[Maxn];int C;// 输入int n;int main() &#123;    cin &gt;&gt; n;    cin &gt;&gt; C;    for (int i = 0; i &lt; n; i++) &#123;        cin &gt;&gt; c[i] &gt;&gt; w[i];    &#125;    int dp[Maxn];    memset(dp, 0, sizeof(dp)); //不装满    //创建动态规划数组    for (int i = 0; i &lt; n; i++) //遍历每一件物品    &#123;        for (int j = C; j &gt;= c[i]; j--)            //遍历背包容量，表示在上一层的基础上，容量为J时，第i件物品装或不装的最优解;            dp[j] = max(dp[j - c[i]] + w[i], dp[j]);    &#125;    cout &lt;&lt; dp[C] &lt;&lt; endl;&#125;\nPython 解题代码\nc = []w = []dp = []if __name__ == &#x27;__main__&#x27;:    n, C = map(int, input().strip().split())    for i in range(n):        tempC, tempW = map(int, input().strip().split())        c.append(tempC)        w.append(tempW)    for i in range(C + 50):        dp.append(0)    for i in range(n):        for j in reversed(range(c[i],C+1)):            dp[j] = max(dp[j - c[i]] + w[i], dp[j]);    print(dp[C])\nJava 解题代码\nimport java.util.Arrays;import java.util.Scanner;import static java.lang.Math.max;public  class  Main&#123;    static int []c;    static int []w;    static int dp[];    static int C;    static int n;    public static void main(String[] args)    &#123;        Scanner in = new Scanner(System.in);        n=in.nextInt();        C=in.nextInt();        c=new int[n+50];        w=new int[n+50];        dp=new int [C+50];        for (int i = 0; i &lt; n; i++) &#123;             c[i]=in.nextInt();             w[i]=in.nextInt();;        &#125;        Arrays.fill(dp, 0);        for (int i = 0; i &lt; n; i++) //遍历每一件物品        &#123;            for (int j = C; j &gt;= c[i]; j--)                //遍历背包容量，表示在上一层的基础上，容量为J时，第i件物品装或不装的最优解;                dp[j] = max(dp[j - c[i]] + w[i], dp[j]);        &#125;        System.out.println(dp[C]);    &#125;&#125;\n完全背包问题完全背包是背包问题的入门的问题。\n根据 0-1 背包写出模板也是很简单的。\n完全背包的问题是什么呢？\n其问题的简单表述为，有 $N$ 件物品，每件物品有无数件。每个物品都有一个价值$w_i$，每件物品都有一个占一个部分空间$c_i$,已知你的背包共计可承重 $C(Contains)$,现在让你求你的背包最多装得下多少$w_{Max}$，即求你背包中物品的最大价值$w_{Max}$。\n对于这个问题我们有以下模板:\n1.定义变量并输入\n参考 0-1 背包。\n2.执行算法\n我们先去找到状态转移方程\ndp[i][j]=max(dp[i][j],dp[i]j−c[i]]+w[i])\n含义，选到第 $i$ 件物品，且背包现在重量为 $j$。\n那么考虑这个状态会由什么状态转移而来，肯定是选到第 $i-1$ 件的时候,或者选了若干次第 $i$ 件。\n如果不选第 $i$ 种，那么就是由 dp[i-1][j]转移而来。\n如果选了第 $i$ 件，那么就是由 dp[i−1]j−c[i]]转移而来。\n或者在某一刻，不在选第 $i$ 件了，那么就是有 dp[i][j]转移而来。\n那么已知 dp[i]j−c[i]]和 dp[i][j]都为各自最优的状态，那我们直接取最优状态即可。\nC++ 描述：\nfor(int i=0;i&lt;n;i++)&#123;    for(int j=0;j&lt;=C;j++)&#123;        dp[i][j]=dp[i-1][j];        if(j&gt;=c[i])  dp[i][j]=max(dp[i][j],dp[i][j-c[i]]+w[i]);    &#125;&#125;cout&lt;&lt;dp[n][C]&lt;&lt;endl;\nPython 语言描述:\nfor i in range(n):    for j in range(C+1):        dp[i][j]=dp[i-1][j];        dp[i][j]=max(dp[i][j],dp[i][j-c[i]]+w[i])print(dp[n][C])\nJava 语言描述：\nfor(int i=0;i&lt;n;i++)&#123;    for(int j=0;j&lt;=C;j++)&#123;        dp[i][j]=dp[i-1][j];        if(j&gt;=c[i])dp[i][j]=max(dp[i][j],dp[i][j-c[i]]+w[i]);    &#125;&#125; System.out.println(dp[n][C]);\n空间优化：\n因为状态转移每次只与上一层有关，所以用一个一维数组就可以。\n为什么从小到大遍历， 看 $dp[j]=dp[j-c[i]]+w[i]$ 这一状态转移，是根据小的改大的，而此时的含义为选了 x 件后的容量与质量，跟 01 背包类似，但含义不同，处理方式上也有本质区别，处理完一件后在处理下件。\nC++ 描述；\nfor(int i=0;i&lt;n;i++) //遍历每一件物品    for(int j=c[i];j&lt;=C;j++)    //遍历背包容量，表示在上一层的基础上，容量为J时，第i件物品装或不装的最优解;        dp[j]=max(dp[j-c[i]]+w[i],dp[j]);\nPython 语言描述:\nfor i in range(n):    for j in range(c[i],C+1):        dp[j] = max(dp[j - c[i]] + w[i], dp[j]);print(dp[C])\nJava 语言描述：\nfor (int i = 0; i &lt; n; i++) //遍历每一件物品&#123;    for(int j=c[i];j&lt;=C;j++)        //遍历背包容量，表示在上一层的基础上，容量为J时，第i件物品装或不装的最优解;        dp[j] = max(dp[j - c[i]] + w[i], dp[j]);&#125;System.out.println(dp[C]);\n初始化细节：\n与 0 - 1背包相同。\n\n装满 $dp[0]=0$，其余赋值$-INF$；\n不装满全初始化为 $0$；\n\n题目描述:\n题目链接：https://www.lanqiao.cn/problems/1175/learning/\n小明有一个容量为 $V$ 的背包。\n这天他去商场购物，商场一共有 $N$ 件物品，第 $i$ 件物品的体积为 $w$ ，价值为 $v$，每种物品都有无限多个。\nxxxxxxxxxx68 1import java.io.*;2​3public class Main {4    static int N=110;5    static long[][] g=new long[N][N],m=new long[N][N],f=new long[N][N];6    static long n,q;7    static BufferedReader br=new BufferedReader(new InputStreamReader(System.in));8    static PrintWriter  out=new PrintWriter(new OutputStreamWriter(System.out));9    public static void main(String[] args) throws IOException {10        String[] s=br.readLine().split(“ “);11        n=Long.parseLong(s[0]);12        q=Long.parseLong(s[1]);13        for(int i=1;i&lt;=n;++i){14            s=br.readLine().split(“ “);15            for(int j=1;j&lt;=n;++j){16                g[i][j]=Long.parseLong(s[j-1]);17            }18        }19        for(int i=1;i&lt;=n;++i){20            s=br.readLine().split(“ “);21            for(int j=1;j&lt;=n;++j){22                m[i][j]=Long.parseLong(s[j-1]);23                f[i][j]=m[i][j];24            }25        }26        if(floyd()&gt;q){27            out.println(-1);28            out.flush();29            return;30        }31        long l=0,r=1000000000;32        while(l&gt;1;34            if(check(mid)) r=mid;35            else l=mid+1;36        }37        out.println(r);38        out.flush();39    }40    static long floyd(){41        long a=0;42        for (int k = 1; k &lt;= n; k ++ )43            for (int i = 1; i &lt;= n; i ++ )44                for (int j = 1; j &lt;= n; j ++ )45                    f[i][j] =Math.min(f[i][j], f[i][k] + f[k][j]);46​47        for(int i=1;i&lt;=n;++i)48            for(int j=1;j&lt;=n;++j)49                a+=f[i][j];50        return a;51    }52    static boolean check(long x){53        for(int i=1;i&lt;=n;++i){54            for(int j=1;j&lt;=n;++j) f[i][j]=g[i][j];55        }56        long h=x/n;57        long s=x%n;58        for(int i=1;i&lt;=n;++i){59            for(int j=1;j&lt;=n;++j){60                if(i==j) continue;61                if(i&lt;=s) f[i][j]=Math.max(m[i][j],f[i][j]-h-1);62                else f[i][j]=Math.max(m[i][j],f[i][j]-h);63                f[j][i]=f[i][j];64            }65        }66        return floyd()&lt;=q;67    }68}java\n输入描述:\n输入第 $1$ 行包含两个正整数 $N,V$，表示商场物品的数量和小明的背包容量。\n第 $2∼N+1$ 行包含 $2$ 个正整数 $w,v$，表示物品的体积和价值。\n样例:\n输入：5 201 62 53 85 153 3\n输出： 120\n运行限制:\n1. 最大运行时间：1s 2. 最大运行内存：128M\n答案解析：\nC++ 解题代码\n#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;#define Maxn 5000int c[Maxn], w[Maxn];int dp[Maxn];int C;// 输入int n;int main() &#123;    cin &gt;&gt; n;    cin &gt;&gt; C;    for (int i = 0; i &lt; n; i++) &#123;        cin &gt;&gt; c[i] &gt;&gt; w[i];    &#125;    int dp[Maxn];    memset(dp, 0, sizeof(dp)); //不装满    //创建动态规划数组    for (int i = 0; i &lt; n; i++) //遍历每一件物品    &#123;        for(int j=c[i];j&lt;=C;j++)            //遍历背包容量，表示在上一层的基础上，容量为J时，第i件物品装或不装的最优解;            dp[j] = max(dp[j - c[i]] + w[i], dp[j]);    &#125;    cout &lt;&lt; dp[C] &lt;&lt; endl;&#125;\nPython 解题代码\nimport osimport sysc = []w = []dp = []if __name__ == &#x27;__main__&#x27;:    n, C = map(int, input().strip().split())    for i in range(n):        tempC, tempW = map(int, input().strip().split())        c.append(tempC)        w.append(tempW)    for i in range(C + 50):        dp.append(0)    for i in range(n):        for j in range(c[i],C+1):            dp[j] = max(dp[j - c[i]] + w[i], dp[j])    print(dp[C])\nJava 解题代码\nimport java.util.Arrays;import java.util.Scanner;import static java.lang.Math.max;public  class  Main&#123;    static int []c;    static int []w;    static int dp[];    static int C;    static int n;    public static void main(String[] args)    &#123;        Scanner in = new Scanner(System.in);        n=in.nextInt();        C=in.nextInt();        c=new int[n+50];        w=new int[n+50];        dp=new int [C+50];        for (int i = 0; i &lt; n; i++) &#123;             c[i]=in.nextInt();             w[i]=in.nextInt();;        &#125;        Arrays.fill(dp, 0);        for (int i = 0; i &lt; n; i++) //遍历每一件物品        &#123;                for(int j=c[i];j&lt;=C;j++)                //遍历背包容量，表示在上一层的基础上，容量为J时，第i件物品装或不装的最优解;                dp[j] = max(dp[j - c[i]] + w[i], dp[j]);        &#125;        System.out.println(dp[C])    &#125;&#125;\n多重背包多重背包是背包问题的入门的问题。 根据 0-1 背包写出模板也是很简单的。\n多重背包的问题是什么呢？\n其问题的简单表述为，有 N 件物品，每件物品有$s_i$件。每个物品都有一个价值$w_i$，每件物品都有一个占一个部分空间$c_i$,已知你的背包共计可承重 C(Contains),现在让你求你的背包最多装得下多少$w_{Max}$，即求你背包中物品的最大价值$w_{Max}$。\n对于这个问题我们有以下模板:\n1.定义变量并输入\n参考 0-1 背包。\n2.执行算法\n这次我们直接空间优化，不再讲解二维做法：\n多重背包是可以不选，也可以选 1 个，可以选多个，而 0-1 背包只能选 0 个或者 1个。\n那就直接把种物品分开，即可比如：\n每个盘子 3 块钱，我有 2 个。每双筷子 1 块钱，我有 10 双，每对刀叉 3 块钱，我有 3 个。\n那么我就可以拆成，有 2 个三块的盘子，每个可以选也可以不选，就变成了 0-1 背包。\n也就是说，对于每种是可以选多个，那就直接拆分成独立的个体就可以了。\nC++ 描述；\nfor(int i=0;i&lt;n;i++)//遍历每一个物品    for(int j=0;j&lt;=s[i];j++)    //遍历物品的数量        for(int k=C;k&gt;=c[i];k--)        //当做01背包来处理        &#123;            //取01背包情况的dp[k]和dp[k-c[i]]+w[i]的最大值            dp[k]=max( dp[k],dp[k-c[i]]+w[i] );        &#125;\nPython 语言描述:\nfor i in range(n):    for j in range(s[i]+1):        for k in reversed(range(c[i],C+1)):            dp[k]=max( dp[k],dp[k-c[i]]+w[i] )print(dp[C])\nJava 语言描述：\nfor(int i=0;i&lt;n;i++)//遍历每一个物品    for(int j=0;j&lt;=s[i];j++)    //遍历物品的数量        for(int k=C;k&gt;=c[i];k--)        //当做01背包来处理        &#123;            //取01背包情况的dp[k]和dp[k-c[i]]+w[i]的最大值            dp[k]=max( dp[k],dp[k-c[i]]+w[i] );        &#125;System.out.println(dp[C]);\n不顾这样做大概率会超时，我们换一种理解方式：\n在这两种问题中，我们需要考虑每个物品选择取或不取的情况，通过动态规划来求解最优解。\n$01$背包问题中，对于每个物品$i$，我们有两个选择：选取或不选取。状态转移方程为： $dp[j] = \\max(dp[j], dp[j - v[i]] + w[i])$\n多重背包问题中，对于每个物品i，我们可以选择取$0$个、$1$个、$2$个…直到$s[i]$个。状态转移方程为： $dp[j] = \\max(dp[j], dp[j - v[i] \\cdot k] + w[i] \\cdot k)$ 其中，k 的取值范围是$0, 1, 2, …, s[i]$。\n这两个问题的解决思路相似，都是通过填充一个二维的动态规划数组$dp$，其中$dp[j]$表示背包容量为j时的最优解。在状态转移时，我们考虑了每个物品的选择情况，求解最终的最优解。\n初始化细节：\n与 $0 - 1$ 背包相同。\n\n装满 $dp[0]=0$，其余赋值$-INF$；\n不装满全初始化为 $0$；\n\n题目描述:\n题目链接：https://www.lanqiao.cn/problems/1176/learning/\n小明有一个容量为 $V$的背包。\n这天他去商场购物，商场一共有 $N$ 件物品，第 $i$ 件物品的体积为 $w$，价值为 $v$，每种物品都有$s$个。\n小明想知道在购买的物品总体积不超过 $V$ 的情况下所能获得的最大价值为多少，请你帮他算算。\n输入描述:\n输入第 $1$ 行包含两个正整数 $N,V$，表示商场物品的数量和小明的背包容量。\n第 $2∼N+1$ 行包含 $3$ 个正整数 $w,vs$,表示物品的体积、价值和数量。\n样例:\n输入：3 301 2 34 5 67 8 9\n输出： 39\n运行限制:\n1. 最大运行时间：1s 2. 最大运行内存：128M\n答案解析：\nC++ 解题代码\n#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;#define Maxn 5000int c[Maxn], w[Maxn], s[Maxn];int dp[Maxn];int C;// 输入int n;int main() &#123;    cin &gt;&gt; n;    cin &gt;&gt; C;    for (int i = 0; i &lt; n; i++) &#123;        cin &gt;&gt; c[i] &gt;&gt; w[i] &gt;&gt; s[i];    &#125;    int dp[Maxn];    memset(dp, 0, sizeof(dp)); //不装满    //创建动态规划数组    for (int i = 0; i &lt; n; i++)//遍历每一个物品    &#123;        for(int j=C;j&gt;=c[i];j--)        &#123;            for(int k=1;k&lt;=s[i] &amp;&amp; j&gt;=k*c[i];k++)                //遍历物品的数量                dp[j]=max(dp[j],dp[j-k*c[i]]+w[i]*k);        &#125;    &#125;    cout &lt;&lt; dp[C] &lt;&lt; endl;&#125;\nPython 解题代码\nc = []w = []s=[]dp = []if __name__ == &#x27;__main__&#x27;:    n, C = map(int, input().strip().split())    for i in range(n):        tempC, tempW ,tempS= map(int, input().strip().split())        c.append(tempC)        w.append(tempW)        s.append(tempS)    for i in range(C + 50):        dp.append(0)    for i in range(n):        for j in reversed(range(c[i],C+1)):            for k in range(s[i]+1):                if j&lt;k*c[i]:                    break;                dp[j] = max(dp[j], dp[j - k * c[i]] + w[i] * k)    print(dp[C])\nJava 解题代码\nimport java.util.Arrays;import java.util.Scanner;import static java.lang.Math.max;public  class  Main&#123;        static int []c;        static int []w;        static int []s;        static int dp[];        public static void main(String[] args)        &#123;            Scanner in = new Scanner(System.in);            int n=in.nextInt();            int C=in.nextInt();            c=new int[n+50];            w=new int[n+50];            s=new int[n+50];            dp=new int [C+50];            for (int i = 0; i &lt; n; i++) &#123;                c[i]=in.nextInt();                w[i]=in.nextInt();                s[i]=in.nextInt();            &#125;            Arrays.fill(dp, 0);            for (int i = 0; i &lt; n; i++)//遍历每一个物品            &#123;                for(int j=C;j&gt;=c[i];j--)                &#123;                    for(int k=1;k&lt;=s[i] &amp;&amp; j&gt;=k*c[i];k++)                        //遍历物品的数量                        dp[j]=max(dp[j],dp[j-k*c[i]]+w[i]*k);                &#125;            &#125;            System.out.println(dp[C]);    &#125;&#125;\n动态规划线性 DP实验介绍本课程对于算法学习非常重要，但是又比较难，我们讲解分 $3$ 个章节进行动态规划问题的讲解。\n今天的课程是动态规划系列的第 $3$ 个章节。\n知识点\n讲解很多经典的动态规划问题，对动态规划初步掌握。\n\n普通线性 DP线性 DP 是动态规划问题中的一类问题，指状态之间有线性关系的动态规划问题。\n这类问题不像是我们讲的背包等问题有固定的模板。\n少数常见的线性 DP 问题也有模板，比如我们讲的 $LIS$ 和 $LCS$ 问题。\n大部分还是需要根据题目进行推导，基本没有什么规律可循。\n大部分线性规划的问题，都需要自己首先定义状态，找到决策，推导状态转移方程。\n我们再讲解几个题目，让大家找找做最普遍 DP 问题的感觉。\n蓝肽子序列题目链接：蓝肽子序列\n题目描述:\nL 星球上的生物由蛋蓝质组成，每一种蛋蓝质由一类称为蓝肽的物资首尾连接成一条长链后折叠而成。\n生物学家小乔正在研究 L 星球上的蛋蓝质。她拿到两个蛋蓝质的蓝肽序列，想通过这两条蓝肽序列的共同特点来分析两种蛋蓝质的相似性。\n具体的，一个蓝肽可以使用 $1$ 至 $5$ 个英文字母表示，其中第一个字母大写，后面的字母小写。一个蛋蓝质的蓝肽序列可以用蓝肽的表示顺序拼接而成。\n在一条蓝肽序列中，如果选取其中的一些位置，把这些位置的蓝肽取出，并按照它们在原序列中的位置摆放，则称为这条蓝肽的一个子序列。蓝肽的子序列不一定在原序列中是连续的，中间可能间隔着一些未被取出的蓝肽。\n如果第一条蓝肽序列可以取出一个子序列与第二条蓝肽序列中取出的某个子序列相等，则称为一个公共蓝肽子序列。\n给定两条蓝肽序列，找出他们最长的那个公共蓝肽子序列的长度。\n输入描述:\n输入两行，每行包含一个字符串，表示一个蓝肽序列。字符串中间没有空格等分隔字符。\n其中有 ，两个字符串的长度均不超过 $1000$。\n输出描述:\n输出一个整数，表示最长的那个公共蓝肽子序列的长度。\n输入输出样例:\n示例:\n\n输入\n\nLanQiaoBei LanTaiXiaoQiao\n\n输出\n\n2\n运行限制\n最大运行时间：1s\n最大运行内存: 128M\n\n答案解析：\n该题目是 $LCS$ 的变形，由原来的一个字符或者一个数字的匹配变成了，一个单词的匹配。\n这个题目为先划分字符串变成基本的比较单位。\n然后再套用 $LCS$ 模板\n即可完成这道题目。\nC++ 解题代码\n#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;int dp[1005][1005];string s1, s2;string a[1005], b[1005];int n=0, m=0;int main()&#123;    cin &gt;&gt; s1 &gt;&gt; s2;    int d1 = s1.length(), d2 = s2.length();    for (int i = 0; i &lt; d1;)    &#123;        if (s1[i] &gt;= &#x27;A&#x27; &amp;&amp; s1[i] &lt;= &#x27;Z&#x27;)        &#123;            a[n] += s1[i++];            while (s1[i] &gt;= &#x27;a&#x27; &amp;&amp; s1[i] &lt;= &#x27;z&#x27;)            &#123;                a[n] += s1[i++];            &#125;        &#125;        n++;    &#125;    for (int i = 0; i &lt; d2;)    &#123;        if (s2[i] &gt;= &#x27;A&#x27; &amp;&amp; s2[i] &lt;= &#x27;Z&#x27;)        &#123;            b[m] += s2[i++];            while (s2[i] &gt;= &#x27;a&#x27; &amp;&amp; s2[i] &lt;= &#x27;z&#x27;)            &#123;                b[m] += s2[i++];            &#125;        &#125;        m++;    &#125;     dp[0][0] = 0;    for (int i = 0; i &lt; n; i++)        for (int j = 0; j &lt; m; j++)        &#123;            if (a[i] == b[j])            &#123;                dp[i + 1][j + 1] = dp[i][j] + 1;            &#125;            else            &#123;                dp[i + 1][j + 1]=max(dp[i + 1][j], dp[i][j + 1]);            &#125;        &#125;    cout &lt;&lt; dp[n][m] &lt;&lt; endl;&#125;\nPython 解题代码\nMaxn = 1005dp = [[0 for _ in range(Maxn)] for _ in range(Maxn)]if __name__ == &#x27;__main__&#x27;:    s1 = input()    s2 = input()    a = []    b = []    temp = &#x27;&#x27;    for word in s1:        if &#x27;A&#x27; &lt;= word &lt;= &#x27;Z&#x27;:            if temp != &#x27;&#x27;:                a.append(temp)            temp = &#x27;&#x27;        temp += word    a.append(temp)    temp = &#x27; &#x27;    for word in s2:        if &#x27;A&#x27; &lt;= word &lt;= &#x27;Z&#x27;:            if temp != &#x27;&#x27;:                b.append(temp)            temp = &#x27;&#x27;        temp += word    b.append(temp)    n = len(a)    m = len(b)    for i in range(len(a)):        for j in range(len(b)):            if a[i] == b[j]:                dp[i + 1][j + 1] = dp[i][j] + 1            else:                if dp[i + 1][j] &gt; dp[i][j + 1]:                    dp[i + 1][j + 1] = dp[i + 1][j]                else:                    dp[i + 1][j + 1] = max(dp[i + 1][j], dp[i][j + 1])    print(dp[n][m])\nJava 解题代码\nimport java.util.Scanner;public class Main &#123;    static int[][] dp;    static String s1;    static String s2;    static String []a;    static String []b;    public static void main(String[] args) &#123;        Scanner in = new Scanner(System.in);        int n=0,m=0;        s1=in.next();        s2=in.next();        a=new String[1005];        b=new String[1005];        int d1=s1.length();        int d2=s2.length();        dp=new int[1005][1005];        for (int i = 0; i &lt; d1;n++)        &#123;            if (s1.charAt(i) - &#x27;A&#x27;&gt;=0 &amp;&amp; s1.charAt(i) - &#x27;Z&#x27;&lt;=0)            &#123;                a[n] += s1.charAt(i++);                while (i &lt; d1&amp;&amp;s1.charAt(i) -&#x27;a&#x27;&gt;=0 &amp;&amp; s1.charAt(i)-&#x27;z&#x27; &lt;=0)                &#123;                    a[n] += s1.charAt(i++);                &#125;            &#125;        &#125;        for (int i = 0; i &lt; d2;m++)        &#123;            if (s2.charAt(i) - &#x27;A&#x27;&gt;=0 &amp;&amp; s2.charAt(i) - &#x27;Z&#x27;&lt;=0)            &#123;                b[m] += s2.charAt(i++);                while (i &lt; d2&amp;&amp;s2.charAt(i) -&#x27;a&#x27;&gt;=0&amp;&amp; s2.charAt(i)-&#x27;z&#x27; &lt;= 0)                &#123;                    b[m] += s2.charAt(i++);                &#125;            &#125;        &#125;        dp[0][0] = 0;        int Maxn=Math.max(n,m)+50;        dp=new int[Maxn][Maxn];        dp[0][0]=0;        for (int i = 0; i &lt; n; i++)            for (int j = 0; j &lt; m; j++)            &#123;                if (a[i].equals( b[j]))                &#123;                    dp[i + 1][j + 1] = dp[i][j] + 1;                &#125;                else                &#123;                    dp[i + 1][j + 1]=Math.max(dp[i + 1][j], dp[i][j + 1]);                &#125;            &#125;        System.out.println(dp[n][m]);    &#125;&#125;\n合唱队形题目链接：https://www.lanqiao.cn/problems/742/learning/\n题目描述:\n$N$ 位同学站成一排，音乐老师要请其中的 $(N-K)$ 位同学出列，使得剩下的 $K$ 位同学排成合唱队形。\n合唱队形是指这样的一种队形：设 $K$ 位同学从左到右依次编号为 $1，2，\\cdots K$，他们的身高分别为 $T_1，T_2，\\cdots，T_K$， 则他们的身高满足 $T_1&lt; \\cdots &lt; T_i&gt; T_{i+1}&gt; \\cdots &gt;T_K(1 \\leq i \\leq K)$。\n你的任务是，已知所有 $N$ 位同学的身高，计算最少需要几位同学出列，可以使得剩下的同学排成合唱队形。\n输入描述:\n输入两行。\n第一行是一个整数 $N\\ (2 \\leq N \\leq 100)$，表示同学的总数。\n第二行有 $n$ 个整数，用空格分隔，第 $i$ 个整数 $T_i(130 \\leq T_i \\leq 230)$ 是第 $i$ 位同学的身高(厘米)。\n输出描述:\n输出一个整数，就是最少需要几位同学出列。\n输入输出样例:\n示例: 1\n\n输入\n\n8 186 186 150 200 160 130 197 220\n\n输出\n\n4\n运行限制\n最大运行时间：1s\n最大运行内存: 128M\n\n答案解析：\n要使得出列最少，那么就要留下最多的，我们想到了 $LIS$ ，但是 $LIS$ 只能处理单调序列最长，所以并不能直接用。\n我们看到，这里是两头低，中间高的一种情况。\n在这种情况下，最多的话那么就是最高的那个人的左侧加上右侧最高。\n到这，我们发现。\n在中间那个人左侧，从左到右做了一遍 $LIS$ 。\n在那个人的右侧，从右到左的做了一遍 $LIS$ 。\n至此，我们好像找了策略。\n通过枚举中间那个人，然后看他左侧的 $LIS$ 和他右侧的$LIS$ 的值之和的大小，就能将这道题目解出。\nC++ 解题代码\n#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;int dp1[105],dp2[105],a[105],s[105];int main()&#123;    int n;    cin&gt;&gt;n;    for(int i=1;i&lt;=n;i++)    &#123;        cin&gt;&gt;a[i];        dp2[i]=1;        dp1[i]=1;    &#125;//输入并赋初值    //预处理，从右往左LIS    for(int i=n-1;i&gt;=1;i--)    &#123;        for(int j=i+1;j&lt;=n;j++)        &#123;            if(a[i]&gt;a[j]&amp;&amp;dp2[i]&lt;=dp2[j]+1)            &#123;                dp2[i]=dp2[j]+1;            &#125;        &#125;    &#125;    //预处理，从左往右LIS    for(int i=2;i&lt;=n;i++)    &#123;        for(int j=1;j&lt;i;j++)        &#123;            if(a[i]&gt;a[j]&amp;&amp;dp1[i]&lt;=dp1[j]+1)            &#123;                dp1[i]=dp1[j]+1;            &#125;        &#125;    &#125;    int maxx=0;    for(int i=1;i&lt;=n;i++)    &#123;        s[i]=dp2[i]+dp1[i]-1;        //自己算了两次，所以-1        if(s[i]&gt;maxx)        &#123;            maxx=s[i];        &#125;    &#125;    cout&lt;&lt;n-maxx;//是求出列的人数&#125;\nPython 解题代码\nif __name__ == &quot;__main__&quot;:    # 输入并赋初值    n = int(input().strip())    t = list(map(int, input().split()))    dp1 = [1] * n    dp2 = [1] * n    # 预处理，从左往右LIS    for i in range(1, n):        for j in range(i):            if t[i] &gt; t[j]:                dp1[i] = max(dp1[i], dp1[j] + 1)    # 预处理，从右往左LIS    for i in range(n - 1, 0, -1):        for j in range(n - 1, i, -1):            if t[i] &gt; t[j]:                dp2[i] = max(dp2[i], dp2[j] + 1)    maxx = 0    for i in range(n):        maxx = max(maxx, dp1[i] + dp2[i] - 1)        # 自己算了两次，所以-1    print(n - maxx)\nJava 解题代码\nimport java.util.Scanner;public class Main &#123;    public static void main(String[] args) &#123;        Scanner in = new Scanner(System.in);        int n = in.nextInt();        int[] a = new int[n];        int[] dp1 = new int[n];        int[] dp2 = new int[n];        for (int i = 0; i &lt; n; i++) &#123;            a[i] = in.nextInt();            dp2[i]=1;            dp1[i]=1;        &#125;//输入并赋初值        //预处理，从左往右LIS        for (int i = 0; i &lt; n; i++) &#123;            for (int j = 0; j &lt; i; j++) &#123;                if (a[i] &gt; a[j] &amp;&amp; dp1[j] + 1 &gt; dp1[i]) &#123;                    dp1[i] = dp1[j] + 1;                &#125;            &#125;        &#125;        //预处理，从右往左LIS        for (int i = n - 1; i &gt;= 0; i--) &#123;            for (int j = n - 1; j &gt; i; j--) &#123;                if (a[i] &gt; a[j] &amp;&amp; dp2[j] + 1 &gt; dp2[i]) &#123;                    dp2[i] = dp2[j] + 1;                &#125;            &#125;        &#125;        int maxx = 0;        for (int i = 0; i &lt; n; i++) &#123;            maxx = Math.max(maxx, dp1[i] + dp2[i]-1);            //自己算了两次，所以-1        &#125;        // 是求出列的人数        System.out.println(n - maxx );    &#125;&#125;\n最优包含题目链接：https://www.lanqiao.cn/problems/239/learning/\n题目描述: 我们称一个字符串 $S$ 包含字符串 $T$ 是指 $T$ 是 $S$ 的一个子序列，即可以从字符串 $S$ 中抽出若干个字符，它们按原来的顺序组合成一个新的字符串与 $T$ 完全一样。\n给定两个字符串 $S$ 和 $T$，请问最少修改 $S$ 中的多少个字符，能使 $S$ 包含 $T$ ？\n其中，$1 \\leq |T| \\leq |S| \\leq 1000$。\n输入描述:\n输入两行，每行一个字符串。\n第一行的字符串为 $S$，第二行的字符串为 $T$。\n两个字符串均非空而且只包含大写英文字母。\n输出描述:\n输出一个整数，表示答案。\n输入输出样例:\n示例:\n\n输入\n\nABCDEABCD XAABZ\n\n输出\n\n3\n运行限制\n\n最大运行时间：1s\n最大运行内存: 256M\n\n答案解析：\n个题目是线性 DP 中比较经典的题目。\n这个类型就做编辑距离，可以通过 DFS 解决，也可以通过 DP 解决。\nDP 的时间复杂度低。\n我们先来讲一下，编辑距离。\n编辑距离为两个字符串，$a$ 和 $b$ 通过多少次变换，使得 $a$ 变成 $b$。\n我们可以做出 $3$ 种操作。\n$1.$ 删除操作，将 $a[i]$ 从 $a$ 中移除 $2.$ 插入操作，在 $a[i]$ 后加上 $b[j]$ $3.$ 替换操作，将 $a[i]$ 修改为 $b[j]$\n编辑距离的状态转移类似 LCS ，但有有很大的差别。\n初始状态，$i=j=0$，都在字符串的开头。\n然后开始判断 $a[i]=?b[j]$\n\n如果相同，那么就不需要修改，所以$dp[i+1][j+1]=dp[i][j]$\n所以在$a[i-1]$等于$b[j-1]$时，$dp[i][j]$这个状态由$dp[i-1][j-1]$转移而来。\n$dp[i][j]=dp[i-1][j-1]$\n\n如果不同，那就需要进行三种可能的操作\n\n\n\n修改操作：\n$a[i]$ 修改为 $b[j]$， 因为编辑了一次，所以$+1$\n$dp[i+1][j+1]=dp[i][j]+1$\n所以在$a[i-1]$不等于$b[j-1]$时，$dp[i][j]$这个状态由$dp[i-1][j-1]$转移而来。\n$dp[i][j]=dp[i-1][j-1]$\n\n删除操作，直接把 $a[i]$ 删除，此时转移到 $dp[i][j+1]$ ，因为 $a[i]$ 被删除，但是下一个字符到了 $a[i]$ 的位置，而对应比较的位置到了$b[j+1]$。\n所以此时状态转移到了$dp[i][j+1]$\n$dp[i][j+1]=dp[i][j]+1$\n因为编辑了一次，所以$+1$\n所以在$a[i-1]$不等于$b[j-1]$时，$dp[i][j]$就有可能通过$dp[i-1][j]$转移而来。\n\n插入操作，在$a[i]$后添加一个$b[j]$，那么此时$a[i+1]$和$b[j]$对应，因为加了一个字符就变成了$a[i+1]$,而且跟$b[j]$对应，那么下一个状态转移到了$dp[i+1][j]$\n$dp[i+1][j]=dp[i][j]+1$\n此时状态转移到了 $dp[i+1][j]=dp[i][j]+1$\n因为编辑了一次，所以$+1$\n所以在$a[i-1]$不等于$b[j-1]$时，$dp[i][j]$就有可能通过$dp[i][j-1]$转移而来。\n\n\n那么不同时，我们选择他们的最小值即可。\n由此我们可以写出模板：\nC++ 解题代码：\n#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;set&gt;#include&lt;string&gt;using namespace std;#define INF 99999999string s, t;int dp[1010][1010];void init()&#123;    for (int i = 0; i &lt;= s.size(); i++) dp[i][0] = 0;    for (int j = 1; j &lt;= t.size(); j++) dp[0][j] = INF;&#125;int main() &#123;    cin &gt;&gt; s &gt;&gt; t;    init();    for (int i = 1; i &lt;= s.size(); i++) &#123;        for (int j = 1; j &lt;= t.size(); j++) &#123;            if (s[i - 1] == t[j - 1]) dp[i][j] = dp[i - 1][j - 1];            else                dp[i][j] = min(dp[i - 1][j - 1],min(dp[i - 1][j], dp[i][j - 1])) + 1;        &#125;    &#125;    cout &lt;&lt; dp[s.size()][t.size()];    return 0;&#125;\nPython 解题代码\ndef init(s,t):    dp = [[0 for i in range(len(t) + 1)] for j in range(len(s) + 1)]    for i in range(len(s) + 1):        dp[i][0] = 0    for j in range(1,len(t) + 1):        dp[0][j] = 999999    return dpif __name__ == &#x27;__main__&#x27;:    s = list(input())    t = list(input())    dp=init(s,t)    for i in range(len(s)):        for j in range(len(t)):            if s[i] == t[j]:                dp[i + 1][j + 1] = dp[i][j]            else:                dp[i + 1][j + 1] = min(dp[i][j] + 1, dp[i][j + 1])                dp[i + 1][j + 1] = min( dp[i + 1][j + 1] ,dp[j+1][i]+1)    print(dp[-1][-1])\nJava 解题代码\nimport java.util.Scanner;public class Main &#123;    public static   int dp[][];    public static void init(int n,int m)&#123;        dp = new int[n+1][m+1];        for (int i = 0; i &lt;= n; i++) dp[i][0] = 0;        for (int j = 1; j &lt;= m; j++) dp[0][j] = 99999;    &#125;    public static void main(String[] args) &#123;        Scanner in = new Scanner(System.in);        String s = in.nextLine();        String t = in.nextLine();        int n = s.length();        int m = t.length();        init(n,m);        for (int i = 1; i &lt;= n; i++) &#123;            for (int j = 1; j &lt;= m; j++) &#123;                if (s.charAt(i - 1) == t.charAt(j - 1)) dp[i][j] = dp[i - 1][j - 1];                else  dp[i][j] = min(dp[i - 1][j - 1],min(dp[i - 1][j], dp[i][j - 1])) + 1;            &#125;        &#125;        System.out.println(dp[n][m]);    &#125;&#125;\n这道题目也比较简单，由于是包含关系，并不是相等关系，所以当 S 多余 T 是，不需要进行删除操作。\n所以这个题目不考虑删除的那个状态转移即可。\nC++ 解题代码\n#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;set&gt;#include&lt;string&gt;using namespace std;#define INF 99999999string s, t;int dp[1010][1010];void init()&#123;    for (int i = 0; i &lt;= s.size(); i++) dp[i][0] = 0;    for (int j = 1; j &lt;= t.size(); j++) dp[0][j] = INF;&#125;int main() &#123;    cin &gt;&gt; s &gt;&gt; t;    init();    for (int i = 1; i &lt;= s.size(); i++) &#123;        for (int j = 1; j &lt;= t.size(); j++) &#123;            if (s[i - 1] == t[j - 1]) dp[i][j] = dp[i - 1][j - 1];            else dp[i][j] = min(dp[i - 1][j - 1] + 1, dp[i - 1][j]);        &#125;    &#125;    cout &lt;&lt; dp[s.size()][t.size()];    return 0;&#125;\nPython 解题代码\ndef init(s,t):    dp = [[0 for i in range(len(t) + 1)] for j in range(len(s) + 1)]    for i in range(len(s) + 1):        dp[i][0] = 0    for j in range(1,len(t) + 1):        dp[0][j] = 999999    return dpif __name__ == &#x27;__main__&#x27;:    s = list(input())    t = list(input())    dp=init(s,t)    for i in range(len(s)):        for j in range(len(t)):            if s[i] == t[j]:                dp[i + 1][j + 1] = dp[i][j]            else:                dp[i + 1][j + 1] = min(dp[i][j] + 1, dp[i][j + 1])    print(dp[-1][-1])\nJava 解题代码\nimport java.util.Scanner;public class Main &#123;    public static   int dp[][];    public static void init(int n,int m)&#123;        dp = new int[n+1][m+1];        for (int i = 0; i &lt;= n; i++) dp[i][0] = 0;        for (int j = 1; j &lt;= m; j++) dp[0][j] = 99999;    &#125;    public static void main(String[] args) &#123;        Scanner in = new Scanner(System.in);        String s = in.nextLine();        String t = in.nextLine();        int n = s.length();        int m = t.length();        init(n,m);        for (int i = 1; i &lt;= n; i++) &#123;            for (int j = 1; j &lt;= m; j++) &#123;                if (s.charAt(i - 1) == t.charAt(j - 1)) dp[i][j] = dp[i - 1][j - 1];                else dp[i][j] = Math.min(dp[i - 1][j - 1] + 1, dp[i - 1][j]);            &#125;        &#125;        System.out.println(dp[n][m]);    &#125;&#125;\n实验总结动态规划的学习是痛苦的，也是快乐，而且是非常重要的。\n希望大家努力克服，动态规划都学会了还有什么学不会呢。\n","categories":["蓝桥杯Note"],"tags":["蓝桥杯备赛","动态规划"]},{"title":"工具函数模板","url":"/2024/03/11/%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF/","content":"内置模板我们前面讲了很多数据结构相关的知识，本节课程，我们主要讲解怎么不自己定义，而是使用我们所使用的编程语言中，已经定义好的数据结构。\n之前我们在栈那一节已经讲过栈的内置数据结构的使用，我们本章就不再进行讲解，我们这节课仍然采用那种方式进行讲解。\n知识点\n迭代器讲解\n线性表的使用\n队列的使用\n集合（set）的使用\n映射（map）的使用\n\n迭代器（Iterator）首先，明确一点迭代器是 C++ 的知识，并不适用于 Java 和 Python 这两种语言，但是下面讲容器就要用到这一点，所以我们必须要提前讲一下。迭代器的知识点很复杂，了解即可，当然有余力可以深究，了解就能做题，实现方式看容器讲解。\n对于数组我们可以采用指针进行访问，但是对于其他的存储空间连续的数据结构或者说是存储单元我们就需要找到另一种方式来替代指针的行为作用，从而达到对于非数组的数据结构的访问和遍历，于是我们定义了一种新的变量叫做迭代器。\n定义：\n迭代器是一种检查容器内元素并遍历元素的数据类型。\n迭代器提供对一个容器中的对象的访问方法，并且定义了容器中对象的范围。\n迭代器和指针的区别：\n容器和string有迭代器类型同时拥有返回迭代器的成员。\n如：容器有成员 .begin() 和 .end()，其中 .begin() 成员复制返回指向第一个元素的迭代器，即指向第一个元素的“地址”，而 .end() 成员返回指向容器尾元素的下一个位置的迭代器。\n即 .begin() 指向的是第一个合法元素的位置，.end() 指向是容器后第一个不合法元素的地址。\n相应的还有容器反向迭代器成员 .rbegin() .rend()，.rbegin() 返回容器的元素前最后一个不合法的地址，rend() 返回容器的最后一个合法地址。\n容器迭代器的使用每种容器类型都定义了自己的迭代器类型：\n如 vector：vector&lt;int&gt;::iterator iter;//定义一个名为iter的变量\n数据类型是由 vector&lt;int&gt; 定义的 iterator 类型。简单说就是容器类定义了自己的 iterator 类型，用于访问容器内的元素。每个容器定义了一种名为 iterator 的类型，这种类型支持迭代器的各种行为。\n我么们先讲一下各种迭代器的类型，在讲容器所用的迭代器类型，就可以明白怎么操作。\n容器写在前面，由于 Python 的语言的特点，所有的数据结构大部分都需要自己实现，但是其 List 功能较强，用起来比较简单，当然我们也会再说一遍怎么实现。\n在 Java 中各种数据结构都是继承于 list，所以 Java 的 list 功能也很强，它的功能有很多，由于篇幅原因我们会挑比较重要的讲解，其他的还需要同学们多去使用。\nVector 容器（类）线性表中有 Vector 和 list，两者作用比较相似。\nVector 的主要作用就是可变长度的数组，就把他当成数组使用即可。\n至于为什么我们选择讲 Vector 而不是 List，因为 Vector 可以当作数组使用，用起来非常简单，也非常方便。\n我们先讲解一下 C++ 的 Vector 使用：\n#include &lt;vector&gt;   //头文件vector&lt;int&gt; a;      //定义了一个int类型的vector容器avector&lt;int&gt; b[100]; //定义了一个int类型的vector容器b组struct rec&#123;    ···&#125;;vector&lt;rec&gt; c;            //定义了一个rec类型的vector容器cvector&lt;int&gt;::iterator it; //vector的迭代器，与指针类似\n具体操作如下：\na.size()           //返回实际长度（元素个数），O(1)复杂度a.empty()      //容器为空返回1，否则返回0，O(1)复杂度a.clear()      //把vector清空a.begin()      //返回指向第一个元素的迭代器，*a.begin()与a[0]作用相同a.end()        //越界访问，指向vector尾部，指向第n个元素再往后的边界a.front()      //返回第一个元素的值，等价于*a.begin和a[0]a.back()       //返回最后一个元素的值，等价于*--a.end()和a[size()-1]a.push_back(x) //把元素x插入vector尾部a.pop_back()   //删除vector中最后一个元素\n遍历的方式有两种：\n\n迭代器使用与指针类似，可如下遍历整个容器。\n\nfor ( vector&lt;int&gt;::iterator it=a.begin() ; it!=a.end() ; it++ )cout&lt;&lt;*iterator&lt;&lt;endl;\n\n当成数组使用。\n\nfor( int i=0;i&lt;a.size();i++) cout&lt;&lt;a[i]&lt;&lt;endl;\nJava 中我们一般使用 List，相信大家已经非常熟悉了，我们这里给大家补充一下 Vector 的用法，与 List 的使用方式非常的类似。\n//第一种构造方法创建一个默认的向量，默认大小为 10：Vector()//第二种构造方法创建指定大小的向量。Vector(int size)//第三种构造方法创建指定大小的向量，并且增量用 incr 指定。增量表示向量每次增加的元素数目。Vector(int size,int incr)//第四种构造方法创建一个包含集合 c 元素的向量：Vector(Collection c)\n以下为 Java Vector 的 Api。\n\n\n\n\n修饰符和类型\n方法和说明\n\n\n\n\nboolean\nadd(E e)将指定的元素附加到此 Vector 的末尾。\n\n\nvoid\nadd(int index, E element)在此 Vector 的指定位置插入指定元素。\n\n\nboolean\naddAll(Collection&lt;? extends E&gt; c)将指定集合中的所有元素追加到末尾 这个向量，按照它们由指定的返回的顺序 集合的迭代器。\n\n\nboolean\naddAll(int index, Collection&lt;? extends E&gt; c)将指定 Collection 中的所有元素插入到此 指定位置的向量。\n\n\nvoid\naddElement(E obj)将指定的组件添加到此向量的末尾， 将其大小增加一。\n\n\nint\ncapacity()返回此向量的当前容量。\n\n\nvoid\nclear()从此 Vector 中删除所有元素。\n\n\nObject\nclone()返回此向量的克隆。\n\n\nboolean\ncontains(Object o)退货 true 如果此向量包含指定的元素。\n\n\nboolean\ncontainsAll(Collection&lt;?&gt; c)如果此 Vector 包含所有元素，则返回 true 指定的集合。\n\n\nvoid\ncopyInto $Object$ [ ] $anArray$将此向量的分量复制到指定的数组中。\n\n\nE\nelementAt(int index)返回指定索引处的组件。\n\n\nEnumeration\nelements()返回此向量的组件的枚举。\n\n\nvoid\nensureCapacity(int minCapacity)如有必要，增加此向量的容量，以确保它至少可以容纳由指定的组件数量最小容量参数。\n\n\nboolean\nequals(Object o)比较指定的 Object 与此 Vector 是否相等。\n\n\nE\nfirstElement()返回第一个组件（索引处的项目 0） 的这个向量。\n\n\nE\nget(int index)返回此 Vector 中指定位置的元素。\n\n\nint\nhashCode()返回此 Vector 的哈希码值。\n\n\nint\nindexOf(Object o)返回指定元素第一次出现的索引 在此向量中，如果此向量不包含该元素，则为 -1。\n\n\nint\nindexOf(Object o,int index)返回指定元素第一次出现的索引这个向量，从 index, 或返回 -1 如果 未找到该元素。\n\n\nvoid\ninsertElementAt(E obj, int index)将指定对象作为组件插入此向量中的 指定的 index.\n\n\nboolean\nisEmpty()测试此向量是否没有组件。\n\n\nIterator\niterator()以适当的顺序返回此列表中元素的迭代器\n\n\nE\nlastElement()返回向量的最后一个组件。\n\n\nint\nlastIndexOf(Object o)返回指定元素最后一次出现的索引在此向量中，如果此向量不包含该元素，则为 -1。\n\n\nint\nlastIndexOf(Object o, int index)返回指定元素最后一次出现的索引这个向量，从 index, 或返回 -1 如果 未找到该元素。\n\n\nListIterator\nlistIterator()返回此列表中元素的列表迭代器（在适当的顺序）。\n\n\nListIterator\nlistIterator(int index)返回此列表中元素的列表迭代器（在适当的序列），从列表中的指定位置开始。\n\n\nE\nremove(int index)移除此 Vector 中指定位置的元素。\n\n\nboolean\nremove(Object o)移除此 Vector 中第一次出现的指定元素如果 Vector 不包含该元素，则它保持不变。\n\n\nboolean\nremoveAll(Collection&lt;?&gt; c)从此 Vector 中删除其包含在指定的集合。\n\n\nvoid\nremoveAllElements()从此向量中删除所有组件并将其大小设置为零。\n\n\nboolean\nremoveElement(Object obj)删除参数的第一个（最低索引）出现从这个向量。\n\n\nvoid\nremoveElementAt(int index)删除指定索引处的组件。\n\n\nprotected void\nremoveRange(int fromIndex, int toIndex)从此列表中删除索引介于两者之间的所有元素 fromIndex，包括在内，和 toIndex， 独家的。\n\n\nboolean\nretainAll(Collection&lt;?&gt; c)仅保留此 Vector 中包含在指定的集合。\n\n\nE\nset(int index, E element)将此 Vector 中指定位置的元素替换为指定的元素。\n\n\nvoid\nsetElementAt(E obj,int index)将组件设置在指定的位置 index 这个的向量是指定的对象。\n\n\nvoid\nsetSize(int newSize)设置此向量的大小。\n\n\nint\nsize()返回此向量中的组件数。\n\n\nList\nsubList(int fromIndex,int toIndex)返回此列表中 fromIndex 之间的部分的视图\n\n\nObject[]\ntoArray()返回一个包含此 Vector 中所有元素的数组以正确的顺序。\n\n\nT[]\n$toArray\\ T$[] 返回一个包含此 Vector 中所有元素的数组正确的顺序; 返回数组的运行时类型指定数组。\n\n\nString\ntoString()返回此 Vector 的字符串表示形式，包含 每个元素的字符串表示。\n\n\nvoid\ntrimToSize()将此向量的容量修剪为向量的电流 尺寸。\n\n\n\n\n遍历 Vector\nEnumeration vEnum = v.elements();while (vEnum.hasMoreElements())    System.out.print(vEnum.nextElement() + &quot; &quot;);\nPython 中，我们直接使用 list 即可来实现。\n题目解析快递员需要对快递进行分拣，现在小李是一名快递员，他想要你帮他设计一个程序用于快递的分拣，按城市分开。\n现在有以下输入：\n单号 省份请你将单号按照城市分开，并输出。城市按照输入顺序排序单号按照输入顺序排序\n样例如下：\n输入1010124214 北京12421565  上海sdafasdg213 天津fasdfga124 北京145252  上海235wtdfsg 济南3242356fgdfsg 成都23423 武汉23423565f 沈阳1245dfwfs 成都输出北京 210124214fasdfga124上海 212421565145252天津 1sdafasdg213济南 1235wtdfsg成都 23242356fgdfsg1245dfwfs武汉 123423沈阳 123423565f\n下面我们来分析一下解题思路。\n首先我们要知道中国城市肯定在 $1000$ 个以内，但是单号我们不确定，我们不可能每个数组开 $10000$ 个，那样内存不够，所以这时候我们就用到了我们的 $vector$，他的容量是动态申请的，在比赛中我们可以理解为无限制。\n\n第一步：我们创建一个 $vector$ 用于保存地址\n\nvector&lt;string&gt; city;\n\n第二步：我们创建一个 $vector$ 组用于存放单号\n\nvector&lt;string&gt; dig[1000];\n\n第三步：我们定义一个映射函数，因为你的城市可能会再次出现，你需要知道之前有没有。\n\n第四步：我们开始读入操作并按照顺序进行存放\n\n\n完整代码C++ 解题代码：\n#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;vector&lt;string&gt; city;vector&lt;string&gt; dig[1000];int Myfind(string s)&#123;    for(int i=0;i&lt;city.size();i++)    &#123;        if(city[i]==s) return i;    &#125;    return -1;&#125;int main()&#123;    int n;    cin&gt;&gt;n;    for(int i=0;i&lt;n;i++)    &#123;        string d,c;        cin&gt;&gt;d&gt;&gt;c;        int flag=Myfind(c);        if(flag==-1)&#123;            city.push_back(c);            dig[city.size()-1].push_back(d);        &#125;        else  dig[flag].push_back(d);    &#125;    for(int i=0;i&lt;city.size();i++)    &#123;        cout&lt;&lt;city[i]&lt;&lt;&quot; &quot;&lt;&lt;dig[i].size()&lt;&lt;endl;        for(int j=0;j&lt;dig[i].size();j++)            cout&lt;&lt;dig[i][j]&lt;&lt;endl;    &#125;&#125;\nJava 解题代码\nimport java.util.List;import java.util.Scanner;import java.util.Vector;public class Main &#123;  static Vector city=new Vector&lt;String&gt;();  static Vector &lt;Vector&lt;String&gt;&gt; dig= new Vector &lt;Vector&lt;String&gt;&gt;();  static int Myfind(String s)  &#123;      for(int i=0;i&lt;city.size();i++)      &#123;          if(city.get(i).equals(s)) &#123;              return i;          &#125;      &#125;      return -1;  &#125;  public static void main(String[] args) &#123;      int n;      Scanner in=new Scanner(System.in);      n=in.nextInt();      for(int i=0;i&lt;n;i++)      &#123;          String d,c;          d=in.next();          c=in.next();          int flag=Myfind(c);          if(flag==-1)&#123;              city.addElement(c);              dig.addElement(new Vector&lt;String&gt;());              dig.get(city.size()-1).addElement(d);          &#125;          else   dig.get(flag).addElement(d);      &#125;      for(int i=0;i&lt;city.size();i++)      &#123;          System.out.println(city.get(i)+&quot; &quot;+dig.get(i).size());          for(int j = 0; j&lt; dig.get(i).size(); j++)              System.out.println(dig.get(i).get(j));      &#125;  &#125;&#125;\nPython 实现方式:\ncity=[]dig = [[] for i in range(1000)]def find(s):   for i in range(0,len(city)):       if (city[i]==s):           return i   return -1if __name__ == &#x27;__main__&#x27;:   n=int (input())   for i in range(0,n):       d=input().split()       #print(d[1]        )       flag=find(d[1])       if(flag==-1):           city.append(d[1])           dig[len(city)-1].append(d[0])       else:           dig[flag].append(d[0])   for i in range(0,len(city)):       print(city[i],len(dig[i]))       for j in range(0,len(dig[i])):           print(dig[i][j])\n队列 Queue队列的讲解在之前的课程中已经讲过了，忘记的快回去复习。\n我们直接开始看操作吧。\nC++ 中的队列定义方式：在 C++ 里所有容器的定义方式基本一致。\nqueue&lt;string&gt; myqueue;queue&lt;int&gt; myqueue_int;\n成员函数:\n\nfront()：返回 queue 中第一个元素的引用。\nback()：返回 queue 中最后一个元素的引用。\npush(const T&amp; obj)：在 queue 的尾部添加一个元素的副本。\npop()：删除 queue 中的第一个元素。\nsize()：返回 queue 中元素的个数。\nempty()：如果 queue 中没有元素的话，返回 true。\n\nJava 中的队列:\n定义方式：\nQueue&lt;String&gt; queue = new LinkedList&lt;String&gt;();\n部分成员函数（包括继承的）：\n\nadd(): 增加一个元索,如果队列已满，则抛出一个异常\nremove():移除并返回队列头部的元素，如果队列为空，则抛出一个异常\nelement():返回队列头部的元素，如果队列为空，则抛出一个异常\noffer():添加一个元素并返回 true，如果队列已满，则返回 false\npoll(): 移除并返问队列头部的元素，如果队列为空，则返回 null\npeek(): 返回队列头部的元素，如果队列为空，则返回 null\nput(): 添加一个元素， 如果队列满，则阻塞\ntake(): 移除并返回队列头部的元素，如果队列为空，则阻塞\nsize(): 返回队列长度。\n\nPython 中的队列\n定义方式：\nfrom queue import Queue## maxsize设置队列中，数据上限，小于或等于0则不限制，容器中大于这个数则阻塞，直到队列中的数据被消掉q = Queue(maxsize=0)\n成员函数：\n\nQueue.qsize() 返回队列的大致大小。\n\nQueue.empty() 如果队列为空，返回 True 否则返回 False\n\nQueue.full() 如果队列是满的返回 True ，否则返回 False\n\nQueue.put(item, block=True, timeout=None)\n\n常用时忽略默认参数，即使用 Queue.put(item)。\n将 item 放入队列，如果可选参数 block 是 true 并且 timeout 是 None (默认)，则在必要时阻塞至有空闲插槽可用。\n如果 timeout 是个正数，将最多阻塞 timeout 秒，如果在这段时间没有可用的空闲插槽，将引发 Full 异常。\n反之 (block 是 false)，如果空闲插槽立即可用，则把 item 放入队列，否则引发 Full 异常 ( 在这种情况下，timeout 将被忽略)。\n\n\nQueue.get(block=True, timeout=None)\n\n常用时忽略默认参数，即使用 Queue.get()。\n从队列中移除并返回一个项目。如果可选参数 block 是 true 并且 timeout 是 None (默认值)，则在必要时阻塞至项目可得到。\n如果 timeout 是个正数，将最多阻塞 timeout 秒，如果在这段时间内项目不能得到，将引发 Empty 异常。反之 (block 是 false)，如果一个项目立即可得到，则返回一个项目，否则引发 Empty 异常 (这种情况下，timeout 将被忽略)。\n\n\n\n题目回顾\nCLZ 的银行。\n\n第一行 M 次操作（M&lt;1000）第二行 到 第M+1行 输入操作格式：   IN name V        OUT V        IN name2 N        OUT N        即 第一个字符串为操作 是IN进入排队和OUT 出队            IN 排队 跟着两个字符串为姓名和权限V或N            OUT 为出队即完成操作，V和N代表那个窗口完成了操作输出：M次操作后V队列和N队列中姓名，先输出V队列后输出N队列。样例：输入：5IN xiaoming NIN Adel VIN laozhao NOUT NIN CLZ V输出：AdelCLZlaozhao\n具体的题目讲解，我们之前就已经讲解过了，这里我们主要是来看一下预置代码的方便性。\n完整代码C++实现：\n#include &lt;iostream&gt;#include &lt;queue&gt;using namespace std;queue&lt;string&gt; V;queue&lt;string&gt; N;int main()&#123;    int M;    cin&gt;&gt;M;    while(M--) //    &#123;        string op,name,type;        cin&gt;&gt;op;        if(op==&quot;IN&quot;)        &#123;            cin&gt;&gt;name&gt;&gt;type;            if(type==&quot;V&quot;)                V.push(name);            else                N.push(name);        &#125;        else        &#123;            cin&gt;&gt;type;            if(type==&quot;V&quot;)                V.pop();            else                N.pop();        &#125;    &#125;    while(V.size())    &#123;        cout&lt;&lt;V.front()&lt;&lt;endl;        V.pop();    &#125;    while(N.size())    &#123;        cout&lt;&lt;N.front()&lt;&lt;endl;        N.pop();    &#125;&#125;\nJava 实现\nimport java.util.LinkedList;import java.util.Queue;import java.util.Scanner;public class Main &#123;    static Queue&lt;String&gt; V=new LinkedList&lt;String&gt;();    static Queue&lt;String&gt; N=new LinkedList&lt;String&gt;();    public static void main(String[] args) &#123;        int M;        Scanner in=new Scanner(System.in);        M=in.nextInt();        while(M&gt;0) //        &#123;            M--;            String op,name,type;            op=in.next();            // System.out.println(&quot;op&quot;+op);            if(op.contains(&quot;IN&quot;))            &#123;                name=in.next();                type=in.next();                if(type.contains(&quot;V&quot;)) &#123;                    V.offer(name);                &#125;                else &#123;                    N.offer(name);                &#125;                // System.out.println(&quot;name:&quot;+name+&quot;type:&quot;+type);                // System.out.println(Vqueue);            &#125;            else            &#123;                type=in.next();                if(type.contains(&quot;V&quot;))&#123;                    V.poll();                &#125;                else &#123;                    N.poll();                &#125;                // System.out.println(&quot;type&quot;+type);            &#125;        &#125;        while(V.size()!=0)        &#123;            System.out.println(V.poll());        &#125;        while(N.size()!=0)        &#123;            System.out.println(N.poll());        &#125;    &#125;&#125;\nPython 实现\nimport queueV = queue.Queue()N = queue.Queue()if __name__ == &#x27;__main__&#x27;:  M = 0  M = int(input())  while M &gt; 0:      M -= 1      op = input().split()      # print(op[0])      if op[0] == &#x27;IN&#x27;:          if op[2] == &quot;V&quot;:              V.put(op[1])          else:              N.put(op[1])      else:          if op[1] == &quot;V&quot;:              V.get()          else:              N.get()          # print(&#x27;out&#x27;)      # print(&quot;VVVVV&quot;,Vqueue)      # print(&quot;NNNN&quot;,Nqueue)      # print(M)  while not (V.empty()):      print(V.get())  while not (N.empty()):      print(N.get())\nMap 映射在之前我们学习散列表的时候我们就接触过了映射，这里我们要讲的是一种类似的数据结构。\nmap 是一个关联容器，它提供一对一的 hash。\n\n第一个可以称为关键字(key)，每个关键字只能在 map 中出现一次\n第二个可能称为该关键字的值(value)\n\nmap 以模板（泛型）方式实现，可以存储任意类型的数据，包括使用者自定义的数据类型。Map 主要用于资料一对一映射（one-to-one）的情況，map 在 C++ 的內部的实现自建一颗红黑树，这颗树具有对数据自动排序的功能。在 map 内部所有的数据都是有序的。\n比如，像是管理班级内的学生，Key 值为学号，Value 放其他信息的结构体或者类。\nC++ 中的 map定义方式：\nmap&lt;char, int&gt; mymap1;map&lt;string, int&gt; mymap2;\n一般用法：\n\n看容量。\n\nint map.size();//查询map中有多少对元素bool empty();// 查询map是否为空\n\n插入。\n\nmap.insert(make_pair(key,value));//或者map.insert(pair&lt;char, int&gt;(key, value))//或者map[key]=value\n\n取值。\n\nmap&lt;int, string&gt; map;//如果map中没有关键字2233，使用[]取值会导致插入//因此，下面语句不会报错，但会使得输出结果结果为空cout&lt;&lt;map[2233]&lt;&lt;endl;//但是使用使用at会进行关键字检查，因此下面语句会报错map.at(2016) = &quot;Bob&quot;;\n\n遍历操作\n\nmap&lt;string, string&gt;::iterator it;for (it = mapSet.begin(); it != mapSet.end(); ++it)&#123;    cout &lt;&lt; &quot;key&quot; &lt;&lt; it-&gt;first &lt;&lt; endl;    cout &lt;&lt; &quot;value&quot; &lt;&lt; it-&gt;second &lt;&lt; endl;&#125;\n\n查找操作\n\nm.count(key)：//由于map不包含重复的key，因此m.count(key)取值为0，或者1，表示是否包含。m.find(key)：//返回迭代器，判断是否存在。\nJava 中的 map\n定义方法：\nMap m1 = new TreeMap();\n这里我们讲的是排序的 map 还有不排序的 map，java 里面叫 hashmap，C++ 里叫 unordered_map，除了不排序，用法和功能都一样。\n二者相差无几，大家如果不需要排序可以直接使用。\n成员方法\n\n\n\n\n方法名\n方法描述\n\n\n\n\nvoid clear( )\n从此映射中移除所有映射关系（可选操作）。\n\n\nboolean containsKey(Object k)\n如果此映射包含指定键的映射关系，则返回 true。\n\n\nboolean containsValue(Object v)\n如果此映射将一个或多个键映射到指定值，则返回 true。\n\n\nboolean equals(Object obj)\n比较指定的对象与此映射是否相等。\n\n\nObject get(Object k)\n返回指定键所映射的值；如果此映射不包含该键的映射关系，则返回 null。\n\n\nint hashCode( )\n返回此映射的哈希码值。\n\n\nboolean isEmpty( )\n如果此映射未包含键-值映射关系，则返回 true。\n\n\nSet keySet( )\n返回此映射中包含的键的 Set 视图。\n\n\nObject put(Object k, Object v)\n将指定的值与此映射中的指定键关联\n\n\nObject remove(Object k)\n如果存在一个键的映射关系，则将其从此映射中移除（可选操作）。\n\n\nint size( )\n返回此映射中的键-值映射关系数。\n\n\nCollection values( )\n返回此映射中包含的值的 Collection 视图。\n\n\n\n\nPython 字典\n在 Python 中我们不叫映射，也不叫 map，我们称作字典。用法跟 Java 和 c++ 都是有一定区别的。\n\n字典的创建。\n\nmassege=&#123;&#x27;小李&#x27;:&#x27;123124543643&#x27;,&#x27;xiaohua&#x27;:&#x27;17855666&#x27;,&#x27;LiMing&#x27;:&#x27;1249699859456&#x27;&#125;#或者创建空的字典empty_dict = &#123;&#125;#或者使用元组作为keygroup_dict = &#123;(60, 99):&#x27;good&#x27;, 100:&#x27;nice&#x27;&#125;\n\n字典的添加。\n\n# 如果字典内不含有相应的Key值，则会执行添加操作dict[key]=value\n\n字典的修改。\n\n# 如果字典内含有相应的Key值，则会执行更新操作dict[key]=new_value# 使用update()修改# update() 方法可使用一个字典所包含的 key-value 对来更新己有的字典。如果有就修改，没有就添加。dict.update(&#123;&#x27;key&#x27;:123,&#x27;key2&#x27;:234&#125;)\n\n字典的删除。\n\ndel dict[&#x27;key&#x27;]  # 删除键是&#x27;key&#x27;的条目dict.clear()      # 清空字典所有条目del dict          # 删除字典\n\n字典的访问。\n\ndict = &#123;&#x27;Name&#x27;: &#x27;Zara&#x27;, &#x27;Age&#x27;: &#x27;7&#x27;&#125;print (dict[&#x27;Name&#x27;])#当然如果key值不存在，将会抛出异常#也可以是用get()方法,不存在会返回None，但不会抛出异常print(dict.get(&#x27;Name&#x27;))\n题目演练\n《弗里石的的语言》\n小发明家弗里想创造一种新的语言，众所周知，发明一门语言是非常困难的，首先你就要克服一个困难就是，有大量的单词需要处理，现在弗里求助你帮他写一款程序，判断是否出现重复的两个单词。\n有重复就输出重复单词，重复就输出 NO，多个重复输出最先出现的哪一个。\n\n输入：\n第 $1$ 行，输入 $N$，代表共计创造了多少个单词 第 $2$ 行至第 $N+1$ 行，输入 $N$ 个单词\n格式：\nfjsdfgdfsgfdfsgsdfgbcvxbxfyres\n现在有以下样例输入：\n样例 1\n输入：61fagasdsafa32jlkiuopybncvhfgdjytrcncxfgsdhrest输出：NO\n样例 2\n输入：5sdfggfdsfgsdhsdfdsfhsdhrsdfhdfhsdfggfds输出：sdfggfds\n这个题的思路在前面我们已经讲过了，这里我们换一种方式解题。\n使用映射和字典解题，是的原来的代码减少了超过一半，但是思路还是一样，可以说是非常的巧妙且省力。\nC++ 解法 #include &lt;iostream&gt; #include &lt;map&gt; using namespace std;map&lt;string,bool&gt; mp;int main ()&#123;    int n;    string ans=&quot;NO&quot;;    cin&gt;&gt;n;    for(int i=0;i&lt;n;i++)    &#123;        string word;        cin&gt;&gt;word;        if(mp.count(word))&#123;            ans=word;            break;        &#125;        else mp[word]=1;    &#125;    cout&lt;&lt;ans&lt;&lt;endl;&#125;\nJava 解法\nimport java.util.Map;import java.util.Scanner;import java.util.TreeMap;public class Main &#123;  static Map mp=new TreeMap();  public static void main(String[] args)  &#123;      int n;      boolean flag=false;      Scanner in=new Scanner(System.in);      String ans=&quot;NO&quot;;      n=in.nextInt();      for(int i=0;i&lt;n;i++)      &#123;          String word;          word=in.next();          // System.out.println(Hx(word));          if(flag) continue;          if(mp.containsKey(word))&#123;              flag=true;              ans=word;          &#125;          else &#123;              mp.put(word,true);          &#125;      &#125;      System.out.println(ans);  &#125;&#125;\nPython 解法\ndict=&#123;&#125;if __name__==&#x27;__main__&#x27;:  N=int (input())  ans = &#x27;NO&#x27;  flag = False  while N&gt;0:      N-=1      word=input()      if(not(flag)) :          if(dict.get(word)!=None):              flag=True              ans=word          else:              dict[word]=True  print(ans)\n","categories":["蓝桥杯Note"],"tags":["蓝桥杯备赛","工具函数模板"]},{"title":"四级英语备考","url":"/2024/06/11/%E5%9B%9B%E7%BA%A7%E8%8B%B1%E8%AF%AD%E5%A4%87%E8%80%83/","content":"一、听力部分（248.5~=249分）题型构成听力最低得分142\n四六级是加权分\n\n听力应对策略\n听之前Pre-listening看选项\n听力选项中，大写的专有名词不是定位词（听力中一定会出现）听力定位词指的是：我听到就可以选的单词，也就是区别于其他选项\n通常定位词是：名词，较长的单词，动词，形容词\n如果不认识，如何识别名词：\n\nof前后\n\n连字符的后面（前面是两个用连字符连起来单词，后面那个）\n\n‘s所有格后面\n\n形容词性物主代词（代词所有格 my our your）\n\n冠词 a/an/the\n\n介词后\n\n关于数字的补充：数字不能作为主要的定位词，但是可以作为选项完整信息来辅助选择\n\n关于定位词的补充：定位词通常是作为一个整体（短语）而不是单独的某个单词，尤其是他们之间有修饰关系的时候\n\n\n\n\n比对选项，找出共同点和不同点：通过选项，判断可能的问题没有时间 可以省略 适合听力150分往上的使用\n听中During-listening听后After-listening听力原则详解1、位置原则——命题原则：做题原则首题——答案在开篇前3句中（要练习听力中句子停顿的感觉）出现的越早越是答案\n例外非常少\n中间题——（很多时候不是听不懂，而是跟不上）一定要利用信号词信号词\n听力不能翻译，一旦翻译时间一定跟不上\n尾题——通常出现在快要结束的地方（关键词：questions）\nexplosion\n汉语拼音就是根据国际音标而来\n韵母aoeiu\n元音aeiou\n生母b /b/\n\n\n\n2、信号词原则（10种听力信号词）转折词：\nbut,yet （失去爆破——读的快t的音消失了）\nhowever,while,although,though 虽然，尽管 srds\nnow,unexpectedly 出人意料的是 unfortunately 不幸的是 \n\n并列词and,or,also,while而not only…but also…,not…but…,either..or…，likewise，similarly同样的\n重点：如果选项中出现并列（and，or），一定会听到并列前后的内容（也就是说，并列前后是重点）\n递进词then 另外，接着，another 另一个，in addition，furthermore，besides 另外\n顺序词on one hand,on the other hand,first of all,to start,……finally\n强调词do,does,did 强调句——重读，marjor，marjority，main，chief，key，primary 主要的（the major reason 主要原因）only，in fact ，the first\n最高级(听力不要翻译)the most,the best,the …est\n因果词because,so,so that therefore ,reason,casuse,explain,explanation,due to,because of ,as a result of\n注意会表示因果关系的词\nlead to,result in,account for,contribute to,bring about\n\ngivr birth to,derive from,result from,generate from,originate from\n\n\n观点结论词think,believe,hold,suggest,claim,argue,note,add,conclude,turn out\n举例处for example,for instance,like,such as,include\n特殊句型带it的句型 it is……that强调句，it做形式主语或形式宾语；带wh-的从句\n重读停顿原则重合度高原则信号词练习\n19.位置原则+信号词原则+原词重合度+重读停顿\n\na.Everything was natural and fenuine then.\nb.People had plenty of land to cultivate then.\nc.It markedd the beginning of something new.\nd.It was when her ancertors came to America.\n\n20.信号词+重合度+重读停顿\na.They were konwn to be creative.\nb.They had all kinds of entertainment.\nc.They enjoyed living a life of ease.\nd.They believed in working for goals.\n21.位置原则+信号词原则+原词重合度+重读停顿\na.Chatting with her ancestors.\nb.Furnishing her country house.\nc.Doing needlework by the fire.\nd.Polishing all the silver work.\n短文和长对话练习长对话练习位置原则：第一题 对话的前三个回合（注意对话前面常出现的寒暄）\n性别特征：通过选项，判断可能和男性和女性相关的话题\n对话中有很多语气词，要特别注意：\n\nwell\nyou know\noh\nnow\nI’d like to\nhow about to/what about donig sth/sth;做某事怎么样 提建议\nlet me see 让我想一想\nwhy not do sth 为什么不？提建议\ndon’t you你难道不……\nwhy don’t you 你为什么不……？\nwould you like to…提要求……您能不能?\nsorry,I’d love to but…\nlisten\nlook 引起别人注意\n\n二、阅读部分\n目标1    425/426     710*60%（100——60）\n听力    前15个对10个=71 后10个对5个=71 =&gt;142=150\n阅读     A    0.5——3.55分    分值小 特别难\n​        B    1——7.1分    分值适中——先做（10——15mins）\n​        C    2——14.2分     分值较高 难度较高——第二（20——25mins）\n阅读做题顺序     BCA（可以挪用翻译的5~10分钟）\n最后得分在460分左右——还有30分钟剩余\n翻译写作答题顺序\n审题：题目读三遍、否则不动笔\n\n审题三要素\n体裁essay/letter/news report/proposal/report/advertisement\n\n话题+内容要求\n\n字数四级150左右；六级180左右\n数一行多少词*行数\n\n\n\n范例：23年6月Drirctions:Suppose the student union of your university is originzing an online discussion on college students doing community service.Your are to write an essay on its benfits and the service you can provide to the community.You will have 30 minutes for this task and should write at least 120 words but no more than 180 words. \n   体裁：essay    话题：college students doing community service    内容要求：benfuts+the service you can provide\n\n范例2：23年12月Driections:Suppose your university is inviting submissions from students for its xoming edition on a campus event that has impressed them most.You will have 30 minutes for this task and should write at least 120 words but no more than 180 words.\n体裁：essay/letter都可以    话题：acampus event    内容要求：impressed……most……\n\n范例3：22年6月Driections：Suppose you are writing a proposal to your schoole library for improving its services.You are to write about its current problems and possible solutions to these problems.You will 30 minutes to write the proposal.You should write at least 120 words but no more than 180 words.\n体裁：letter/essay    话题：library service    内容要求：current problems+solutions\n\n四六级作文不需要写题目\n写对了不扣分，写错了扣分，不写也不扣分\n\n救命作文内容层面的灵活：一例多用\n以TOEFL写作为例：（环境）\n\n在你家周围建一个工厂，你是否同意？\n\n你认为科学家对人类的贡献大还是艺术家对人类的贡献大？\n\n你的职业梦想是什么？\n\n如果让你发明一样机器，你会选择什么？\n\n如果你有一笔钱，你会用它来做什么？\n\n\nEnglish LearningIn the contemporary world,it is of great significance for yougsters to learn English well.English learning,thus, has gained great popularity.Based on a survey,a majority of international organizations or firms acknowledge that they prefer recruting employees who can speak English fluently.\nHowever,a host of English learners may have a variety difficulties or troubles in learning.For instance,a large number of students find it difficult to memorize new words.Frequently,it is also difficult for them to understand rules of English grammar.In addtiion,though some are good at reading or writing,they fail to express themselves freely in oral English.\n巧妇难为无米之炊。find it+adj.+to do表感受\n Then,how to get a good command if this language?I deem that practice makes perfect.Only pratice can help me master grammatical knowledge and remember new words.Of course,it is also through practice that I can speak and write fluently,and there is no other way.If I try my utmost to practive English every day,the future of my English learning will be promising and hopeful.\nIn the contemporary world,it is of great significance for yougsters to learn English well.English  learning,thus,has gaind great popularity.Baserd on a survey,a majority of international organizations of firms acknowledge that they prefer recruting employees who can speak English fluently.However,a host of English learners may have a variety difficulties or troules in learning.For instance,a large number of students find it difficult to memorize new words.Frequently,it is also difficult for them to understand rules of English grammar.In addition,though some age good at reading or writing,they fail to express themselves freely in oral English.Then,how to get a good command if this language?I deem that practice makes perfect.Only practice can help me master grammatical knowledge and remember new words.Of course,it is also through practice that I can speak and write fluently,and there is no other way.If I try my utmost to practive English every day,the future of my English learning will be promising and hopeful.\n\n\n翻译预测现代建设成就 中国传统文化\n\n\n写作\n浪费\nAddition to online games will waste hours,lavish days and even squander years.\n帮助\nWe should help others.\nWe should offer material support,financial aid,mental comfort and spirtual backup to those in the need of help.\n成功\nThe confidence will help us accumlate wealth,establish career,fit into society and even attain social status.\n\n","tags":["英语四级"]},{"title":"图论入门","url":"/2024/03/11/%E5%9B%BE%E8%AE%BA%E5%85%A5%E9%97%A8/","content":"图论本章节为图论最基本的内容，要求每位同学都要尽量掌握。\n图的基本概念图：由点(node，或者 vertex)和连接点的边(edge)组成。图是点和边构成的网。\n树：特殊的图\n树，即连通无环图树的结点从根开始，层层扩展子树，是一种层次关系，这种层次关系，保证了树上不会出现环路。两点之间的路径：有且仅有一条路径。最近公共祖先。\n图的种类（1）无向无权图，边没有权值、没有方向； （2）有向无权图，边有方向、无权值； （3）加权无向图，边有权值，但没有方向； （4）加权有向图； （5）有向无环图（Directed Acyclic Graph，DAG）。\n图算法的时间分析图算法的复杂度和边的数量 E、点的数量 V 相关。$O(V+E)$：几乎是图问题中能达到的最好程度。$O(V\\log E)$、$O(E\\log V)$：很好的算法。$O(V^2)$、$O(E^2)$或更高：不算是好的算法。\n图的存储能快速访问：图的存储，能让程序很快定位结点 u 和 v 的边(u, v) 。\n\n数组存边：简单、空间使用最少；无法快递定位\n邻接矩阵：简单、空间使用最大；定位最快 dis[a][b]\n邻接表：空间很少，定位较快\n链式前向星：空间更少，定位较快\n\n注： 存储方式跟题目相匹配，占用空间少定位快也不一定是问题的最优存储方式。\n数组存边优点：简单、最省空间。 缺点：无法定位某条边。 应用：bellman-ford 算法、最小生成树的 kruskal 算法\n\nC++\n\n// c/c++实现struct Edge&#123;    int from,to,dis;&#125;e[M]; //结构体数组存边cin&gt;&gt;n&gt;&gt;m;for(int i=1;i&lt;=m;++i)    cin&gt;&gt;e[i].from&gt;&gt;e[i].to&gt;&gt;e[i].dis;\n\nJava\n\n//Java实现class Edge &#123; int from; int to; int dis;    public Edge(int from, int to, int dis) &#123;        this.from = from;        this.to = to;        this.dis = dis;    &#125;&#125;Edge[] e = new Edge[M];Scanner sc = new Scanner(System.in);int n = sc.nextInt();int m = sc.nextInt();for (int i = 0; i &lt; m; ++i)&#123;    int from = sc.nextInt();    int to = sc.nextInt();    int dis = sc.nextInt();    e[i] = new Edge(from, to, dis);&#125;\n\nPython\n\n#python实现class Edge:    def init(self, f, t, d):        self.from = f        self.to = t        self.dis = de = [Edge(0, 0, 0) for i in range(M)]n, m = map(int, input().split())for i in range(1, m + 1):    e[i].from, e[i].to, e[i].dis = map(int, input().split())\n邻接矩阵二维数组： $graph[NUM ][NUM ]$ 无向图： $graph[i][j]=graph[j][i]。$ 有向图： $graph[i][j]\\neq graph[j][i]。$ 权值： $graph[i][j]存结点i到j的边的权值。$ 例如 $graph[1][2]= 3，graph[2][1] = 5等等。$ 用 $graph[i][j]= INF表示i，j之间无边。$\n优点：\n\n适合稠密图；\n编码非常简短；\n对边的存储、查询、更新等操作又快又简单。\n\n缺点：\n\n存储复杂度 $O(V^2)$太高。V=10000 时，空间 100M。\n不能存储重边。\n\n邻接表和链式前向星邻接表（指针或数组下标）和链式前向星（容器模拟）的思路一样，只是表达方式不同。\n\n\nC++\n\nstruct edge&#123;    int from, to; long long w; //起点，终点，权值。起点from并没有用到，e[i]的i就是from    edge(int a, int b,long long c)&#123;from=a; to=b; w=c;&#125;&#125;;vector&lt;edge&gt;e[N];          //用于存储图\n\nJava\n\nstatic class Edge &#123;    int from, to;    long w;    Edge(int a, int b, long c) &#123;        from = a;        to = b;        w = c;    &#125;&#125;static ArrayList&lt;Edge&gt;[] e = new ArrayList[N];\n\nPython\n\nclass Edge:    def __init__(self, fr, to, w):        self.fr = fr        self.to = to        self.w = we = [[] for _ in range(N)]\n我们会在使用的时候进行讲解。\n最短路问题最广为人知的图论问题就是最短路径问题。\n简单图的最短路径\n\n树上的路径：任意 $2$ 点之间\n\n只有一条路径\n\n所有边长都为 $1$ 的图：用 BFS 搜最短路径，复杂度 $O(n+m)$\n\n普通图的最短路径\n\n边长：不一定等于 $1$，而且可能为负数\n算法：Floyd、Dijkstra、SPFA 等，各有应用场景，不可互相替代\n\n最短路算法比较\n\n\n\n问题\n边权\n算法\n时间复杂度\n\n\n\n\n一个起点，一个终点\n非负数；无边权（或边权为 1）\nA*\n&lt; $O((m+n)\\log n)$\n\n\n\n\n双向广搜\n&lt; $O((m+n)\\log n)$\n\n\n\n\n贪心最优搜索\n&lt; $O(m+n)$\n\n\n一个起点到其他所有点\n无边权（或边权为 1）\nBFS\n$O(m+n)$\n\n\n\n非负数\nDijkstra(堆优化优先队列)\n$O((m+n)\\log n)$\n\n\n\n允许有负数\nSPFA\n&lt; $O(mn)$\n\n\n所有点对之间\n允许有负数\nFloyd-Warshall\n$O(n^3)$\n\n\n\n\n什么算法也不能解决存在负环图的最短路的问题！最多是判断是否存在，或者找到负环。\n网站推荐：CSAcademy Graph Editor\n\n方便图论的学习。\nFloyd 算法\n最简单的最短路径算法，代码仅有 $4$ 行\n存图：最简单的矩阵存图\n易懂，比暴力的搜索更简单易懂。\n效率不高，不能用于大图在某些场景下有自己的优势，难以替代。能做传递闭包问题（离散数学）\n\nC++、Java\n//java 和 c++for(int k=1; k&lt;=n; k++)         //floyd的三重循环    for(int i=1; i&lt;=n; i++)        for(int j=1; j&lt;=n; j++)      // k循环在i、j循环外面            dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j]);\n\nPython\n\n#pythonfor k in range(1, n+1): #floyd的三重循环    for i in range(1, n+1):        for j in range(1, n+1): # k循环在i、j循环外面            dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j])\nFloyd算法：多源最短路算法，一次计算能得到图中每一对结点之间（多对多）的最短路径。 Dijkstra、Bellman-Ford、SPFA算法：单源最短路径算法（Single source shortest path algorithm），一次计算能得到一个起点到其他所有点（一对多）的最短路径。在截止目前的蓝桥杯大赛中，Floyd算法是最常见的最短路径算法。 以上统计包括国赛和省赛，所以另外两种仍然要进行学习。\nFloyd 算法思想：动态规划下面为 Floyd 算法的原理，不看背代码也可以。\n\n动态规划：求图上两点 i、j 之间的最短距离，按“从小图到全图”的步骤，在逐步扩大图的过程中计算和更新最短路。\n定义状态：dp[k][i][j]，i、j、k是点的编号，范围 1 ~ n。状态dp[k][i][j]表示在包含 1 ~ k 点的子图上，点对 i、j 之间的最短路。\n状态转移方程：从子图 1 ~ k-1 扩展到子图 1 ~ k $dp[k][i][j] = min(dp[k-1][i][j], dp[k-1][i][k] + dp[k-1][k][j])$\n\n首先是包含 1 ~ k-1 点的子图。 $dp[k-1][i][j]$：不包含 k 点子图内的点对 i、j 的最短路； $dp[k-1][i][k] + dp[k-1][k][j]$：经过 k 点的新路径的长度，即这条路径从 i 出发，先到 k，再从 k 到终点 j。 比较：不经过 k 的最短路径$dp[k-1][i][j]$和经过 k 的新路径，较小者就是新的$dp[k][i][j]$。\n所以 Floyd 的原理就是每次引入一个新的点，用它去更新其他点的最短距离。\nk 从 1 逐步扩展到 n：最后得到的$dp[n][i][j]$是点对 i、j 之间的最短路径长度。 初值$dp[0][i][j]$：若 i、j 是直连的，就是它们的边长；若不直连，赋值为无穷大。 i、j 是任意点对：计算结束后得到了所有点对之间的最短路。\n$dp[k][i][j] = min(dp[k-1][i][j], dp[k-1][i][k] + dp[k-1][k][j])$ 用滚动数组简化： $dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j])$\n特点：\n\n在一次计算后求得所有结点之间的最短距离。\n代码极其简单，是最简单的最短路算法。\n效率低下，计算复杂度是 $O(n^3)$，只能用于 $n &lt; 300$ 的小规模的图。\n存图用邻接矩阵 dp[][] 。因为 Floyd 算法计算的结果是所有点对之间的最短路，本身就需要 n^2 的空间，用矩阵存储最合适。\n能判断负圈。 负圈：若图中有权值为负的边，某个经过这个负边的环路，所有边长相加的总长度也是负数，这就是负圈。在这个负圈上每绕一圈，总长度就更小，从而陷入在负圈上兜圈子的死循环。 Floyd 算法很容易判断负圈，只要在算法运行过程出现任意一个 dp[i][i] &lt; 0 就说明有负圈。因为 dp[i][i] 是从 i 出发，经过其他中转点绕一圈回到自己的最短路径，如果小于零，就存在负圈。\n\nDijkstra 算法\nDijkstra：单源最短路径问题。\n优点：非常高效而且稳定。\n缺点：只能处理不含有负权边的图。\n思路：贪心思想+优先队列。\n\n算法思想Dijkstra 算法算是贪心思想实现的，首先把起点到所有点的距离存下来找个最短的，然后松弛一次再找出最短的，所谓的松弛操作就是，遍历一遍看通过刚刚找到的距离最短的点作为中转站会不会更近，如果更近了就更新距离，这样把所有的点找遍之后就存下了起点到其他所有点的最短距离。\n为什么是每次都是找最小的？\n因为最小边的不会被其它的点松弛，只有可能最小边去松弛别人。 如果存在一个点 $K$ 能够松弛 $ab$ 的话那么一定有 $ak$ 距离加上 $kb$ 的距离小于 $ab$，已知 $ab$ 最短，所以不存在 $ak + kb &lt; ab$。\nDijkstra 算法应用了贪心法的思想，即“抄近路走，肯定能找到最短路径”。\n算法高效稳定：\n\nDijkstra 的每次迭代，只需要检查上次已经确定最短路径的那些结点的邻居，检查范围很小，算法是高效的；\n每次迭代，都能得到至少一个结点的最短路径，算法是稳定的\n\n优先队列实现：\n\n每次往队列中放新数据时，按从小到大的顺序放，采用小顶堆的方式，复杂度是 $O(logn)$，保证最小的数总在最前面；\n找最小值，直接取 B 的第一个数，复杂度是 $O(1)$。\n复杂度：用优先队列时，Dijkstra 算法的复杂度是 $O(mlogn)$，是最高效的最短路算法。\n\n维护两个集合：已确定最短路径的结点集合 A、这些结点向外扩散的邻居结点集合 B。\n\n把起点 s 放到 A 中，把 s 所有的邻居放到 B 中。此时，邻居到 s 的距离就是直连距离。\n从 B 中找出距离起点 s 最短的结点 u，放到 A 中。\n把 u 所有的新邻居放到 B 中。显然，u 的每一条边都连接了一个邻居，每个新邻居都要加进去。其中 u 的一个新邻居 v，它到 s 的距离 dis(s, v) 等于 dis(s, u) + dis(u, v)。\n重复(2)、(3)，直到 B 为空时，结束。\n\nDijkstra 的局限性是边的权值不能为负数：\nDijkstra 基于 BFS，计算过程是从起点 s 逐步往外扩散的过程，每扩散一次就用贪心得到到一个点的最短路。 扩散要求路径越来越长，如果遇到一个负权边，会导致路径变短，使扩散失效。\nDijkstra 模板如下：\n\nC++\n\n#include&lt;bits/stdc++.h&gt;using namespace std;const long long INF = 0x3f3f3f3f3f3f3f3fLL;//这样定义INF的好处是: INF &lt;= INF+xconst int N= 3e5+2;struct edge&#123;    int from, to; long long w; //起点，终点，权值。起点from并没有用到，e[i]的i就是from    edge(int a, int b,long long c)&#123;from=a; to=b; w=c;&#125;&#125;;vector&lt;edge&gt;e[N];          //用于存储图struct s_node&#123;    int id; long long n_dis;   //id：结点；n_dis：这个结点到起点的距离    s_node(int b,long long c)&#123;id=b; n_dis=c;&#125;    bool operator &lt; (const s_node &amp; a) const    &#123; return n_dis &gt; a.n_dis;&#125;&#125;;int n,m;int pre[N];                                //记录前驱结点，用于生成路径void print_path(int s, int t) &#123;            //打印从s到t的最短路    if(s==t)&#123; printf(&quot;%d &quot;, s); return; &#125;  //打印起点    print_path(s, pre[t]);                 //先打印前一个点    printf(&quot;%d &quot;, t);                      //后打印当前点。最后打印的是终点t&#125;long long  dis[N];         //记录所有结点到起点的距离void dijkstra()&#123;    int s = 1;             //起点s是1    bool done[N]; //done[i]=true表示到结点i的最短路径已经找到    for (int i=1;i&lt;=n;i++) &#123;dis[i]=INF; done[i]=false; &#125;    //初始化    dis[s]=0;                           //起点到自己的距离是0    priority_queue &lt;s_node&gt; Q;          //优先队列，存结点信息    Q.push(s_node(s, dis[s]));          //起点进队列    while (!Q.empty())   &#123;        s_node u = Q.top();             //pop出距起点s距离最小的结点u        Q.pop();        if(done[u.id])  continue;       //丢弃已经找到最短路径的结点。即集合A中的结点                    done[u.id]= true;        for (int i=0; i&lt;e[u.id].size(); i++) &#123;  //检查结点u的所有邻居            edge y = e[u.id][i];         //u.id的第i个邻居是y.to            if(done[y.to])  continue;    //丢弃已经找到最短路径的邻居结点                            if (dis[y.to] &gt; y.w + u.n_dis) &#123;                dis[y.to] = y.w + u.n_dis;                Q.push(s_node(y.to, dis[y.to]));  //扩展新的邻居，放到优先队列中                pre[y.to]=u.id;  //如果有需要，记录路径            &#125;        &#125;    &#125;    // print_path(s,n);          //如果有需要，打印路径: 起点1，终点n&#125;int main()&#123;    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);    for (int i=1;i&lt;=n;i++)    e[i].clear();    while (m--) &#123;        int u,v,w;  scanf(&quot;%d%d%lld&quot;,&amp;u,&amp;v,&amp;w);        e[u].push_back(edge(u,v,w));     // e[v].push_back(edge(v,u,w));    //本题是单向道路    &#125;    dijkstra();    for(int i=1;i&lt;=n;i++)&#123;        if(dis[i]&gt;=INF)  cout&lt;&lt;&quot;-1 &quot;;        else   printf(&quot;%lld &quot;, dis[i]);    &#125;&#125;\n\nJava\n\nimport java.util.*;import java.io.*;public class Main &#123;    static final long INF = 0x3f3f3f3f3f3f3f3fL;    static final int N = 300005;    static ArrayList&lt;Edge&gt;[] e = new ArrayList[N];    static int n, m;    static int[] pre = new int[N];    static long[] dis = new long[N];    static boolean[] done = new boolean[N];    static class Edge &#123;        int from, to;        long w;        Edge(int a, int b, long c) &#123;            from = a;            to = b;            w = c;        &#125;    &#125;    static class SNode implements Comparable&lt;SNode&gt; &#123;        int id;        long n_dis;        SNode(int b, long c) &#123;            id = b;            n_dis = c;        &#125;        public int compareTo(SNode o) &#123;            return Long.compare(n_dis, o.n_dis);        &#125;    &#125;    static void printPath(int s, int t) &#123;        if (s == t) &#123;            System.out.print(s + &quot; &quot;);            return;        &#125;        printPath(s, pre[t]);        System.out.print(t + &quot; &quot;);    &#125;    static void dijkstra() &#123;        int s = 1;        PriorityQueue&lt;SNode&gt; Q = new PriorityQueue&lt;&gt;();        Arrays.fill(dis, INF);        dis[s] = 0;        Q.offer(new SNode(s, dis[s]));        while (!Q.isEmpty()) &#123;            SNode u = Q.poll();            if (done[u.id])                continue;            done[u.id] = true;            for (Edge y : e[u.id]) &#123;                if (done[y.to])                    continue;                if (dis[y.to] &gt; y.w + u.n_dis) &#123;                    dis[y.to] = y.w + u.n_dis;                    Q.offer(new SNode(y.to, dis[y.to]));                    pre[y.to] = u.id;                &#125;            &#125;        &#125;        // printPath(s, n);    &#125;    public static void main(String[] args) throws Exception &#123;        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st = new StringTokenizer(br.readLine());        n = Integer.parseInt(st.nextToken());        m = Integer.parseInt(st.nextToken());        for (int i = 1; i &lt;= n; i++)            e[i] = new ArrayList&lt;&gt;();        for (int i = 1; i &lt;= m; i++) &#123;            st = new StringTokenizer(br.readLine());            int u = Integer.parseInt(st.nextToken());            int v = Integer.parseInt(st.nextToken());            long w = Long.parseLong(st.nextToken());            e[u].add(new Edge(u, v, w));            // e[v].add(new Edge(v, u, w)); //本题是单向道路        &#125;        dijkstra();        for (int i = 1; i &lt;= n; i++) &#123;            if (dis[i] &gt;= INF)                System.out.print(&quot;-1 &quot;);            else                System.out.print(dis[i] + &quot; &quot;);        &#125;    &#125;&#125;\n\nPython\n\nimport heapqINF = 0x3f3f3f3f3f3f3f3fN = 300002class Edge:    def __init__(self, fr, to, w):        self.fr = fr        self.to = to        self.w = wclass SNode:    def __init__(self, id, n_dis):        self.id = id        self.n_dis = n_dis    def __lt__(self, other):        return self.n_dis &lt; other.n_disdef print_path(s, t):    if s == t:        print(s, end=&quot; &quot;)        return    print_path(s, pre[t])    print(t, end=&quot; &quot;)def dijkstra():    s = 1    done = [False] * N    dis = [INF] * N    pre = [-1] * N    dis[s] = 0    pq = []    heapq.heappush(pq, SNode(s, dis[s]))    while pq:        u = heapq.heappop(pq)        if done[u.id]:            continue        done[u.id] = True        for y in e[u.id]:            if done[y.to]:                continue            if dis[y.to] &gt; y.w + u.n_dis:                dis[y.to] = y.w + u.n_dis                heapq.heappush(pq, SNode(y.to, dis[y.to]))                pre[y.to] = u.id    for i in range(1, n+1):        if dis[i] &gt;= INF:            print(&quot;-1&quot;, end=&quot; &quot;)        else:            print(dis[i], end=&quot; &quot;)n, m = map(int, input().split())e = [[] for _ in range(N)]for i in range(m):    u, v, w = map(int, input().split())    e[u].append(Edge(u, v, w))dijkstra()\nBellman-Ford 算法BFS 的扩散思想，每个人都去问自己的相邻节点到 S 点的距离最近是多少。\n第一轮至少有一个点得到了到 S 的最短距离，即与 S 相邻的节点，标记为 T1\n重复以上操作，那么必然至少又有一个节点找到了与 S 的最短距离，即与 T1 相邻的节点，标记为 T2\n一共需要几轮操作？\n每一轮操作，都至少有一个新的结点得到了到 S 的最短路径。所以，最多只需要 n 轮操作，就能完成 n 个结点。在每一轮操作中，需要检查所有 m 个边，更新最短距离。\nBellman-Ford 算法的复杂度：O(nm)。\nBellman-Ford 能判断负圈：\n没有负圈时，只需要 n 轮就结束。\n如果超过 n 轮，最短路径还有变化，那么肯定有负圈。\nSPFA 算法队列优化版的 Bellman-Ford\nSPFA = 队列处理+Bellman-Ford。\nBellman-Ford 算法有很多低效或无效的操作。其核心内容，是在每一轮操作中，更新所有结点到起点 S 的最短距离。 计算和调整一个结点 U 到 S 的最短距离后，如果紧接着调整 U 的邻居结点，这些邻居肯定有新的计算结果；而如果漫无目的地计算不与 U 相邻的结点，很可能毫无变化，所以这些操作是低效的。\n改进： 计算结点 U 之后，下一步只计算和调整它的邻居，能加快收敛的过程。 这些步骤用队列进行操作，这就是 SPFA。\n（1）起点 S 入队，计算它所有邻居到 S 的最短距离。把 S 出队，状态有更新的邻居入队，没更新的不入队。 （2）现在队列的头部是 S 的一个邻居 U。弹出 U，更新它所有邻居的状态，把其中有状态变化的邻居入队列。 （3）继续以上过程，直到队列空。这也意味着，所有结点的状态都不再更新。最后的状态就是到起点 S 的最短路径。\n弹出 U 之后，在后面的计算中，U 可能会再次更新状态（后来发现，U 借道别的结点去 S，路更近）。所以，U 可能需要重新入队列。 有可能只有很少结点重新进入队列，也有可能很多。这取决于图的特征。\n所以，SPFA 是不稳定的,所以根据题目的类型，我们要选择合适的算法。\nSPFA 模板如下：\n\nC++\n\n#include&lt;bits/stdc++.h&gt;using namespace std;const long long INF = 0x3f3f3f3f3f3f3f3f;const int N = 5e3+10;struct edge&#123;    int to;    long long w;    edge(int tt,long long ww) &#123;to = tt; w = ww;&#125;&#125;;long long dist[N];int inq[N];vector&lt;edge&gt; e[N];void spfa(int s)&#123;    memset(dist,0x3f,sizeof(dist));    dist[s] = 0;      //起点到自己的距离是0    queue&lt;int&gt; q;    q.push(s);        //从s开始，s进队列    inq[s] = 1;       //起点在队列中    while(!q.empty()) &#123;        int u = q.front();        q.pop();        inq[u] = 0;   //u已经不在队列中        if(dist[u] == INF)     continue;        for(int i = 0;i &lt; e[u].size();i++) &#123;   //遍历u的邻居            int v = e[u][i].to;            long long w = e[u][i].w;            if(dist[v] &gt; dist[u]+w) &#123;         //u的第i个邻居v，它借道u，到s更近                dist[v] = dist[u]+w;          //更新邻居v到s的距离                if(!inq[v]) &#123;      //邻居v更新状态了，但v不在队列中，放进队列                    q.push(v);                    inq[v] = 1;                &#125;            &#125;        &#125;    &#125;&#125;int main()&#123;    int n,m,s;cin&gt;&gt;n&gt;&gt;m&gt;&gt;s;    for(int i = 1;i &lt;= m;i++)    &#123;        int u,v; long long w;        cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;        e[u].push_back(edge(v,w));    &#125;    spfa(s);    for(int i = 1;i &lt;= n;i++) &#123;        if(dist[i]==INF)  cout &lt;&lt; -1;        else              cout &lt;&lt; dist[i];        if(i != n)        cout &lt;&lt; &quot; &quot;;        else              cout &lt;&lt; endl;    &#125;    return 0;&#125;\n\nJava\n\nimport java.util.*;public class Main &#123;    static final long INF = 0x3f3f3f3f3f3f3f3fL;    static final int N = 5010;    static long[] dist = new long[N];    static int[] inq = new int[N];    static List&lt;edge&gt;[] e = new ArrayList[N];    static class edge &#123;        int to;        long w;        public edge(int tt, long ww) &#123;            to = tt;            w = ww;        &#125;    &#125;    static void spfa(int s) &#123;        Arrays.fill(dist, INF);        dist[s] = 0;        Queue&lt;Integer&gt; q = new LinkedList&lt;&gt;();        q.add(s);        inq[s] = 1;        while (!q.isEmpty()) &#123;            int u = q.poll();            inq[u] = 0;            if (dist[u] == INF) continue;            for (int i = 0; i &lt; e[u].size(); i++) &#123;                int v = e[u].get(i).to;                long w = e[u].get(i).w;                if (dist[v] &gt; dist[u] + w) &#123;                    dist[v] = dist[u] + w;                    if (inq[v] == 0) &#123;                        q.add(v);                        inq[v] = 1;                    &#125;                &#125;            &#125;        &#125;    &#125;    public static void main(String[] args) &#123;        Scanner in = new Scanner(System.in);        int n = in.nextInt();        int m = in.nextInt();        int s = in.nextInt();        for (int i = 1; i &lt;= n; i++) &#123;            e[i] = new ArrayList&lt;&gt;();        &#125;        for (int i = 1; i &lt;= m; i++) &#123;            int u = in.nextInt();            int v = in.nextInt();            long w = in.nextLong();            e[u].add(new edge(v, w));        &#125;        spfa(s);        for (int i = 1; i &lt;= n; i++) &#123;            if (dist[i] == INF) System.out.print(&quot;-1 &quot;);            else System.out.print(dist[i] + &quot; &quot;);        &#125;    &#125;&#125;\n\nPython\n\nimport heapqINF = 0x3f3f3f3f3f3f3f3fN = 5010class Edge:    def __init__(self, to, w):        self.to = to        self.w = wdist = [INF] * Ninq = [0] * Ne = [[] for _ in range(N)]def spfa(s):    global dist    global inq    dist = [INF] * N    dist[s] = 0    q = []    heapq.heappush(q, s)    inq[s] = 1    while q:        u = heapq.heappop(q)        inq[u] = 0        if dist[u] == INF:            continue        for i in range(len(e[u])):            v = e[u][i].to            w = e[u][i].w            if dist[v] &gt; dist[u] + w:                dist[v] = dist[u] + w                if inq[v] == 0:                    heapq.heappush(q, v)                    inq[v] = 1n, m, s = map(int, input().split())for i in range(m):    u, v, w = map(int, input().split())    e[u].append(Edge(v, w))spfa(s)for i in range(1, n+1):    if dist[i] == INF:        print(&quot;-1&quot;, end=&quot; &quot;)    else:        print(dist[i], end=&quot; &quot;)\n总结Dijkstra：适用于权值为非负的图的单源最短路径，用斐波那契堆的复杂度 O(E+VlgV) BellmanFord：适用于权值有负值的图的单源最短路径，并且能够检测负圈，复杂度 O(VE) SPFA：适用于权值有负值，且没有负圈的图的单源最短路径。论文中的复杂度为 O(kE), 其中 k 为每个节点进入队列的次数，且 k 一般 &lt;=2，但此处的复杂度证明是有问题的，其实 SPFA 的最坏情况应该是 O(VE)。 Floyd：每对节点之间的最短路径。\n所以：\n单源最短路 (1)当权值为非负时，用 Dijkstra。 (2)当权值有负值，且没有负圈，则用 SPFA。SPFA 能检测负圈，但是不能输出负圈。 (3)当权值有负值，而且可能存在负圈需要输出，则用 BellmanFord。能够检测并输出负圈。 多源最短路使用 Floyd\n最小生成树在无向图中，连通而且不含有圈（环路）的图，称为树。 最小生成树 MST：一个有 n 个结点的连通图的生成树是原图的极小连通子图，包含原图中的所有 n 个结点，并且边的权值之和最小。\nPrim 算法对点进行贪心操作：“最近的邻居一定在 MST 上”。 从任意一个点 u 开始，把距离它最近的点 v 加入到 MST 中；下一步，把距离 {u, v} 最近的点 w 加入到 MST 中；继续这个过程，直到所有点都在 MST 中。\n\nC++\n\n#include &lt;bits/stdc++.h&gt;using namespace std;const int INF = 0x3f3f3f3f;const int MAXN = 1005;vector&lt;int&gt; demo;int closest[MAXN],lowcost[MAXN],m,n;//m为节点的个数，n为边的数量int G[MAXN][MAXN];//邻接矩阵int prim()&#123;    for(int i=0;i&lt;m;i++)    &#123;        lowcost[i] = INF;    &#125;    for(int i=0;i&lt;m;i++)    &#123;        closest[i] = 0;    &#125;    closest[0] = -1;//加入第一个点，-1表示该点在集合U中，否则在集合V中    int num = 0,ans = 0,e = 0;//e为最新加入集合的点    while (num &lt; m-1)//加入m-1条边    &#123;        int micost = INF,miedge = -1;        for(int i=0;i&lt;m;i++)        if(closest[i] != -1)        &#123;            int temp = G[e][i];            if(temp &lt; lowcost[i])            &#123;                lowcost[i] = temp;                closest[i] = e;            &#125;            if(lowcost[i] &lt; micost)            micost = lowcost[miedge=i];        &#125;        ans += micost;        demo.push_back(micost);        closest[e = miedge] = -1;        num++;    &#125;    return ans;&#125;int main()&#123;    scanf(&quot;%d %d&quot;, &amp;m, &amp;n);    memset(G,INF,sizeof(G));    for(int i = 0; i &lt; n; ++i)    &#123;       int a,b,c;       cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;       G[b][a]=G[a][b]=c;    &#125;    cout&lt;&lt;prim()&lt;&lt;endl;    for(int i=0;i&lt;m-1;i++) cout&lt;&lt;demo[i]&lt;&lt;&quot; &quot;;    return 0;&#125;\n\nJava\n\nimport java.util.ArrayList;import java.util.List;import java.util.Scanner;public class Main &#123;    private static final int INF = 0x3f3f3f3f;    private static final int MAXN = 1005;    private static int[] closest = new int[MAXN];    private static int[] lowcost = new int[MAXN];    private static int[][] G = new int[MAXN][MAXN];    private static int m;    private static List demo = new ArrayList();    public static void main(String[] args) &#123;        Scanner scanner = new Scanner(System.in);        m = scanner.nextInt();        int n = scanner.nextInt();        for (int i = 0; i &lt; n; ++i) &#123;            int a = scanner.nextInt();            int b = scanner.nextInt();            int c = scanner.nextInt();            G[b][a] = G[a][b] = c;        &#125;        System.out.println(prim());        for (int i = 0; i &lt; m - 1; i++) &#123;            System.out.print(demo.get(i) + &quot; &quot;);        &#125;    &#125;    private static int prim() &#123;        for (int i = 0; i &lt; m; i++) &#123;            lowcost[i] = INF;            closest[i] = 0;        &#125;        closest[0] = -1;//加入第一个点，-1表示该点在集合U中，否则在集合V中        int num = 0, ans = 0, e = 0;//e为最新加入集合的点        while (num &lt; m - 1)//加入m-1条边        &#123;            int micost = INF, miedge = -1;            for (int i = 0; i &lt; m; i++) &#123;                if (closest[i] != -1) &#123;                    int temp = G[e][i];                    if (temp &lt; lowcost[i]) &#123;                        lowcost[i] = temp;                        closest[i] = e;                    &#125;                    if (lowcost[i] &lt; micost) &#123;                        micost = lowcost[miedge = i];                    &#125;                &#125;            &#125;            ans += micost;            demo.add(micost);            closest[e = miedge] = -1;            num++;        &#125;        return ans;    &#125;&#125;\n\nPython\n\nINF = 0x3f3f3f3fMAXN = 1005closest = [0] * MAXNlowcost = [0] * MAXNG = [[INF] * MAXN for _ in range(MAXN)]demo = []m,n = map(int, input().split())for i in range(n):    a,b,c = map(int, input().split())    G[b][a]=G[a][b]=cdef prim():    global closest, lowcost, G, m    for i in range(m):        lowcost[i] = INF        closest[i] = 0    closest[0] = -1    num = 0    ans = 0    e = 0    while num &lt; m-1:        micost = INF        miedge = -1        for i in range(m):            if closest[i] != -1:                temp = G[e][i]                if temp &lt; lowcost[i]:                    lowcost[i] = temp                    closest[i] = e                if lowcost[i] &lt; micost:                    miedge=i                    micost = lowcost[miedge]        ans += micost        demo.append(micost)        e = miedge        closest[e] = -1        num += 1    return ansprint(prim())for i in range(m - 1): print(demo[i], end=&#x27; &#x27;)\nkruskal 算法对边进行贪心操作：“最短的边一定在 MST 上”。 从最短的边开始，把它加入到 MST 中；在剩下的边中找最短的边，加入到 MST 中；继续这个过程，直到所有点都在 MST 中。\nkruskal 算法的 2 个关键技术： （1）对边进行排序。 （2）判断圈，即处理连通性问题。这个问题用并查集简单而高效，并查集是 kruskal 算法的实现基础。\n初始时最小生成树 MST 为空。开始的时候，每个点属于独立的集。\n按边长从小到大进行边的遍历操作：\n尝试将最小边加入最小生成树：\n\n如果边的两个端点属于同一个集合，就说明这两个点已经被加入最小生成树。则不能将边加入，否则就会生成一个环。\n如果两个端点不属于同一个集合，就说明该点还未纳入最小生成树，此边可以加入。\n\n重复上述操作，直到加入 n-1 条边。\nkruskal 算法的复杂度包括两部分：对边的排序 O(ElogE)，并查集的操作 O(E)，一共是 O(ElogE + E)，约等于 O(ElogE)，时间主要花在排序上。\n如果图的边很多，kruskal 的复杂度要差一些。kruskal 适用于稀疏图，prim 适合稠密图。\n模板如下：\n\nC++\n\n#include &lt;bits/stdc++.h&gt;using namespace std;int n,m;int father[1100000];struct node&#123;    int x;    int y;    int k;&#125; Q[1100000];int find(int x)&#123;    if (father[x] == x)        return x;    return father[x] = find(father[x]);&#125;bool cmp(node a, node b)&#123;    return a.k &lt; b.k;&#125;int main()&#123;    scanf(&quot;%d %d&quot;, &amp;n, &amp;m);    int cont = 0,        sum = 0, st = 0;    for (int i = 0; i &lt; m; i++)    &#123;        scanf(&quot;%d %d %d&quot;, &amp;Q[i].x, &amp;Q[i].y, &amp;Q[i].k);        cont += Q[i].k;    &#125;    sort(Q, Q + m, cmp);    for (int i = 1; i &lt;= n; i++)        father[i] = i;    for (int i = 0; i &lt; m; i++)    &#123;        int tx = find(Q[i].x);        int ty = find(Q[i].y);        if (tx != ty)        &#123;            sum += Q[i].k;            st++;            father[tx] = ty;            if (st == n - 1)                break;        &#125;    &#125;    printf(&quot;%d\\n&quot;, sum);    return 0;&#125;\n\nJava\n\nimport java.util.Arrays;import java.util.Scanner;public class Main &#123;    static int n, m;    static int[] father;    static Node[] Q;    static class Node &#123;        int x;        int y;        int k;        public Node(int x, int y, int k) &#123;            this.x = x;            this.y = y;            this.k = k;        &#125;    &#125;    public static void main(String[] args) &#123;        Scanner scanner = new Scanner(System.in);        n = scanner.nextInt();        m = scanner.nextInt();        father = new int[n + 1];        Q = new Node[m];        int cont = 0, sum = 0, st = 0;        for (int i = 0; i &lt; m; i++) &#123;            int x = scanner.nextInt();            int y = scanner.nextInt();            int k = scanner.nextInt();            Q[i] = new Node(x, y, k);            cont += k;        &#125;        Arrays.sort(Q, (a, b) -&gt; a.k - b.k);        for (int i = 1; i &lt;= n; i++)            father[i] = i;        for (int i = 0; i &lt; m; i++) &#123;            int tx = find(Q[i].x);            int ty = find(Q[i].y);            if (tx != ty) &#123;                sum += Q[i].k;                st++;                father[tx] = ty;                if (st == n - 1)                    break;            &#125;        &#125;        System.out.println(sum);    &#125;    static int find(int x) &#123;        if (father[x] == x)            return x;        return father[x] = find(father[x]);    &#125;&#125;\n\nPython\n\nn, m = map(int, input().split())father = [i for i in range(n+1)]Q = []cont = 0sum = 0st = 0for i in range(m):    x, y, k = map(int, input().split())    Q.append(&#123;&#x27;x&#x27;: x, &#x27;y&#x27;: y, &#x27;k&#x27;: k&#125;)    cont += kQ.sort(key=lambda x:x[&#x27;k&#x27;])def find(x):    if father[x] == x :        return x    father[x] = find(father[x])    return father[x]for i in range(m):    tx = find(Q[i][&#x27;x&#x27;])    ty = find(Q[i][&#x27;y&#x27;])    if tx != ty:        sum += Q[i][&#x27;k&#x27;]        st += 1        father[tx] = ty        if st == n - 1:            breakprint(sum)\n图论例题蓝桥王国 lanqiaoOJ 题号 1122题目描述\n蓝桥王国一共有 $N$ 个建筑和 $M$ 条单向道路，每条道路都连接着两个建筑，每个建筑都有自己编号，分别为 $1 \\sim N$。（其中皇宫的编号为 1）国王想让小明回答从皇宫到每个建筑的最短路径是多少，但紧张的小明此时已经无法思考，请你编写程序帮助小明回答国王的考核。\n输入描述\n输入第一行包含 2 个正整数 $N,M$。第 2 到 $M+1$ 行每行包含三个正整数 $u,v,w$，表示 $u \\to v$ 之间存在一条距离为 $w$ 的路。$1 \\leq N \\leq 3 \\times 10^5$，$1 \\leq M \\leq 10^6$，$1 \\leq u_i , v_i \\leq N$，$0 \\leq w_i \\leq 10^9$。\n输出描述\n输出仅一行，共 $N$ 个数，分别表示从皇宫到编号为 $1 \\sim N$ 建筑的最短距离，两两之间用空格隔开。（如果无法到达则输出 −1）\n解题思路:\n本题为单源最短路的模板题，直接套模板即可，本题我们采用 Dijkstra。\nC++ 语言描述:\n#include&lt;bits/stdc++.h&gt;using namespace std;const long long INF = 0x3f3f3f3f3f3f3f3fLL;//这样定义INF的好处是: INF &lt;= INF+xconst int N= 3e5+2;struct edge&#123;    int from, to; long long w; //起点，终点，权值。起点from并没有用到，e[i]的i就是from    edge(int a, int b,long long c)&#123;from=a; to=b; w=c;&#125;&#125;;vector&lt;edge&gt;e[N];          //用于存储图struct s_node&#123;    int id; long long n_dis;   //id：结点；n_dis：这个结点到起点的距离    s_node(int b,long long c)&#123;id=b; n_dis=c;&#125;    bool operator &lt; (const s_node &amp; a) const    &#123; return n_dis &gt; a.n_dis;&#125;&#125;;int n,m;int pre[N];                                //记录前驱结点，用于生成路径void print_path(int s, int t) &#123;            //打印从s到t的最短路    if(s==t)&#123; printf(&quot;%d &quot;, s); return; &#125;  //打印起点    print_path(s, pre[t]);                 //先打印前一个点    printf(&quot;%d &quot;, t);                      //后打印当前点。最后打印的是终点t&#125;long long  dis[N];         //记录所有结点到起点的距离void dijkstra()&#123;    int s = 1;             //起点s是1    bool done[N]; //done[i]=true表示到结点i的最短路径已经找到    for (int i=1;i&lt;=n;i++) &#123;dis[i]=INF; done[i]=false; &#125;    //初始化    dis[s]=0;                           //起点到自己的距离是0    priority_queue &lt;s_node&gt; Q;          //优先队列，存结点信息    Q.push(s_node(s, dis[s]));          //起点进队列    while (!Q.empty())   &#123;        s_node u = Q.top();             //pop出距起点s距离最小的结点u        Q.pop();        if(done[u.id])  continue;       //丢弃已经找到最短路径的结点。即集合A中的结点        done[u.id]= true;        for (int i=0; i&lt;e[u.id].size(); i++) &#123;  //检查结点u的所有邻居            edge y = e[u.id][i];         //u.id的第i个邻居是y.to            if(done[y.to])  continue;    //丢弃已经找到最短路径的邻居结点            if (dis[y.to] &gt; y.w + u.n_dis) &#123;                dis[y.to] = y.w + u.n_dis;                Q.push(s_node(y.to, dis[y.to]));  //扩展新的邻居，放到优先队列中                pre[y.to]=u.id;  //如果有需要，记录路径            &#125;        &#125;    &#125;    // print_path(s,n);          //如果有需要，打印路径: 起点1，终点n&#125;int main()&#123;    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);    for (int i=1;i&lt;=n;i++)    e[i].clear();    while (m--) &#123;        int u,v,w;  scanf(&quot;%d%d%lld&quot;,&amp;u,&amp;v,&amp;w);        e[u].push_back(edge(u,v,w));     // e[v].push_back(edge(v,u,w));    //本题是单向道路    &#125;    dijkstra();    for(int i=1;i&lt;=n;i++)&#123;        if(dis[i]&gt;=INF)  cout&lt;&lt;&quot;-1 &quot;;        else   printf(&quot;%lld &quot;, dis[i]);    &#125;&#125;\nPython 语言描述:\nimport heapqINF = 0x3f3f3f3f3f3f3f3fN = 300002class Edge:    def __init__(self, fr, to, w):        self.fr = fr        self.to = to        self.w = wclass SNode:    def __init__(self, id, n_dis):        self.id = id        self.n_dis = n_dis    def __lt__(self, other):        return self.n_dis &lt; other.n_disdef print_path(s, t):    if s == t:        print(s, end=&quot; &quot;)        return    print_path(s, pre[t])    print(t, end=&quot; &quot;)def dijkstra():    s = 1    done = [False] * N    dis = [INF] * N    pre = [-1] * N    dis[s] = 0    pq = []    heapq.heappush(pq, SNode(s, dis[s]))    while pq:        u = heapq.heappop(pq)        if done[u.id]:            continue        done[u.id] = True        for y in e[u.id]:            if done[y.to]:                continue            if dis[y.to] &gt; y.w + u.n_dis:                dis[y.to] = y.w + u.n_dis                heapq.heappush(pq, SNode(y.to, dis[y.to]))                pre[y.to] = u.id    for i in range(1, n+1):        if dis[i] &gt;= INF:            print(&quot;-1&quot;, end=&quot; &quot;)        else:            print(dis[i], end=&quot; &quot;)n, m = map(int, input().split())e = [[] for _ in range(N)]for i in range(m):    u, v, w = map(int, input().split())    e[u].append(Edge(u, v, w))dijkstra()\nJava 语言描述:\nimport java.util.*;import java.io.*;public class Main &#123;    static final long INF = 0x3f3f3f3f3f3f3f3fL;    static final int N = 300005;    static ArrayList&lt;Edge&gt;[] e = new ArrayList[N];    static int n, m;    static int[] pre = new int[N];    static long[] dis = new long[N];    static boolean[] done = new boolean[N];    static class Edge &#123;        int from, to;        long w;        Edge(int a, int b, long c) &#123;            from = a;            to = b;            w = c;        &#125;    &#125;    static class SNode implements Comparable&lt;SNode&gt; &#123;        int id;        long n_dis;        SNode(int b, long c) &#123;            id = b;            n_dis = c;        &#125;        public int compareTo(SNode o) &#123;            return Long.compare(n_dis, o.n_dis);        &#125;    &#125;    static void printPath(int s, int t) &#123;        if (s == t) &#123;            System.out.print(s + &quot; &quot;);            return;        &#125;        printPath(s, pre[t]);        System.out.print(t + &quot; &quot;);    &#125;    static void dijkstra() &#123;        int s = 1;        PriorityQueue&lt;SNode&gt; Q = new PriorityQueue&lt;&gt;();        Arrays.fill(dis, INF);        dis[s] = 0;        Q.offer(new SNode(s, dis[s]));        while (!Q.isEmpty()) &#123;            SNode u = Q.poll();            if (done[u.id])                continue;            done[u.id] = true;            for (Edge y : e[u.id]) &#123;                if (done[y.to])                    continue;                if (dis[y.to] &gt; y.w + u.n_dis) &#123;                    dis[y.to] = y.w + u.n_dis;                    Q.offer(new SNode(y.to, dis[y.to]));                    pre[y.to] = u.id;                &#125;            &#125;        &#125;        // printPath(s, n);    &#125;    public static void main(String[] args) throws Exception &#123;        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st = new StringTokenizer(br.readLine());        n = Integer.parseInt(st.nextToken());        m = Integer.parseInt(st.nextToken());        for (int i = 1; i &lt;= n; i++)            e[i] = new ArrayList&lt;&gt;();        for (int i = 1; i &lt;= m; i++) &#123;            st = new StringTokenizer(br.readLine());            int u = Integer.parseInt(st.nextToken());            int v = Integer.parseInt(st.nextToken());            long w = Long.parseLong(st.nextToken());            e[u].add(new Edge(u, v, w));            // e[v].add(new Edge(v, u, w)); //本题是单向道路        &#125;        dijkstra();        for (int i = 1; i &lt;= n; i++) &#123;            if (dis[i] &gt;= INF)                System.out.print(&quot;-1 &quot;);            else                System.out.print(dis[i] + &quot; &quot;);        &#125;    &#125;&#125;\n随机数据下的最短路问题 lanqiaoOJ 题号 1366题目描述\n给定 $N$ 个点和 $M$ 条单向道路，每条道路都连接着两个点，每个点都有自己编号，分别为 $1 \\sim N$。问你从 $S$ 点出发，到达每个点的最短路径为多少。\n输入描述\n输入第一行包含三个正整数 $N,M,S$。第 2 到 $M+1$ 行每行包含三个正整数 $u,v,w$，表示 $u \\to v$ 之间存在一条距离为 $w$ 的路。$1 \\leq N \\leq 5 \\times 10^3$，$1 \\leq M \\leq 5 \\times 10^4$，$1 \\leq u_i, v_i \\leq N$，$0 \\leq w_i \\leq 10^9$。\n输出描述\n输出仅一行，共 $N$ 个数，分别表示从编号 $S$ 到编号为 $1 \\sim N$ 点的最短距离，两两之间用空格隔开。（如果无法到达则输出 −1）\n解题思路:\n本题为单源最短路的模板题，直接套模板即可，本题我们采用 SPFA。\nC++ 语言描述:\n#include&lt;bits/stdc++.h&gt;using namespace std;const long long INF = 0x3f3f3f3f3f3f3f3f;const int N = 5e3+10;struct edge&#123;    int to;    long long w;    edge(int tt,long long ww) &#123;to = tt; w = ww;&#125;&#125;;long long dist[N];int inq[N];vector&lt;edge&gt; e[N];void spfa(int s)&#123;    memset(dist,0x3f,sizeof(dist));    dist[s] = 0;      //起点到自己的距离是0    queue&lt;int&gt; q;    q.push(s);        //从s开始，s进队列    inq[s] = 1;       //起点在队列中    while(!q.empty()) &#123;        int u = q.front();        q.pop();        inq[u] = 0;   //u已经不在队列中        if(dist[u] == INF)     continue;        for(int i = 0;i &lt; e[u].size();i++) &#123;   //遍历u的邻居            int v = e[u][i].to;            long long w = e[u][i].w;            if(dist[v] &gt; dist[u]+w) &#123;         //u的第i个邻居v，它借道u，到s更近                dist[v] = dist[u]+w;          //更新邻居v到s的距离                if(!inq[v]) &#123;      //邻居v更新状态了，但v不在队列中，放进队列                    q.push(v);                    inq[v] = 1;                &#125;            &#125;        &#125;    &#125;&#125;int main()&#123;    int n,m,s;cin&gt;&gt;n&gt;&gt;m&gt;&gt;s;    for(int i = 1;i &lt;= m;i++)    &#123;        int u,v; long long w;        cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;        e[u].push_back(edge(v,w));    &#125;    spfa(s);    for(int i = 1;i &lt;= n;i++) &#123;        if(dist[i]==INF)  cout &lt;&lt; -1;        else              cout &lt;&lt; dist[i];        if(i != n)        cout &lt;&lt; &quot; &quot;;        else              cout &lt;&lt; endl;    &#125;    return 0;&#125;\nPython 语言描述:\nimport heapqINF = 0x3f3f3f3f3f3f3f3fN = 5010class Edge:    def __init__(self, to, w):        self.to = to        self.w = wdist = [INF] * Ninq = [0] * Ne = [[] for _ in range(N)]def spfa(s):    global dist    global inq    dist = [INF] * N    dist[s] = 0    q = []    heapq.heappush(q, s)    inq[s] = 1    while q:        u = heapq.heappop(q)        inq[u] = 0        if dist[u] == INF:            continue        for i in range(len(e[u])):            v = e[u][i].to            w = e[u][i].w            if dist[v] &gt; dist[u] + w:                dist[v] = dist[u] + w                if inq[v] == 0:                    heapq.heappush(q, v)                    inq[v] = 1n, m, s = map(int, input().split())for i in range(m):    u, v, w = map(int, input().split())    e[u].append(Edge(v, w))spfa(s)for i in range(1, n+1):    if dist[i] == INF:        print(&quot;-1&quot;, end=&quot; &quot;)    else:        print(dist[i], end=&quot; &quot;)\nJava 语言描述:\nimport java.util.*;public class Main &#123;    static final long INF = 0x3f3f3f3f3f3f3f3fL;    static final int N = 5010;    static long[] dist = new long[N];    static int[] inq = new int[N];    static List&lt;edge&gt;[] e = new ArrayList[N];    static class edge &#123;        int to;        long w;        public edge(int tt, long ww) &#123;            to = tt;            w = ww;        &#125;    &#125;    static void spfa(int s) &#123;        Arrays.fill(dist, INF);        dist[s] = 0;        Queue&lt;Integer&gt; q = new LinkedList&lt;&gt;();        q.add(s);        inq[s] = 1;        while (!q.isEmpty()) &#123;            int u = q.poll();            inq[u] = 0;            if (dist[u] == INF) continue;            for (int i = 0; i &lt; e[u].size(); i++) &#123;                int v = e[u].get(i).to;                long w = e[u].get(i).w;                if (dist[v] &gt; dist[u] + w) &#123;                    dist[v] = dist[u] + w;                    if (inq[v] == 0) &#123;                        q.add(v);                        inq[v] = 1;                    &#125;                &#125;            &#125;        &#125;    &#125;    public static void main(String[] args) &#123;        Scanner in = new Scanner(System.in);        int n = in.nextInt();        int m = in.nextInt();        int s = in.nextInt();        for (int i = 1; i &lt;= n; i++) &#123;            e[i] = new ArrayList&lt;&gt;();        &#125;        for (int i = 1; i &lt;= m; i++) &#123;            int u = in.nextInt();            int v = in.nextInt();            long w = in.nextLong();            e[u].add(new edge(v, w));        &#125;        spfa(s);        for (int i = 1; i &lt;= n; i++) &#123;            if (dist[i] == INF) System.out.print(&quot;-1 &quot;);            else System.out.print(dist[i] + &quot; &quot;);        &#125;    &#125;&#125;\n路径 OJ 编号 1460\n解题思路:\n填空题对时间没有要求，用最简单的 floyd\nC++ 语言描述:\n#include&lt;bits/stdc++.h&gt;typedef long long ll;using namespace std;const int N = 3000;const ll INF = 1e18;ll mp[N][N];void floyd(int n)&#123;    for(int k = 1;k &lt;= n;k++)        for(int i = 1;i &lt;= n;i++)            for(int j = 1;j &lt;= n;j++)                mp[i][j] = min(mp[i][j], mp[i][k] + mp[k][j]);&#125;int main()&#123;    int n = 2021;    for(int i = 1;i &lt;= n;i++)&#123;        for(int j = 1;j &lt;= n;j++)&#123;            if(i == j) mp[i][j] = 0;            else if(abs(i - j)&lt;=21) mp[i][j]=mp[j][i]=i*j/__gcd(i, j);            else mp[i][j] = mp[j][i] = INF;        &#125;    &#125;    floyd(n);    cout &lt;&lt; mp[1][2021];    return 0;&#125;\nPython 语言描述:\nimport mathdef lcm(a, b):    return int(a * b / math.gcd(a, b))n = 2021g = [[0 for i in range(1, n + 2)] for j in range(1, n + 2)]for i in range(1, n + 1):    for j in range(1, n + 1):        if i == j:            g[i][j] = g[j][i] = 0        elif abs(i - j) &lt;= 21:            g[i][j] = g[j][i] = lcm(i, j)        else:            g[i][j] = 1000000000for k in range(1, n + 1):    for i in range(1, n + 1):        for j in range(1, n + 1):            if g[i][j] &gt; g[i][k] + g[k][j]:                g[i][j] = g[i][k] + g[k][j]print(g[1][n])\nJava 语言描述:\npublic class Main &#123;    static final int n = 2021;    static int gcd(int a, int b) &#123;        return b == 0 ? a : gcd(b, a % b);    &#125;    static int lcm(int a, int b) &#123;        return a * b / gcd(a, b);    &#125;    public static void main(String[] args) &#123;        int[][] floyd = new int[n][n];        for (int i = 0; i &lt; n; i++)            for (int j = i + 1; j &lt; n &amp;&amp; j &lt; i + 22; j++)                floyd[i][j] = floyd[j][i] = lcm(i + 1, j + 1);        for (int k = 0; k &lt; n; k++)            for (int i = 0; i &lt; n; i++)                for (int j = 0; j &lt; n; j++)                    if (floyd[i][k] != 0 &amp;&amp; floyd[k][j] != 0 &amp;&amp; (floyd[i][j] == 0 || floyd[i][k] + floyd[k][j] &lt; floyd[i][j]))                        floyd[i][j] = floyd[i][k] + floyd[k][j];        System.out.println(floyd[0][n - 1]);    &#125;&#125;\n出差\n解题思路:\n\n我们这里给大家一个朴素的 dijkstra 的模板，大家感受一下，优先队列到底优化的那一部分。\nC++ 语言描述:\n#include&lt;bits/stdc++.h&gt;using namespace std;const int N=1010;//邻接矩阵int gra[N][N];int dist[N];int g[N];bool st[N];int n,m;//朴素版dijkstraint dijkstra()&#123;     memset(dist, 0x3f, sizeof dist);    dist[1] = 0;    for (int i = 0; i &lt; n - 1; i ++ )    &#123;        int t = -1;        for (int j = 1; j &lt;= n; j ++ )            if (!st[j] &amp;&amp; (t == -1 || dist[t] &gt; dist[j]))                t = j;        for (int j = 1; j &lt;= n; j ++ )            dist[j] = min(dist[j], dist[t] + gra[t][j]);        st[t] = true;    &#125;    return dist[n];&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=n;++i) cin&gt;&gt;g[i];    g[n]=0;    memset(gra, 0x3f, sizeof gra);    for(int i=1;i&lt;=m;++i)&#123;        int u,v,c;        cin&gt;&gt;u&gt;&gt;v&gt;&gt;c;        gra[u][v]=g[v]+c;        gra[v][u]=g[u]+c;    &#125;    cout&lt;&lt;dijkstra()&lt;&lt;endl;    return 0;&#125;\nPython 语言描述:\nimport sysfrom typing import Listn, m = map(int, input().split())# 邻接矩阵gra = [[float(&#x27;inf&#x27;)] * (n+1) for _ in range(n+1)]dist = [float(&#x27;inf&#x27;)] * (n+1)g = [0] + list(map(int, input().split()))g[n] = 0st = [False] * (n+1)# 朴素版 Dijkstradef dijkstra() -&gt; int:    dist[1] = 0    for _ in range(n - 1):        t = -1        for j in range(1, n + 1):            if not st[j] and (t == -1 or dist[t] &gt; dist[j]):                t = j        for j in range(1, n + 1):            dist[j] = min(dist[j], dist[t] + gra[t][j])        st[t] = True    return dist[n]for _ in range(m):    u, v, c = map(int, input().split())    gra[u][v] = g[v] + c    gra[v][u] = g[u] + cprint(dijkstra())\nJava 语言描述:\nimport java.util.*;public class Main &#123;    static int N = 1010;    static int[][] gra = new int[N][N];    static int[] dist = new int[N];    static int[] g = new int[N];    static boolean[] st = new boolean[N];    static int n, m;    public static void main(String[] args) &#123;        Scanner scan = new Scanner(System.in);        n = scan.nextInt();        m = scan.nextInt();        for(int i = 1; i &lt;= n; ++i) &#123;            g[i] = scan.nextInt();        &#125;        g[n] = 0;        for(int i = 0 ; i &lt; N ; i ++) Arrays.fill(gra[i], 0x3f3f3f);        for(int i = 1; i &lt;= m; ++i) &#123;            int u = scan.nextInt(), v = scan.nextInt(), c = scan.nextInt();            gra[u][v] = g[v] + c;            gra[v][u] = g[u] + c;        &#125;        System.out.println(dijkstra());    &#125;    private static int dijkstra() &#123;        Arrays.fill(dist, 10000000);        dist[1] = 0;        for(int i = 0; i &lt; n - 1; i++) &#123;            int t = -1;            for(int j = 1; j &lt;= n; j++) &#123;                if(!st[j] &amp;&amp; (t == -1 || dist[t] &gt; dist[j])) &#123;                    t = j;                &#125;            &#125;            if(t == -1) break;            for(int j = 1; j &lt;= n; j++) &#123;                dist[j] = Math.min(dist[j], dist[t] + gra[t][j]);            &#125;            st[t] = true;        &#125;        return dist[n];    &#125;&#125;\n聪明的猴子\n\n解题思路:\n\nC++ 语言描述:\n#include &lt;bits/stdc++.h&gt;using namespace std;int a[5005], x[5005], y[5005], f[5005];struct Edge&#123;    int x;    int y;    double w;&#125;edge[1000005];int find(int x)&#123;    if (x == f[x])        return x;    f[x] = find(f[x]);    return f[x];&#125;int cmp(Edge a, Edge b)&#123;    return a.w &lt; b.w;&#125;void merge(int x, int y)&#123;    int xx = find(x);    int yy = find(y);    if (xx != yy)        f[yy] = xx;&#125;int main()&#123;    int cnt = 0;    int n, m;    cin &gt;&gt; m;    for (int i = 1; i &lt;= m; i++)        cin &gt;&gt; a[i];    cin &gt;&gt; n;    for (int i = 1; i &lt;= n; i++)        cin &gt;&gt; x[i] &gt;&gt; y[i];    for (int i = 1; i &lt;= n; i++)        f[i] = i;    for (int i = 1; i &lt;= n; i++)&#123;        for (int j = i + 1; j &lt;= n; j++)&#123;            double w = sqrt((x[i] - x[j])*(x[i] - x[j]) + (y[i] - y[j])*(y[i] - y[j]));            edge[++cnt] = &#123;i, j, w&#125;;        &#125;    &#125;    sort(edge + 1, edge + cnt + 1, cmp);    int num = 0;    double max = 0.0;    for (int i = 1; i &lt;= cnt; i++)&#123;        if (find(edge[i].x)!=find(edge[i].y))&#123;            merge(edge[i].x, edge[i].y);            num++;            max = max&gt;=edge[i].w?max:edge[i].w;        &#125;        if (num == n - 1)            break;    &#125;    int ans = 0;    for (int i = 1; i &lt;= m; i++)        if (a[i] &gt;= max)            ans++;    cout &lt;&lt; ans &lt;&lt; endl;    return 0;&#125;\nPython 语言描述:\nimport mathclass Edge:    x = 0    y = 0    w = 0.0    def __init__(self, x, y, w):        self.x = x        self.y = y        self.w = wdef find(x):    if f[x]==x:        return f[x]    else:        f[x] = find(f[x])        return f[x]def merge(x,y):    xx = find(x)    yy = find(y)    if xx!=yy:        f[yy] = xxif __name__ == &#x27;__main__&#x27;:    m = int(input())    a = list(map(int, input().split()))    n = int(input())    x = [0 for i in range(n + 2)]    y = [0 for i in range(n + 2)]    for i in range(n):        b = list(map(int, input().split()))        x[i + 1] = b[0]        y[i + 1] = b[1]    edge_list = []    maxvalue = 0    num = 0    for i in range(1, n + 1):        for j in range(i + 1, n + 1):            w = math.sqrt((x[i] - x[j]) * (x[i] - x[j]) + (y[i] - y[j]) * (y[i] - y[j]))            edge =  Edge(i, j, w)            edge_list.append(edge)    edge_list.sort(key=lambda x: x.w)    f = [i for i in range(n + 1)]    for i in edge_list:        if find(i.x)!=find(i.y):            merge(i.x,i.y)            maxvalue = max(maxvalue,i.w)            num+=1            if num==n-1:                break    ans = 0    for i in range(m):        if a[i]&gt;=maxvalue:            ans+=1    print(ans)\nJava 语言描述:\nimport java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.io.PrintWriter;import java.util.ArrayList;import java.util.Collections;public class Main &#123;    static int ans = 0;    static int n;    static int[] a;    static int m;    static int[] x;    static int[] y;    static double max;    static int[] f;    static int num = 0;    static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));    static PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));    public static void main(String[] args) throws IOException&#123;        m = Integer.parseInt(in.readLine().trim());        a = new int[m];        String[] s = in.readLine().trim().split(&quot; &quot;);        for(int i=0;i&lt;m;i++)            a[i] = Integer.parseInt(s[i]);        n = Integer.parseInt(in.readLine().trim());        x = new int[n];        y = new int[n];        for(int i=0;i&lt;n;i++) &#123;            s = in.readLine().trim().split(&quot; &quot;);            x[i] = Integer.parseInt(s[0]);            y[i] = Integer.parseInt(s[1]);        &#125;        ArrayList&lt;Edge&gt; list = new ArrayList&lt;&gt;();        for(int i=0;i&lt;n-1;i++) &#123;            for(int j=i+1;j&lt;n;j++) &#123;                double l = Math.sqrt((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]));                Edge edge = new Edge(i, j, l);                list.add(edge);            &#125;        &#125;        Collections.sort(list);        f = new int[n];        for(int i=0;i&lt;n;i++)            f[i] = i;        for(int i=0;i&lt;list.size();i++) &#123;            Edge e = list.get(i);            if(find(e.x)!=find(e.y)) &#123;                merge(e.x,e.y);                max = Math.max(max, e.w);                num++;                if(num==n-1)                    break;            &#125;        &#125;        for(int i=0;i&lt;m;i++)            if(a[i]&gt;=max)                ans++;        System.out.println(ans);    &#125;    static int find(int x) &#123;        if(f[x] == x)            return f[x];        f[x] = find(f[x]);        return f[x];    &#125;    static void merge(int x,int y) &#123;        int xx = find(x);        int yy = find(y);        if(xx!=yy)            f[yy] = xx;    &#125;&#125;class Edge implements Comparable&lt;Edge&gt;&#123;    int x;    int y;    double w;    public Edge(int x, int y, double w) &#123;        super();        this.x = x;        this.y = y;        this.w = w;    &#125;    @Override    public int compareTo(Edge o) &#123;        // TODO Auto-generated method stub        return this.w&gt;o.w?1:-1;    &#125;&#125;\n通电\n解题思路:\n给了你 n 个节点，又给了你 n 个基点之间相互连接需要多少钱，现在要 n 个村庄都通电，只需要保证 n 个节点构成连通子图即可。\n最小的连通子图是树，也就是构造一棵树，那么在图上构造一棵最最少花费的树的问题即为最小生成树。\nC++ 语言描述:\n#include &lt;bits/stdc++.h&gt;using namespace std;const int INF = 0x3f3f3f3f;const int MAXN = 1005;vector&lt;int&gt; demo;double closest[MAXN], lowcost[MAXN];int m, n;             // m为节点的个数，n为边的数量double G[MAXN][MAXN]; // 邻接矩阵double prim()&#123;    for (int i = 0; i &lt; m; i++)    &#123;        lowcost[i] = INF;    &#125;    for (int i = 0; i &lt; m; i++)    &#123;        closest[i] = 0;    &#125;    closest[0] = -1;             // 加入第一个点，-1表示该点在集合U中，否则在集合V中    int num = 0,  e = 0; // e为最新加入集合的点    double ans=0;    while (num &lt; m - 1)          // 加入m-1条边    &#123;        int miedge = -1;        double micost = INF;        for (int i = 0; i &lt; m; i++)            if (closest[i] != -1)            &#123;                double temp = G[e][i];                if (temp &lt; lowcost[i])                &#123;                    lowcost[i] = temp;                    closest[i] = e;                &#125;                if (lowcost[i] &lt; micost)                    micost = lowcost[miedge = i];            &#125;        ans += micost;        demo.push_back(micost);        closest[e = miedge] = -1;        num++;    &#125;    return ans;&#125;struct node&#123;    double x, y, h;&#125; dis[MAXN];double getDistance(node a, node b)&#123;    return sqrt(pow(a.x - b.x, 2) + pow(a.y - b.y, 2)) + pow(a.h - b.h, 2);&#125;int main()&#123;    scanf(&quot;%d&quot;, &amp;m);    for (int i = 0; i &lt; m; i++)        scanf(&quot;%lf%lf%lf&quot;, &amp;dis[i].x, &amp;dis[i].y, &amp;dis[i].h);    for (int i = 0; i &lt; m - 1; i++)        for (int j = i + 1; j &lt; m; j++)        &#123;            G[i][j] = getDistance(dis[i], dis[j]);            G[j][i] = G[i][j];        &#125;    printf(&quot;%.2lf&quot;, prim());    // for (int i = 0; i &lt; m - 1; i++)    //     cout &lt;&lt; demo[i] &lt;&lt; &quot; &quot;;    return 0;&#125;\nPython 语言描述:\nimport osimport sysimport mathdef caculate(x1,y1,h1,x2,y2,h2):    return math.sqrt( (x1-x2)**2+(y1-y2)**2)+(h1-h2)**2\\def find(x):    if x!=ufs[x]:        ufs[x]=find(ufs[x])    return ufs[x]def kruskal():    global ufs    ufs=list(range(n+1))    my_brige.sort(key=lambda x:x[2])    ans=0    cnt=0    for a,b,w in my_brige:        x=find(a)        y=find(b)        if x==y:            continue        cnt+=1        ans+=w        ufs[x]=y        if cnt==n-1:            return ansn=int(input())brige=[[] for i in range(n+1)]for i in range(1,n+1):    x,y,h=map(int,input().split())    brige[i]=(x,y,h)my_brige=[]for i in range(1,n):    for j in range(i+1,n+1):        x1,y1,h1=brige[i]        x2,y2,h2=brige[j]        w=caculate(x1,y1,h1,x2,y2,h2)        my_brige.append((i,j,w))ans=kruskal()print(&quot;&#123;:.2f&#125;&quot;.format(ans))\nJava 语言描述:\nimport java.util.ArrayList;import java.util.Comparator;import java.util.List;import java.util.Scanner;public class Main &#123;    static int N = 1010;    static List&lt;Node&gt; list = new ArrayList&lt;&gt;();    static int[] x = new int[N], y = new int[N], z = new int[N];    static int n;    //并查集数组    static int[] q = new int[N];    public static void main(String[] args) &#123;        Scanner sc = new Scanner(System.in);        n = sc.nextInt();        for (int i = 0; i &lt; n; i++) &#123;            x[i] = sc.nextInt();            y[i] = sc.nextInt();            z[i] = sc.nextInt();        &#125;        //建边  任意两个村庄都要建边        for (int i = 0; i &lt; n; i++) &#123;            for (int j = i + 1; j &lt; n; j++) &#123;                int l = x[i] - x[j];                int r = y[i] - y[j];                double c = z[i] - z[j];                // i 村庄 到  j 村庄的 距离                double s = Math.sqrt(l * l + r * r) + c * c;                list.add(new Node(i, j, s));            &#125;        &#125;        // 核心：按权值排序        list.sort(Comparator.comparingDouble(a -&gt; a.w));        for (int i = 0; i &lt; n; i++) &#123;            q[i] = i;        &#125;        //记录权重之和，答案        double res = 0;        for (int i = 0; i &lt; list.size(); i++) &#123;            int a = list.get(i).a;            int b = list.get(i).b;            double w = list.get(i).w;            a = find(a);            b = find(b);            if (a != b) &#123;                q[a] = b;                res += w;            &#125;        &#125;        System.out.printf(&quot;%.2f&quot;, res);    &#125;    static int find(int x) &#123;        if (q[x] != x) q[x] = find(q[x]);        return q[x];    &#125;    static class Node &#123;        int a, b;        double w;        public Node(int a, int b, double w) &#123;            this.a = a;            this.b = b;            this.w = w;        &#125;    &#125;&#125;\n机房这天, 小明在机房学习。\n他发现机房里一共有 $n$ 台电脑, 编号为 1 到 $n$, 电脑和电脑之间有网线连 接, 一共有 $n-1$ 根网线将 $n$ 台电脑连接起来使得任意两台电脑都直接或者间 接地相连。\n小明发现每台电脑转发、发送或者接受信息需要的时间取决于这台电脑和 多少台电脑直接相连, 而信息在网线中的传播时间可以忽略。比如如果某台电脑 用网线直接连接了另外 $d$ 台电脑, 那么任何经过这台电脑的信息都会延迟 $d$ 单 位时间 (发送方和接收方也会产生这样的延迟, 当然如果发送方和接收方都是 同一台电脑就只会产生一次延迟)。\n小明一共产生了 $m$ 个疑问: 如果电脑 $u_{i}$ 向电脑 $v_{i}$ 发送信息, 那么信息从 $u_{i}$ 传到 $v_{i}$ 的最短时间是多少?\n解题思路:\n还是一道比较明显的求LCA(最近公共祖先)模型的题目,我们可以使用多种方法来解决该问题，这里我们使用更好写的离线的tarjan算法来解决该问题。\n除去tarjan算法必用的基础数组，我们还有一个数组d[],d[i]记录的是每个点的出度，也就是它的延迟时间，以及数组w[],w[i]的含义是点i到根节点的延迟时间。在通过dfs求出每个点i的w[i]以后，在tarjan中我们该如何求出两点的延迟时间呢？\n我们设点i到j的延迟时间为$f(x)$,当我们求得i与j的最近公共祖先为anc，我们首先让$f(x)=w[i]+w[j]$,但很明显，我们多加了两遍$w[anc]$，所以我们需要减去两倍的$w[anc]$，但延迟时间还包括经过anc的时间，所以还得加上一个$d[anc]$。此处请结合w[]和d[]的含义理解。 最后能得出式子:$f(x)=w[i]+w[h]-w[anc]*2+d[anc]$ 我们利用这个式子在tarjan函数中就能得出每个询问的答案，当然对于起始和结束都在同一个节点的情况下,它的答案就是当前节点的出度，我们可以进行特判一下。输入输出较多，建议使用scanf和printf进行输入输出。\n时间复杂度:dfs：每个点遍历一次,复杂度级别$O(n)$,tarjan算法复杂度接近 $O(n+m)$。\nC++ 语言描述:\n#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long LL;typedef pair&lt;int,int&gt; PII;const int N=100010;unordered_map&lt;int,vector&lt;int&gt;&gt; gra;int n,m;//单个点的出度int d[N];//记录点i到根节点的延迟int w[N];//并查集数组int q[N];//记录答案int res[N];int st[N];//存下查询vector&lt;PII&gt;    query[N];//并查集查询int find(int x)&#123;    if(x!=q[x]) q[x]=find(q[x]);    return q[x];&#125;void dfs(int u,int fa)&#123;    w[u]+=d[u];    for(auto g:gra[u])&#123;        if(g==fa) continue;        w[g]+=w[u];        dfs(g,u);    &#125;&#125;void tarjan(int u)&#123;    st[u]=1;    for(auto j:gra[u])&#123;        if(!st[j])        &#123;            tarjan(j);            q[j]=u;        &#125;    &#125;    for(auto item: query[u])&#123;        int y=item.first,id=item.second;        if(st[y]==2)&#123;            int anc=find(y);            res[id]=w[y]+w[u]-w[anc]*2+d[anc];        &#125;    &#125;    st[u]=2;&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;m;    for(int i=0;i&lt;n-1;++i)&#123;        int a,b;        scanf(&quot;%d%d&quot;,&amp;a,&amp;b);        gra[a].push_back(b);        gra[b].push_back(a);        d[a]++,d[b]++;    &#125;    for(int i=0;i&lt;m;++i)&#123;        int a,b;        scanf(&quot;%d%d&quot;,&amp;a,&amp;b);        if(a!=b)&#123;            query[a].push_back(&#123;b,i&#125;);            query[b].push_back(&#123;a,i&#125;);        &#125;else&#123;            res[i]=d[a];        &#125;    &#125;    dfs(1,-1);    for(int i=1;i&lt;=n;++i) q[i]=i;    tarjan(1);    for(int i=0;i&lt;m;++i) printf(&quot;%d\\n&quot;,res[i]);    return 0;&#125;\nPython 语言描述:\nfrom collections import defaultdictgra = defaultdict(list)d = [0] * 100010w = [0] * 100010q = [0] * 100010res = [0] * 100010st = [0] * 100010query = [[] for _ in range(100010)]def find(x):    if x != q[x]:        q[x] = find(q[x])    return q[x]def dfs(u, fa):    w[u] += d[u]    for g in gra[u]:        if g == fa:            continue        w[g] += w[u]        dfs(g, u)def tarjan(u):    st[u] = 1    for j in gra[u]:        if st[j] == 0:            tarjan(j)            q[j] = u    for item in query[u]:        y, id = item        if st[y] == 2:            anc = find(y)            res[id] = w[y] + w[u] - w[anc] * 2 + d[anc]    st[u] = 2n, m = map(int, input().split())for i in range(n - 1):    a, b = map(int, input().split())    gra[a].append(b)    gra[b].append(a)    d[a] += 1    d[b] += 1for i in range(m):    a, b = map(int, input().split())    if a != b:        query[a].append((b, i))        query[b].append((a, i))    else:        res[i] = d[a]dfs(1, -1)for i in range(1, n + 1):    q[i] = itarjan(1)for i in range(m):    print(res[i])\nJava 语言描述:\nimport java.util.*;public class Main &#123;    static class Pair &#123;        int first, second;        public Pair(int first, int second) &#123;            this.first = first;            this.second = second;        &#125;    &#125;    static Map&lt;Integer, List&lt;Integer&gt;&gt; gra = new HashMap&lt;&gt;();    static int[] d = new int[100010];    static int[] w = new int[100010];    static int[] q = new int[100010];    static int[] res = new int[100010];    static int[] st = new int[100010];    static List&lt;Pair&gt;[] query = new List[100010];    static int find(int x) &#123;        if (x != q[x]) q[x] = find(q[x]);        return q[x];    &#125;    static void dfs(int u, int fa) &#123;        w[u] += d[u];        for (int g : gra.get(u)) &#123;            if (g == fa) continue;            w[g] += w[u];            dfs(g, u);        &#125;    &#125;    static void tarjan(int u) &#123;        st[u] = 1;        for (int j : gra.get(u)) &#123;            if (st[j] == 0) &#123;                tarjan(j);                q[j] = u;            &#125;        &#125;        for (Pair item : query[u]) &#123;            int y = item.first, id = item.second;            if (st[y] == 2) &#123;                int anc = find(y);                res[id] = w[y] + w[u] - w[anc] * 2 + d[anc];            &#125;        &#125;        st[u] = 2;    &#125;    public static void main(String[] args) &#123;        Scanner scanner = new Scanner(System.in);        int n = scanner.nextInt();        int m = scanner.nextInt();        for (int i = 1; i &lt;= n; i++) &#123;            gra.put(i, new ArrayList&lt;&gt;());            query[i] = new ArrayList&lt;&gt;();        &#125;        for (int i = 0; i &lt; n - 1; i++) &#123;            int a = scanner.nextInt();            int b = scanner.nextInt();            gra.get(a).add(b);            gra.get(b).add(a);            d[a]++;            d[b]++;        &#125;        for (int i = 0; i &lt; m; i++) &#123;            int a = scanner.nextInt();            int b = scanner.nextInt();            if (a != b) &#123;                query[a].add(new Pair(b, i));                query[b].add(new Pair(a, i));            &#125; else &#123;                res[i] = d[a];            &#125;        &#125;        dfs(1, -1);        for (int i = 1; i &lt;= n; i++) &#123;           q[i] = i;        &#125;        tarjan(1);        for (int i = 0; i &lt; m; i++) &#123;            System.out.println(res[i]);        &#125;    &#125;&#125;\n环境治理LQ 国拥有 $n$ 个城市, 从 0 到 $n-1$ 编号, 这 $n$ 个城市两两之间都有且仅有 一条双向道路连接, 这意味着任意两个城市之间都是可达的。每条道路都有一 个属性 $D$, 表示这条道路的灰尘度。当从一个城市 $A$ 前往另一个城市 $B$ 时, 可 能存在多条路线, 每条路线的灰尘度定义为这条路线所经过的所有道路的灰尘 度之和, LQ 国的人都很讨厌灰尘, 所以他们总会优先选择灰尘度最小的路线。\nLQ 国很看重居民的出行环境, 他们用一个指标 $P$ 来衡量 LQ 国的出行环 境, $P$ 定义为:\n$P=\\sum{i=0}^{n-1} \\sum{j=0}^{n-1} d(i, j)$\n其中 $d(i, j)$ 表示城市 $i$ 到城市 $j$ 之间灰尘度最小的路线对应的灰尘度的值。 为了改善出行环境, 每个城市都要有所作为, 当某个城市进行道路改善时, 会将与这个城市直接相连的所有道路的灰尘度都减少 1 , 但每条道路都有一个 灰尘度的下限值 $L$, 当灰尘度达到道路的下限值时, 无论再怎么改善, 道路的 灰尘度也不会再减小了。\n具体的计划是这样的:\n第 1 天, 0 号城市对与其直接相连的道路环境进行改善;\n第 2 天, 1 号城市对与其直接相连的道路环境进行改善;\n$\\cdots$\n第 $n$ 天, $n-1$ 号城市对与其直接相连的道路环境进行改善;\n第 $n+1$ 天, 0 号城市对与其直接相连的道路环境进行改善;\n第 $n+2$ 天, 1 号城市对与其直接相连的道路环境进行改善;\nLQ 国想要使得 $P$ 指标满足 $P \\leq Q$ 。请问最少要经过多少天之后, $P$ 指标 可以满足 $P \\leq Q$ 。如果在初始时就已经满足条件, 则输出 0 ; 如果永远不可能 满足, 则输出 $-1$ 。\n解题思路:\n首先，对于求解P指的公式，我们要清楚，是每个点到其他所有点的最短路径之和相加，这种涉及到任意两点的最短路，加上 $n$ 的最大范围只有100，很明显我们需要想到Floyd算法求任意两点的最短路。\n我们并没有一个直观的算法直接求得答案，所以，我们考虑二分答案。 如果改善x天是符合要求的，那么大于x的天数也一定符合，但小于x的天数不一定，所以满足二段性，我们可以二分。\n我们用g[][]记录初始道路的灰尘度,m[][]记录每条道路的最低灰尘度,f[][]记录的是在改善x天后的每条道路的环境。这样我们就可以使用二分+Floyd的做法得到答案。\n当然这里有一些需要注意的细节问题，当我们改变f[i][j]的值时，相应的也要改变f[j][i]的值，因为任意两点只存在一条双向道路，所以这两个状态应该表示的是同一条道路。每次check时，别忘记将f[][]重置回g[][]，再去减去对于的天数。floyd函数每次跑完后，计算并返回此时的P值。\n最开始时我们可以判断每条道路都是最低复杂度的情况下，计算出来的P是否大于Q，如果大于说明肯定无解，直接返回-1即可。二分对于r的上限也需要注意，最多100个点，每个点最大1e5，所以理论上我们只要开到大于1e7以上就不会有问题，否则样例过大时可能会出错。\n时间复杂度：$O(n^3log(n*m))$。\nC++ 语言描述:\n#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long LL;const int N=110;LL g[N][N];LL m[N][N];LL f[N][N];LL n,q;LL floyd()&#123;    LL a=0;    for (int k = 1; k &lt;= n; k ++ )        for (int i = 1; i &lt;= n; i ++ )            for (int j = 1; j &lt;= n; j ++ )                f[i][j] = min(f[i][j], f[i][k] + f[k][j]);    for(int i=1;i&lt;=n;++i)        for(int j=1;j&lt;=n;++j)            a+=f[i][j];    return a;&#125;//改善X天bool check(LL x)&#123;    memcpy(f,g,sizeof(g));    LL h=x/n;    LL s=x%n;    for(int i=1;i&lt;=n;++i)&#123;        for(int j=1;j&lt;=n;++j)&#123;            if(i==j) continue;            if(i&lt;=s) f[i][j]=max(m[i][j],f[i][j]-h-1);            else f[i][j]=max(m[i][j],f[i][j]-h);            f[j][i]=f[i][j];        &#125;    &#125;    return floyd()&lt;=q;&#125;void solve()&#123;    cin&gt;&gt;n&gt;&gt;q;    for(int i=1;i&lt;=n;++i)&#123;        for(int j=1;j&lt;=n;++j)&#123;            cin&gt;&gt;g[i][j];        &#125;    &#125;    for(int i=1;i&lt;=n;++i)&#123;        for(int j=1;j&lt;=n;++j)&#123;            cin&gt;&gt;m[i][j];            f[i][j]=m[i][j];        &#125;    &#125;    if(floyd()&gt;q)&#123;        cout&lt;&lt;-1&lt;&lt;endl;        return;    &#125;    LL l=0,r=1000000000;    while(l&lt;r)&#123;        int mid=l+r&gt;&gt;1;        if(check(mid)) r=mid;        else l=mid+1;    &#125;    cout&lt;&lt;r&lt;&lt;endl;&#125;int main()&#123;    solve();    return 0;&#125;\nPython 语言描述:\nimport copyN=110g=[[0]*N for i in range(N)]m=[[0]*N for i in range(N)]f=[[0]*N for i in range(N)]n,q=map(int,input().split())def floyd(f):    a=0    for k in range(1,n+1):        for i in range(1,n+1):            for j in range(1,n+1):                f[i][j]=min(f[i][j],f[i][k]+f[k][j])    for i in range(1,n+1):        for j in range(1,n+1):            a=a+f[i][j]    return adef check(x,g):    f=copy.deepcopy(g)    h=x//n    s=x%n    for i in range(1,n+1):        for j in range(1,n+1):            if i==j:                continue            if i&lt;=s:                f[i][j]=max(m[i][j],f[i][j]-h-1)            else:                f[i][j]=max(m[i][j],f[i][j]-h)            f[j][i]=f[i][j]    return  floyd(f)&lt;=qdef solve():    for i in range(1,n+1):        l=list(map(int,input().split()))        for j in range(1,n+1):            g[i][j]=l[j-1]#灰尘度    for i in range(1,n+1):        l = list(map(int, input().split()))        for j in range(1,n+1):            m[i][j]=l[j-1]#灰尘度的下限值            f[i][j]=m[i][j]    if floyd(f)&gt;q:        print(-1)        return    l,r=0,10000000    while (l &lt; r):        mid=(l+r)&gt;&gt;1        if (check(mid,g)):            r=mid        else:            l=mid+1    print(r)solve()\nJava 语言描述:\nimport java.io.*;public class Main &#123;    static int N=110;    static long[][] g=new long[N][N],m=new long[N][N],f=new long[N][N];    static long n,q;    static BufferedReader br=new BufferedReader(new InputStreamReader(System.in));    static PrintWriter  out=new PrintWriter(new OutputStreamWriter(System.out));    public static void main(String[] args) throws IOException &#123;        String[] s=br.readLine().split(&quot; &quot;);        n=Long.parseLong(s[0]);        q=Long.parseLong(s[1]);        for(int i=1;i&lt;=n;++i)&#123;            s=br.readLine().split(&quot; &quot;);            for(int j=1;j&lt;=n;++j)&#123;                g[i][j]=Long.parseLong(s[j-1]);            &#125;        &#125;        for(int i=1;i&lt;=n;++i)&#123;            s=br.readLine().split(&quot; &quot;);            for(int j=1;j&lt;=n;++j)&#123;                m[i][j]=Long.parseLong(s[j-1]);                f[i][j]=m[i][j];            &#125;        &#125;        if(floyd()&gt;q)&#123;            out.println(-1);            out.flush();            return;        &#125;        long l=0,r=1000000000;        while(l&lt;r)&#123;            long mid=l+r&gt;&gt;1;            if(check(mid)) r=mid;            else l=mid+1;        &#125;        out.println(r);        out.flush();    &#125;    static long floyd()&#123;        long a=0;        for (int k = 1; k &lt;= n; k ++ )            for (int i = 1; i &lt;= n; i ++ )                for (int j = 1; j &lt;= n; j ++ )                    f[i][j] =Math.min(f[i][j], f[i][k] + f[k][j]);        for(int i=1;i&lt;=n;++i)            for(int j=1;j&lt;=n;++j)                a+=f[i][j];        return a;    &#125;    static boolean check(long x)&#123;        for(int i=1;i&lt;=n;++i)&#123;            for(int j=1;j&lt;=n;++j) f[i][j]=g[i][j];        &#125;        long h=x/n;        long s=x%n;        for(int i=1;i&lt;=n;++i)&#123;            for(int j=1;j&lt;=n;++j)&#123;                if(i==j) continue;                if(i&lt;=s) f[i][j]=Math.max(m[i][j],f[i][j]-h-1);                else f[i][j]=Math.max(m[i][j],f[i][j]-h);                f[j][i]=f[i][j];            &#125;        &#125;        return floyd()&lt;=q;    &#125;&#125;\n","categories":["蓝桥杯Note"],"tags":["蓝桥杯备赛","图论入门"]},{"title":"差分与前缀和","url":"/2024/03/11/%E5%B7%AE%E5%88%86%E4%B8%8E%E5%89%8D%E7%BC%80%E5%92%8C/","content":"差分与前缀和差分与前缀和是一对互逆的操作，常常用于处理区间问题，差分法是解决区间加减问题，前缀和是解决区间求和问题的常用办法。\n知识点\n差分算法\n前缀和算法\n\n差分法差分法的应用主要是用于处理区间问题。当某一个数组要在很多不确定的区间，加上相同的一个数。我们如果每个都进行加法操作的话，那么复杂度 $O(nm)$ 是平方阶的，非常消耗时间。\n如果我们采用差分法，将数组拆分，构造出一个新的拆分数组，通过对数组区间的端点进行加减操作，最后将数组和并就能完成原来的操作。\n这样处理后，时间复杂度降低为 $O(N)$，虽然感觉操作变得更加复杂了，但是只用对边界操作确实比操作一整个区间的方法要优秀的多。\n听到这里也是吊足了胃口，那到底怎么对区间操作呢，请大家跟随我的讲解，慢慢理解。\n差分法的特点：\n\n将对于区间的加减操作转化为对于端点的操作；\n时间复杂度为 $O(n)$；\n用于维护区间的增减但不能维护乘除；\n差分后的序列比原来的数组序列多一个数。\n\n差分算法解题的基本思路：\n\n设定 $b[1]=a[1]$；\n对于第 2 项到第 n 项，利用差分式 $b[i]=a[i]-a[i-1]$；\n对于区间端点进行加减操作；\n进行差分还原（即前缀和）；\n注意，这里从 1 开始。如果从 0 开始，还需讨论 $i=0$ 的情况。使用 1 的话，$b[1]=a[1]-a[0]=a[1]$。\n\n差分法的一般步骤：\n假设有一个数组：\na = [1, 2, 3, 4, 5, 7, 2]\n差分后：\nb = [1, 1, 1, 1, 1, 2, -5]\n一般应用场景是对区间 $[l,r]$ 进行 $N$ 次加减操作。例如：\n\n从第二个元素到第五个元素每个加 $3$\n从第二个元素到第四个元素每个减 $2$\n从第一个元素到第三个元素每个加 $1$\n\n对于每个 $[l,r]$ 区间的加减操作都可转化为对端点 $l$ 和 $r+1$ 的操作。例如，从第二个元素到第五个元素每个加 $3$，可转化为 $[l]$ 加 $3$ 且 $[r+1]$ 减 $3$。\n原序列变成了：\n1 1 1 1 1 2 -51 4 1 1 1 -1 -5\n然后按照 $b[i]=b[i]+b[i-1]$ 复原：\n1 5 6 7 8 7 2\n去掉最后一项，跟原序列对比：\n1 2 3 4 5 7 21 5 6 7 8 7 2\n确实是都加上了 $3$。\n继续操作：\n从第二个元素到第四个元素每个减 $2$，可转化为 $[l]$ 减 $2$ 且 $[r+1]$ 加 $2$。\n序列变成了：\n1 4 1 1 1 -1 -51 2 1 1 3 -1 -5\n然后按照 $b[i]=b[i]+b[i-1]$ 复原：\n1 3 4 5 8 7 2\n与上次复原后对比：\n1 5 6 7 8 7 2 1 3 4 5 8 7 2\n确实是按照操作执行了。\n注意，不需要每次都复原，只需在最后一次复原即可。\n最后直接做三次，最后还原：\n\n从第二个元素到第五个元素每个加 $3$\n从第二个元素到第四个元素每个减 $2$\n从第一个元素到第三个元素每个加 $1$\n\n原序列差分后：\nb = [1 1 1 1 1 2 -5]\n\n第 2 个元素加 3\n第 6 个元素减 3\n第 2 个元素减 2\n第 5 个元素加 2\n第 1 个元素加 1\n第 4 个元素减 1\n\n差分序列变成：\n2 2 1 0 3 -1 -5\n复原后：\n2 4 5 5 8 7 5\n与原序列对比：\n1 2 3 4 5 7 2 2 4 5 5 8 7 5\n所以，差分算法是非常方便快捷的。\n差分与前缀和是逆操作，常在一起出现，但是先做差分还是先做前缀和就是两种不同的算法，做不做另一种操作也决定了算法不同，所以大家要根据题目分析，具体学会使用。\n大学里的树木要打药题目描述:\n教室外有 N 棵树，根据不同的位置和树种，学校要对其上不同的药。\n因为树的排列成线性，且非常长，我们可以将它们看作一条直线给他们编号。\n树的编号从 $0$ ~ $N-1$ 且 $N&lt;1e6$。\n对于树的药是成区间分布，比如 $3 - 5$ 号的树靠近下水道，所以他们要用驱蚊虫的药， $20 - 26$ 号的树，他们排水不好，容易涝所以要给他们用点促进根系的药。\n诸如此类，每种不同的药要花不同的钱。\n现在已知共有 $M$ 个这样的区间，并且给你每个区间花的钱，请问最后，这些树木花了多少药费。\n输入:\n输入描述:\n每组输入的第一行有两个整数 $N（1 &lt;= N&lt;= 1000000）$和 $M（1 &lt;= M &lt;= 100000）$。\n$N$ 代表马路的共计多少棵树，$M$代表区间的数目，$N$ 和 $M$ 之间用一个空格隔开。\n接下来的 $M$ 行每行包含三个不同的整数，用一个空格隔开，表示一个区域的起始点 $L$ 和终止点 $R$ 的坐标，以及花费。\n输入样例:\n500 3150 300 4100 200 20470 471 19\n输出描述:\n输出包括一行，这一行只包含一个整数，所有的花费。\n输出样例:\n2662\n样例:\n输入样例:\n3000 8150 1130 21020 1200 3470 2071 11123  211 612 222 213 23 21  213 41232  2523 6\n输出样例:\n2662\n运行限制:\n1. 最大运行时间：1s 2. 最大运行内存：128M\n题目解析：\n\n利用$b[i]=a[i]-a[i-1]$ 差分式。\n这里由于开始时都是 $0$，可以用，但是用完都还是 $0$，所以没有意义，所以直接跳过即可。\n\n依次读入区间的值，然后将对于区间的操作转化为对于区间端点操作加减。 由于我们从 $1$ 开始，所以数目整体区间要右移 $1$ 位。\n对于每个 $[l,r]$ 区间的加减操作都转化为对端点 $l,r+1$ 的操作。\n\n差分还原(前缀和)。\n\n\nfor (int i = 1; i &lt; n; i++)     b[i] = a[i] - a[i - 1]\n差分算法解决区间加减问题通用框架如下：\n//读入原始数据 n,m,a输入n,mfor(int i=1;i&lt;=n;i++)&#123;    输入a[i]&#125;//差分for(int i=1;i&lt;=n;i++)    b[i]=a[i]-a[i-1]//区间操作while(m--)&#123;    输入l,r,value    b[l]+value    b[r+1]-value&#125;//前缀和还原for(int i=1;i&lt;n;i++)    b[i]=b[i]+b[i-1]\n答案解析C++ 代码：\n#include &lt;iostream&gt;using namespace std;int b[100005];int main()&#123;    int n; //n层    int m; // m个区间    cin &gt;&gt; n &gt;&gt; m;    while (m--)    &#123;        int l, r, value;        cin &gt;&gt; l &gt;&gt; r &gt;&gt; value;        b[l+1] += value;        b[r + 1+1] -= value;    &#125;    for (int i = 1; i &lt;= n; i++)        b[i] = b[i] + b[i - 1];    int sum = 0;    for (int i = 1; i &lt;= n; i++)        sum += b[i];    /*    也可以一次性搞定    int sum=b[1];    for(int i=1; i&lt;=n; i++)&#123;    b[i]=b[i]+b[i-1];    sum+=b[i]    &#125;    */    cout &lt;&lt; sum &lt;&lt; endl;&#125;\nPython 解题代码\n递推算法代码：\nb = [0] * 100005if __name__ == &#x27;__main__&#x27;:    nm = input().split()    n = int(nm[0])    m = int(nm[1])    while (m &gt; 0):        m -= 1        lrv = input().split()        l = int(lrv[0])        r = int(lrv[1])        value = int(lrv[2])        b[l+1] += value        b[r + 1+1] -= value    for i in range(1, n+1):        b[i] = b[i - 1] + b[i]    sum = 0    for i in range(1,n+1):        sum += b[i]    print(sum)    #或者一次性解决    # sum = a[0]    #    # for i in range(1, n+1):    #    #     a[i] = a[i - 1] + a[i]    #    #     sum += a[0]    # print(sum)\nJava 解题代码\nimport java.util.Scanner;public class Main &#123;  static int b[]=new int [100005];  public static void main(String[] args) &#123;      Scanner in = new Scanner(System.in);      int n; //n层      int m; // m个区间      n = in.nextInt();      m = in.nextInt();      while(m&gt;0)      &#123;          m--;          int l,r,value ;          l = in.nextInt();          r = in.nextInt();          value = in.nextInt();          b[l+1]+=value;          b[r+1+1]-=value;      &#125;      for(int i=1; i&lt;=n; i++)          b[i]=b[i]+b[i-1];      int sum=0;      for(int i=1;i&lt;=n;i++)          sum+=b[i];  /*  也可以一次性搞定  int sum=a[0];  for(int i=1; i&lt;n; i++)&#123;  a[i]=a[i]+a[i-1];  sum+=a[i]  &#125;  */      System.out.println(sum);  &#125;&#125;\n前缀和前缀和法的应用主要也是用于处理区间问题。\n前缀和是指某序列的前 $n$ 项和，可以把它理解为数学上的数列的前 $n$ 项和。当对于某一数组区间进行多次询问，$[L,r]$ 的和时，如果正常处理，那么我们每次都要 $[l,r]$。查询 $N$ 次，那么时间复杂度也是 $O(nm)$ 也是平方阶的。\n如果我们采用前缀和，构造出一个前缀和数组，通过对于端点的值的减法操作就能 $O(1)$ 的求出 $[l,r]$ 的和。然后 $N$ 次查询的，就将复杂度降低为 $O(n)$。\n同差分一样，感觉操作变得更加复杂了，但是只用对端点值的操作确实比一整个区间相加的方法要优秀的多。听到这里大家很期待了，我们接着进行讲解。\n前缀和的特点：\n\n将对于区间的求和操作转化为对于端点值的减法的操作；\n区间求和操作的时间复杂度为 $O(1)$；\n数组存放时要从 $1$ 开始；\n前缀和数组比原来的数组序列多一个数，第 $0$ 个元素为 $0$。\n\n前缀和算法解题的基本思路：\n\n利用 $\\text{sum}[i]=a[i]+\\text{sum}[i-1]$ 差分式；\n从第 1 项到 $n$ 项，且第 $0$ 项无数据默认为 $0$；\n对于区间求和的操作转化为端点值相减。\n\n前缀和的一般解题过程：\n首先假设有一个数组：1 2 3 4 5 7 2前缀和后：0 1 3 6 10 15 22 24一般应用场景：让你对区间 [l,r] 求和操作N次如：从第二个元素到第五个元素的和从第二个元素到第四个元素的和从第一个元素到第三个元素的和....这里我们先演示前三个：对于每个 [l,r] 区间的求和操作转化为区间端点的加减操作sum[l,r] =[r]-[l-1]从第二个元素到第五个元素的和：转化为：[5]-[1]那么Sum[2,5]=[5]-[1]=14且 2+3+4+5=14确实是相等的，就是这么神奇。我们继续操作：从第二个元素到第四个元素的和转化为：[4]-[1]那么Sum[2,4]=[4]-[1]=9且 2+3+4=9我们继续操作：从第一个元素到第三个元素的和转化为：[3]-[0]那么Sum[1,3]=[3]-[0]=6且 1+2+3=6符合题意，验证结束，咱么做个题目看一看\n大学里的树木要维护题目描述:\n教室外有 $N$ 棵树，根据不同的位置和树种，学校已经对其进行了多年的维护。因为树的排列成线性，且非常长，我们可以将它们看作一条直线给他们编号。\n树的编号从 $1-N$ 且 $N&lt;1e6$。由于已经维护了多年，每一个树都由学校的园艺人员进行了维护费用的统计。\n每棵树的前期维护费用各不相同，但是由于未来需要要打药，所以有些树木的维护费用太高的话，就要重新种植。由于维护费用也称区间分布，所以常常需要统一个区间里的树木的维护开销。\n现在园艺人员想知道，某个区间内的树木维护开销是多少。共计 $M$ 个区间需要查询。\n输入描述:\n每组输入的第一行有两个整数 $N（1 &lt;= N&lt;= 1000000）$和 $M（1 &lt;= M &lt;= 100000）$。\n$N$ 代表马路的共计多少棵树，$M$ 代表区间的数目，$N$ 和 $M$ 之间用一个空格隔开。接下来的一行，包含 $N$ 个数，每个数之间用空格隔开。\n接下来的$M$行每行包含两个不同的整数，用一个空格隔开，表示一个区域的起始点$L$和终止点$R$的坐标。\n输入样例:\n10 37 5 6 4 2 5 0 8 5 31 52 63 7\n输出描述:\n输出包括 $M$ 行，每一行只包含一个整数，所有的花费。\n输出样例:\n242217\n样例:\n输入样例\n30 28172 723 580 822 718 798 941 625 450 716 540 252 16 666 115 679 274 323 875 233 99 538 881 486 610 462 319 878 930 7356 227 213 167 209 170 2113 277 1910 232 1421 2215 176 1316 2321 2111 155 129 118 2210 163 815 275 164 80 274 87 2120 21\n输出样例\n81406804791867053708106176576647262077847637106843383902991589504017066401298444845894651639041391339046804332\n运行限制:\n1. 最大运行时间：1s2. 最大运行内存：128M\n题目解析：\n\n利用$sum[i]=a[i]+sum[i-1]$ 前缀和式在输入时求出前缀和；\n依次读入区间的值，然后将对于区间的求和操作转化为对于区间端点操作加减，对于每个 [l,r] 区间的求和操作都转化为对端点[r]-[l-1]的操作。\n输出答案。\n\n前缀和一般解题过程：\n输 入 N 和 M输入 N 个值 并计算前缀和for( int i=1;i&lt;=N;i++)    输入a[i]    并计算sum[i]=sum[i-1]+a[i]输入 M 个区间，计算结果while(M)    M-=1    输入 L , R    计算 [r]-[l-1]，并输出\n答案解析C++ 代码：\n#include &lt;iostream&gt;using namespace std;int a[100005];int sum[100005];int main()&#123;    int n;    int m;    cin &gt;&gt; n &gt;&gt; m;    for (int i = 1; i &lt;= n; i++)    &#123;        cin &gt;&gt; a[i];        sum[i] = a[i] + sum[i - 1];    &#125;    while (m &gt; 0)    &#123;        m -= 1;        int l, r;        cin &gt;&gt; l &gt;&gt; r;        cout &lt;&lt; sum[r] - sum[l - 1] &lt;&lt; endl;    &#125;&#125;\n这个代码有个问题，虽然是能通过的，但是他是一个输入对应一个输出的，我们之前讲过，这对大部分的测评机是没问题。\n终端输出：\n10 37 5 6 4 2 5 0 8 5 31 5242 6223 717Process returned 0 (0x0)   execution time : 1.741 sPress any key to continue.\n但是如果有想要规规矩矩的处理，或者说题目要求必须全部读入后输出。我们可这样操作。\n#include&lt;bits/stdc++.h&gt;using namespace std;int a[100005];int sum[100005];vector&lt;int&gt;ss;int main()&#123;    int n ;    int m;    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=n;i++)    &#123;        cin&gt;&gt;a[i];        sum[i]=a[i]+sum[i-1];    &#125;    while(m&gt;0)    &#123;        m-=1;        int l,r;        cin&gt;&gt;l&gt;&gt;r;        ss.push_back(sum[r]-sum[l-1]);    &#125;    for(auto sss:ss) cout&lt;&lt;sss&lt;&lt;endl;&#125;\n终端输出：\n10 37 5 6 4 2 5 0 8 5 31 52 63 7242217Process returned 0 (0x0)   execution time : 6.235 sPress any key to continue.\n都可以，大家看自己需求和心情选择即可。\nPython 解题代码\n普通代码：\na = [0] * 100005sum1 = [0] * 100005if __name__ == &#x27;__main__&#x27;:    nm = input().split()    n = int(nm[0])    m = int(nm[1])    a = input().split()    a = list(map(int, a))    # split 分割后都是 字符 这里是转化成数字    #print(a)    for i in range(1, n + 1):        # print(i)        sum1[i] = sum1[i - 1]        sum1[i] += a[i - 1]  # 分割完后，a[]是从0开始,所以要减1    while m &gt; 0:        m -= 1        lrv = input().split()        l = int(lrv[0])        r = int(lrv[1])        print(sum1[r] - sum1[l - 1])\n特殊代码：\na = [0] * 100005sum1 = [0] * 100005if __name__ == &#x27;__main__&#x27;:    nm = input().split()    n = int(nm[0])    m = int(nm[1])    a = input().split()    a = list(map(int, a))    # split 分割后都是 字符 这里是转化成数字    # print(a)    for i in range(1, n + 1):        # print(i)        sum1[i] = sum1[i - 1]        sum1[i] += a[i - 1]  # 分割完后，a[]是从0开始,所以要减1    ans = []    while m &gt; 0:        m -= 1        lrv = input().split()        l = int(lrv[0])        r = int(lrv[1])        ans.append(sum1[r] - sum1[l - 1])    for i in ans:        print(i)\nJava 解题代码\n普通算法：\nimport java.util.Scanner;public class Main &#123;    static int a[]=new int [100005];    static int sum[]=new int [100005];    public static void main(String[] args) &#123;        Scanner in = new Scanner(System.in);        int n; //n层        int m; // m个区间        n = in.nextInt();        m = in.nextInt();        for(int i=1;i&lt;=n;i++)        &#123;            a[i]= in.nextInt();            sum[i]=a[i]+sum[i-1];        &#125;        while(m&gt;0)        &#123;            m--;            int l,r;            l = in.nextInt();            r = in.nextInt();            System.out.println((sum[r]-sum[l-1]));        &#125;    &#125;&#125;\n特殊代码：\nimport java.util.Scanner;import java.util.Vector;public class Main &#123;    static int a[]=new int [100005];    static int sum[]=new int [100005];    static Vector ans=new Vector&lt;Integer&gt;();    public static void main(String[] args) &#123;        Scanner in = new Scanner(System.in);        int n; //n层        int m; // m个区间        n = in.nextInt();        m = in.nextInt();        for(int i=1;i&lt;=n;i++)        &#123;             a[i]= in.nextInt();            sum[i]=a[i]+sum[i-1];        &#125;        while(m&gt;0)        &#123;            m--;            int l,r;            l = in.nextInt();            r = in.nextInt();            ans.addElement(sum[r]-sum[l-1]);        &#125;        for(Object ab:ans)&#123;            System.out.println(ab);        &#125;    &#125;&#125;\n总结我们这节课讲了差分和前缀和的知识点，并且也讲了怎样使用差分，怎样使前缀和，也讲了差分和前缀和最常见的两种情况。\n差分和前缀和是很多思维题的解题技巧，必须要掌握熟练才能拿到简单题目的全部分数。\n","categories":["蓝桥杯Note"],"tags":["蓝桥杯备赛","差分与前缀和"]},{"title":"手算与思维题","url":"/2024/03/10/%E6%89%8B%E7%AE%97%E4%B8%8E%E6%80%9D%E7%BB%B4%E9%A2%98/","content":"\n      \n        \n      \n      \n        \n          \n          \n            输入密码\n          \n        \n        \n      \n    \n    ","categories":["蓝桥杯Note"],"tags":["蓝桥杯备赛","手算与思维题"]},{"title":"并查集","url":"/2024/03/11/%E5%B9%B6%E6%9F%A5%E9%9B%86/","content":"并查集并查集是我认为最巧妙优雅的一种数据结构，他主要适用于解决元素分组和不相交集合的合并和查询问题。\n并查集也非常简单，但是，并查集在比赛中非常常用，能够极大的降低算法复杂度得数据结构，是必须要掌握熟练的。\n本节课的难度相对较低，无论是实现方式还是算法原理。\n知识点1.并查集的原理与实现方式 2.并查集的路径压缩 3.启发式合并\n并查集并查集是大量的树（单个节点也算是树）经过合并生成一系列家族森林的过程。\n每个集合也就是每棵树都是由根节点确定，也可以理解为每个家族的族长就是根节点。\n举个数字和字母的例子如下。\n初始森林：\n经过的一系列合并后的状态（不唯一，举个栗子）：\n\n最终合并后的状态：\n注：示意图的位置与存储物理位置无关，只代表逻辑关系。\n\n并查集的存储结构并查集采用数组表示整个森林，初始时每个森林的树根为自己。\nC++ 存储与初始化：\n# define Maxn 200// 假设所需数量为200int fa[Maxn+1]void init()&#123;    for(int i =0;i&lt;=Maxn; i++)        fa[i]=i;&#125;\nPython 存储与初始化：\nMaxn = 200# 假设所需的数量为200fa = []def init():    for i in range(Maxn + 1):        fa.append(i)\nJava 存储与初始化：\nstatic final int Maxn = 200;static int fa[]=new int[Maxn+1];static void init() &#123;    for(int i=0 ;i&lt;=Maxn;i++)        fa[i]=i;&#125;\n查询一般用递归法实现对代表元素的查询：递归访问父节点，直至根节点（根节点的标志就是父节点是本身）。\n根节点相同的两个元素属于同一个集合，上面也说到了。所以判断 A，B 是否属于一个集合直接判断 find(A)和 find(B)是否相同即可。\n由于代码比较简单，我们先给出查询的代码：\nC++ 查询：\nint find(int x)&#123;    if(fa[x] == x)        return x;    else        return find(fa[x]);&#125;\nPython 查询：\ndef find(x):    if fa[x] == x:        return x    else:        return find(fa[x])\nJava 查询：\nstatic  int find(int x)&#123;    if(fa[x] == x)        return x;    else        return find(fa[x]);&#125;\n我们这里有一个问题，当树的链很长时，比如：\n\n如果每次都查询最后一个，那么他就要经过多次递归，非常消耗时间，这时候我们就要引入路径压缩。\n路径压缩路径压缩是为了解决当树的高度过高的时候，提高查询时效的方法。\n解决方式也很简单，在递归的同时将路径压缩，那么上面的图经过一次查询后的效果如下。\n\n其实，实现方式也非常简单，只需要将查询代码修改即可，代码如下：\nC++ 查询带路径压缩：\nint find(int x)&#123;    if(x == fa[x])        return x;    else    &#123;        fa[x] = find(fa[x]);        //父节点设为根节点        return fa[x];        //返回父节点    &#125;&#125;\nPython 查询带路径压缩：\ndef find(x):    if fa[x] == x:        return x    else:        fa[x] = find(fa[x]);        #父节点设为根节点        return  fa[x]        # 返回父节点\nJava 查询带路径压缩：\nstatic  int find(int x)&#123;    if(x == fa[x])        return x;    else    &#123;        fa[x] = find(fa[x]);        //父节点设为根节点        return fa[x];        //返回父节点    &#125;&#125;\n合并合并的方式很简单，就是把一颗树的根节点设置为另一棵树的根节点即可。\n还有一种方式是按秩合并，但是我们使用路径压缩时间复杂度就已经很低了，如果在引入 rank 相对会有些复杂。而且对于我们的使用路径压缩一种方式就已经足够。并且路径压缩和按秩合并一起使用时会影响 rank 准确性，所以我们采用普通的合并与优化后的查找即可。\n\n合并后：\n\nC++ 合并：\nvoid merge(int i, int j)&#123;    fa[find(i)] = find(j);&#125;\nPython 合并：\ndef merge(x,y):    fa[find(x)] = find(y)\nJava 合并：\nstatic void merge(int i, int j)&#123;    fa[find(i)] = find(j);&#125;\n合并优化：\n除此之外还有一个优化是启发式合并，其实这个启发式是泛指有很多的合并算法都叫启发式合并，我们这里讲其中一种常用的启发式合并。合并时，选择哪棵树的根节点作为新树的根节点会影响未来操作的复杂度。我们可以按照子树大小去合并，小的合并到大的，以免发生退化。所以启发式合并的原理是在集合合并时将小的集合合并到大的集合里，也可以使 find 操作复杂度降低到  $O(logn)$，在集合合并时还要增加一个更新集合大小的操作。\nC++void merge(int x,int y)//启发式合并&#123;    x=find(x);    y=find(y);    if(x!=y)    &#123;        if(sz[x]&lt;sz[y])            swap(x,y);        sz[x]+=sz[y];        fa[y]=x;    &#125;&#125;Java    public void merge(int x, int y) &#123;        x = find(x);        y = find(y);        if (x != y) &#123;            if (sz[x] &lt; sz[y]) &#123;                swap(x, y);            &#125;            sz[x] += sz[y];            fa[y] = x;        &#125;    &#125;pythondef merge(x, y, sz, fa):    x = find(x, fa)    y = find(y, fa)    if x != y:        if sz[x] &lt; sz[y]:            swap(x, y, fa)        sz[x] += sz[y]        fa[y] = x\n如果是一般的并查集题目用路径压缩就可以了，当然两种优化都用的话复杂度可以降得更低。两种优化都使用的话单次操作的复杂度才是  $O(α)$\n并查集相关题目讲解合根植物题目链接\n难度: 简单\n标签: 并查集, 2017, 国赛\n题目描述:\nw 星球的一个种植园，被分成 m×n 个小格子（东西方向 m 行，南北方向 n 列）。每个格子里种了一株合根植物。这种植物有个特点，它的根可能会沿着南北或东西方向伸展，从而与另一个格子的植物合成为一体。如果我们告诉你哪些小格子间出现了连根现象，你能说出这个园中一共有多少株合根植物吗？\n输入描述:\n第一行，两个整数 m,n，用空格分开，表示格子的行数、列数（1≤m,n≤1000）。接下来一行，一个整数 k (0≤k≤105 )，表示下面还有 k 行数据。接下来 k 行，每行两个整数 a，b，表示编号为 a 的小格子和编号为 b 的小格子合根了。格子的编号一行一行，从上到下，从左到右编号。比如：5×4 的小格子，编号：\n\n\n\n\n行列\n①\n②\n③\n④\n\n\n\n\n①\n1\n2\n3\n4\n\n\n②\n5\n6\n7\n8\n\n\n③\n9\n10\n11\n12\n\n\n④\n13\n14\n15\n16\n\n\n⑤\n17\n18\n19\n20\n\n\n\n\n输出描述:\n输出植物数量。\n输入输出样例:\n示例:\n输入:\n5 4162 31 55 94 87 89 1010 1111 1210 1412 1614 1817 1815 1919 209 1313 17\n输出:\n5\n样例图例如下：\n\n运行限制:\n最大运行时间：1s 最大运行内存: 256M\n题目解析：\n这个题就是一个模板并查集的题目，每次合根就是一次 Merge。\n最后答案就是看有多少个根即可，那么就是看有多少个fa[x]=x即可。\n直接按照题目编写即可，部分解析直接写进题目。\n答案解析：\nC++ 描述：\n#include &lt;bits/stdc++.h&gt;using namespace std;# define Maxn 2000000// 假设所需数量为200int fa[Maxn+1];void init()&#123;    for(int i =0; i&lt;=Maxn; i++)        fa[i]=i;&#125;int find(int x)&#123;    if(x == fa[x])        return x;    else    &#123;        fa[x] = find(fa[x]);        //父节点设为根节点        return fa[x];        //返回父节点    &#125;&#125;void merge(int i, int j)&#123;    fa[find(i)] = find(j);&#125;int n,m; //n行，m列int k; //k次合根int main()&#123;    init();    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;    int a,b;    for(int i=1; i&lt;=k; i++)    &#123;        cin&gt;&gt;a&gt;&gt;b;        merge(a,b); //合根    &#125;    int ans=0;    for(int i=1; i&lt;=n*m; i++)    &#123;        if(fa[i]==i) //找根节点        &#123;            ans++;        &#125;    &#125;    cout&lt;&lt;ans;    return 0;&#125;\nPython 描述：\nMaxn = 2000000# 假设所需的数量为200fa = []def init():    for i in range(Maxn + 1):        fa.append(i)def find(x):    if fa[x] == x:        return x    else:        fa[x] = find(fa[x])        #父节点设为根节点        return  fa[x]        # 返回父节点def merge(x,y):    fa[find(x)] = find(y)if __name__ == &#x27;__main__&#x27;:    n,m=input().split()    k=input()    n=int(n)    m=int(m)    k=int(k)    Maxn=m*n+100    init()    for _ in range(k):        a,b= input().split()        a=int(a)        b=int(b)        merge(a,b)    ans=0    for i in range(m*n): #从0开始        index=i+1 #调整一下，应该是从1开始        if(fa[index]==index):            ans+=1    print(ans)\nJava 描述：\nimport java.util.Scanner;public class Main &#123;    static  int Maxn;    static int fa[];    static void init() &#123;        for(int i=0 ;i&lt;=Maxn;i++)            fa[i]=i;    &#125;    static  int find(int x)    &#123;        if(x == fa[x])            return x;        else        &#123;            fa[x] = find(fa[x]);            //父节点设为根节点            return fa[x];            //返回父节点        &#125;    &#125;    static void merge(int i, int j)    &#123;        fa[find(i)] = find(j);    &#125;    static int n,m; //n行，m列    static int k; //k次合根    public static void main(String[] args) &#123;        Scanner in = new Scanner(System.in);        n=in.nextInt();        m=in.nextInt();        k=in.nextInt();        Maxn=m*n;        fa=new int[Maxn+100];        init();        int a,b;        for(int i=1; i&lt;=k; i++)        &#123;            a=in.nextInt();            b=in.nextInt();            merge(a,b);        &#125;        int ans=0;        for(int i=1; i&lt;=n*m; i++)        &#123;            if(fa[i]==i)            &#123;                ans++;            &#125;        &#125;        System.out.println(ans);    &#125;&#125;\n修改数组题目链接\n难度: 中等\n标签: 并查集, 2019, 省赛\n题目描述: 给定一个长度为 $N$ 的数组 $A = [A_1,A_2,··· ,A_N]$，数组中有可能有重复出现的整数。\n现在小明要按以下方法将其修改为没有重复整数的数组。小明会依次修改$A_2,A_3,··· ,A_N$。\n当修改 $A_i$ 时，小明会检查 $A_i$ 是否在 $A_1$ ∼ $A_i−1$ 中出现过。如果出现过，则小明会给 $A_i$ 加上 1 ；如果新的 $A_i$ 仍在之前出现过，小明会持续给 $A_i$ 加 1 ，直 到 $A_i$ 没有在 $A_1$ ∼ $A_i−1$ 中出现过。\n当 $A_N$ 也经过上述修改之后，显然 $A$ 数组中就没有重复的整数了。\n现在给定初始的 $A$ 数组，请你计算出最终的 $A$ 数组。\n输入:\n第一行包含一个整数 $N$。\n第二行包含 $N$ 个整数 $A_1,A_2,··· ,A_N$。\n其中，$1  \\leq  N  \\leq  10^5，1  \\leq  A_i  \\leq  10^6$。\n输出：\n输出 $N$ 个整数，依次是最终的 $A_1,A_2,··· ,A_N$。\n输入输出样例:\n输入\n52 1 1 3 4\n输出\n2 1 3 4 5\n运行限制:\n最大运行时间：1s 最大运行内存: 128M\n题目解析：\n第一步，先初始化并查集。\n第二步，读入数组并作如下处理：\n如果这数字在之前没出现过那么他的值应该就是自己，并将其加入集合，此后再出现这个数字那么就要输出这个数字加 $1$，所以将这个数字的根节点设置为这个数字$+1$ 即可。\n如果这个数字之前出现过那么这个数字应该变成根节点的值，根节点的值是之前出现过的值加$+1$。\n然后重复简单的逻辑即可，现在是维护一个之前出现过的集合，每个出现过的数字会把根节点设置为比他大 $1$ 的数字，重复这个过程即可完成题意。\n我们之前说过，因为输入输出是分开的，这里直接输出就行，不必在使用数组存储。\n比如样例：\n2 1 1 3 4首先因为 2 没出现过现在，所以初始化后的 fa[2] 等于2所以直接输出2 即可。此时 2 已经出现过了，下次遇见2就要输出3，所以这里我们使fa[2]等于3或者使用merge(2,3);然后输入1，因为1 也没有出现过，所以重复 2 的操作即可。输出fa[1]。令fa[1]=2，但是fa[2]=3,因为2也出现过这样fa[1]=fa[2]=3当然这里只需要执行merge(2,3)然后输入1，因为1 之前出现过，而且他的值我们之前也处理好了，直接输出即可。输出fa[1],即3。使用merge(3,4)然后重复上述过程，代码如下：        输入X :Input(X)        找到根节点: X=find(X);        输出应该是多少：Print(X)        将根节点加+1处理：merge(X,X+1);\n答案解析：\nC++ 描述：\n #include &lt;bits/stdc++.h&gt;using namespace std;# define Maxn 2000000// 假设所需数量为2000000int fa[Maxn+1];void init()&#123;    for(int i =0; i&lt;=Maxn; i++)        fa[i]=i;&#125;int find(int x)&#123;    if(x == fa[x])        return x;    else    &#123;        fa[x] = find(fa[x]);        //父节点设为根节点        return fa[x];        //返回父节点    &#125;&#125;void merge(int i, int j)&#123;    fa[find(i)] = find(j);&#125;int main()&#123;    init();    int n;    cin&gt;&gt;n;    for(int i=0; i&lt;n; i++)    &#123;        int t;        cin&gt;&gt;t;        t=find(t);        cout&lt;&lt;t&lt;&lt;&quot; &quot;;        merge(t,t+1);    &#125;    return 0;&#125;\nPython 描述：\nMaxn = 2000000# 假设所需的数量为200fa = []def init():    for i in range(Maxn + 1):        fa.append(i)def find(x):    if fa[x] == x:        return x    else:        fa[x] = find(fa[x]);        #父节点设为根节点        return  fa[x]        # 返回父节点def merge(x,y):    fa[find(x)] = find(y)if __name__ == &#x27;__main__&#x27;:    n=input()    A=input().split()    A=list(map(int,A))    Maxn=len(A)+100    init()    for i in range(len(A)):        t=find(A[i])        print(t,end=&quot; &quot;)        merge(t,t+1)\nJava 描述：\nimport java.util.Scanner;public class Main &#123;    static  int Maxn=1000005;    static int fa[];    static void init() &#123;        for(int i=0 ;i&lt;=Maxn;i++)            fa[i]=i;    &#125;    static  int find(int x)    &#123;        if(x == fa[x])            return x;        else        &#123;            fa[x] = find(fa[x]);            //父节点设为根节点            return fa[x];            //返回父节点        &#125;    &#125;    static void merge(int i, int j)    &#123;        fa[find(i)] = find(j);    &#125;    static int n,m; //n行，m列    static int k; //k次合根    public static void main(String[] args) &#123;        Scanner in = new Scanner(System.in);        n=in.nextInt();        fa=new int[Maxn+100];        init();        for(int i=1; i&lt;=n; i++)        &#123;            int t;            t=in.nextInt();            t=find(t);            System.out.print(t+&quot; &quot;);            merge(t,t+1);        &#125;    &#125;&#125;\n总结并查集的思想非常简单，但是我们也看到了题目有点复杂，稍微一点改变就是另一种方向。并查集代码实现非常简单，但重点还是看对于题目的把握，这个数据结构不仅直接出题目，并且也会杂糅到别的算法里面，所以他的应用非常广泛，需要我们牢牢地掌握。\n","categories":["蓝桥杯Note"],"tags":["蓝桥杯备赛","并查集"]},{"title":"搜索算法","url":"/2024/03/10/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/","content":"深度优先搜索Depth First Search 即 DFS，意为深度优先搜索，是所有的搜索手段之一。它是从某个状态开始，不断进行状态转移，直到不能转移后，向后回退，一直到遍历完所有的状态。\n本章题目难度较大，请大家仔细研读讲解和代码。\n知识点1.DFS 算法设计原理与实现方法 2.经典题型精讲\n深度优先搜索基本概念作为搜索算法的一种，DFS 主要是用于解决 NP 完全问题。但是，深度优先搜索算法的时间复杂度较高，深度优先搜索是 $O(n!)$ 的阶乘级算法，它的效率非常低，在数据规模变大时，此算法就难以解决当前的问题了。\n所以搜索算法使用于状态节点较小规模的问题。\nDFS 的设计步骤按照定义设计：\n\n确定该题目的状态（包括边界）\n\n找到状态转移方式\n\n找到问题的出口，计数或者某个状态\n\n设计搜索\n\n\n伪代码：\nint check(参数)&#123;    if(满足条件)        return 1;    return 0;&#125;bool pd(参数)&#123;    相应操作&#125;void dfs(int step)&#123;        判断边界pd()        &#123;            不在边界内，即回溯        &#125;        尝试每一种可能        &#123;               满足check条件               标记               继续下一步dfs(step+1)               恢复初始状态（回溯的时候要用到）        &#125;&#125;\nDFS 题目讲解状态搜索代表： N 皇后问题题目链接\n难度: 简单\n标签: DFS\n题目描述:\n在 $N\\times N$ 的方格棋盘放置了 $N$ 个皇后，使得它们不相互攻击（即任意 $2$ 个皇后不允许处在同一排，同一列，也不允许处在与棋盘边框成 $45$ 角的斜线上。你的任务是，对于给定的 $N$，求出有多少种合法的放置方法。\n输入描述:\n输入中有一个正整数 $N≤10$，表示棋盘和皇后的数量\n输出描述:\n为一个正整数，表示对应输入行的皇后的不同放置数量。\n输入输出样例:\n示例:\n输入:\n5\n输出:\n10\n运行限制:\n最大运行时间：1s 最大运行内存: 256M\n解题思路:\n下面是用递归的深度优先搜索求解 $n$ 皇后问题的算法描述：\n这里用一个 $N \\times N$ 的矩阵来表示棋盘，但是我们不需要定义这样的数组，只要心中有 $N \\times N$ 的期盼即可。\n\n算法开始：\n当前行设为第一行，当前列设为第一列，从第一行第一列开始搜索，即只能让皇后从第一行放到第 $n$ 行。\n这样在每次判断是否满足情况时我们不用去判断是否皇后在相同行。\n我们只用判断之前的 $1$ 到 $a-1$ 个皇后的位置和当前第 $a$ 个皇后的位置是否属于同一列或者斜线，判断是否同一列。\n\n判断边界：\n在当前行，当前列的位置上判断是否满足条件(即保证经过这一点的行,列与斜线上都没有两个皇后)，若不满足，跳到第 $5$ 步，即不符合边界条件。\n首先说一下，什么叫不符合边界条件，不只是跳出了搜索范围，剪枝也可以从这里开始，比如这里不满足条件，向下继续搜索也不会再有结果。\n这可以理解为超出边界的剪枝，我们的边界只得可能存在解的范围，这里已经超出有解的范围，必然要被踢出。\n判断条件：\n我们用数组 $x[a]=i$ 来表示第 $a$ 个皇后的位置在第 $a$ 行第 $i$ 列，我们不用考虑是否在同一行的问题你，我们只用判断之前的 $1$ 到 $a-1$ 个皇后的位置和当前第 $a$ 个皇后的位置是否属于同一列或者斜线。\n判断是否属于同一列： 就判断 $x[a]$ 是否等于 $x[i]$; 判断是否属于同一斜线：等同于判断行之差是否等于列之差也，即 $abs(x[k]-x[i]) \\neq abs(k-i)$。\n\n搜索过程：\n调用 Check 函数。\n如果 边界条件，就继续调用放下一个皇后的位置\n\nCheck 函数:\n如果当搜索到第 $N+1$ 行的时候，即代表前 $N$ 行已经搜索完了，所以这个时候正好求出了一个解，记录加一。\n\n在当前位置上不满足条件的情形，进行回溯。\n\n\nC++ 语言描述:\n#include &lt;iostream&gt;#include &lt;cstdio&gt;using namespace std;int x[15] = &#123;0&#125;;int sum,n;int PD(int k)&#123;    for(int i=1; i&lt;k; i++)    &#123;        if(abs(k-i)==abs(x[k]-x[i]))            return 0;        else if (x[k]==x[i])            return 0;        //即判断是否符合条件来放,i表示皇后所在的行数，x[i]表示所在的列数，        //所以前面那个条件用来判断两个皇后是否在对角线上,后面用来判断是否在同一列上。        //行数不需要判断，因为他们本身的i就代表的是行数    &#125;    return 1;&#125;bool check(int a)&#123;    if(a&gt;n)        sum++;    else        return 0;    return 1;&#125;void DFS(int a)&#123;    if(check(a))        return ;    else        for(int i=1; i&lt;=n; i++)        &#123;            x[a]=i;                //第a个皇后放的列数            if(PD(a))                    //判断是否能放这步                DFS(a+1);                    //能的话进行下一个皇后的放置            else continue ;                    //不能就下一列        &#125;&#125;int main()&#123;    cin&gt;&gt;n;    //表示几个皇后    DFS(1);    //每次都从第一个皇后开始    cout&lt;&lt;sum&lt;&lt;endl;    return 0;&#125;\nPython 语言描述：\n x = [0] * 15n = 0sum = 0def pd(k):    for i in range(1, k):        if abs(k - i) == abs(x[k] - x[i]):            return 0        elif x[k] == x[i]:            return 0        # 即判断是否符合条件来放,i表示皇后所在的行数，x[i]表示所在的列数，        # 所以前面那个条件用来判断两个皇后是否在对角线上,后面用来判断是否在同一列上。        # 行数不需要判断，因为他们本身的i就代表的是行数    return 1def check(a):    if a &gt; n:        global sum        sum += 1    else:        return False    return Truedef DFS(a):    if check(a):        return    else:        for i in range(1, n + 1):            x[a] = i            # 第a个皇后放的列数            if pd(a):                # 判断是否能放这步                DFS(a + 1)                # 能的话进行下一个皇后的放置            else:                continue                #   不能就下一列if __name__ == &#x27;__main__&#x27;:    n = int(input())    # 不能就下一列    DFS(1)    # 每次都从第一个皇后开始    print(sum)\nJava 语言描述:\nimport java.util.Scanner;import static java.lang.Math.abs;public class Main &#123;    static int x[] = new int[15];    static int sum, n;    static boolean PD(int k) &#123;        for (int i = 1; i &lt; k; i++) &#123;            if (abs(k - i) == abs(x[k] - x[i]))                return false;            else if (x[k] == x[i])                return false;            //即判断是否符合条件来放,i表示皇后所在的行数，x[i]表示所在的列数，            //所以前面那个条件用来判断两个皇后是否在对角线上,后面用来判断是否在同一列上。            //行数不需要判断，因为他们本身的i就代表的是行数        &#125;        return true;    &#125;    static boolean check(int a) &#123;        if (a &gt; n)            sum++;        else            return false;        return true;    &#125;    static void DFS(int a) &#123;        if (check(a))            return;        else            for (int i = 1; i &lt;= n; i++) &#123;                x[a] = i;                //第a个皇后放的列数                if (PD(a))                    //判断是否能放这步                    DFS(a + 1);                    //能的话进行下一个皇后的放置                else continue;                //不能就下一列            &#125;    &#125;    public static void main(String[] args) &#123;        Scanner in = new Scanner(System.in);        n = in.nextInt();        //表示几个皇后        DFS(1);        //每次都从第一个皇后开始        System.out.println(sum);    &#125;&#125;\n图的路径搜索代表-路径之谜题目链接\n难度: 中等\n标签: DFS, 2016, 国赛\n题目描述:\n小明冒充 $X$ 星球的骑士，进入了一个奇怪的城堡。\n城堡里边什么都没有，只有方形石头铺成的地面。\n假设城堡地面是 $n \\times n$ 个方格。如下图所示。\n\n按习俗，骑士要从西北角走到东南角。可以横向或纵向移动，但不能斜着走，也不能跳跃。每走到一个新方格，就要向正北方和正西方各射一箭。（城堡的西墙和北墙内各有 $n$ 个靶子）同一个方格只允许经过一次。但不必走完所有的方格。如果只给出靶子上箭的数目，你能推断出骑士的行走路线吗？有时是可以的，比如上图中的例子。\n本题的要求就是已知箭靶数字，求骑士的行走路径（测试数据保证路径唯一）\n输入:\n第一行一个整数 $N$ ($0  \\leq  N  \\leq  20$)，表示地面有 $N \\times N$ 个方格。\n第二行 $N$ 个整数，空格分开，表示北边的箭靶上的数字（自西向东）\n第三行 $N$ 个整数，空格分开，表示西边的箭靶上的数字（自北向南）\n输出：\n输出一行若干个整数，表示骑士路径。\n为了方便表示，我们约定每个小格子用一个数字代表，从西北角开始编号: 0,1,2,3 $\\cdots$\n输入输出样例：\n输入\n42 4 3 44 3 3 3\n比如，上图中的方块编号为：\n\n\n\n\n箭靶\n2\n4\n3\n4\n\n\n\n\n4\n0\n1\n2\n3\n\n\n3\n4\n5\n6\n7\n\n\n3\n8\n9\n10\n11\n\n\n3\n12\n13\n14\n15\n\n\n\n\n输出\n0 4 5 1 2 3 7 11 10 9 13 14 15\n运行限制:\n最大运行时间：1s 最大运行内存: 128M\n解题思路:\n这里用一个 $N \\times N$ 的矩阵来表示城堡的位置，横向、纵向标号 $1-N$。\n我们采用逆推法，既然原题目是走到哪里射一支箭，那我们就走到那里之后拔一支箭，如果最后得到所有的靶子上都没有箭了，由于题目的路径唯一，那就证明我们找到了题目所要求的路径。\n\n算法开始：\n当前行设为第一行，当前列设为第一列，从第一行第一列开始搜索。\n然后从左上角初始位置，按照题目意思进行寻路。\n\n判断边界：\n在当前行，当前列的位置上判断是否满足条件，若不满足，跳到第 $5$ 步，即不符合边界条件。 判断条件如下：\n\n$flag[x][y]$\\==1 标记数组已经被标记,已被走过，不能再走，超出边界\n$x&lt;1$ 从左侧走出方格。\n$x&gt;n$ 从右侧走出方格。\n$y&lt;1$ 从上侧走出方格。\n$y&gt;n$ 从下侧走出方格。\n$col[x]&lt;=0$ 没走到右下角，箭用完了。\n$rol[y]&lt;=0$ 没走到右下角，箭用完了\n\n\n搜索过程：\n调用 Check 函数。 如果边界条件满足，就继续调用搜索，找到下一步的位置\n\ncheck(参数):\n如果当搜索到 $x=n,y=n$ 时，且靶子上的箭都没了，按就找到了答案。\n按照题目输出即可。\n\n在当前位置上不满足条件的情形，进行回溯，并还原现场\n\n\nC++ 语言描述:\n#include &lt;bits/stdc++.h&gt;using namespace std;struct PII&#123;    int first;    int second;&#125;;const int N = 30;int rol[N];int col[N];int n;//格子数 长宽从1到nbool flag[N][N]; //用来标记是否走过vector&lt;PII&gt; res;//---------图的路径搜索常用方向移动表示-------int dx[4]= &#123;0,1,-1,0&#125;;int dy[4]= &#123;1,0,0,-1&#125;;// 两两组合形成上下左右四个方向//      1------------------&gt; x//      |//      |//      |//      |//      |//      |//      |//      ↓//      y// dx[0]=0 dy[0]=1 那么代表向下的方向// dx[1]=1 dy[1]=0 那么代表向右的方向// dx[2]=-1 dy[0]=0 那么代表向左的方向// dx[3]=0 dy[1]=-1 那么代表向上的方向//--------------------------------------------bool  check(int x, int y) //判断走过的路径的箭靶数是否与目标相同&#123;    if(x==n &amp;&amp; y==n)    &#123;        for(int i=1; i&lt;=n; i++)        &#123;            if(col[i]!=0)            &#123;                return false;            &#125;            //如果箭靶上的数目不为0，根据逆推，我们通过当前路径得不到箭靶上的结果        &#125;        for(int i=1; i&lt;=n; i++)        &#123;            if(rol[i]!=0)            &#123;                return false;            &#125;            //如果箭靶上的数目不为0，根据逆推，我们通过当前路径得不到箭靶上的结果        &#125;        for(int i=0; i&lt;res.size(); i++)        &#123;            int x=res[i].first;            //x 轴坐标            int y=res[i].second;            //y 轴坐标            int sum=n*(x-1)+y-1 ;            // 通过计算的到为题目要求的坐标系            cout &lt;&lt;sum&lt;&lt; &quot; &quot;;        &#125;        cout &lt;&lt; endl;        return false;        // 成功终止    &#125;    return true; //继续搜索    //关于终止还是继续我们交给判定即可&#125;bool pd(int x2,int y2) //边界判断&#123;    if(flag[x2][y2]==1)        return 0;    //已被走过，不能再走，超出边界    else if(x2&lt;1)        return 0;    //从左侧走出方格    else if(x2&gt;n)        return 0;    //从右侧走出方格    else if(y2&lt;1)        return 0;    //从上侧走出方格    else if(y2&gt;n)        return 0;    //从下侧走出方格    else if(col[x2]&lt;=0)        return 0;    //没走到右下角，箭用完了    else if(rol[y2]&lt;=0)        return 0;    //没走到右下角，箭用完了    else return 1;    //符合边界条件，可以继续执行搜索&#125;void dfs(int x,int y)&#123;    if(!check(x,y))    &#123;        return ;        //包含不符合规则的地方，回溯，用于剪枝    &#125;    else    &#123;        for(int i=0; i&lt;4; i++)        &#123;            int xt=dx[i]+x;            int yt=dy[i]+y;            if(!pd(xt,yt))            &#123;                continue ;                //不符合要求继续换方向搜索            &#125;            else            &#123;                //因为要进行位置转移，我们给它起个名字，叫作案现场                //比如向下移动                flag[xt][yt]=true;                col[xt]--;                rol[yt]--;                res.push_back(&#123;xt,yt&#125;);                dfs(xt,yt);                //搜索回溯后，因为没有找到正确答案，所以要回复作案现场，返回到搜索之前                res.pop_back();                flag[xt][yt]=false;                col[xt]++;                rol[yt]++;            &#125;        &#125;    &#125;&#125;int main()&#123;    cin &gt;&gt; n;    for(int i=1; i&lt;=n; i++)        cin &gt;&gt; rol[i];    for(int i=1; i&lt;=n; i++)        cin &gt;&gt; col[i];    flag[1][1]=true;    col[1]--;    rol[1]--;    res.push_back(&#123;1,1&#125;);    dfs(1,1);    return 0;&#125;\nPython 语言描述:\nn = 0flag = [[0 for i in range(26)] for i in range(27)]resX = [0 for i in range(1000)]resY = [0 for i in range(1000)]resCount = 0# ---------图的路径搜索常用方向移动表示-------dx = [0, 1, -1, 0]dy = [1, 0, 0, -1]# 两两组合形成上下左右四个方向#      1------------------&gt; x#      |#      |#      |#      |#      |#      |#      |#      ↓#      y# dx[0]=0 dy[0]=1 那么代表向下的方向# dx[1]=1 dy[1]=0 那么代表向右的方向# dx[2]=-1 dy[0]=0 那么代表向左的方向# dx[3]=0 dy[1]=-1 那么代表向上的方向# --------------------------------------------def check(x, y):    global n    if x == n &amp; y == n:        # print(&quot;check point1&quot;)        for i in range(1, n + 1):            if (col[i] != 0):                return False                # 如果箭靶上的数目不为0，根据逆推，我们通过当前路径得不到箭靶上的结果        for i in range(1, n + 1):            if (rol[i] != 0):                return False        for i in range(0, resCount):            x2 = resX[i]            # x 轴坐标            y2 = resY[i]            # y 轴坐标            sum = n * (x2 - 1) + y2 - 1            # 通过计算的到为题目要求的坐标系            print(sum, end=&quot; &quot;)        return False        # 成功终止    else:        return True  # 继续搜索        # 关于终止还是继续我们交给判定即可def pd(x2, y2):    global n    # print(&quot;x2 :&quot;, x2,&quot;y2 :&quot;, y2, &quot; n &quot;, n)    if flag[x2][y2] == 1:        # print(&quot;checkPoint3&quot;)        return False        # 已被走过，不能再走，超出边界    elif x2 &lt; 1:        # print(&quot;checkPoint5&quot;)        return False    # 从左侧走出方格    elif x2 &gt; n:        # print(&quot;checkPoint6&quot;)        return False    # 从右侧走出方格    elif col[x2] &lt;= 0:        # print(&quot;checkPoint8&quot;)        return False    # 没走到右下角，箭用完了    elif y2 &lt; 1:        # print(&quot;checkPoint7&quot;)        return False    # 从上侧走出方格    elif y2 &gt; n:        # print(&quot;y2 :&quot;,y2,&quot; n &quot;,n)        return False    # 从下侧走出方格    elif rol[y2] &lt;= 0:        # print(&quot;checkPoint9&quot;)        return False    # 没走到右下角，箭用完了    else:        return True# 符合边界条件，可以继续执行搜索def dfs(x, y):    if not check(x, y):        return    # 包含不符合规则的地方，回溯，用于剪枝    else:        for i in range(0, 4):            xt = dx[i] + x            yt = dy[i] + y            # print(xt, yt)            if not pd(xt, yt):                # print(&quot;CheckPoint&quot;, xt, yt)                continue                # 不符合要求继续换方向搜索            else:                # 因为要进行位置转移，我们给它起个名字，叫作案现场                # 比如向下移动                col[xt] -= 1                rol[yt] -= 1                flag[xt][yt] = 1                global resCount                resX[resCount] = xt                resY[resCount] = yt                resCount += 1                # print(&quot;---------123-------&quot;)                # print(flag)                # print(&quot;----------------&quot;)                dfs(xt, yt)                # 搜索回溯后，因为没有找到正确答案，所以要回复作案现场，返回到搜索之前                resCount -= 1                flag[xt][yt] = 0                # print(&quot;--------321--------&quot;)                # print(flag)                # print(&quot;----------------&quot;)                col[xt] += 1                rol[yt] += 1if __name__ == &#x27;__main__&#x27;:    n = int(input())    # print(&quot;----------------&quot;)    # print(flag)    # print(&quot;----------------&quot;)    rol = input().split()    rol = list(map(int, rol))    rol = [0] + rol    col = input().split()    col = list(map(int, col))    col = [0] + col    flag[1][1] = 1    # print(&quot;----------------&quot;)    # print(flag)    # print(&quot;----------------&quot;)    col[1] -= 1    rol[1] -= 1    resX[resCount] = 1    resY[resCount] = 1    resCount += 1    dfs(1, 1)\n然而需要注意的是上面代码会超时，我们要对其进行优化，因为同样的计算 Python 运行时间相比 C++ 要长很多，这里给 C++ 和 Python 相同的时间，确实是难为 Python 了。 因为上面是为了给大家系统的将一个框架，而这道题目的时间复杂度相对较高，Python 的运行时间是 C++ 10 倍甚至几十倍，这个题目，同样的复杂度，Python 给的时间是不好通过这个题目的，我优化了十几遍，确实通过不了。\nJava 语言描述:\nimport java.util.Scanner;import java.util.Vector;import static java.lang.Math.abs;public class Main &#123;    static final int N = 30;    static int rol[]=new int [N];    static int col[]=new int [N];    static int n;//格子数 长宽从1到n    static  boolean flag[][]=new boolean[N][N]; //用来标记是否走过    static int resX[]=new int [1000];    static int resY[]=new int [1000];    static int resCount=0;//---------图的路径搜索常用方向移动表示-------    static int dx[]= &#123;0,1,-1,0&#125;;    static  int dy[]= &#123;1,0,0,-1&#125;;// 两两组合形成上下左右四个方向//      1------------------&gt; x//      |//      |//      |//      |//      |//      |//      |//      ↓//      y// dx[0]=0 dy[0]=1 那么代表向下的方向// dx[1]=1 dy[1]=0 那么代表向右的方向// dx[2]=-1 dy[0]=0 那么代表向左的方向// dx[3]=0 dy[1]=-1 那么代表向上的方向//--------------------------------------------    static boolean  check(int x, int y) //判断走过的路径的箭靶数是否与目标相同    &#123;        if(x==n &amp;&amp; y==n)        &#123;            for(int i=1; i&lt;=n; i++)            &#123;                if(col[i]!=0)                &#123;                    return false;                &#125;                //如果箭靶上的数目不为0，根据逆推，我们通过当前路径得不到箭靶上的结果            &#125;            for(int i=1; i&lt;=n; i++)            &#123;                if(rol[i]!=0)                &#123;                    return false;                &#125;                //如果箭靶上的数目不为0，根据逆推，我们通过当前路径得不到箭靶上的结果            &#125;            for(int i=0; i&lt;resCount; i++)            &#123;                int x2= resX[i];                //x 轴坐标                int y2=resY[i];                //y 轴坐标                int sum=n*(x2-1)+y2-1 ;                // 通过计算的到为题目要求的坐标系                System.out.print(sum+&quot; &quot;);            &#125;            System.out.println();            return false;            // 成功终止        &#125;        return true; //继续搜索        //关于终止还是继续我们交给判定即可    &#125;    static boolean pd(int x2,int y2) //边界判断    &#123;        if(flag[x2][y2] )            return false;            //已被走过，不能再走，超出边界        else if(x2&lt;1)            return false;            //从左侧走出方格        else if(x2&gt;n)            return false;            //从右侧走出方格        else if(y2&lt;1)            return false;            //从上侧走出方格        else if(y2&gt;n)            return false;            //从下侧走出方格        else if(col[x2]&lt;=0)            return false;            //没走到右下角，箭用完了        else if(rol[y2]&lt;=0)            return false;            //没走到右下角，箭用完了        else return true;        //符合边界条件，可以继续执行搜索    &#125;    static void dfs(int x,int y)    &#123;        if(!check(x,y))        &#123;            return ;            //包含不符合规则的地方，回溯，用于剪枝        &#125;        else        &#123;            for(int i=0; i&lt;4; i++)            &#123;                int xt=dx[i]+x;                int yt=dy[i]+y;                if(!pd(xt,yt))                &#123;                    continue ;                    //不符合要求继续换方向搜索                &#125;                else                &#123;                    //因为要进行位置转移，我们给它起个名字，叫作案现场                    //比如向下移动                    flag[xt][yt]=true;                    col[xt]--;                    rol[yt]--;                    resX[resCount]=xt;                    resY[resCount++]=yt;                    dfs(xt,yt);                    //搜索回溯后，因为没有找到正确答案，所以要回复作案现场，返回到搜索之前                    resCount--;                    flag[xt][yt]=false;                    col[xt]++;                    rol[yt]++;                &#125;            &#125;        &#125;    &#125;    public static void main(String[] args) &#123;        Scanner in = new Scanner(System.in);        n = in.nextInt();        for(int i=1; i&lt;=n; i++)            rol[i]=in.nextInt();        for(int i=1; i&lt;=n; i++)             col[i]=in.nextInt();        flag[1][1]=true;        col[1]--;        rol[1]--;        resX[resCount]=1;        resY[resCount++]=1;        dfs(1,1);    &#125;&#125;\n最大数字给定一个正整数 $N$ 。你可以对 $N$ 的任意一位数字执行任意次以下 $2$ 种操 作：\n\n将该位数字加 $1$ 。如果该位数字已经是 $9$ , 加 $1$ 之后变成 $0$ 。\n\n将该位数字减 $1$ 。如果该位数字已经是 $0$ , 减 $1$ 之后变成 $9$ 。\n\n\n你现在总共可以执行 $1$ 号操作不超过 $A$ 次, $2$ 号操作不超过 $B$ 次。 请问你最大可以将 $N$ 变成多少?\n解题思路:\n看上去 $N$ 的范围貌似很大，达到了 1e17 的范围，但其实我们最多只需要考虑这最多 17 位数，所以可以想到爆搜得到答案。\n一个数的大小是从左到右依次判断，所以我们从最左边开始枚举，我们无需关注后面的数，要利用自己的 1 号操作和 2 号操作 保证当前这个数位的数一定要尽可能最大\n然后分别考虑两种操作，首先两种操作不可能混用，因为它们是抵消的效果，所以要么对这个数全使用 1 操作，要么 2 操作。假设某个数位的值为 x,首先考虑 1 号操作，使用后可以让该数位变大，出于贪心考虑，我们想让它变成 9，那么需要进行 9-x 次 1 号操作，当然可能此时 1 号操作并不足以让我们将 x 变成 9，但我们还是使用剩余的全部的次数将其变大，所以每次考虑 1 号操作应该使用的操作数 t 应该为 t=min(n,9-x),此时 x 将变为 x+t，然后进行下一位的判断。\n其次我们考虑 2 号操作，这个的判断比较简单，它是让某个值减小，唯一能让某个数变大的机会就是将其减到 0 后再减就会变成 9。那么这样操作需要的次数就是 x+1，如果操作次数不够，那我们宁愿不使用，因为这只会让这个数位变得更小。\n在深搜 dfs 的过程中，参数记录遍历到第几个数位以及此时累计的和，当搜索完所有数位后，将此时的和与答案进行一个取 max，最后的值则为答案。\nC++ 语言描述：\n#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long LL;char c[20];LL ans=0;//n:1号操作剩余次数  m:2号操作剩余次数int n,m;void dfs(int i,LL v)&#123;    int x=c[i]-&#x27;0&#x27;;    if(c[i])&#123;        //应该使用的操作次数        int t=min(n,9-x);        n-=t;        dfs(i+1,v*10+x+t);        //回溯        n+=t;        //考虑操作2是否能够使用        if(m&gt;x)&#123;            m-=x+1;            dfs(i+1,v*10+9);            //回溯            m+=x+1;        &#125;    &#125;else&#123;        //答案取max        ans=max(ans,v);    &#125;&#125;int main()&#123;    scanf(&quot;%s%d%d&quot;,c,&amp;n,&amp;m);    dfs(0,0);    printf(&quot;%lld\\n&quot;,ans);    return 0;&#125;\nJava 语言描述:\nimport java.io.*;public class Main &#123;    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));    static PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));    static String t;    static int a, b, m;    static long ans = 0;    // i 表示考虑到第i位  v表示当前的值是多少    static void dfs(int i, long v) &#123;        if (i == m) &#123;            ans = Math.max(ans, v);            return;        &#125;        int c = t.charAt(i) - &#x27;0&#x27;;        //考虑第一种使用        int g = Math.min(a, 9 - c);        a -= g;        dfs(i + 1, v * 10 + c + g);        //回溯        a += g;        //考虑第二种使用   我一定要减到9  只有b&gt;c 才能减到9        if (b &gt; c) &#123;            b -= c + 1;            dfs(i + 1, v * 10 + 9);            //回溯            b += c + 1;        &#125;    &#125;    public static void main(String[] args) throws IOException &#123;        String[] s = br.readLine().trim().split(&quot; &quot;);        t = s[0];        m = t.length();        a = Integer.parseInt(s[1]);        b = Integer.parseInt(s[2]);        dfs(0, 0);        out.println(ans);        out.flush();    &#125;&#125;\nPython 语言描述:\nimport syst = &quot;&quot;a = 0b = 0m = 0ans = 0def dfs(i, v):    global ans, a, b, t    if i == m:        ans = max(ans, v)        return    c = int(t[i])    # 考虑第一种使用    g = min(a, 9 - c)    a -= g    dfs(i + 1, v * 10 + c + g)    # 回溯    a += g    # 考虑第二种使用   我一定要减到9  只有b&gt;c 才能减到9    if b &gt; c:        b -= c + 1        dfs(i + 1, v * 10 + 9)        # 回溯        b += c + 1def main():    global ans, a, b, t, m    line = sys.stdin.readline().strip()    s = line.split()    t = s[0]    m = len(t)    a = int(s[1])    b = int(s[2])    dfs(0, 0)    print(ans)if __name__ == &quot;__main__&quot;:    main()\n实验总结DFS 是一种非常重要的回溯算法，它是通过递归设计转移状态，再加上边界判断，与结果检查，构成的基本搜索框架。\nDFS 最重要的就是设计回溯，所谓回溯就是还原现场，保证在执行另一分支的时候能够确保所有的改变只受当前状态的影响，所以在一条路走不通时就要修改。特殊的修改可以达到特殊的回溯效果，回溯时剪枝，回溯时调整路线，都是可以的。\nDFS 是算法学习的基础工具，很重要，必须要学会。\n\nshow: step version: 1.0 enable_checker: true\n\n广度优先搜索BFS，其英文全称是 Breadth First Search，意为广度优先搜索，是所有的搜索手段之一。它是从某个状态开始，将所有节点加入一个先进先出的队列，然后一层一层进行状态转移，并且展开节点。\n本章题目难度较大，请大家仔细研读讲解和代码。\n知识点1.BFS 算法设计原理与实现方法 2.经典题型精讲\n广度优先搜索基本概念作为搜索算法的一种，BFS 相较于 DFS 而言，BFS 是一层一层展开的，那么对于有多个终态时，最先找到的一定是最短的。\n广度优先搜索算法的设计步骤按照定义设计：\n\n确定该题目的状态（包括边界）\n\n找到状态转移方式\n\n找到问题的出口，计数或者某个状态\n\n设计搜索\n\n\n会发现我们前期要找到的参数基本一致，所以在一般情况下 BFS 和 DFS 可以相互转换。\n伪代码：\nint check(参数)&#123;    if(满足条件)        return 1;    return 0;&#125;bool pd(参数)&#123;    相应操作&#125;void bfs()&#123;    1. 把根节点放入队列尾端    2. 每次从队列中取出一个节点    3. Check 判断是不是答案，如果是结束算法 return;    4. 把当前取出的节点扩展，如果扩展后的节点经Pd()后符合要求，就放入队列，不符合就不放。    5. 转到步骤2，循环执行&#125;如果所有节点被扩展完了，没有找到答案就无解。\n长草题目链接\n难度: 简单\n标签: 模拟, BFS, 2020, 省模拟赛\n题目描述:\n小明有一块空地，他将这块空地划分为 $n$ 行 $m$ 列的小块，每行和每列的长度都为 1。\n小明选了其中的一些小块空地，种上了草，其他小块仍然保持是空地。\n这些草长得很快，每个月，草都会向外长出一些，如果一个小块种了草，则它将向自己的上、下、左、右四小块空地扩展，\n这四小块空地都将变为有草的小块。请告诉小明，$k$ 个月后空地上哪些地方有草。\n输入描述:\n输入的第一行包含两个整数 $n, m$。\n接下来 $n$ 行，每行包含 $m$ 个字母，表示初始的空地状态，字母之间没有空格。如果为小数点，表示为空地，如果字母为 $g$，表示种了草。\n接下来包含一个整数 $k$。 其中，$2   \\leq   n, m   \\leq   1000，1   \\leq   k   \\leq   1000$。\n输出描述:\n输出 $n$ 行，每行包含 $m$ 个字母，表示 $k$ 个月后空地的状态。如果为小数点，表示为空地，如果字母为 $g$，表示长了草。\n输入输出样例:\n示例:\n输入:\n4 5.g..........g.......2\n输出:\ngggg.gggg.ggggg.ggg.\n运行限制:\n最大运行时间：1s 最大运行内存: 256M\n解题思路:\n这个题目简直就是为了广度优先搜索设置模板题，由于这个题目时输出广度优先搜索 K 次扩展后的终态，那我们就不用设置 Check 函数。\n这里用一个 $N\\times M$ 的矩阵来表示草地。\n\n算法开始：\n将字母为 g 的草地的位置加入队列，然后向下执行\n\n判断边界：\n判断是否已经长了草，判断是否超出边界范围\n\n搜索过程：\n不断从队列取出一个节点，进行上下左右的扩展，执行 2 判断边界，符合就放入队列，不符合就跳过。\n执行 K 次扩展，输出草地状态。\n\ncheck(参数)：\n这里不需要进行 Check\n\n\nC++ 语言描述:\n#include &lt;bits/stdc++.h&gt;using namespace std;const int M = 1005;struct PII&#123;    int first;    int second;&#125;;// C++ 有个数据类型叫 pair 上面的就可以定义为 pair&lt;int,int&gt; 用起来比较方便。PII tempPair;//临时结点char Map[M][M];//---------图的路径搜索常用方向移动表示-------int dx[4]= &#123;0,1,-1,0&#125;;int dy[4]= &#123;1,0,0,-1&#125;;// 两两组合形成上下左右四个方向//      1------------------&gt; x//      |//      |//      |//      |//      |//      |//      |//      ↓//      y// dx[0]=0 dy[0]=1 那么代表向下的方向// dx[1]=1 dy[1]=0 那么代表向右的方向// dx[2]=-1 dy[0]=0 那么代表向左的方向// dx[3]=0 dy[1]=-1 那么代表向上的方向int n;// n 行int m;// m 列int k;// k 次queue&lt;PII &gt; q; //广度优先搜索所用的队列int len;//记录节点数量方便后续k的计算bool pd(int x, int y)&#123;    if(x&lt;1)        return 0;    // /x 轴坐标 左侧越界    else if(x&gt;n)        return 0;    //x 轴坐标 右侧越界    else  if(y&lt;1)        return 0;    //y 轴坐标 上侧越界    else if(y&gt;m)        return 0;    //y 轴坐标 下侧越界    else if(Map[x][y]==&#x27;g&#x27;)        return 0;    //已经长草了    else return 1;    // 在范围内，且没长草&#125;void BFS()&#123;    //BFS    while(!q.empty()&amp;&amp;k&gt;0)    &#123;        tempPair = q.front();        q.pop();        //这两步是取出队首的节点        int x = tempPair.first;//横坐标        int y = tempPair.second;//纵坐标        for(int i=0; i&lt;4; i++)        &#123;            int nowx = x+dx[i]; //扩展后的横坐标            int nowy = y+dy[i]; //扩展后的纵坐标            if(pd(nowx,nowy))            &#123;                q.push(&#123;nowx,nowy&#125;);                Map[nowx][nowy]=&#x27;g&#x27;;            &#125;            //符合要求执行扩展，不符合要求，忽略即可。        &#125;        len--; //没取出一个节点len  -1        if(len==0)        &#123;            //当len =0 时，代表当前层扩展完了，那么就代表第一个月扩展完了            k--; // 所以k--            len = q.size(); // 当前层扩展完了，那就该扩展下一层了，所以len又被赋值为下一层的节点数目的值        &#125;    &#125;&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;m;    for(int i=1; i&lt;=n; i++)    &#123;        for(int j=1; j&lt;=m; j++)        &#123;            cin&gt;&gt;Map[i][j];            if(Map[i][j]==&#x27;g&#x27;)            &#123;                tempPair.first=i;                tempPair.second=j;               // cout&lt;&lt;i&lt;&lt;&quot;&quot;&lt;&lt;j&lt;&lt;endl;                q.push(tempPair);//将初始有树的结点加入队列            &#125;        &#125;    &#125;    len = q.size();//记录第一层的节点数量方便后续k的计算    cin&gt;&gt;k;    BFS();    for(int i=1; i&lt;=n; i++)    &#123;        for(int j=1; j&lt;=m; j++)        &#123;            cout&lt;&lt;Map[i][j];        &#125;        cout&lt;&lt;endl;    &#125;    return 0;&#125;\nPython 语言描述:\n# 请在此输入您的代码from queue import Queuedx = [0, 1, -1, 0]dy = [1, 0, 0, -1]# 两两组合形成上下左右四个方向#      1------------------&gt; x#      |#      |#      |#      |#      |#      |#      |#      ↓#      y# dx[0]=0 dy[0]=1 那么代表向下的方向# dx[1]=1 dy[1]=0 那么代表向右的方向# dx[2]=-1 dy[0]=0 那么代表向左的方向# dx[3]=0 dy[1]=-1 那么代表向上的方向Map = []q = Queue()n = 0m = 0k = 0length = 0def pd(x, y):    global n, m, Map    if x &lt; 0:        return False    # x 轴坐标左侧越界    elif x &gt;= n:        return False    # x 轴坐标右侧越界    elif y &lt; 0:        return False    # y轴坐标上侧越界    elif y &gt;= m:        return False    # y 轴坐标下侧越界    elif Map[x][y] == &#x27;g&#x27;:        return False    # 已经长草了    else:        return True    # 在范围内，且没长草def BFS():    global k, q, n, m, Map, length    while k &gt; 0 &amp; (not q.empty()):        tempPair = q.get()        x = tempPair[0]  # 横坐标        y = tempPair[1]  # 纵坐标        nowx=x+1        if (pd(nowx, y)):            q.put((nowx, y))            Map[nowx][y] = &#x27;g&#x27;        nowx=x-1        if (pd(nowx, y)):            q.put((nowx, y))            Map[nowx][y] = &#x27;g&#x27;        nowy=y+1        if (pd(x, nowy)):            q.put((nowx, nowy))            Map[x][nowy] = &#x27;g&#x27;        nowy=y-1        if (pd(x, nowy)):            q.put((nowx, nowy))            Map[x][nowy] = &#x27;g&#x27;        length -= 1        if length == 0:            k -= 1            length = q.qsize()if __name__ == &#x27;__main__&#x27;:    n, m = map(int, input().split())    Map = [[0 for _ in range(m)] for _ in range(n)]  # Python 动态开数组会减少运行时间    for i in range(n):        input_ = input()        for j in range(m):            Map[i][j] = input_[j]            if Map[i][j] == &#x27;g&#x27;:                q.put((i, j))    k = int(input())    length = q.qsize()    BFS()    for i in range(n):        str_temp = &#x27;&#x27;        for j in range(m):            str_temp += Map[i][j]        print(str_temp)\n重点:\nPython 的 Queue 非常耗费时间，强烈建议大家使用 list 进行模拟\n下面是用 List 模拟，使用 Queue 耗时 3000 ms , 使用 list 模拟仅消耗 54 ms 所以大家使用 Python 编写代码的时候还是使用 List 尽量避免 Queue 的使用。\n# 请在此输入您的代码from queue import Queuedx = [0, 1, -1, 0]dy = [1, 0, 0, -1]# 两两组合形成上下左右四个方向#      1------------------&gt; x#      |#      |#      |#      |#      |#      |#      |#      ↓#      y# dx[0]=0 dy[0]=1 那么代表向下的方向# dx[1]=1 dy[1]=0 那么代表向右的方向# dx[2]=-1 dy[0]=0 那么代表向左的方向# dx[3]=0 dy[1]=-1 那么代表向上的方向Map = []q = []qfront = 0qend = 0n = 0m = 0k = 0length = 0def pd(x, y):    if x &lt; 0:        return False    # x 轴坐标左侧越界    elif x &gt;= n:        return False    # x 轴坐标右侧越界    elif y &lt; 0:        return False    # y轴坐标上侧越界    elif y &gt;= m:        return False    # y 轴坐标下侧越界    elif Map[x][y] == &#x27;g&#x27;:        return False    # 已经长草了    else:        return True    # 在范围内，且没长草def BFS():    global k, q, n, m, Map, length, qend, qfront    # print(&quot;K Length&quot;, k, length)    while k &gt; 0 and length &gt; 0:        tempPair = q[qfront]        qfront += 1        x = tempPair[0]  # 横坐标        y = tempPair[1]  # 纵坐标        for i in range(4):            nowx = x + dx[i]  # 扩展后的横坐标            nowy = y + dy[i]  # 扩展后的纵坐标            if (pd(nowx, nowy)):                q.append((nowx,nowy))                qend += 1                Map[nowx][nowy] = &#x27;g&#x27;        length -= 1        if length == 0:            k -= 1            length = qend - qfrontif __name__ == &#x27;__main__&#x27;:    n, m = map(int, input().split())    Map = [[0 for _ in range(m)] for _ in range(n)]  # Python 动态开数组会减少运行时间    for i in range(n):        input_ = input()        for j in range(m):            Map[i][j] = input_[j]            if Map[i][j] == &#x27;g&#x27;:                q.append((i,j))                qend += 1    k = int(input())    length = qend - qfront    BFS()    for i in range(n):        str_temp = &#x27;&#x27;        for j in range(m):            str_temp += Map[i][j]        print(str_temp)\nJava 语言描述:\nimport java.util.*;import java.util.concurrent.LinkedBlockingQueue;import static java.lang.Math.abs;public class Main &#123;    static final int M = 1005;    static class PII    &#123;        public int first;        public int second;    &#125;;    static String Map[]=new String[M];//---------图的路径搜索常用方向移动表示-------    static int dx[]= &#123;0,1,-1,0&#125;;    static  int dy[]= &#123;1,0,0,-1&#125;;// 两两组合形成上下左右四个方向//      1------------------&gt; x//      |//      |//      |//      |//      |//      |//      |//      ↓//      y// dx[0]=0 dy[0]=1 那么代表向下的方向// dx[1]=1 dy[1]=0 那么代表向右的方向// dx[2]=-1 dy[0]=0 那么代表向左的方向// dx[3]=0 dy[1]=-1 那么代表向上的方向    static int n;// n 行    static int m;// m 列    static int k;// k 次    static Queue&lt;PII &gt; q= new LinkedBlockingQueue&lt;&gt;();    //广度优先搜索所用的队列    static int len;//记录节点数量方便后续k的计算    static boolean pd(int x, int y)    &#123;        if(x&lt;1)            return false;            // /x 轴坐标 左侧越界        else if(x&gt;n)            return false;            //x 轴坐标 右侧越界        else  if(y&lt;1)            return false;            //y 轴坐标 上侧越界        else if(y&gt;m)            return false;            //y 轴坐标 下侧越界        else if(Map[x].charAt(y)==&#x27;g&#x27;)            return false;            //已经长草了        else return true;        // 在范围内，且没长草    &#125;    static void BFS()    &#123;        //BFS        while(q.size()!=0&amp;&amp;k&gt;0)        &#123;            PII tempPair= q.peek();            q.poll();            //这两步是取出队首的节点//            System.out.println(q.size());            int x = tempPair.first;//横坐标            int y = tempPair.second;//纵坐标            for(int i=0; i&lt;4; i++)            &#123;                int nowx = x+dx[i]; //扩展后的横坐标                int nowy = y+dy[i]; //扩展后的纵坐标                if(pd(nowx,nowy))                &#123;                    PII tempPair2=new PII();//临时结点                    tempPair2.first=nowx;                    tempPair2.second=nowy;                    q.add(tempPair2);                    StringBuilder strBuilder = new StringBuilder(Map[nowx]);                    strBuilder.setCharAt(nowy, &#x27;g&#x27;);                    Map[nowx]=strBuilder.toString();                &#125;                //符合要求执行扩展，不符合要求，忽略即可。            &#125;            len--; //没取出一个节点len  -1            if(len==0)            &#123;                //当len =0 时，代表当前层扩展完了，那么就代表第一个月扩展完了                k--; // 所以k--                len = q.size(); // 当前层扩展完了，那就该扩展下一层了，所以len又被赋值为下一层的节点数目的值            &#125;        &#125;    &#125;    public static void main(String[] args) &#123;        Scanner in = new Scanner(System.in);        n = in.nextInt();        m = in.nextInt();        for(int i=1; i&lt;=n; i++)        &#123;            Map[i]=new String(&quot; &quot; +in.next());            for(int j=1; j&lt;=m; j++)            &#123;                char temChar = Map[i].charAt(j);                if(temChar==&#x27;g&#x27;)                &#123;                    PII tempPair=new PII();//临时结点                    tempPair.first=i;                    tempPair.second=j;                    q.offer(tempPair);//将初始有草的结点加入队列                &#125;            &#125;        &#125;        len = q.size();//记录第一层的节点数量方便后续k的计算        k= in.nextInt();        BFS();        for(int i=1; i&lt;=n; i++)        &#123;            System.out.println(Map[i]);        &#125;    &#125;&#125;\n走迷宫题目链接\n难度: 简单\n标签: BFS\n题目描述:\n给定一个 $N\\times M$ 的网格迷宫 $G$。$G$ 的每个格子要么是道路，要么是障碍物（道路用 $1$ 表示，障碍物用 $0$ 表示）。\n已知迷宫的入口位置为 $(x_1,y_1)$，出口位置为 $(x_2 , y_2)$。问从入口走到出口，最少要走多少个格子。\n输入:\n输入第 $1$ 行包含两个正整数 $N,M$，分别表示迷宫的大小。\n接下来输入一个 $N\\times M$ 的矩阵。若 $G_{i,j}=1$ 表示其为道路，否则表示其为障碍物。\n最后一行输入四个整数 $x_1,y_1,x_2,y_2$，表示入口的位置和出口的位置。\n$1\\leq N,M\\leq10^2$，$0\\leq G_{i,j}\\leq 1$，$1\\leq x_1,x_2\\leq N$，$1\\leq y_1,y_2\\leq M$。\n输出：\n输出仅一行，包含一个整数表示答案。\n若无法从入口到出口，则输出 $-1$。\n输入输出样例：\n输入\n5 51 0 1 1 01 1 0 1 10 1 0 1 11 1 1 1 11 0 0 0 11 1 5 5\n输出\n8\n运行限制:\n最大运行时间：1s 最大运行内存: 128M\n解题思路:\n\n算法开始：\n我们以起点开始做 BFS ，将入口压入栈开始执行 BFS 算法\n\n判断边界：\n在当前行，当前列的位置上判断是否满足条件，若不满足，跳到第 5 步，即不符合边界条件。 判断条件如下：\n\n$vis[x][y]$ &gt;= 1 标记数组已经被标记，已被走过，不能再走，超出边界\n\n$x &lt; 1$ 从左侧走出方格\n\n$x &gt; n$ 从右侧走出方格\n\n$y &lt; 1$ 从上侧走出方格\n\n$y &gt; n$ 从下侧走出方格\n\n$map[x][y]$ != 1 没有路不能走\n\n\n\n搜索过程：\n调用 Check 函数。\n如果边界条件满足，就继续调用搜索，找到下一步的位置\n每次找到下一个位置的时候，令其 $Vis[nextx][nexty]$ = 当前 $Vis + 1$\n这样既能用 $vis$ 数组标记又能使用 $vis$ 数组存步数，从 $1$ 开始，即开始节点是 $1$ ，所以最后要减去 $1$ 。\n\ncheck(参数)：\n如果当搜索到 $x = 终点 x$, $y = 终点 y$ 时，就找到了终点，此时他的 $Vis$ 数组就存储了他的步数，但是是从 $1$ 开始的。\n\n\nC++ 语言描述:\n#include &lt;bits/stdc++.h&gt;using namespace std;int vis[150][150]; //用于存储是否访问过，并且存储长度char G[150][150]; //用于存储题目给出的地图int n,m,ans=0;int dx[4] = &#123;0,0,-1,1&#125;;int dy[4] = &#123;1,-1,0,0&#125;;//上下左右移动，不会的看前面的代码struct node&#123;    int x;    int y;&#125;;node Start,End;bool pd(int x,int y)&#123;    if(x&lt;1)        return 0;    //从左侧走出方格    else if(x&gt;n)        return 0;    //从右侧走出方格    else if(y&lt;1)        return 0;    //从上侧走出方格    else if(y&gt;m)        return 0;    //从下侧走出方格    else if( vis[x][y]!=0)        //已经访问了        return 0;    else if(G[x][y]!=&#x27;1&#x27;) return 0;    //不是路不能走    else return 1;&#125;bool  check(int x, int y)&#123;    if(x == End.x&amp;&amp; y == End.y)   //找到终点，把距离给他    &#123;        ans  =  vis[x][ y];        return 1;    &#125;    else    return 0;&#125;void bfs()&#123;    queue&lt;node&gt;q;    node now,next;    q.push(Start);     //将起点压人队列中    vis[Start.x][Start.y] = 1;    while(!q.empty())    &#123;        now = q.front();        if(check(now.x,now.y))            return ;        q.pop();     //将队列最前面的弹出。        for(int i=0; i&lt;4; i++)  //四个方向        &#123;            int nextx = now.x + dx[i];            int nexty = now.y + dy[i];            if(pd(nextx,nexty))  //判断是否符合条件            &#123;                next.x=nextx;                next.y=nexty;                q.push(next);                vis[nextx][nexty] = vis[now.x][now.y]+1; //步数+1            &#125;        &#125;    &#125;&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;m;    //memset(vis,0,sizeof(vis));    for(int i=1; i&lt;=n; i++)    &#123;        for(int j=1; j&lt;=m; j++)        &#123;            cin&gt;&gt;G[i][j];        &#125;    &#125;    cin&gt;&gt;Start.x&gt;&gt;Start.y&gt;&gt;End.x&gt;&gt;End.y;    ans = 0;    bfs();    cout&lt;&lt;ans-1&lt;&lt;endl;    return 0;&#125;\nPython 语言描述:\ndx = [0, 1, -1, 0]dy = [1, 0, 0, -1]G = []Vis = []# --------队列模拟-----------q = []                   # |                         # |qfront = 0               # |                         # |qend = 0                 # |# --------队列模拟-----------n = 0m = 0ans = 0startX=0startY=0endX=0endY=0def pd(x, y):    if x &lt; 1:        return False    # x 轴坐标左侧越界    elif x &gt; n:        return False    # x 轴坐标右侧越界    elif y &lt; 1:        return False    # y轴坐标上侧越界    elif y &gt; m:        return False    # y 轴坐标下侧越界    elif Vis[x][y]!=0:        return False    #已经访问了    elif G[x][y] != &#x27;1&#x27;:        return False    # 已经访问了    else:        return True    # 在范围内，且没长草def check( x,  y):    global ans    if x == endX and y == endY :  #找到终点，把距离给他        ans  =  Vis[x][y];        return True;    else   :        return False;def BFS():    global qend ,qfront    q.append((startX,startY))    qend+=1    Vis[startX][startY]=1    while qend-qfront!=0:        tempPair = q[qfront]        qfront+=1        x = tempPair[0]  # 横坐标        y = tempPair[1]  # 纵坐标        if check(x,y):            return        for i in range(4):            nowx = x + dx[i]  # 扩展后的横坐标            nowy = y + dy[i]  # 扩展后的纵坐标            if (pd(nowx, nowy)):                q.append((nowx,nowy))                qend+=1                Vis[nowx][nowy] = Vis[x][ y] + 1if __name__ == &#x27;__main__&#x27;:    n, m = map(int, input().split())    G = [[0 for _ in range(m+10)] for _ in range(n+10)]  # Python 动态开数组会减少运行时间    Vis = [[0 for _ in range(m+10)] for _ in range(n+10)]  # Python 动态开数组会减少运行时间    for i in range(n):        input_ = input().split()        for j in range(m):            G[i+1][j+1] = input_[j]    startX ,startY , endX ,endY = map(int, input().split())    BFS()    print(ans-1)\nJava 语言描述:\nimport java.util.*;import java.util.concurrent.LinkedBlockingQueue;import static java.lang.Math.abs;public class Main &#123;    static final int M = 1005;    static class node &#123;        public int x;        public int y;        public node(int x, int y) &#123;            this.x = x;            this.y = y;        &#125;    &#125;    static int n, m, ans = 0;    static int vis[][] = new int[150][150]; //用于存储是否访问过，并且存储长度    static int G[][] = new int[150][150];  //用于存储题目给出的地图    static node Start, End;//---------图的路径搜索常用方向移动表示-------    static int dx[] = &#123;0, 1, -1, 0&#125;;    static int dy[] = &#123;1, 0, 0, -1&#125;;    static Queue&lt;node&gt; q = new LinkedBlockingQueue&lt;&gt;();    //广度优先搜索所用的队列    static boolean pd(int x, int y) &#123;        if (x &lt; 1)            return false;            // /x 轴坐标 左侧越界        else if (x &gt; n)            return false;            //x 轴坐标 右侧越界        else if (y &lt; 1)            return false;            //y 轴坐标 上侧越界        else if (y &gt; m)            return false;            //y 轴坐标 下侧越界        else if (vis[x][y] != 0)            //已经访问了            return false;        else if (G[x][y] != 1)            //不能走            return false;        else return true;        // 在范围内，且没长草    &#125;    static boolean check(int x, int y) &#123;        if (x == End.x &amp;&amp; y == End.y)   //找到终点，把距离给他        &#123;            ans = vis[x][y];            return true;        &#125; else return false;    &#125;    static void BFS() &#123;        q.add(Start);        vis[Start.x][Start.y] = 1;        node now, next;        while (q.size() != 0) &#123;            now = q.peek();            if (check(now.x, now.y))                return;            q.poll();            //这两步是取出队首的节点            for (int i = 0; i &lt; 4; i++)  //四个方向            &#123;                int nextx = now.x + dx[i];                int nexty = now.y + dy[i];                if (pd(nextx, nexty))  //判断是否符合条件                &#123;                    next = new node(nextx, nexty);                    q.add(next);                    vis[nextx][nexty] = vis[now.x][now.y] + 1; //步数+1                &#125;            &#125;        &#125;    &#125;    public static void main(String[] args) &#123;        Scanner in = new Scanner(System.in);        n = in.nextInt();        m = in.nextInt();        for (int i = 1; i &lt;= n; i++) &#123;            for (int j = 1; j &lt;= m; j++) &#123;                G[i][j] = in.nextInt();            &#125;        &#125;        int startX = in.nextInt();        int startY = in.nextInt();        int endX = in.nextInt();        int endY = in.nextInt();        Start=new node(startX,startY);        End=new node(endX,endY);        BFS();        System.out.println(ans-1);    &#125;&#125;\n迷宫下图给出了一个迷宫的平面图，其中标记为 $1$ 的为障碍，标记为 $0$ 的为可以通行的地方。\n010000000100001001110000\n迷宫的入口为左上角，出口为右下角，在迷宫中，只能从一个位置走到这个它的上、下、左、右四个方向之一。\n对于上面的迷宫，从入口开始，可以按 DRRURRDDDR 的顺序通过迷宫， 一共 $10$ 步。其中 $D、U、L、R$ 分别表示向下、向上、向左、向右走。 对于下面这个更复杂的迷宫（$30$ 行 $50$ 列），请找出一种通过迷宫的方式，其使用的步数最少，在步数最少的前提下，请找出字典序最小的一个作为答案。\n请注意在字典序中 $D&lt;L&lt;R&lt;U$。\nn解题思路:\n本题是一道简单的搜索题，需要注意的是要按照题目给定的字典序进行搜索，最后输出路径。\n我们使用 $BFS$ 搜索记录路径，用 $DFS$ 打印路径。\nC++ 语言描述：\n#include&lt;bits/stdc++.h&gt;using namespace std;#define maxn 2000string maze[maxn]= &#123;                  &quot;01010101001011001001010110010110100100001000101010&quot;,                  &quot;00001000100000101010010000100000001001100110100101&quot;,                  &quot;01111011010010001000001101001011100011000000010000&quot;,                  &quot;01000000001010100011010000101000001010101011001011&quot;,                  &quot;00011111000000101000010010100010100000101100000000&quot;,                  &quot;11001000110101000010101100011010011010101011110111&quot;,                  &quot;00011011010101001001001010000001000101001110000000&quot;,                  &quot;10100000101000100110101010111110011000010000111010&quot;,                  &quot;00111000001010100001100010000001000101001100001001&quot;,                  &quot;11000110100001110010001001010101010101010001101000&quot;,                  &quot;00010000100100000101001010101110100010101010000101&quot;,                  &quot;11100100101001001000010000010101010100100100010100&quot;,                  &quot;00000010000000101011001111010001100000101010100011&quot;,                  &quot;10101010011100001000011000010110011110110100001000&quot;,                  &quot;10101010100001101010100101000010100000111011101001&quot;,                  &quot;10000000101100010000101100101101001011100000000100&quot;,                  &quot;10101001000000010100100001000100000100011110101001&quot;,                  &quot;00101001010101101001010100011010101101110000110101&quot;,                  &quot;11001010000100001100000010100101000001000111000010&quot;,                  &quot;00001000110000110101101000000100101001001000011101&quot;,                  &quot;10100101000101000000001110110010110101101010100001&quot;,                  &quot;00101000010000110101010000100010001001000100010101&quot;,                  &quot;10100001000110010001000010101001010101011111010010&quot;,                  &quot;00000100101000000110010100101001000001000000000010&quot;,                  &quot;11010000001001110111001001000011101001011011101000&quot;,                  &quot;00000110100010001000100000001000011101000000110011&quot;,                  &quot;10101000101000100010001111100010101001010000001000&quot;,                  &quot;10000010100101001010110000000100101010001011101000&quot;,                  &quot;00111100001000010000000110111000000001000000001011&quot;,                  &quot;10000001100111010111010001000110111010101101111000&quot;&#125;;bool vis[maxn][maxn];//标记int dir[4][2]=&#123;&#123;1,0&#125;,&#123;0,-1&#125;,&#123;0,1&#125;,&#123;-1,0&#125;&#125;;//D L R Ubool in(int x,int y)&#123;    return x&lt;30&amp;&amp;x&gt;=0&amp;&amp;y&gt;=0&amp;&amp;y&lt;50;&#125;struct node&#123;    int x,y,d;    char pos;//存储D L R U&#125;;node father[maxn][maxn];//当前节点的父节点node now,nex;//指向当前和下一个位置void dfs(int x,int y)//递归打印&#123;    if(x==0&amp;&amp;y==0)//找到起点开始正向打印路径        return;    else        dfs(father[x][y].x,father[x][y].y);    cout&lt;&lt;father[x][y].pos;&#125;void bfs(int x,int y)&#123;    queue&lt;node&gt; q;    now.x=x;    now.y=y;    now.d=0;    q.push(now);    vis[x][y]=true;    while(!q.empty())    &#123;        now=q.front();        q.pop();        for(int i=0;i&lt;4;i++)//走下左右上按字典序的四个方向        &#123;            int tx=now.x+dir[i][0];            int ty=now.y+dir[i][1];            if(in(tx,ty)&amp;&amp;!vis[tx][ty]&amp;&amp;maze[tx][ty]!=&#x27;1&#x27;)//判断是否超出范围，是否用过，是否为1            &#123;                vis[tx][ty]=true;//标记为用过                nex.x=tx;                nex.y=ty;                nex.d=now.d+1;                q.push(nex);//压入队列                father[tx][ty].x=now.x;//存储父节点坐标                father[tx][ty].y=now.y;                if(i==0)//存储路径                    father[tx][ty].pos=&#x27;D&#x27;;                else if(i==1)                    father[tx][ty].pos=&#x27;L&#x27;;                else if(i==2)                    father[tx][ty].pos=&#x27;R&#x27;;                else if(i==3)                    father[tx][ty].pos=&#x27;U&#x27;;            &#125;        &#125;    &#125;&#125;int main()&#123;    bfs(0,0);    dfs(29,49);//打印路径    return 0;&#125;\nJava 语言描述:\nimport java.util.*;public class Main &#123;    private static String[] nn= &#123;                  &quot;01010101001011001001010110010110100100001000101010&quot;,                  &quot;00001000100000101010010000100000001001100110100101&quot;,                  &quot;01111011010010001000001101001011100011000000010000&quot;,                  &quot;01000000001010100011010000101000001010101011001011&quot;,                  &quot;00011111000000101000010010100010100000101100000000&quot;,                  &quot;11001000110101000010101100011010011010101011110111&quot;,                  &quot;00011011010101001001001010000001000101001110000000&quot;,                  &quot;10100000101000100110101010111110011000010000111010&quot;,                  &quot;00111000001010100001100010000001000101001100001001&quot;,                  &quot;11000110100001110010001001010101010101010001101000&quot;,                  &quot;00010000100100000101001010101110100010101010000101&quot;,                  &quot;11100100101001001000010000010101010100100100010100&quot;,                  &quot;00000010000000101011001111010001100000101010100011&quot;,                  &quot;10101010011100001000011000010110011110110100001000&quot;,                  &quot;10101010100001101010100101000010100000111011101001&quot;,                  &quot;10000000101100010000101100101101001011100000000100&quot;,                  &quot;10101001000000010100100001000100000100011110101001&quot;,                  &quot;00101001010101101001010100011010101101110000110101&quot;,                  &quot;11001010000100001100000010100101000001000111000010&quot;,                  &quot;00001000110000110101101000000100101001001000011101&quot;,                  &quot;10100101000101000000001110110010110101101010100001&quot;,                  &quot;00101000010000110101010000100010001001000100010101&quot;,                  &quot;10100001000110010001000010101001010101011111010010&quot;,                  &quot;00000100101000000110010100101001000001000000000010&quot;,                  &quot;11010000001001110111001001000011101001011011101000&quot;,                  &quot;00000110100010001000100000001000011101000000110011&quot;,                  &quot;10101000101000100010001111100010101001010000001000&quot;,                  &quot;10000010100101001010110000000100101010001011101000&quot;,                  &quot;00111100001000010000000110111000000001000000001011&quot;,                  &quot;10000001100111010111010001000110111010101101111000&quot;&#125;;    private static char[][] tu=new char[30][50];    private static int[][] dis=new int[30][50];    private static int[][] step= &#123;&#123;1,0&#125;,&#123;0,-1&#125;,&#123;0,1&#125;,&#123;-1,0&#125;&#125;;    private static char[] direction= &#123;&#x27;D&#x27;,&#x27;L&#x27;,&#x27;R&#x27;,&#x27;U&#x27;&#125;;//    保存经过的每一个点位置信息，采用(x)*m+y的公式表示(x,y);x,y从0开始，位置也是从来开始。m:大于最长边的随便一个数//    起点:0;终点:29*50-49    private static Queue&lt;Integer&gt; location=new LinkedList&lt;Integer&gt;();//    广度优先遍历求每一个位置到终点的距离，并存放在dis中//    广度优先遍历寻找所有从终点到起点的路线    public static void bfs() &#123;//x,y当前位置;        int x,y;//当前位置坐标        //不为空，继续循环        while(!location.isEmpty()) &#123;            int l=location.poll();//获取当前位置的坐标            x=l/50;//获取当前位置x            y=l%50;//获取当前位置y            for(int i=0;i&lt;4;i++) &#123;//探索四个方向                int xx=x+step[i][0];                int yy=y+step[i][1];                if(xx&gt;=0&amp;&amp;xx&lt;30&amp;&amp;yy&gt;=0&amp;&amp;yy&lt;50&amp;&amp;tu[xx][yy]==&#x27;0&#x27;&amp;&amp;dis[xx][yy]==0) &#123;                    dis[xx][yy]=dis[x][y]+1;//当前位置的距离+1等于本次探索位置的距离                    location.add(xx*50+yy);                    if(xx==0&amp;&amp;yy==0) &#123;                        break;                    &#125;                &#125;            &#125;        &#125;    &#125;//    深度优先遍历，从起点到终点    public static String dfs() &#123;        dis[29][49]=0;//        起点        int x=0;        int y=0;        String route=&quot;&quot;;        while(x!=29||y!=49) &#123;            for(int i=0;i&lt;4;i++) &#123;                int xx=x+step[i][0];                int yy=y+step[i][1];                if(xx&gt;=0&amp;&amp;xx&lt;30&amp;&amp;yy&gt;=0&amp;&amp;yy&lt;50&amp;&amp;tu[xx][yy]==&#x27;0&#x27;) &#123;                    if(dis[x][y]==dis[xx][yy]+1) &#123;                        x=xx;                        y=yy;                        route+=direction[i];                        break;                    &#125;                &#125;            &#125;        &#125;        return route;    &#125;    public static void main(String[] args) &#123;        long num=0;        for(int i=0;i&lt;30;i++) &#123;            tu[i]=nn[i].toCharArray();        &#125;        location.add(29*50+49);        bfs();        String route=dfs();        System.out.println(route);    &#125;&#125;\nPython 语言描述:\nfrom collections import dequen,m=30,50M=[[int(i) for i in input()]for j in range(n)]vis=[[0]*m for i in range(n)]go=[[&#x27;&#x27;]*m for i in range(n)]q=deque([(0,0)])vis[0][0]=1while q:    x,y=q.popleft()    if x==n-1 and y==m-1:        print(go[-1][-1])        break    for i,j,k in [[1,0,&#x27;D&#x27;],[0,-1,&#x27;L&#x27;],[0,1,&#x27;R&#x27;],[-1,0,&#x27;U&#x27;]]:        a,b=x+i,y+j        if 0&lt;=a&lt;n and 0&lt;=b&lt;m and M[a][b]==0 and vis[a][b]==0:            vis[a][b]=1            q.append((a,b))            go[a][b]=go[x][y]+k\n实验总结BFS 是广度优先搜索，是将某节点所有的“枝蔓”加入搜索队列，然后去除队列的首部的节点，重复进行该动作，这样就能由开始状态“一圈一圈的查找”。 BFS 拥有一个性质，那么就是先找到的节点，所经过的步骤一定最短。它一般用于寻找在近的状态，也是一个非常基础的算法，希望大家认真学习。\n","categories":["蓝桥杯Note"],"tags":["蓝桥杯备赛","搜索算法"]},{"title":"树形动态规划问题解析&树上背包问题研究","url":"/2024/05/06/%E6%A0%91%E5%BD%A2%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90-%E6%A0%91%E4%B8%8A%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E7%A0%94%E7%A9%B6/","content":"1. 树上DP概述树形 DP，即在树上进行的 DP。由于树固有的递归性质，树形 DP 一般都是递归进行的。\n大部分的树形 DP 都是线性的，并且由于树本身就是有序的，所以具有十分良好的性质，例如子结构性质等。\n树形 DP 在算法竞赛中考察多样，但是简单的可以分为：\n\n树上线性 DP。\n换根 DP。\n\n树上线性 DP 也分为很多种，不同的题有不同的考法，实际上，所有的 DP 都能在树上考，但是蓝桥比赛中，一般就几种考法：\n\n树上决策，例如选最大值，最小值。\n树上背包。\n换根，换根 dp 是树上的一类特殊性质。\n\n接下来，我们将通过几个问题来描述这三种问题的解法。\n2. 树上决策问题树上决策问题，往往是子节点向父节点转移时，只取最优的解，这一点与线性 DP 十分相似。\n看一道例题：\n2. 1 生命之树-真题\n这题看着挺玄乎，其实并没有那么复杂。\n我们观察题目要求：给定一棵树，选出一个非空集合，使得对于任意两个元素 $a, b$，都存在一个序列 $a, v_1, …v_k, b$ 是这个集合里的元素，并且相邻两个点之间有一条边。\n本来可以一句话说清楚的事情，但是偏偏要给出数学定义，所以要考察大家的归纳整理能力。\n实际上，就是要在树中选出一个连通块即可，并且满足连通块的和值最大。\n为什么呢？\n我们观察一幅图，相信大家能理解了：\n\n绿色的代表我们选择的点集合。这些点是连通的，所以满足要求。\n如果换成这个样子：\n\n这样就不满足题目要求了。\n所以大家可以体会出来，题目的要求，其实就是找一个树上的连通块。\n那么我们的问题就变成了在树上找最大的连通块了。\n树形 DP，终究还是 DP，所以需要划分子问题。\n我们常用的方法是，将子节点为根的子树，看成子问题，然后合并到当前根。\n将节点从深到浅（子树从小到大）的顺序作为 DP 的阶段，在 DP 的表示中，通常第一维代表节点的编号，后续维度按照问题进行设计。\n首先我们需要解决一个问题，树上的连通块是什么？有什么性质可以利用。\n答案是：树上的联通块也是树，他一定有根。所以我们要是找到这个根，或者枚举这个根，就可以找到答案。\n我们设计的状态如下：\n$dp_i$ 表示，对于节点为 $i$ 的子树，我们找到的以 $i$ 为根的连通块和值最大是 $dp_i$。\n那么我们的转移的意义就是：对于 $i$ 来说，由于 $i$ 一定存在连通块中，所以，我们要找到他的儿子中，哪些是和 $i$ 连着的。\n有一种贪心方案，对于 $i$ 的儿子 $v \\in son(i)$ ，如果 $dp_v \\ge 0$，我们就将他接入父亲即可。\n所以，我们的转移方程就是： dp\\_i = w\\_i + \\\\sum \\_{dp\\_j \\\\ge 0 & j \\\\in son(i)} dp\\_j 代码如下：\n\nC++\n\n#include &lt;iostream&gt; #include &lt;vector&gt; using namespace std; const int N = 1e5+100; typedef long long ll; vector&lt;int&gt; G[N]; int w[N]; ll dp[N], ans = -1e18; int n; void dfs(int u, int f) &#123; dp[u] = w[u]; for (int v : G[u]) &#123; if (v == f) continue; dfs(v, u); if (dp[v] &gt; 0) &#123; dp[u] += dp[v]; &#125; &#125; ans = max(ans, dp[u]); &#125; int main() &#123; cin &gt;&gt; n; for (int i = 1; i &lt;= n; ++i) &#123; cin &gt;&gt; w[i]; &#125; int u, v; for (int i = 1; i &lt; n; ++i) &#123; cin &gt;&gt; u &gt;&gt; v; G[u].push_back(v); G[v].push_back(u); &#125; dfs(1, 0); cout &lt;&lt; ans &lt;&lt; endl; return 0; &#125;\n\nJava\n\nimport java.util.*; public class Main &#123; private static final int N = (int) (1e5 + 100); private static long[] dp; private static int[] w; private static List&lt;List&lt;Integer&gt;&gt; G; private static long ans = Long.MIN_VALUE; private static int n; private static void dfs(int u, int f) &#123; dp[u] = w[u]; for (int v : G.get(u)) &#123; if (v == f) continue; dfs(v, u); if (dp[v] &gt; 0) &#123; dp[u] += dp[v]; &#125; &#125; ans = Math.max(ans, dp[u]); &#125; public static void main(String[] args) &#123; Scanner scanner = new Scanner(System.in); n = scanner.nextInt(); w = new int[N]; G = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; N; i++) &#123; G.add(new ArrayList&lt;&gt;()); &#125; dp = new long[N]; for (int i = 0; i &lt; n; i++) &#123; w[i] = scanner.nextInt(); &#125; for (int i = 0; i &lt; n - 1; i++) &#123; int u = scanner.nextInt() - 1; // 0-indexed in Java int v = scanner.nextInt() - 1; G.get(u).add(v); G.get(v).add(u); &#125; dfs(0, -1); System.out.println(ans); scanner.close(); &#125; &#125;\n\nPython\n\nimport sys sys.setrecursionlimit(100000) n = int(input()) aList = [0] + [int(i) for i in input().split()] tree = [[]for i in range(n+1)] ans = 0 dp = [0 for i in range(n+1)] for i in range(n-1): m, n =map(int, input().split()) tree[m].append(n) tree[n].append(m) def dfs(u,f): global ans dp[u] = aList[u] for i in tree[u]: if i !=f: dp[i] = dfs(i, u) if dp[i]&gt;0: dp[u] += dp[i] ans=max(ans, dp[u]) return dp[u] dfs(1, 0) print(ans)\n3. 树上背包问题树上背包问题，本质上还是背包，可以看成在树上进行的背包。\n每次转移都是在父亲与儿子之间进行了一次经典背包转移。\n3.1 小明的背包6\n这个是典型的依赖背包问题。\n并且依赖关系构成了一棵树。\n我们看样例：\n&lt;span&gt;6 &lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt;3 &lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;2 &lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;2 &lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;3 &lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;4 &lt;/span&gt;&lt;span&gt;8&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;3 &lt;/span&gt;&lt;span&gt;9&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;\n\n依赖关系如上图所示：上图的含义是如果只有购买了 $1$ 号物品，才能购买 $2, 3, 4$ 号物品。\n记住，我们的目标是划分子问题，也就是说，只要保证了一个子问题的划分是正确的，那么由于树的优良递归性质，其他的也会是正确的。\n复习一下普通的背包问题，用 $dp_i$ 表示，在使用了 $i$ 空间的情况下的最大价值。\n但是在树问题中，由于第一维度是节点的编号，所以我们用 $dp_{i,j}$ 表示对于 $i$ 子树来说，使用了 $j$ 空间的最大价值。\n当然题目中有要求，必须满足依赖关系，所以，我们需要重新定义： $dp_{i,j}$ 表示对于 $i$ 子树来说，使用了 $j$ 空间且满足依赖关系的最大价值。\n如何满足呢？\n我们只需要保证每一个 $dp_{i,j}$ 都选了 $i$ 节点即可。\n我们可以在背包中预留出节点 $i$ 的空间即可。\n代码如下：\n\nC ++\n\n#include &lt;iostream&gt; #include &lt;algorithm&gt; #include &lt;vector&gt; using namespace std; const int N = 1e2+20; vector&lt;int&gt; G[N]; int n, V; int v[N], w[N]; int dp[N][N]; void dfs(int u) &#123; for (int i = v[u]; i &lt;= V; ++i) dp[u][i] = w[u]; for (int i : G[u]) &#123; dfs(i); for (int j = V; j &gt;= v[u] + v[i]; --j) &#123; for (int k = v[i]; k &lt;= j - v[u]; ++k) // 剩余的空间 dp[u][j] = max(dp[u][j - k] + dp[i][k], dp[u][j]); &#125; &#125; &#125; int main() &#123; cin &gt;&gt; n &gt;&gt; V; int s; for (int i = 1; i &lt;= n; ++i) &#123; cin &gt;&gt; v[i] &gt;&gt; w[i] &gt;&gt; s; G[s].push_back(i); &#125; dfs(0); cout &lt;&lt; dp[0][V] &lt;&lt; &#x27;\\n&#x27;; &#125;\n\nJava\n\nimport java.util.ArrayList; import java.util.List; import java.util.Scanner; public class Main &#123; private static int V; private static int[][] dp; private static List&lt;List&lt;Integer&gt;&gt; G; private static int[] v; private static int[] w; private static void dfs(int u) &#123; for (int i = v[u]; i &lt;= V; ++i) &#123; dp[u][i] = w[u]; &#125; for (int child : G.get(u)) &#123; dfs(child); for (int j = V; j &gt;= v[u] + v[child]; --j) &#123; for (int k = v[child]; k &lt;= j - v[u]; ++k) &#123; dp[u][j] = Math.max(dp[u][j - k] + dp[child][k], dp[u][j]); &#125; &#125; &#125; &#125; public static void main(String[] args) &#123; Scanner scanner = new Scanner(System.in); int n = scanner.nextInt(); V = scanner.nextInt(); G = new ArrayList&lt;&gt;(); for (int i = 0; i &lt;= n; ++i) &#123; G.add(new ArrayList&lt;&gt;()); &#125; v = new int[n + 1]; w = new int[n + 1]; dp = new int[n + 1][V + 1]; for (int i = 1; i &lt;= n; ++i) &#123; v[i] = scanner.nextInt(); w[i] = scanner.nextInt(); int s = scanner.nextInt(); G.get(s).add(i); &#125; dfs(0); System.out.println(dp[0][V]); scanner.close(); &#125; &#125;\n\nPython\n\nclass Solution: def dfs(self, u, dp, G, v, w, V): for i in range(v[u], V + 1): dp[u][i] = w[u] for child in G[u]: self.dfs(child, dp, G, v, w, V) for j in range(V, v[u] + v[child] - 1, -1): for k in range(v[child], j - v[u] + 1): dp[u][j] = max(dp[u][j - k] + dp[child][k], dp[u][j]) def main(self): n, V = map(int, input().split()) G = [[] for _ in range(n + 1)] # 0-indexed in Python v = [0] * (n + 1) w = [0] * (n + 1) for i in range(1, n + 1): v[i], w[i], s = map(int, input().split()) G[s].append(i) dp = [[0] * (V + 1) for _ in range(n + 1)] self.dfs(0, dp, G, v, w, V) print(dp[0][V]) # Run the main function solution = Solution() solution.main()\n4. 换根 DP 问题换根 DP，面对的问题通常是“不定根”问题，也就是说，对于一棵树，他的根不一定是 $1$ 号点，可能是任意某个点。\n或者在某些问题中，我们需要尝试计算以每个点为根的情况，最后维护出最大值。\n我们先看一副图，来理解所谓的“换根”。\n\n我们将原来以 $1$ 为根换成了以 $2$ 为根。那么树的形态也就发生了变化。\n如果每次都是选择一个点作为根进行处理，那么总的时间复杂度为 $O(n^2)$，但是如果我们能发现性质，我们可以将复杂度降为 $O(n)$。\n即换一次根的复杂度为 $O(1)$，下面，我们将讲述这种方法。\n在一般的问题中，我们常常是利用dfs来不断的将根转换为根的子节点。\n我们会发现一些事情：\n\n我们一次转换的过程，其实有很大一部分并没有发生变化，体现在 DP 转移中，就是这些点的 DP 值也不会发生改变。\n实际上改变的只有改变身份的两个点，其他的点都不会发生变化。\n在换根的问题中，一般的步骤如下：\n\n以 $1$ 为根进行一遍扫描，并且处理出必要的信息，例如深度、DP 值等。\n开始以 $1$ 进行换根，并且向下递归，在递归之前，需要将自己变成子节点的身份。\n进入新的根后，按照根的身份，重新进行转移。并且维护答案。\n\n4.1 卖树\n本题需要计算以每个点为根的情况下，产生的盈利。\n如果我们确定了一个点为根，我们很容易算出答案，如果确定了根，问题就变成了求最大深度，这个问题只需要一遍DFS就可以完成。\nvoid dfs(int u, int f, int dt) &#123; // 求出以1为根的原始信息 dep[u] = dt; Mdp[u] = 0; // Mdp即为当前点为根的最大深度 for (int v : G[u]) &#123; if (v == f) continue; dfs(v, u, dt + 1); Mdp[u] = max(Mdp[v] + 1, Mdp[u]); &#125; &#125;\n因为节点数量太多，我们无法承受 $O(n^2)$ 的复杂度，所以我们需要进行换根，\n基本思想如上述一致：\n\n我们需要先算出以 $1$ 为根的信息，包括以每个节点为子树的最大深度，从 $1$ 转移到 $i$ 节点的代价。\n我们从 $1$ 号点开始换根，每次只将根的身份换给儿子，然后进入递归，进入之前，我们需要将当前点的身份改为子节点。\n进行新的根，由于原来的转移已经失效，所以需要重新转移。并且维护答案，然后重复2步骤。\n\n\nC++\n\n#include &lt;iostream&gt; #include &lt;vector&gt; using namespace std; const int N = 1e5+10; vector&lt;int&gt; G[N]; int n, k, c; int dep[N], Mdp[N]; typedef long long ll; ll ans = 0; void dfs(int u, int f, int dt) &#123; // 求出以1为根的原始信息 dep[u] = dt; Mdp[u] = 0; for (int v : G[u]) &#123; if (v == f) continue; dfs(v, u, dt + 1); Mdp[u] = max(Mdp[v] + 1, Mdp[u]); &#125; &#125; void dfs2(int u, int f) &#123; // 开始换根 /** * 重新转移 */ int tmpf = 0, Mx1 = 0, Mx2 = 0; for (int v : G[u]) &#123; tmpf = max(tmpf, Mdp[v] + 1); &#125; // 维护答案 ans = max(1ll * tmpf * k - 1ll * dep[u] * c, ans); // 根变儿子步骤 int pre = Mdp[u]; for (int v : G[u]) &#123; if (Mdp[v] + 1 &gt; Mx1) &#123; Mx2 = Mx1; Mx1 = Mdp[v] + 1; &#125; else if (Mdp[v] + 1 &gt; Mx2) &#123; Mx2 = Mdp[v] + 1; &#125; &#125; for (int v : G[u]) &#123; if (v == f) continue; // 由于根要变成儿子，所以要改变原来的转移值 if (Mdp[v] + 1 == Mx1) Mdp[u] = Mx2; else Mdp[u] = Mx1; dfs2(v, u); &#125; // 还原原始的值。 Mdp[u] = pre; &#125; void sol() &#123; for (int i = 1; i &lt;= n; ++i) G[i].clear(); ans = 0; cin &gt;&gt; n &gt;&gt; k &gt;&gt; c; int u, v; for (int i = 1; i &lt; n; ++i) &#123; cin &gt;&gt; u &gt;&gt; v; G[u].push_back(v); G[v].push_back(u); &#125; dfs(1, 0, 0); dfs2(1, 0); cout &lt;&lt; ans &lt;&lt; &#x27;\\n&#x27;; &#125; int main() &#123; ios::sync_with_stdio(0); int T; cin &gt;&gt; T; while (T --) &#123; sol(); &#125; return 0; &#125;\n\nPython\n\nfrom collections import defaultdict import sys sys.setrecursionlimit(100000) N = 100010 G = defaultdict(list) n, k, c = 0, 0, 0 dep = [0] * N Mdp = [0] * N ans = 0 def dfs(u, f, dt): # 求出以1为根的原始信息 global dep, Mdp dep[u] = dt Mdp[u] = 0 for v in G[u]: if v == f: continue dfs(v, u, dt + 1) Mdp[u] = max(Mdp[v] + 1, Mdp[u]) def dfs2(u, f): # 开始换根 global ans, dep, Mdp tmpf = 0 Mx1 = 0 Mx2 = 0 # 重新转移 for v in G[u]: tmpf = max(tmpf, Mdp[v] + 1) # 维护答案 ans = max(ans, tmpf * k - dep[u] * c) # 根变儿子步骤 pre = Mdp[u] for v in G[u]: if Mdp[v] + 1 &gt; Mx1: Mx2 = Mx1 Mx1 = Mdp[v] + 1 elif Mdp[v] + 1 &gt; Mx2: Mx2 = Mdp[v] + 1 for v in G[u]: if v == f: continue # 由于根要变成儿子，所以要改变原来的转移值 if Mdp[v] + 1 == Mx1: Mdp[u] = Mx2 else: Mdp[u] = Mx1 dfs2(v, u) # 还原原始的值。 Mdp[u] = pre def sol(): global n, k, c, ans, G, dep, Mdp n, k, c = map(int, input().split()) G.clear() ans = 0 for _ in range(n - 1): u, v = map(int, input().split()) G[u].append(v) G[v].append(u) dfs(1, 0, 0) dfs2(1, 0) print(ans) T = int(input()) for _ in range(T): sol()\n\nJava\n\nimport java.util.*; import java.io.*; public class Main &#123; static final int N = 100010; static List&lt;Integer&gt;[] G; static int n, k, c; static int[] dep, Mdp; static long ans; static void dfs(int u, int f, int dt) &#123; // 求出以1为根的原始信息 Mdp[u] = 0; for (int v : G[u]) &#123; if (v == f) continue; dfs(v, u, dt + 1); Mdp[u] = Math.max(Mdp[v] + 1, Mdp[u]); &#125; &#125; static void dfs2(int u, int f) &#123; // 开始换根 int tmpf = 0, Mx1 = 0, Mx2 = 0; /** * 重新转移 */ for (int v : G[u]) &#123; tmpf = Math.max(tmpf, Mdp[v] + 1); &#125; // 维护答案 ans = Math.max(ans, (long) tmpf * k - (long) dep[u] * c); // 根变儿子步骤 int pre = Mdp[u]; for (int v : G[u]) &#123; if (Mdp[v] + 1 &gt; Mx1) &#123; Mx2 = Mx1; Mx1 = Mdp[v] + 1; &#125; else if (Mdp[v] + 1 &gt; Mx2) &#123; Mx2 = Mdp[v] + 1; &#125; &#125; for (int v : G[u]) &#123; if (v == f) continue; // 由于根要变成儿子，所以要改变原来的转移值 if (Mdp[v] + 1 == Mx1) &#123; Mdp[u] = Mx2; &#125; else &#123; Mdp[u] = Mx1; &#125; dfs2(v, u); &#125; // 还原原始的值。 Mdp[u] = pre; &#125; static void sol(Scanner scanner) &#123; for (int i = 1; i &lt;= n; i++) G[i].clear(); ans = 0; n = scanner.nextInt(); k = scanner.nextInt(); c = scanner.nextInt(); int u, v; for (int i = 1; i &lt; n; i++) &#123; u = scanner.nextInt(); v = scanner.nextInt(); G[u].add(v); G[v].add(u); &#125; dfs(1, 0, 0); dfs2(1, 0); System.out.println(ans); &#125; public static void main(String[] args) &#123; G = new ArrayList[N]; for (int i = 0; i &lt; N; i++) &#123; G[i] = new ArrayList&lt;&gt;(); &#125; dep = new int[N]; Mdp = new int[N]; Scanner scanner = new Scanner(System.in); int T = scanner.nextInt(); while (T-- &gt; 0) &#123; sol(scanner); &#125; &#125; &#125;\n5. 作业\n\n\n\n题目\n链接\n\n\n\n\n取气球（算法赛）\nhttps://www.lanqiao.cn/problems/17024/learning/\n\n\n左孩子右兄弟（21 年省赛）\nhttps://www.lanqiao.cn/problems/1451/learning/\n\n\n\n\n"},{"title":"案例：员工管理系统","url":"/2024/03/12/%E6%A1%88%E4%BE%8B%EF%BC%9A%E5%91%98%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/","content":"员工管理系统(Employee management system)需求描述\n\n实现思路需求包括增删改查，可以使用mybatis框架快速满足需求\n创建一个maven项目Ems(Employee management system)\n修改pom.xml配置&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;  &lt;groupId&gt;org.zdx-1&lt;/groupId&gt;  &lt;artifactId&gt;Ems&lt;/artifactId&gt;  &lt;version&gt;1.0&lt;/version&gt;  &lt;properties&gt;    &lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt;    &lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt;  &lt;/properties&gt;  &lt;dependencies&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.mybatis&lt;/groupId&gt;      &lt;artifactId&gt;mybatis&lt;/artifactId&gt;      &lt;version&gt;3.5.2&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;mysql&lt;/groupId&gt;      &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;      &lt;version&gt;8.0.18&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;junit&lt;/groupId&gt;      &lt;artifactId&gt;junit&lt;/artifactId&gt;      &lt;version&gt;4.12&lt;/version&gt;      &lt;scope&gt;test&lt;/scope&gt;    &lt;/dependency&gt;  &lt;/dependencies&gt;  &lt;build&gt;    &lt;resources&gt;      &lt;resource&gt;        &lt;directory&gt;src/main/java&lt;/directory&gt;        &lt;includes&gt;          &lt;include&gt;**/*.properties&lt;/include&gt;          &lt;include&gt;**/*.xml&lt;/include&gt;        &lt;/includes&gt;        &lt;filtering&gt;true&lt;/filtering&gt;      &lt;/resource&gt;    &lt;/resources&gt;  &lt;/build&gt;&lt;/project&gt;\n建立对应的文件目录\n使用MySql建立数据库连接\n新建数据库Ems，新建表employee，添加几条数据\nuse ems;create table employee(    id int primary key auto_increment,    name varchar(20),    age int,    position varchar(20));insert into employee (name, age, position)VALUES    (&#x27;John&#x27;, 20, &#x27;developer&#x27;),    (&#x27;Bob&#x27;, 21, &#x27;developer&#x27;),    (&#x27;测试员01&#x27;, 22, &#x27;developer&#x27;);\n在resources中添加项目连接配置mybatis-config.xml\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;&lt;!DOCTYPE configuration        PUBLIC &quot;-//mybaties.org//DTD Config 3.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;    &lt;properties resource=&quot;db.properties&quot;/&gt;    &lt;environments default=&quot;development&quot;&gt;        &lt;environment id=&quot;development&quot;&gt;            &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;            &lt;dataSource type=&quot;POOLED&quot;&gt;                &lt;property name=&quot;driver&quot; value=&quot;$&#123;mysql.driver&#125;&quot;/&gt;                &lt;property name=&quot;url&quot; value=&quot;$&#123;mysql.url&#125;&quot;/&gt;                &lt;property name=&quot;username&quot; value=&quot;$&#123;mysql.username&#125;&quot;/&gt;                &lt;property name=&quot;password&quot; value=&quot;$&#123;mysql.password&#125;&quot;/&gt;            &lt;/dataSource&gt;        &lt;/environment&gt;    &lt;/environments&gt;    &lt;mappers&gt;        &lt;mapper resource=&quot;mapper/UserMapper.xml&quot;/&gt;        &lt;mapper resource=&quot;com/example/mapper/StudentMapper.xml&quot;/&gt;        &lt;mapper resource=&quot;com/example/mapper/CustomerMapper.xml&quot;/&gt;    &lt;/mappers&gt;&lt;/configuration&gt;\ndb.properties\nmysql.driver=com.mysql.cj.jdbc.Drivermysql.url=jdbc:mysql://localhost:3306/Ems?serverTimezone=UTC&amp;characterEncoding=utf8&amp;useUnicode=true&amp;useSSL=falsemysql.username=rootmysql.password=123456\n编写一个utils文件MyBatisUtils.javapackage com.zdx.utils;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import java.io.IOException;import java.io.Reader;public class MyBatisUtils &#123;    private static SqlSessionFactory sqlSessionFactory=null;    static &#123;        try&#123;            Reader reader= Resources.getResourceAsReader(&quot;mybatis-config.xml&quot;);            sqlSessionFactory=new SqlSessionFactoryBuilder().build(reader);        &#125;catch (IOException e)&#123;            e.printStackTrace();        &#125;    &#125;    public static SqlSession getSession()&#123;        return sqlSessionFactory.openSession();    &#125;&#125;\n这段代码是MyBatisUtils工具类的实现，用于提供SqlSession的获取方法，从而方便地进行数据库操作。具体来说：\n\n这个类首先定义了一个静态的SqlSessionFactory变量sqlSessionFactory，用于存储SqlSessionFactory对象，它是MyBatis的核心对象，可以创建SqlSession实例。\n在静态代码块中，通过Resources类的getResourceAsReader方法读取mybatis-config.xml配置文件，并使用SqlSessionFactoryBuilder的build方法构建SqlSessionFactory对象。\n定义了一个公共的静态方法getSession，该方法返回一个SqlSession对象。通过调用sqlSessionFactory的openSession方法来创建SqlSession实例，从而可以执行MyBatis的SQL语句。\n\n总结：这段代码的作用是通过MyBatisUtils工具类简化获取SqlSession的过程，使得开发者能够更加方便地进行数据库操作。\n在pojo中创建employee实体类package com.zdx.pojo;public class employee &#123;    private int id;    private String name;    private int age;    private String position;    public int getId() &#123;        return id;    &#125;    public void setId(int id) &#123;        this.id = id;    &#125;    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name = name;    &#125;    public int getAge() &#123;        return age;    &#125;    public void setAge(int age) &#123;        this.age = age;    &#125;    public String getPosition() &#123;        return position;    &#125;    public void setPosition(String position) &#123;        this.position = position;    &#125;    public employee(int id, String name, int age, String position) &#123;        this.id = id;        this.name = name;        this.age = age;        this.position = position;    &#125;    public employee() &#123;    &#125;    //构造方法    //重写toString方法&#125;\n在Mapper编写对应的查询条件&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper        PUBLIC &quot;-//mybatis.org//DTD mapper 3.0//EN&quot;        &quot;htttp://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.zdx.mapper.EmployeeMapper&quot;&gt;    &lt;select id=&quot;findAll&quot; resultType=&quot;com.zdx.pojo.Employee&quot; resultMap=&quot;EmployeeMap&quot;&gt;        select * from employee where id=1    &lt;/select&gt;    &lt;resultMap type=&quot;com.zdx.pojo.Employee&quot; id=&quot;EmployeeMap&quot;&gt;        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;        &lt;result property=&quot;age&quot; column=&quot;age&quot; /&gt;        &lt;result property=&quot;position&quot; column=&quot;position&quot;/&gt;    &lt;/resultMap&gt;    &lt;select id=&quot;findById&quot; parameterType=&quot;int&quot; resultMap=&quot;EmployeeMap&quot;&gt;        select * from employee where id=#&#123;id&#125;    &lt;/select&gt;    &lt;insert id=&quot;insert&quot; parameterType=&quot;com.zdx.pojo.Employee&quot; &gt;        insert into employee(name,age,position) values(#&#123;name&#125;,#&#123;age&#125;,#&#123;position&#125;)    &lt;/insert&gt;    &lt;update id=&quot;update&quot; parameterType=&quot;com.zdx.pojo.Employee&quot;&gt;        update employee set name=#&#123;name&#125;,age=#&#123;age&#125;,position=#&#123;position&#125; where id=#&#123;id&#125;    &lt;/update&gt;&lt;/mapper&gt;\n在test/java中编写测试类EmployeeTestimport com.zdx.pojo.Employee;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import org.junit.After;import org.junit.Before;import org.junit.Test;import java.io.IOException;import java.io.Reader;public class EmployeeTest &#123;    private SqlSessionFactory sqlSessionFactory;    private SqlSession sqlSession;    @Before    public void init()&#123;        String resources =&quot;mybatis-config.xml&quot;;        Reader reader=null;        try &#123;            reader= Resources.getResourceAsReader(resources);            SqlSessionFactory sqlMapper=new SqlSessionFactoryBuilder().build(reader);            sqlSession=sqlMapper.openSession();        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;    @Test    public void testSelectAll()&#123;        Employee employee=sqlSession.selectOne(&quot;com.zdx.mapper.EmployeeMapper.findAll&quot;);        System.out.println(employee);    &#125;    @Test    public void testDelete()&#123;        Employee employee=new Employee(1,&quot;张三&quot;,20,&quot;manager&quot;);        sqlSession.delete(&quot;com.zdx.mapper.EmployeeMapper.delete&quot;,employee);    &#125;    @Test    public void testInsert()&#123;        Employee employee=new Employee(1,&quot;张三&quot;,20,&quot;manager&quot;);        sqlSession.insert(&quot;com.zdx.mapper.EmployeeMapper.insert&quot;,employee);    &#125;    @Test    public void testUpdate()&#123;        Employee employee=new Employee(1,&quot;张三&quot;,20,&quot;manager&quot;);        sqlSession.update(&quot;com.zdx.mapper.EmployeeMapper.update&quot;,employee);        System.out.println(employee.getName().toString());    &#125;    @After    public void destroy()&#123;        sqlSession.commit();        sqlSession.close();    &#125;&#125;\n其余实现基本同上面一致，故不再记录。\n代码实现代码仓库：https://github.com/zdx-1/JavaEE-Learn\n","categories":["Java EE 开发"],"tags":["MyBatis"]},{"title":"枚举法与尺取法","url":"/2024/03/11/%E6%9E%9A%E4%B8%BE%E6%B3%95%E4%B8%8E%E5%B0%BA%E5%8F%96%E6%B3%95/","content":"在之前的课程中，我们深入讨论了打表法与模拟法的暴力解法。提到暴力，我们通常会首先想到枚举。然而，枚举实际上是一门技术，要确保能够穷尽所有可能的情况并不容易。因此，在本节课中，我们将详细介绍枚举法的技巧，以确保能够完整地列举出所有情况，不漏一种。\n知识点\n枚举法\n简单型枚举\n组合型枚举\n排列型枚举\n指数型枚举\n\n\n尺取算法\n\n枚举法枚举算法的思想：\n枚举算法的核心思想是将问题的所有可能成为答案的解一一列举，然后根据问题给定的条件判断这些解是否合适。对于符合条件的解，保留；反之则舍弃。\n枚举算法解题的基本思路：\n\n确定枚举解的范围和判断条件： 在开始解题之前，需要明确枚举的解范围，并定义问题的判断条件。\n选取合适的枚举方法： 选择适当的枚举方式进行逐一枚举，确保覆盖所有可能的解。避免遗漏任何真正的解，同时注意防止重复。\n使用判断条件检验解： 在枚举过程中，应用事先确定的判断条件验证每个解的合法性，保留符合要求的解。\n\n枚举算法的一般步骤：\n\n确定范围和枚举方式： 根据题目确定枚举的范围，并选择合适的枚举方式。确保不遗漏任何真正的解，同时避免重复。\n优化解空间： 查看是否存在优化的可能性，以缩小可能成为解的答案范围，提高解决问题的效率。\n定义准确验证条件： 根据问题找到准确、易编码的验证条件，用于检验每个可能的解。\n枚举和判断： 逐一枚举解并验证是否符合事先确定的条件，保留符合条件的解。\n输出结果： 按照要求输出枚举过程中留下的符合条件的解。\n\n枚举法包含多种技巧和方法，本节课将深入探讨其中几种方法。\n简单型枚举简单型枚举是通过简单的 for 循环嵌套解决的问题类型。在之前的课程中，我们所讨论的题目通常属于简单型枚举的范畴。因此，简单型枚举是一种相对简单且大家接触最多的枚举方式。\n这种枚举方式没有特定的固定枚举模式，而且相对简单。只需按照题目的要求设计代码即可完成解题。\n让我们通过一个示例题目来复习一下。\n42 点问题题目描述:\n众所周知在扑克牌中，有一个老掉牙的游戏叫做 2424 点，选取 44 张牌进行加减乘除，看是否能得出 2424 这个答案。\n现在小蓝同学发明了一个新游戏，他从扑克牌中依次抽出 66 张牌，注意不是一次抽出，进行计算，看是否能够组成 4242 点，满足输出 ���YES，反之输出 ��N**O。\n最先抽出来的牌作为第一个操作数，抽出牌做第二个操作数，运算结果在当作第一个操作数，继续进行操作。\n除不尽的情况保留整数。\n请设计一个程序对该问题进行解答。\n样例:\n输入：K A Q 6 2 3输出：YES\n对于上面的样例我们进行了如下计算；\n1. K*A=K 即 13*1=132. 13/12=1 保留整数3. 1+6=74. 7*2=145. 14*3=42\n运行限制:\n最大运行时间：1s最大运行内存: 128M\n题目解析：\n这个题目我们可以依次枚举数字，然后在枚举数字间的符号即可。由于到结果之间进行了三步计算，所以我们这里需要进行一个递归操作，利用了上节课讲解的知识。\n两重循环即可解决问题，伪代码如下：\nop1 赋值为 第一个数op(op[1] op[2])&#123;    for op in [+ - * /]       ans = 第一个操作数op1 操作 第二个操作数op2        如果是第六个操作数，就检验是否符合要要求 ==42？ 如果是就返回True        如果op(ans , op[3]) 返回 True，就返回True 因为找到了答案，否则就继续进行    没有找到答案返回False&#125;\n但是这样写，思路感觉很清晰，写起来却非常的复杂，我们使用我们讲过的 Vector 来优化这个枚举方式。\n我们创建 5 个 Vector ，分别用来存放 1−51−5 次的运算结果，非常简单。我们答案就采用这种方式。\n答案解析C++ 代码：\n#include &lt;iostream&gt;#include &lt;vector&gt;using namespace std;int a[10];vector &lt;int&gt; ans[10];int main()&#123;    for(int i=0; i&lt;6; i++)    &#123;        char c;        cin&gt;&gt;c;        if(c==&#x27;A&#x27;)            a[i]=1;        else if(c==&#x27;J&#x27;)            a[i]=11;        else if(c==&#x27;Q&#x27;)            a[i]=12;        else if(c==&#x27;K&#x27;)            a[i]=13;        else            a[i]=(c-&#x27;0&#x27;);        //cout&lt;&lt;a[i]&lt;&lt;endl;    &#125;    ans[0].push_back(a[0]);    for(int i=1; i&lt;=5; i++)    &#123;        for(int j=0; j&lt;ans[i-1].size(); j++)        &#123;            ans[i].push_back(ans[i-1][j]+a[i]);            ans[i].push_back(ans[i-1][j]-a[i]);            ans[i].push_back(ans[i-1][j]*a[i]);            ans[i].push_back(ans[i-1][j]/a[i]);        &#125;    &#125;    //cout&lt;&lt;ans[5].size()&lt;&lt;endl;    int flag=0;    for(int i=0; i&lt;ans[5].size(); i++)    &#123;        if(ans[5][i]==42)        &#123;            flag=1;            break;        &#125;    &#125;    if(flag==1)        cout&lt;&lt;&quot;YES&quot;&lt;&lt;endl;    else        cout&lt;&lt;&quot;NO&quot;&lt;&lt;endl;&#125;\nPython 解题代码\nans = [[] for i in range(10)]a = [&#x27;0&#x27;]*10if __name__ == &#x27;__main__&#x27;:c = input().split()for i in range(6):    if c[i] == &#x27;A&#x27;:        a[i] = 1    elif c[i] == &#x27;J&#x27;:        a[i] = 11    elif c[i] == &#x27;Q&#x27;:        a[i] = 12    elif c[i] == &#x27;K&#x27;:        a[i] = 13    else:        a[i] = ord(c[i]) - ord(&#x27;0&#x27;)ans[0].append(a[0])for i in range(1, 6):    for j in range(len(ans[i - 1])):        ans[i].append(ans[i - 1][j] + a[i])        ans[i].append(ans[i - 1][j] - a[i])        ans[i].append(ans[i - 1][j] * a[i])        ans[i].append(int(ans[i - 1][j] / a[i]))flag = 0for j in range(len(ans[5])):    if ans[5][j] == 42:        flag = 1        breakif flag == 1:    print(&quot;YES&quot;)else:    print(&quot;NO&quot;)\nJava 解题代码\nimport java.util.Scanner;import java.util.Vector;public class Main &#123;  static int[] a = new int[10];  static Vector&lt;Vector&lt;Integer&gt;&gt; ans = new Vector&lt;Vector&lt;Integer&gt;&gt;();  public static void main(String[] args) &#123;      Scanner in = new Scanner(System.in);      for (int i = 0; i &lt; 6; i++) &#123;          String c;          c = in.next();//            System.out.println(c);          if (c.charAt(0) == &#x27;A&#x27;)              a[i] = 1;          else if (c.charAt(0) == &#x27;J&#x27;)              a[i] = 11;          else if (c.charAt(0) == &#x27;Q&#x27;)              a[i] = 12;          else if (c.charAt(0) == &#x27;K&#x27;)              a[i] = 13;          else              a[i] = (c.charAt(0) - &#x27;0&#x27;);//            System.out.println(a[i]);      &#125;      ans.addElement(new Vector&lt;Integer&gt;());      ans.get(0).addElement(a[0]);      for(int i=1; i&lt;=5; i++)      &#123;          ans.addElement(new Vector&lt;Integer&gt;());          for(int j = 0; j&lt; ans.get(i - 1).size(); j++)          &#123;              ans.get(i).addElement(ans.get(i - 1).get(j) +a[i]);              ans.get(i).addElement(ans.get(i - 1).get(j)-a[i]);              ans.get(i).addElement(ans.get(i - 1).get(j)*a[i]);              ans.get(i).addElement(ans.get(i - 1).get(j)/a[i]);          &#125;      &#125;      //cout&lt;&lt;ans[5].size()&lt;&lt;endl;      int flag=0;      for(int i = 0; i&lt; ans.get(5).size(); i++)      &#123;          if(ans.get(5).get(i)==42)          &#123;              flag=1;              break;          &#125;      &#125;      if(flag==1)          System.out.println(&quot;YES&quot;);      else          System.out.println(&quot; NO&quot;);  &#125;&#125;\n组合型枚举排列组合是大家都接触过的概念，而组合型枚举则是在 �n 个元素中随机选出 �m 个元素的问题。对于每一种可能的选择方案，我们需要确定选择了哪 �m 个元素，这就                                                                                                                                   是组合型枚举。\n具体而言，组合型枚举解决的是 ���Cnm 问题，即从 �n 个元素中选择 �m 个元素的组合数量。\n组合型枚举有一套固定的流程和算法模板，需要大家进行记忆。\nchosen = []n = 0m = 0def calc(x):  if len(chosen) &gt; m:      return  if len(chosen) + n - x + 1 &lt; m:      return  if x == n + 1:      for i in chosen:          print(i,end=&#x27; &#x27;)      print(&#x27;&#x27;)      return  chosen.append(x)  calc(x + 1)  chosen.pop()  calc(x + 1)if __name__ == &#x27;__main__&#x27;:  tem = input().split()  n = int(tem[0])  m = int(tem[1])  calc(1)import java.util.Scanner;import java.util.Vector;public class Main &#123;    static  int n;    static int m;//选m个数    static Vector&lt;Integer&gt; chosen = new Vector&lt;Integer&gt;();    static  void calc(int x) &#123;        if (chosen.size() &gt; m || chosen.size() + (n - x + 1) &lt; m) //剪枝            return;        if (x == n + 1) &#123; //选够了m个数输出            String ansTem = &quot;&quot;;            for (int i = 0; i &lt; chosen.size(); i++)                System.out.print(chosen.get(i)+&quot; &quot;);            System.out.println(&quot;&quot;);            return;        &#125;        chosen.addElement(x);        calc(x + 1);        chosen.remove((Object)x);        calc(x + 1);    &#125;    public static void main(String[] args) &#123;        Scanner in = new Scanner(System.in);        n = in.nextInt();        m = in.nextInt();        calc(1);    &#125;&#125;#include&lt;bits/stdc++.h&gt;using namespace std;int n;//共计N个数int m;//选m个数vector&lt;int&gt; chosen;string s[1000];void calc(int x) &#123;    if (chosen.size() &gt; m || chosen.size() + (n - x + 1) &lt; m) //剪枝        return;    if (x == n + 1) &#123; //选够了m个数输出        for (int i = 0; i &lt; chosen.size(); i++)            cout&lt;&lt; s[chosen[i]]&lt;&lt;&quot; &quot;;//也可以不输出，存放起来也是可以的，主要是看题目。        puts(&quot;&quot;);        return;    &#125;    chosen.push_back(x);    calc(x + 1);    chosen.pop_back();//消除痕迹    calc(x + 1);&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=n;i++)    &#123;        cin&gt;&gt;s[i];    &#125;    calc(1);&#125;\n大家有个疑虑，我这里全是数字而且是从 11 开始的能好用吗，我题目要是字母怎么办，那么请看下面的题目。\n公平抽签题目描述:\n小 A 的学校，蓝桥杯的参赛名额非常有限，只有 �m 个名额，但是共有 �n 个人报名，其中 �≤�m≤n。作为老师非常苦恼，他不知道该让谁去，他在寻求一个绝对公平的方式。于是他准备让大家抽签决定，即 �m 个签是去，剩下的是不去。\n小 A 非常想弄明白最后的抽签结果是什么样子的，到底有多少种结果。\n请设计一个程序帮助小 A。最后输出各种情况的人名即可，一行一种情况，每种情况的名字按照报名即输入顺序排序。\n第一行 输入 �,�N,M。\n第二行 到 第 �+1N+1 行 共输入 �N 个人名\n每种情况输出 �M 个人名，空格隔开。\n样例:\n输入：3  2xiaowangxiaoAxiaoli输出：xiaowang xiaoAxiaowang xiaolixiaoA xiaoli\n运行限制:\n1. 最大运行时间：1s2. 最大运行内存：128M\n题目解析：\n实际上还是组合型枚举，但是输出元素为人名，我们可以将人名存起来，输出的时候，根据数字下标找到提前存好的人名，直接输出即可。\n答案解析C++ 代码：\n#include &lt;iostream&gt;#include &lt;vector&gt;using namespace std;int n; //共计N个数int m; //选m个数vector&lt;string&gt; name;vector&lt;string&gt; ans;vector&lt;int&gt; chosen;void calc(int x)&#123;    if (chosen.size() &gt; m || chosen.size() + (n - x + 1) &lt; m) //剪枝        return;    if (x == n + 1)    &#123; //选够了m个数输出        string ansTem = &quot;&quot;;        for (int i = 0; i &lt; chosen.size(); i++)            ansTem += name[chosen[i] - 1] + &quot; &quot;;        ans.push_back(ansTem);        return;    &#125;    chosen.push_back(x);    calc(x + 1);    chosen.pop_back(); //消除痕迹    calc(x + 1);&#125;int main()&#123;    cin &gt;&gt; n &gt;&gt; m;    for (int i = 0; i &lt; n; i++)    &#123;        string s;        cin &gt;&gt; s;        name.push_back(s);    &#125;    calc(1);    for (int i =0; i &lt; ans.size(); i++)        cout &lt;&lt; ans[i] &lt;&lt; endl;&#125;\nPython 解题代码\nname = []ans = []chosen = []n = 0m = 0def calc(x):    if len(chosen) &gt; m:        return    if len(chosen) + n - x + 1 &lt; m:        return    if x == n + 1:        ansTem = &quot;&quot;        for i in chosen:            ansTem = ansTem + name[i - 1] + &#x27; &#x27;        # print(ansTem)        ans.append(ansTem)        return    chosen.append(x)    calc(x + 1)    chosen.pop()    calc(x + 1)if __name__ == &#x27;__main__&#x27;:    tem = input().split()    n = int(tem[0])    m = int(tem[1])    # print(n,&quot; &quot;,m)    for i in range(n):        s = input()        name.append(s)    # print(name)    calc(1)    for i in range(0,len(ans)):        print(ans[i])\nJava 解题代码\nimport java.util.Scanner;import java.util.Vector;public class Main &#123;  static  int n;  static int m;//选m个数  static Vector&lt;String&gt; name = new Vector&lt;String&gt;();  static Vector&lt;String&gt; ans = new Vector&lt;String&gt;();  static Vector&lt;Integer&gt; chosen = new Vector&lt;Integer&gt;();  static &lt;object&gt; void calc(int x) &#123;      if (chosen.size() &gt; m || chosen.size() + (n - x + 1) &lt; m) //剪枝          return;      if (x == n + 1) &#123; //选够了m个数输出          String ansTem = &quot;&quot;;          for (int i = 0; i &lt; chosen.size(); i++)              ansTem += name.get(chosen.get(i) - 1) + &quot; &quot;;          ans.addElement(ansTem);          return;      &#125;      chosen.addElement(x);      calc(x + 1);      chosen.remove((Object)x);      calc(x + 1);  &#125;  public static void main(String[] args) &#123;      Scanner in = new Scanner(System.in);      n = in.nextInt();      m = in.nextInt();      for (int i = 0; i &lt; n; i++) &#123;         String s;         s=in.next();         name.addElement(s);      &#125;      calc(1);    for (int i =0; i &lt; ans.size(); i++)          System.out.println(ans.get(i) );  &#125;&#125;\n排列型枚举上面说过，组合型枚举就是让你在 �n 个中，随机选出 �m 个 ，问你有多少种方案，而且每一种方案选择了哪 $m ￥ 个，这就是组合型枚举。\n而排列型枚举相对组合型枚举就简单了一点，就是 �n 个的全排列，即从 �n 个中选取 �n 个但是关心内部的顺序。\n相比较组合只关心有多少个集合，而排列是关心集合内的排列方式。即排列型枚举就是寻找 ���Ann 问题。\n而且排列型枚举也是有着比较成熟的模板需要大家进行记忆。\nint n; //共计N个数int order[20];bool chosen[20];void calc(int k)&#123;    if (k == n + 1)    &#123;        for (int i = 1; i &lt;= n; i++)            cout &lt;&lt; order[i] &lt;&lt; &quot; &quot;;        puts(&quot;&quot;);        return;    &#125;    for (int i = 1; i &lt;= n; i++)    &#123;        if (chosen[i])            continue;        order[k] = i;        chosen[i] = 1;        calc(k + 1);        chosen[i] = 0;        order[k] = 0;    &#125;&#125;int main()&#123;    cin &gt;&gt; n;    calc(1);&#125;\nPython 写法\norder = [0] * 20chosen = [0] * 20n = 0def calc(x):  if x == n + 1:      ansTem = &#x27;&#x27;      for i in range(1, n + 1):          print(order[i],end=&#x27; &#x27;)      print(&#x27;&#x27;)      return  for i in range(1,n+1):      if(chosen[i]==1) :          continue      order[x]=i      chosen[i]=1      calc(x+1)      chosen[i]=0      order[x]=0if __name__ == &#x27;__main__&#x27;:  n = int(input())  # print(name)  calc(1)\nJava 写法\nstatic  int n;static int[] order =new int[20];static boolean[] chosen =new boolean[20];static &lt;object&gt; void calc(int x) &#123;    if (x == n + 1) &#123; //选够了m个数输出        String ansTem = &quot;&quot;;        for (int i = 1; i &lt;=n ; i++)            System.out.println(order[i]);        return;    &#125;    for (int i = 1; i &lt;= n; i++) &#123;        if (chosen[i]) continue;        order[x] = i;        chosen[i] =true;        calc(x + 1);        chosen[i] = false;        order[x] = 0;    &#125;&#125;public static void main(String[] args) &#123;    Scanner in = new Scanner(System.in);    n = in.nextInt();    for (int i = 0; i &lt; n; i++) &#123;       String s;        s=in.next();        name.addElement(s);    &#125;    calc(1);&#125;\n不少同学问我 2020 够不够，排列问题是阶乘阶的时间复杂度，如果超过这个复杂度，那么这个题也就不用做了，算不出来。\n所以肯定够用。\n41 2 3 41 2 4 31 3 2 41 3 4 21 4 2 31 4 3 22 1 3 42 1 4 32 3 1 42 3 4 12 4 1 32 4 3 13 1 2 43 1 4 23 2 1 43 2 4 13 4 1 23 4 2 14 1 2 34 1 3 24 2 1 34 2 3 14 3 1 24 3 2 1\n44 的排列就已经这么多了，大家可以尝试跑一下 1010。\n同样，我们再来看一个的问题来进行加深理解。\n座次问题题目描述:\n小 �A 的学校，老师好不容易解决了蓝桥杯的报名问题，现在老师又犯愁了。现在有 �N 位同学参加比赛，但是老师想给他们排座位，但是排列方式太多了。老师非常想弄明白最后的排座次的结果是什么样子的，到底有多少种结果。\n请设计一个程序帮助老师。\n最后输出各种情况的人名即可，一行一种情况，每种情况的名字按照报名即输入顺序排序。\n第一行 输入 �N； 第二行 到 第 �+1N+1 行 共输入 �N 个人名。\n由于小 A 学校承办能力实在有限，所以其中 �N 小于等于 1010 人。\n样例:\n输入：3xiaowangxiaoAxiaoli输出：xiaowang xiaoA xiaolixiaowang xiaoli xiaoAxiaoA xiaowang xiaolixiaoA xiaoli xiaowangxiaoli xiaowang xiaoAxiaoli xiaoA xiaowang\n运行限制:\n1. 最大运行时间：1s2. 最大运行内存：128M\n题目解析：\n实际上还是排列型枚举，但是输出元素为人名，我们可以将人名存起来，输出的时候，根据数字下标找到提前存好的人名，就是按照上一道题的方式处理即可。\n答案解析C++ 代码：\n#include &lt;iostream&gt;#include &lt;vector&gt;using namespace std;int n; //共计N个数vector&lt;string&gt; name;int order[20];bool chosen[20];void calc(int k)&#123;    if (k == n + 1)    &#123;        for (int i = 1; i &lt;= n; i++)            cout &lt;&lt; name[order[i] - 1] &lt;&lt; &quot; &quot;;        puts(&quot;&quot;);        return;    &#125;    for (int i = 1; i &lt;= n; i++)    &#123;        if (chosen[i])            continue;        order[k] = i;        chosen[i] = 1;        calc(k + 1);        chosen[i] = 0;        order[k] = 0;    &#125;&#125;int main()&#123;    cin &gt;&gt; n;    for (int i = 0; i &lt; n; i++)    &#123;        string s;        cin &gt;&gt; s;        name.push_back(s);    &#125;    calc(1);&#125;\nPython 解题代码\nname = []order = [0] * 20chosen = [0] * 20n = 0def calc(x):  if x == n + 1:      ansTem = &#x27;&#x27;      for i in range(1, n + 1):          ansTem = ansTem + name[order[i]-1] + &#x27; &#x27;      print(ansTem)      return  for i in range(1,n+1):      if(chosen[i]==1) :          continue      order[x]=i      chosen[i]=1      calc(x+1)      chosen[i]=0      order[x]=0if __name__ == &#x27;__main__&#x27;:  n = int(input())  for i in range(n):      s = input()      name.append(s)  # print(name)  calc(1)\nJava 解题代码\npackage com.company;import java.util.Scanner;import java.util.Vector;public class Main &#123;  static  int n;  static Vector&lt;String&gt; name = new Vector&lt;String&gt;();  static int[] order =new int[20];  static boolean[] chosen =new boolean[20];  static &lt;object&gt; void calc(int x) &#123;      if (x == n + 1) &#123; //选够了m个数输出          String ansTem = &quot;&quot;;          for (int i = 1; i &lt;=n ; i++)              ansTem += name.get(order[i]-1) + &quot; &quot;;          System.out.println(ansTem);          return;      &#125;      for (int i = 1; i &lt;= n; i++) &#123;          if (chosen[i]) continue;          order[x] = i;          chosen[i] =true;          calc(x + 1);          chosen[i] = false;          order[x] = 0;      &#125;  &#125;  public static void main(String[] args) &#123;      Scanner in = new Scanner(System.in);      n = in.nextInt();      for (int i = 0; i &lt; n; i++) &#123;         String s;          s=in.next();          name.addElement(s);      &#125;      calc(1);  &#125;&#125;\n尺取法尺取法（双指针法、two pointers）是一种常用的优化技巧，特别适用于解决序列的区间问题。它的操作简单，易于编程，是一种线性高效的算法。\n尺取法的核心思想是维护一个区间（�,�L,R），其中 �L 为起点，�R 为终点，该区间是序列内以 �L 为起点的最短合法区间。关键在于 �R 随着 �L 的增大而增大。通过不断枚举 �L，同时求解相应的 �R，可以高效地解决问题。\n具体的实现步骤是，不断移动 �L 指针，同时更新 �R 指针，直到 �R 随着 �L 的增大而增大。因为 �R 随着 �L 的增大而增大，所以总的时间复杂度为 �(�)O(n)。\n通过维护两个指针，即左指针 �l 和右指针 �r。通过不断确定区间的左端点，让右指针 �r 不断向右移动，直到满足条件停下，然后维护答案。这个过程重复进行，直到左指针 �l 超过右指针 �r 或满足其他特定情况（根据题目而定）。\n尺取法的应用范围广泛，特别适用于需要寻找满足某种条件的连续子序列的问题。通过灵活运用尺取法，可以在保持算法简洁的同时，提高解题效率。\n例题 奇怪的的动物园题目描述动物园正在展出由世上最受欢迎的 �m 种动物组成的精彩展览。\n游客在购买门票时必须说明两个数字，�a 和 �b，代表他们希望观看的展览范围，从第 �a 种动物到第 �b 种动物（包含 �,�a,b）。门票的价格是按照观看的动物数量计算的，即每种动物一元。\n小明希望在最小化购票花费的同时，能够欣赏到所有受欢迎的动物。\n请计算他应该选择哪些动物范围，即 �a 和 �b。\n若存在多组解，输出其中 �a 最小的那组。\n输入格式第一行包含两个整数 �n 和 �m，分别表示动物园内的动物总数以及受欢迎的动物种类数量。\n第二行包含 �n 个整数 ��a**i，表示第 �i 种动物的种类。\n输出格式一行包含两个整数 �,�a,b。\n样例输入\n12 52 5 3 1 3 2 4 1 1 5 4 3\n样例输出\n2 7\n思路与算法这是一道使用尺取法（Two Pointers）的题目。我们维护两个指针 l 和 r，分别表示当前选择区间的左右端点。通过不断调整右指针 r，保证区间内包含所有受欢迎的动物。在滑动窗口的过程中，记录最小购票范围。\n具体的实现细节如下：\n\n使用 I 函数加入第 x 种动物的画，同时更新相应的计数和唯一动物数量。\n使用 D 函数删除第 x 种动物的画，同时更新相应的计数和唯一动物数量。\n不断移动右指针 r，并在保证区间内包含所有受欢迎的动物的前提下，更新最小购票范围。\n移动左指针 l，直到无法再删除动物，保证区间仍然包含所有受欢迎的动物。\n\n复杂度分析由于每个动物最多被插入和删除一次，算法的时间复杂度为 �(�)O(n)，其中 �n 是动物的数量。\n代码#include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 1000005;int n, m, a[MAXN], b[MAXN], cnt, ans, ansl, ansr;// 加入第x种动物inline void I(int x) &#123;    if (b[x] == 0) cnt++; // 如果该动物没有在当前区间中出现过，增加唯一动物数量    b[x]++; // 动物x的数量加1&#125;// 删除第x种动物inline void D(int x) &#123;    if (b[x] == 1) cnt--; // 如果删除后该动物不再在当前区间中出现，减少唯一动物数量    b[x]--; // 动物x的数量减1&#125;int main() &#123;    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);    for (int i = 1; i &lt;= n; i++) scanf(&quot;%d&quot;, &amp;a[i]); // 读取每种动物的种类    ans = n;    for (int r = 1, l = 1; r &lt;= n; r++) &#123;        I(a[r]); // 首先插入a[r]的动物        while (true) &#123;            D(a[l]); // 先删a[l]的动物            if (cnt == m) l++; // 如果删了没事，加l            else &#123;                I(a[l]);                break; // 删了有事，还留着            &#125;        &#125;        if (cnt == m &amp;&amp; r - l + 1 &lt; ans) &#123;            ans = r - l + 1;            ansl = l;            ansr = r;        &#125;    &#125;    if (ansl != 0) printf(&quot;%d %d&quot;, ansl, ansr);    else printf(&quot;1 %d&quot;, n); // 输出+特判：选择任意一个≤n的区间不满足要求，则只好选择区间[1,n]    return 0;&#125;MAXN = 1000005a = [0]*MAXNb = [0]*MAXNcnt=0ansl=0ansr=0def I(x):    global cnt    if b[x] == 0:        cnt += 1    b[x] += 1def D(x):    global cnt    if b[x] == 1:        cnt -= 1    b[x] -= 1n, m = map(int, input().split())a[1:n+1] = map(int, input().split())ans = nl = 1for r in range(1, n+1):    I(a[r])    while True:        D(a[l])        if cnt == m:            l += 1        else:            I(a[l])            break    if cnt == m and r - l + 1 &lt; ans:        ans = r - l + 1        ansl = l        ansr = rif ansl != 0:    print(ansl, ansr)else:    print(1, n)import java.util.Scanner;public class Main &#123;    static final int MAXN = 1000005;    static int[] a ;    static int[] b;    static int cnt = 0;    static void I(int x) &#123;        if (b[x] == 0) cnt++;        b[x]++;    &#125;    static void D(int x) &#123;        if (b[x] == 1) cnt--;        b[x]--;    &#125;    public static void main(String[] args) &#123;        Scanner scanner = new Scanner(System.in);        int n = scanner.nextInt();        a=new int[n+10];        b=new int[n+10];        int m = scanner.nextInt();        for (int i = 1; i &lt;= n; i++) a[i] = scanner.nextInt();        int ans = n;        int ansl = 0, ansr = 0;        for (int r = 1, l = 1; r &lt;= n; r++) &#123;            I(a[r]);            while (true) &#123;                D(a[l]);                if (cnt == m) l++;                else &#123;                    I(a[l]);                    break;                &#125;            &#125;            if (cnt == m &amp;&amp; r - l + 1 &lt; ans) &#123;                ans = r - l + 1;                ansl = l;                ansr = r;            &#125;        &#125;        if (ansl != 0) System.out.println(ansl + &quot; &quot; + ansr);        else System.out.println(&quot;1 &quot; + n);    &#125;&#125;\n这个算法通过维护两个指针，实现了在 �(�)O(n) 的时间复杂度内找到最小购票范围的目标。尺取法的思想在滑动窗口的过程中，通过不断调整左右指针来满足特定条件。\n","categories":["蓝桥杯Note"],"tags":["蓝桥杯备赛","枚举与尺取法"]},{"title":"案例：学生信息查询系统","url":"/2024/03/13/%E6%A1%88%E4%BE%8B%EF%BC%9A%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E6%9F%A5%E8%AF%A2%E7%B3%BB%E7%BB%9F/","content":""},{"title":"状态压缩动态规划的典型题型深入分析","url":"/2024/05/06/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%9A%84%E5%85%B8%E5%9E%8B%E9%A2%98%E5%9E%8B%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90/","content":"1. 树上DP概述树形 DP，即在树上进行的 DP。由于树固有的递归性质，树形 DP 一般都是递归进行的。\n大部分的树形 DP 都是线性的，并且由于树本身就是有序的，所以具有十分良好的性质，例如子结构性质等。\n树形 DP 在算法竞赛中考察多样，但是简单的可以分为：\n\n树上线性 DP。\n换根 DP。\n\n树上线性 DP 也分为很多种，不同的题有不同的考法，实际上，所有的 DP 都能在树上考，但是蓝桥比赛中，一般就几种考法：\n\n树上决策，例如选最大值，最小值。\n树上背包。\n换根，换根 dp 是树上的一类特殊性质。\n\n接下来，我们将通过几个问题来描述这三种问题的解法。\n2. 树上决策问题树上决策问题，往往是子节点向父节点转移时，只取最优的解，这一点与线性 DP 十分相似。\n看一道例题：\n2. 1 生命之树-真题\n这题看着挺玄乎，其实并没有那么复杂。\n我们观察题目要求：给定一棵树，选出一个非空集合，使得对于任意两个元素 $a, b$，都存在一个序列 $a, v_1, …v_k, b$ 是这个集合里的元素，并且相邻两个点之间有一条边。\n本来可以一句话说清楚的事情，但是偏偏要给出数学定义，所以要考察大家的归纳整理能力。\n实际上，就是要在树中选出一个连通块即可，并且满足连通块的和值最大。\n为什么呢？\n我们观察一幅图，相信大家能理解了：\n\n绿色的代表我们选择的点集合。这些点是连通的，所以满足要求。\n如果换成这个样子：\n\n这样就不满足题目要求了。\n所以大家可以体会出来，题目的要求，其实就是找一个树上的连通块。\n那么我们的问题就变成了在树上找最大的连通块了。\n树形 DP，终究还是 DP，所以需要划分子问题。\n我们常用的方法是，将子节点为根的子树，看成子问题，然后合并到当前根。\n将节点从深到浅（子树从小到大）的顺序作为 DP 的阶段，在 DP 的表示中，通常第一维代表节点的编号，后续维度按照问题进行设计。\n首先我们需要解决一个问题，树上的连通块是什么？有什么性质可以利用。\n答案是：树上的联通块也是树，他一定有根。所以我们要是找到这个根，或者枚举这个根，就可以找到答案。\n我们设计的状态如下：\n$dp_i$ 表示，对于节点为 $i$ 的子树，我们找到的以 $i$ 为根的连通块和值最大是 $dp_i$。\n那么我们的转移的意义就是：对于 $i$ 来说，由于 $i$ 一定存在连通块中，所以，我们要找到他的儿子中，哪些是和 $i$ 连着的。\n有一种贪心方案，对于 $i$ 的儿子 $v \\in son(i)$ ，如果 $dp_v \\ge 0$，我们就将他接入父亲即可。\n所以，我们的转移方程就是： dp\\_i = w\\_i + \\\\sum \\_{dp\\_j \\\\ge 0 & j \\\\in son(i)} dp\\_j 代码如下：\n\nC++\n\n#include &lt;iostream&gt; #include &lt;vector&gt; using namespace std; const int N = 1e5+100; typedef long long ll; vector&lt;int&gt; G[N]; int w[N]; ll dp[N], ans = -1e18; int n; void dfs(int u, int f) &#123; dp[u] = w[u]; for (int v : G[u]) &#123; if (v == f) continue; dfs(v, u); if (dp[v] &gt; 0) &#123; dp[u] += dp[v]; &#125; &#125; ans = max(ans, dp[u]); &#125; int main() &#123; cin &gt;&gt; n; for (int i = 1; i &lt;= n; ++i) &#123; cin &gt;&gt; w[i]; &#125; int u, v; for (int i = 1; i &lt; n; ++i) &#123; cin &gt;&gt; u &gt;&gt; v; G[u].push_back(v); G[v].push_back(u); &#125; dfs(1, 0); cout &lt;&lt; ans &lt;&lt; endl; return 0; &#125;\n\nJava\n\nimport java.util.*; public class Main &#123; private static final int N = (int) (1e5 + 100); private static long[] dp; private static int[] w; private static List&lt;List&lt;Integer&gt;&gt; G; private static long ans = Long.MIN_VALUE; private static int n; private static void dfs(int u, int f) &#123; dp[u] = w[u]; for (int v : G.get(u)) &#123; if (v == f) continue; dfs(v, u); if (dp[v] &gt; 0) &#123; dp[u] += dp[v]; &#125; &#125; ans = Math.max(ans, dp[u]); &#125; public static void main(String[] args) &#123; Scanner scanner = new Scanner(System.in); n = scanner.nextInt(); w = new int[N]; G = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; N; i++) &#123; G.add(new ArrayList&lt;&gt;()); &#125; dp = new long[N]; for (int i = 0; i &lt; n; i++) &#123; w[i] = scanner.nextInt(); &#125; for (int i = 0; i &lt; n - 1; i++) &#123; int u = scanner.nextInt() - 1; // 0-indexed in Java int v = scanner.nextInt() - 1; G.get(u).add(v); G.get(v).add(u); &#125; dfs(0, -1); System.out.println(ans); scanner.close(); &#125; &#125;\n\nPython\n\nimport sys sys.setrecursionlimit(100000) n = int(input()) aList = [0] + [int(i) for i in input().split()] tree = [[]for i in range(n+1)] ans = 0 dp = [0 for i in range(n+1)] for i in range(n-1): m, n =map(int, input().split()) tree[m].append(n) tree[n].append(m) def dfs(u,f): global ans dp[u] = aList[u] for i in tree[u]: if i !=f: dp[i] = dfs(i, u) if dp[i]&gt;0: dp[u] += dp[i] ans=max(ans, dp[u]) return dp[u] dfs(1, 0) print(ans)\n3. 树上背包问题树上背包问题，本质上还是背包，可以看成在树上进行的背包。\n每次转移都是在父亲与儿子之间进行了一次经典背包转移。\n3.1 小明的背包6\n这个是典型的依赖背包问题。\n并且依赖关系构成了一棵树。\n我们看样例：\n&lt;span&gt;6 &lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt;3 &lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;2 &lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;2 &lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;3 &lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;4 &lt;/span&gt;&lt;span&gt;8&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;3 &lt;/span&gt;&lt;span&gt;9&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;\n\n依赖关系如上图所示：上图的含义是如果只有购买了 $1$ 号物品，才能购买 $2, 3, 4$ 号物品。\n记住，我们的目标是划分子问题，也就是说，只要保证了一个子问题的划分是正确的，那么由于树的优良递归性质，其他的也会是正确的。\n复习一下普通的背包问题，用 $dp_i$ 表示，在使用了 $i$ 空间的情况下的最大价值。\n但是在树问题中，由于第一维度是节点的编号，所以我们用 $dp_{i,j}$ 表示对于 $i$ 子树来说，使用了 $j$ 空间的最大价值。\n当然题目中有要求，必须满足依赖关系，所以，我们需要重新定义： $dp_{i,j}$ 表示对于 $i$ 子树来说，使用了 $j$ 空间且满足依赖关系的最大价值。\n如何满足呢？\n我们只需要保证每一个 $dp_{i,j}$ 都选了 $i$ 节点即可。\n我们可以在背包中预留出节点 $i$ 的空间即可。\n代码如下：\n\nC ++\n\n#include &lt;iostream&gt; #include &lt;algorithm&gt; #include &lt;vector&gt; using namespace std; const int N = 1e2+20; vector&lt;int&gt; G[N]; int n, V; int v[N], w[N]; int dp[N][N]; void dfs(int u) &#123; for (int i = v[u]; i &lt;= V; ++i) dp[u][i] = w[u]; for (int i : G[u]) &#123; dfs(i); for (int j = V; j &gt;= v[u] + v[i]; --j) &#123; for (int k = v[i]; k &lt;= j - v[u]; ++k) // 剩余的空间 dp[u][j] = max(dp[u][j - k] + dp[i][k], dp[u][j]); &#125; &#125; &#125; int main() &#123; cin &gt;&gt; n &gt;&gt; V; int s; for (int i = 1; i &lt;= n; ++i) &#123; cin &gt;&gt; v[i] &gt;&gt; w[i] &gt;&gt; s; G[s].push_back(i); &#125; dfs(0); cout &lt;&lt; dp[0][V] &lt;&lt; &#x27;\\n&#x27;; &#125;\n\nJava\n\nimport java.util.ArrayList; import java.util.List; import java.util.Scanner; public class Main &#123; private static int V; private static int[][] dp; private static List&lt;List&lt;Integer&gt;&gt; G; private static int[] v; private static int[] w; private static void dfs(int u) &#123; for (int i = v[u]; i &lt;= V; ++i) &#123; dp[u][i] = w[u]; &#125; for (int child : G.get(u)) &#123; dfs(child); for (int j = V; j &gt;= v[u] + v[child]; --j) &#123; for (int k = v[child]; k &lt;= j - v[u]; ++k) &#123; dp[u][j] = Math.max(dp[u][j - k] + dp[child][k], dp[u][j]); &#125; &#125; &#125; &#125; public static void main(String[] args) &#123; Scanner scanner = new Scanner(System.in); int n = scanner.nextInt(); V = scanner.nextInt(); G = new ArrayList&lt;&gt;(); for (int i = 0; i &lt;= n; ++i) &#123; G.add(new ArrayList&lt;&gt;()); &#125; v = new int[n + 1]; w = new int[n + 1]; dp = new int[n + 1][V + 1]; for (int i = 1; i &lt;= n; ++i) &#123; v[i] = scanner.nextInt(); w[i] = scanner.nextInt(); int s = scanner.nextInt(); G.get(s).add(i); &#125; dfs(0); System.out.println(dp[0][V]); scanner.close(); &#125; &#125;\n\nPython\n\nclass Solution: def dfs(self, u, dp, G, v, w, V): for i in range(v[u], V + 1): dp[u][i] = w[u] for child in G[u]: self.dfs(child, dp, G, v, w, V) for j in range(V, v[u] + v[child] - 1, -1): for k in range(v[child], j - v[u] + 1): dp[u][j] = max(dp[u][j - k] + dp[child][k], dp[u][j]) def main(self): n, V = map(int, input().split()) G = [[] for _ in range(n + 1)] # 0-indexed in Python v = [0] * (n + 1) w = [0] * (n + 1) for i in range(1, n + 1): v[i], w[i], s = map(int, input().split()) G[s].append(i) dp = [[0] * (V + 1) for _ in range(n + 1)] self.dfs(0, dp, G, v, w, V) print(dp[0][V]) # Run the main function solution = Solution() solution.main()\n4. 换根 DP 问题换根 DP，面对的问题通常是“不定根”问题，也就是说，对于一棵树，他的根不一定是 $1$ 号点，可能是任意某个点。\n或者在某些问题中，我们需要尝试计算以每个点为根的情况，最后维护出最大值。\n我们先看一副图，来理解所谓的“换根”。\n\n我们将原来以 $1$ 为根换成了以 $2$ 为根。那么树的形态也就发生了变化。\n如果每次都是选择一个点作为根进行处理，那么总的时间复杂度为 $O(n^2)$，但是如果我们能发现性质，我们可以将复杂度降为 $O(n)$。\n即换一次根的复杂度为 $O(1)$，下面，我们将讲述这种方法。\n在一般的问题中，我们常常是利用dfs来不断的将根转换为根的子节点。\n我们会发现一些事情：\n\n我们一次转换的过程，其实有很大一部分并没有发生变化，体现在 DP 转移中，就是这些点的 DP 值也不会发生改变。\n实际上改变的只有改变身份的两个点，其他的点都不会发生变化。\n在换根的问题中，一般的步骤如下：\n\n以 $1$ 为根进行一遍扫描，并且处理出必要的信息，例如深度、DP 值等。\n开始以 $1$ 进行换根，并且向下递归，在递归之前，需要将自己变成子节点的身份。\n进入新的根后，按照根的身份，重新进行转移。并且维护答案。\n\n4.1 卖树\n本题需要计算以每个点为根的情况下，产生的盈利。\n如果我们确定了一个点为根，我们很容易算出答案，如果确定了根，问题就变成了求最大深度，这个问题只需要一遍DFS就可以完成。\nvoid dfs(int u, int f, int dt) &#123; // 求出以1为根的原始信息 dep[u] = dt; Mdp[u] = 0; // Mdp即为当前点为根的最大深度 for (int v : G[u]) &#123; if (v == f) continue; dfs(v, u, dt + 1); Mdp[u] = max(Mdp[v] + 1, Mdp[u]); &#125; &#125;\n因为节点数量太多，我们无法承受 $O(n^2)$ 的复杂度，所以我们需要进行换根，\n基本思想如上述一致：\n\n我们需要先算出以 $1$ 为根的信息，包括以每个节点为子树的最大深度，从 $1$ 转移到 $i$ 节点的代价。\n我们从 $1$ 号点开始换根，每次只将根的身份换给儿子，然后进入递归，进入之前，我们需要将当前点的身份改为子节点。\n进行新的根，由于原来的转移已经失效，所以需要重新转移。并且维护答案，然后重复2步骤。\n\n\nC++\n\n#include &lt;iostream&gt; #include &lt;vector&gt; using namespace std; const int N = 1e5+10; vector&lt;int&gt; G[N]; int n, k, c; int dep[N], Mdp[N]; typedef long long ll; ll ans = 0; void dfs(int u, int f, int dt) &#123; // 求出以1为根的原始信息 dep[u] = dt; Mdp[u] = 0; for (int v : G[u]) &#123; if (v == f) continue; dfs(v, u, dt + 1); Mdp[u] = max(Mdp[v] + 1, Mdp[u]); &#125; &#125; void dfs2(int u, int f) &#123; // 开始换根 /** * 重新转移 */ int tmpf = 0, Mx1 = 0, Mx2 = 0; for (int v : G[u]) &#123; tmpf = max(tmpf, Mdp[v] + 1); &#125; // 维护答案 ans = max(1ll * tmpf * k - 1ll * dep[u] * c, ans); // 根变儿子步骤 int pre = Mdp[u]; for (int v : G[u]) &#123; if (Mdp[v] + 1 &gt; Mx1) &#123; Mx2 = Mx1; Mx1 = Mdp[v] + 1; &#125; else if (Mdp[v] + 1 &gt; Mx2) &#123; Mx2 = Mdp[v] + 1; &#125; &#125; for (int v : G[u]) &#123; if (v == f) continue; // 由于根要变成儿子，所以要改变原来的转移值 if (Mdp[v] + 1 == Mx1) Mdp[u] = Mx2; else Mdp[u] = Mx1; dfs2(v, u); &#125; // 还原原始的值。 Mdp[u] = pre; &#125; void sol() &#123; for (int i = 1; i &lt;= n; ++i) G[i].clear(); ans = 0; cin &gt;&gt; n &gt;&gt; k &gt;&gt; c; int u, v; for (int i = 1; i &lt; n; ++i) &#123; cin &gt;&gt; u &gt;&gt; v; G[u].push_back(v); G[v].push_back(u); &#125; dfs(1, 0, 0); dfs2(1, 0); cout &lt;&lt; ans &lt;&lt; &#x27;\\n&#x27;; &#125; int main() &#123; ios::sync_with_stdio(0); int T; cin &gt;&gt; T; while (T --) &#123; sol(); &#125; return 0; &#125;\n\nPython\n\nfrom collections import defaultdict import sys sys.setrecursionlimit(100000) N = 100010 G = defaultdict(list) n, k, c = 0, 0, 0 dep = [0] * N Mdp = [0] * N ans = 0 def dfs(u, f, dt): # 求出以1为根的原始信息 global dep, Mdp dep[u] = dt Mdp[u] = 0 for v in G[u]: if v == f: continue dfs(v, u, dt + 1) Mdp[u] = max(Mdp[v] + 1, Mdp[u]) def dfs2(u, f): # 开始换根 global ans, dep, Mdp tmpf = 0 Mx1 = 0 Mx2 = 0 # 重新转移 for v in G[u]: tmpf = max(tmpf, Mdp[v] + 1) # 维护答案 ans = max(ans, tmpf * k - dep[u] * c) # 根变儿子步骤 pre = Mdp[u] for v in G[u]: if Mdp[v] + 1 &gt; Mx1: Mx2 = Mx1 Mx1 = Mdp[v] + 1 elif Mdp[v] + 1 &gt; Mx2: Mx2 = Mdp[v] + 1 for v in G[u]: if v == f: continue # 由于根要变成儿子，所以要改变原来的转移值 if Mdp[v] + 1 == Mx1: Mdp[u] = Mx2 else: Mdp[u] = Mx1 dfs2(v, u) # 还原原始的值。 Mdp[u] = pre def sol(): global n, k, c, ans, G, dep, Mdp n, k, c = map(int, input().split()) G.clear() ans = 0 for _ in range(n - 1): u, v = map(int, input().split()) G[u].append(v) G[v].append(u) dfs(1, 0, 0) dfs2(1, 0) print(ans) T = int(input()) for _ in range(T): sol()\n\nJava\n\nimport java.util.*; import java.io.*; public class Main &#123; static final int N = 100010; static List&lt;Integer&gt;[] G; static int n, k, c; static int[] dep, Mdp; static long ans; static void dfs(int u, int f, int dt) &#123; // 求出以1为根的原始信息 Mdp[u] = 0; for (int v : G[u]) &#123; if (v == f) continue; dfs(v, u, dt + 1); Mdp[u] = Math.max(Mdp[v] + 1, Mdp[u]); &#125; &#125; static void dfs2(int u, int f) &#123; // 开始换根 int tmpf = 0, Mx1 = 0, Mx2 = 0; /** * 重新转移 */ for (int v : G[u]) &#123; tmpf = Math.max(tmpf, Mdp[v] + 1); &#125; // 维护答案 ans = Math.max(ans, (long) tmpf * k - (long) dep[u] * c); // 根变儿子步骤 int pre = Mdp[u]; for (int v : G[u]) &#123; if (Mdp[v] + 1 &gt; Mx1) &#123; Mx2 = Mx1; Mx1 = Mdp[v] + 1; &#125; else if (Mdp[v] + 1 &gt; Mx2) &#123; Mx2 = Mdp[v] + 1; &#125; &#125; for (int v : G[u]) &#123; if (v == f) continue; // 由于根要变成儿子，所以要改变原来的转移值 if (Mdp[v] + 1 == Mx1) &#123; Mdp[u] = Mx2; &#125; else &#123; Mdp[u] = Mx1; &#125; dfs2(v, u); &#125; // 还原原始的值。 Mdp[u] = pre; &#125; static void sol(Scanner scanner) &#123; for (int i = 1; i &lt;= n; i++) G[i].clear(); ans = 0; n = scanner.nextInt(); k = scanner.nextInt(); c = scanner.nextInt(); int u, v; for (int i = 1; i &lt; n; i++) &#123; u = scanner.nextInt(); v = scanner.nextInt(); G[u].add(v); G[v].add(u); &#125; dfs(1, 0, 0); dfs2(1, 0); System.out.println(ans); &#125; public static void main(String[] args) &#123; G = new ArrayList[N]; for (int i = 0; i &lt; N; i++) &#123; G[i] = new ArrayList&lt;&gt;(); &#125; dep = new int[N]; Mdp = new int[N]; Scanner scanner = new Scanner(System.in); int T = scanner.nextInt(); while (T-- &gt; 0) &#123; sol(scanner); &#125; &#125; &#125;\n5. 作业\n\n\n\n题目\n链接\n\n\n\n\n取气球（算法赛）\nhttps://www.lanqiao.cn/problems/17024/learning/\n\n\n左孩子右兄弟（21 年省赛）\nhttps://www.lanqiao.cn/problems/1451/learning/\n\n\n\n\n"},{"title":"简单数论","url":"/2024/03/11/%E7%AE%80%E5%8D%95%E6%95%B0%E8%AE%BA/","content":"1 模运算\n定义：模运算为 a 除以 m 的余数，记为 a mod m，有 a mod m = a % m。\n模运算是大数运算中的常用操作。\n如果一个数太大，无法直接输出，或者不需要直接输出，可以把它取模后，缩小数值再输出。\nPython 虽然能直接计算大数，不用担心数据溢出，但是大数乘法太耗时，所以也常用取模来缩小数值。\n一个简单应用，判断奇偶：a%2=0，a 是偶数；a%2=1，a 是奇数\n\n例题：刷题统计 2022 年第十三届省赛，lanqiaoOJ 题号 2098【问题描述】 小明决定从下周一开始努力刷题准备蓝桥杯竞赛。他计划周一至周五每天做 a 道题目，周六和周日每天做 b 道题目。请你帮小明计算，按照计划他将在第几天实现做题数大于等于 n 题？\n【输入格式】 输入一行包含三个整数 a, b 和 n。\n【输出格式】 输出一个整数代表天数。\n【评测用例规模与约定】 对于 50%的评测用例，1 ≤ a, b, n ≤ 106106；对于 100%的评测用例，1 ≤ a, b, n ≤ 10181018。\n题目解析求余数的简单题，利用求余，把计算复杂度降为 O(1)。\nC++ 代码：\n#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;int main()&#123;    ll a,b,n; cin&gt;&gt;a&gt;&gt;b&gt;&gt;n;    ll week = a*5+b*2;     //每周做题    ll days = (n/week)*7;  //周数    n %= week;             //剩下的做题数    if(n&lt;=a*5) days += n/a+(n%a?1:0);  //在周一到周五内    else&#123;                  //周六和周日        days += 5, n -= a*5;        days += n/b+(n%b?1:0);    &#125;    cout&lt;&lt;days;    return 0;&#125;\nJava 代码：\nimport java.util.Scanner;public class Main &#123;    public static void main(String[] args) &#123;        Scanner sc = new Scanner(System.in);        long a = sc.nextLong(), b = sc.nextLong(), n = sc.nextLong();        long week = a * 5 + b * 2;  //每周做题        long days = (n / week) * 7; //周数*7天        n %= week;                  //余下不够一周的做题数        if (n &lt;= a * 5)            days += n / a + (n % a != 0 ? 1 : 0); //在周一到周五内        else &#123;                       //周六和周日            days += 5;            n -= a * 5;            days += n / b + (n % b != 0 ? 1 : 0);        &#125;        System.out.println(days);        sc.close();    &#125;&#125;\nPython 代码：\na, b, n = map(int, input().split())week = a * 5 + b * 2  #每周做题days = (n // week) * 7  #天数n %= week  #余数if n &lt;= a * 5:    days += n // a + (n % a != 0)  #在周一到周五内else:  #周六和周日    days += 5    n -= a * 5    days += n // b + (n % b != 0)print(days)\n2 快速幂幂运算 an，当 n 很大时，如果一个个乘，时间是 O(n) 的，速度很慢，此时可以用快速幂，在 O(logn) 的时间内算出来。 快速幂的一个解法：分治法，算 a2，然后再算(a2) 2，…，一直算到 an，代码也容易写。\n\n标准的快速幂：用位运算实现。\n基于位运算的快速幂，原理是倍增。\n\n快速幂原理以 a11a11 为例说明如何用倍增法做快速幂。\n（1）幂次与二进制的关系。把 a11a11 分解成幂 a8、a2、a1a8、a2、a1 的乘积：a11=a8+2+1=a8×a2×a1a11=a8+2+1=a8×a2×a1。其中a1、a2、a4、a8…a1、a2、a4、a8…的幂次都是 2 的倍数，所有的幂 aiai 都是倍乘关系，逐级递推，代码： a *= a\n（2）幂次用二进制分解。如何把 11 分解为 8+2+1？利用数的二进制的特征，n = 1110 = 10112 = 23+21+20 = 8+2+1，把 n 按二进制处理就可以。\n（3）如何跳过那些没有的幂次？例如 1011 需要跳过 a4a4。做个判断，用二进制的位运算实现：\n\nn &amp; 1 取 n 的最后一位，并且判断这一位是否需要跳过。\nn &gt;&gt;= 1 把 n 右移一位，目的是把刚处理过的 n 的最后一位去掉。 幂运算的结果往往很大，一般会先取模再输出。 根据取模的性质有：an mod m=(a mod m)n mod manmodm=(amodm)nmodm\n\n例题：快速幂 lanqiaoOJ 题号 1514【题目描述】给定 b, p, k，求(bp) mod k。其中 2≤b, p, k≤109。 【输入描述】三个整数 b，p，k。 【输出描述】输出(bp) mod k。\n题目解析C++ 代码：\n#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;     //变量改用较大的long longll fastPow(ll a, ll n, ll mod)&#123;    ll ans = 1;    a %= mod;          //重要，防止下面的ans*a越界    while(n) &#123;        if(n &amp; 1)   ans = (ans*a) % mod;   //取模        a = a*a % mod;                     //取模        n &gt;&gt;= 1;    &#125;    return ans;&#125;int main()&#123;    ll b,p,k;    cin&gt;&gt;b&gt;&gt;p&gt;&gt;k;    cout &lt;&lt; fastPow(b,p,k);    return 0;&#125;\nJava 代码：\nimport java.util.Scanner;public class Main &#123;    static long fastPow(long a, long n, long mod) &#123;        long ans = 1;        a %= mod;   //重要，防止下面的ans*a越界        while (n &gt; 0) &#123;            if ((n &amp; 1) == 1) &#123;                ans = (ans * a) % mod;  //取模            &#125;            a = (a * a) % mod;  //取模            n &gt;&gt;= 1;        &#125;        return ans;    &#125;    public static void main(String[] args) &#123;        Scanner sc = new Scanner(System.in);        long b = sc.nextLong(), p = sc.nextLong(), k = sc.nextLong();        System.out.println(fastPow(b, p, k));        sc.close();    &#125;&#125;\nPython 代码：\ndef fast_pow(a, n, mod):    ans = 1    a %= mod  #重要，防止下面的ans*a越界    while n &gt; 0:        if n &amp; 1 == 1:            ans = (ans * a) % mod  #取模        a = (a * a) % mod  #取模        n &gt;&gt;= 1    return ansb, p, k = map(int, input().split())print(fast_pow(b, p, k))\nGCD 定义、性质最大公约数 Greatest Common Divisor(GCD)：整数 a 和 b 的 GCD 是指能同时整除 a 和 b  的最大整数，记为 gcd(a, b)。由于-a 的因子和 a 的因子相同，因此 gcd(a, b) = gcd(|a|,  |b|)。编码时只关注正整数的最大公约数。 性质： （1）gcd(a, b) = gcd(a, a+b) = gcd(a, k·a+b) （2）gcd(ka, kb) = k·gcd(a, b) （3）定义多个整数的最大公约数：gcd(a, b, c) = gcd(gcd(a, b), c)。 （4）若 gcd(a, b) = d，则 gcd(a/d, b/d) = 1，即 a/d 与 b/d 互素。这个定理很重要。 （5）gcd(a+cb, b) = gcd(a, b)\nC++福利： c++函数 std::__gcd()，可以返回负数，可以带多个参数。\n#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123;    cout&lt;&lt;__gcd(15, 81)&lt;&lt;&quot;\\n&quot;;    // 输出  3    cout&lt;&lt;__gcd(0, 44)&lt;&lt;&quot;\\n&quot;;     // 输出  44    cout&lt;&lt;__gcd(0, 0)&lt;&lt;&quot;\\n&quot;;      // 输出  0    cout&lt;&lt;__gcd(-6, -15)&lt;&lt;&quot;\\n&quot;;   // 输出  -3    cout&lt;&lt;__gcd(-17,289)&lt;&lt;&quot;\\n&quot;;   // 输出  -17    cout&lt;&lt;__gcd(17,-289)&lt;&lt;&quot;\\n&quot;;   // 输出  17    return 0;&#125;\n手写 GCD 代码手写 gcd 函数，常用欧几里得算法。 辗转相除法求 gcd： gcd(a, b) = gcd(b, a mod b) 这是最常用的方法，极为高效。 设 a &gt; b，辗转相除法的计算复杂度为O((log2a)3)O((log2a)3)。\n可输出负数，和库函数一样:\n#include&lt;bits/stdc++.h&gt;using namespace std;int gcd(int a, int b)&#123;     return b? gcd(b, a%b):a; &#125;int main()&#123;    cout&lt;&lt;gcd(15, 81)&lt;&lt;&quot;\\n&quot;;    // 输出  3    cout&lt;&lt;gcd(0, 44)&lt;&lt;&quot;\\n&quot;;     // 输出  44    cout&lt;&lt;gcd(0, 0)&lt;&lt;&quot;\\n&quot;;      // 输出  0    cout&lt;&lt;gcd(-6, -15)&lt;&lt;&quot;\\n&quot;;   // 输出  -3    cout&lt;&lt;gcd(-17,289)&lt;&lt;&quot;\\n&quot;;   // 输出  -17    cout&lt;&lt;gcd(17,-289)&lt;&lt;&quot;\\n&quot;;   // 输出  17    return 0;&#125;// 或者使用如下编码方式：// int GCD(int a,int b)// &#123;//     if(b==0)//         return a;//     return GCD(b,a%b);// &#125;public class Main &#123;    static int gcd(int a, int b) &#123;        return b == 0 ? a : gcd(b, a % b);    &#125;    public static void main(String[] args) &#123;        System.out.println(gcd(15, 81));   // 输出  3        System.out.println(gcd(0, 44));    // 输出  44        System.out.println(gcd(0, 0));     // 输出  0        System.out.println(gcd(-6, -15));  // 输出  -3        System.out.println(gcd(-17, 289)); // 输出  17        System.out.println(gcd(17, -289)); // 输出  17    &#125;&#125;// 或者使用如下编码方式：// static int GCD(int a,int b)// &#123;//     if(b==0)//         return a;//     return GCD(b,a%b);// &#125;def gcd(a, b):    return a if b == 0 else gcd(b, a % b)print(gcd(15, 81))   # 输出  3print(gcd(0, 44))    # 输出  44print(gcd(0, 0))     # 输出  0print(gcd(-6, -15))  # 输出  -3print(gcd(-17, 289)) # 输出  17print(gcd(17, -289)) # 输出  17# 或者使用如下编码方式：# def GCD(a,b):#     if b==0:#         return a#     return GCD(b,a%b)\nLCM最小公倍数 LCM (the Least Common Multiple) 。· a 和 b 的最小公倍数 lcm(a,b)(a,b),从算术基本定理推理得到。 算术基本定理：任何大于 1 的正整数 n 都可以唯一分解为有限个素数的乘积：\nn=p1c1p2c2…pmcm\\rm{n}=\\rm{p}_1^{c1}\\rm{p}_2^{c2}\\ldots\\rm{p}_m^{cm}n=p1c1p2c2…pmcm,其中c1c1 都是正整数，pi\\rm{p}_{\\rm{i}}pi 都是素数且从小到大。\n推导 LCM： 设:a=p1c1p2c2…pmcm,b=p1f1p2f2…pmfm:a=p1c1p2c2…pmcm,b=p1f1p2f2…pmfm\n那么：gcd(a, b)=p1min⁡c1,f1p2min⁡c2,f2…pmmin⁡cm,fmb)=p1minc1,f1p2minc2,f2…pmmincm,fm\nIcm(a,b)=p1max⁡c1,f1p2max⁡c2,f2…pmmax⁡cm,fm(a,b)=p1maxc1,f1p2maxc2,f2…pmmaxcm,fm\n推出：gcd(a, b)lcm(a, b)=ab\n即：\nlcm(a,b):=:a∗b/gcd(a,b):=:a/gcd(a,:b)∗b.lcm(a,b):=:a∗b/gcd(a,b):=:a/gcd(a,:b)∗b.\nlcm()手写代码//c or c++int lcm(int a, int b)&#123;    //需要的时候把int改成long long   return a / gcd(a, b) * b;  //先做除法再做乘法，防止先做乘法溢出&#125;# Pythondef lcm(a, b):    return a // gcd(a, b) * b  #先做除法再做乘法，防止先做乘法溢出//javastatic int lcm(int a, int b) &#123;    return a / gcd(a, b) * b; //先做除法再做乘法，防止先做乘法溢出&#125;\n核桃的数量 2013 年第四届省赛 lanqiaoOJ 题号 210【题目描述】小张是软件项目经理，他带领 3  个开发组。工期紧，今天都在加班呢。为鼓舞士气，小张打算给每个组发一袋核桃（据传言能补脑）。他的要求是： 1.各组的核桃数量必须相同  2.各组内必须能平分核桃（当然是不能打碎的） 3.尽量提供满足 1, 2 条件的最小数量（节约闹革命嘛） 【输入格式】输入三个正整数 a, b, c，表示每个组正在加班的人数，用空格分开（a,b,c&lt; 30）【输出格式】输出一个正整数，表示每袋核桃的数量。\n题目解析简单题，答案就是三个数字的最小公倍数。\n#include&lt;bits/stdc++.h&gt;using namespace std;int lcm(int a, int b)&#123; return a / __gcd(a, b) * b;&#125;int main()&#123;    int a,b,c;    cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;    int k = lcm(a,b);    cout&lt;&lt;lcm(k,c)&lt;&lt;endl;    return 0;&#125;import java.util.Scanner;public class Main &#123;    static int gcd(int a, int b) &#123;        return b == 0 ? a : gcd(b, a % b);    &#125;    static int lcm(int a, int b) &#123;        return a / gcd(a, b) * b;    &#125;    public static void main(String[] args) &#123;        Scanner sc = new Scanner(System.in);        int a = sc.nextInt();        int b = sc.nextInt();        int c = sc.nextInt();        int k = lcm(a, b);        System.out.println(lcm(k, c));        sc.close();    &#125;&#125;def gcd(a, b):    return a if b == 0 else gcd(b, a % b)def lcm(a, b):    return a // gcd(a, b) * ba, b, c = map(int, input().split())k = lcm(a, b)print(lcm(k, c))\n5 素数的判断素数定义：只能被 1 和自己整除的正整数。注：1 不是素数，最小素数是 2。\n判断一个数 n 是不是素数：当n≤1014n≤1014时，用试除法；n &gt; 1014 时，试除法不够用，需 要用高级算法，例如 Miller Rabin 算法。\n试除法： 用[2,n-1]内的所有数去试着除 n，如果都不能整除，就是素数。 优化：把[2,n-1]缩小到[2,n][2,n]。证明：若 n = axb, 设 a≤nn ,则 b≥nn,如果 a 是 n 的因子，说明 n 不是素数，b 不用再试且 b 一定也是。\nC++ 实现：#include &lt;iostream&gt;#include &lt;cmath&gt;bool is_prime(long long n)&#123;    if(n &lt;= 1)        return false; // 1不是素数    for(long long i = 2; i &lt;= sqrt(n); i++)        if(n % i == 0)            return false; // 能整除，不是素数    return true; // 全不能整除，是素数&#125;int main() &#123;    long long number = 29; // 例子：要检查是否为素数的数值    if (is_prime(number))        std::cout &lt;&lt; number &lt;&lt; &quot; 是素数。&quot; &lt;&lt; std::endl;    else        std::cout &lt;&lt; number &lt;&lt; &quot; 不是素数。&quot; &lt;&lt; std::endl;    return 0;&#125;\nJava 实现：import java.util.Scanner;public class Main &#123;    static boolean isPrime(long n) &#123;        if (n &lt;= 1)            return false; // 1不是素数        for (long i = 2; i &lt;= Math.sqrt(n); i++)            if (n % i == 0)                return false; // 能整除，不是素数        return true; // 全不能整除，是素数    &#125;    public static void main(String[] args) &#123;        Scanner scanner = new Scanner(System.in);        System.out.print(&quot;输入一个要检查是否为素数的数值：&quot;);        long number = scanner.nextLong(); // 例子：要检查是否为素数的数值        if (isPrime(number))            System.out.println(number + &quot; 是素数。&quot;);        else            System.out.println(number + &quot; 不是素数。&quot;);    &#125;&#125;\nPython 实现：def is_prime(n):    if n &lt;= 1:        return False  # 1不是素数    for i in range(2, int(n ** 0.5) + 1):        if n % i == 0:            return False  # 能整除，不是素数    return True  # 全不能整除，是素数number = 29  # 例子：要检查是否为素数的数值if is_prime(number):    print(number, &quot;是素数。&quot;)else:    print(number, &quot;不是素数。&quot;)\n6 素数筛素数的筛选：给定 n，求 2~n 内所有的素数。 一个个地判断很慢，所以用“筛子”筛所有的整数，把非素数筛掉，剩下的就是素数。 常用两种筛法：埃氏筛、欧拉筛。\n埃氏筛:\n初始队列{2、3，4，5，6，7，8，9，10，11，12，13，…，n}，操作步骤： （1）输出最小的素数 2，筛掉 2 的倍数，得{2，3，4，5，6，7，8，9，10，11，12，13，…} （2）输出最小的素数 3，筛掉 3 的倍数，得{2，3，4，5，6，7，8，9，10，11，12，13，…} （3）输出最小的素数 5，筛掉 5 的倍数，得{2，3，4，5，6，7，8，9，10，11，12，13，…} 继续以上步骤，直到队列为空。\nC++ 实现：int primes[N],cnt;bool bprime[N];void getPrime(int n)&#123;    memset(bprime,false,sizeof(bprime));    bprime[0]=true;    bprime[1]=true;    for(int i=2;i&lt;=n;i++)&#123;        if(!bprime[i])&#123;            prime[cnt++]=i;            for(LL j=i*2;j&lt;=n;j+=i)                bprime[j]=true;        &#125;    &#125;&#125;\nJava 实现：int[] primes = new int[N];int cnt;boolean[] bprime = new boolean[N];void getPrimes(int n) &#123;    Arrays.fill(bprime, false);    bprime[0] = true;    bprime[1] = true;    for (int i = 2; i &lt;= n; i++) &#123;        if (!bprime[i]) &#123;            primes[cnt++] = i;            for (int j = i * 2; j &lt;= n; j += i) &#123;                bprime[j] = true;            &#125;        &#125;    &#125;&#125;\nPython 实现：primes = [0] * Ncnt = 0bprime = [False] * Ndef getPrimes(n):    global cnt, primes, bprime    bprime[0] = True    bprime[1] = True    for i in range(2, n+1):        if not bprime[i]:            primes[cnt] = i            cnt += 1            for j in range(i*2, n+1, i):                bprime[j] = True\n但是埃氏筛法的缺点：例如 6 会被 3 整除，6 会被 2 整除，会被筛两次，所以我们再给出欧氏线性筛法：\nC++ 实现：int primes[N],cnt;bool bPrime[N];void getPrimes(int n)&#123;    memset(bPrime,false,sizeof(bPrime));    for(int i=2;i&lt;=n;i++)&#123;        if(!bPrime[i])            primes[cnt++]=i;        for(int j=0;j&lt;cnt&amp;&amp;i*primes[j]&lt;n;j++)&#123;            bPrime[i*primes[j]]=true;            if(i%primes[j]==0)                break;        &#125;    &#125;&#125;\nJava 实现：static int[] primes = new int[N], bPrime = new int[N];static int cnt;public static void getPrimes(int n) &#123;    Arrays.fill(bPrime, 0, n + 1, 0);    for (int i = 2; i &lt;= n; i++) &#123;        if (bPrime[i] == 0)            primes[cnt++] = i;        for (int j = 0; j &lt; cnt &amp;&amp; i * primes[j] &lt;= n; j++) &#123;            bPrime[i * primes[j]] = 1;            if (i % primes[j] == 0)                break;        &#125;    &#125;&#125;\nPython 实现：N = 1000005primes = [0] * Nbprime = [False] * Ncnt = 0def getPrimes(n: int):    global cnt    for i in range(2, n+1):        if not bprime[i]:            primes[cnt] = i            cnt += 1        j = 0        while j &lt; cnt and i * primes[j] &lt;= n:            bprime[i * primes[j]] = True            if i % primes[j] == 0:                break            j += 1\n例题：质数 lanqiaoOJ 题号 1557【题目描述】给定一个正整数 N，请你输出 N 以内（不包含 N）的质数以及质数的个数。 【输入描述】一个正整数 N，n&lt;1000 【输出描述】两行，第 1 行包含若干个素数，从小到大输出，用空格分开。第 2 行一个整数，表示素数个数。\n输入： 10\n输出： 2 3 5 7 4\n题目为模板题目，实现方式如下，其中：\n\nbprime[i]记录数 i 的状态，若 bprime [i]=1，表示它被筛掉，不是素数。\n用 primes[]存放素数，prime[0]是第一个素数 2。\nCnt 是素数个数计数\n\nC++ 实现：#include&lt;bits/stdc++.h&gt;using namespace std;const int N = 1e6;int primes[N],cnt;bool bprime[N]; //true表示被筛掉，不是素数void getPrimes(int n)&#123; //埃氏筛，计算[2, n]内的素数        memset(bprime,false,sizeof(bprime));        bprime[0]=true;        bprime[1]=true;        for(int i=2;i&lt;=n;i++)&#123;            if(!bprime[i])&#123;                primes[cnt++]=i;                for(int j=i*2;j&lt;=n;j+=i)                    bprime[j]=true;            &#125;        &#125;    &#125;int main()&#123;    int n;    cin &gt;&gt;n;    getPrimes(n-1);    for(int i=0;i&lt;cnt;i++)  cout &lt;&lt; primes[i]&lt;&lt;&quot; &quot;;    cout &lt;&lt; endl;    cout &lt;&lt; cnt;&#125;\nJava 实现：public class Main &#123;    static final int N = 1000000;    static int[] primes = new int[N];    static boolean[] bprime = new boolean[N];    static int cnt;    public static void getPrimes(int n) &#123;        bprime[0] = true;        bprime[1] = true;        for (int i = 2; i &lt;= n; i++) &#123;            if (!bprime[i]) &#123;                primes[cnt++] = i;                for (int j = i * 2; j &lt;= n; j += i) &#123;                    bprime[j] = true;                &#125;            &#125;        &#125;    &#125;    public static void main(String[] args) &#123;        Scanner sc = new Scanner(System.in);        int n = sc.nextInt();        getPrimes(n - 1);        for (int i = 0; i &lt; cnt; i++) &#123;            System.out.print(primes[i] + &quot; &quot;);        &#125;        System.out.println();        System.out.println(cnt);    &#125;&#125;\nPython 实现：N = 10**6primes = []bprime = [False] * Ndef getPrimes(n):    global primes    global cnt    bprime[0] = True    bprime[1] = True    for i in range(2, n+1):        if not bprime[i]:            primes.append(i)            cnt += 1            for j in range(i*2, n+1, i):                bprime[j] = Truen = int(input())cnt = 0getPrimes(n-1)for p in primes:    print(p, end=&#x27; &#x27;)print()print(cnt)\n7 分解质因子任何一个正整数 n 都可以唯一地分解为有限个素数的乘积：n=p1c1p2c2…pmcmn=p1c1p2c2…pmcm,其中cici都是正整数，p*i 都是素数且从小到大。 分解质因子也可以用试除法。求 n 的质因子：\n\n第一步，求最小质因子p1p1。逐个检查从2到 nn 的所有素数，如果它能整除 n，就是最小质因子。然后连续用 p1p1除 n，目的是去掉 n 中的 p1p1,得到 n1n1。\n第二步，再找 n1n1的最小质因子。逐个检查从 p1p1 到 n1n1 的所有素数。从 p1p1开始试除， 是因为 n1n1没有比 p1p1小的素因子，而且 n1n1的因子也是 n 的因子。\n继续以上步骤，直到找到所有质因子。\n\n我们直接看一个例题：\n【题目描述】求出区间[a,b]中所有整数的质因数分解。 【输入描述】输入一行，包含 2 个整数 a，b。2&lt;=a&lt;=b&lt;=10000 【输出描述】每行输出一个数的分解，形如 k=a1×a2×a3×…，k 从小到大，a 从小到大。\n输入： 3 10\n输出： 3=34=2×25=56=2×37=78=2×2×29=3×310=2×5\\begin{aligned} &amp;\\text{3=} \\text{3}  \\\\ &amp;\\text{4=} 2\\times2  \\\\ &amp;\\text{5=}  \\text{5}  \\\\ &amp;6=2\\times3 \\\\ &amp;\\text{7=7} \\\\  &amp;8=2\\times2\\times2 \\\\ &amp;9=3\\times3 \\\\ &amp;10=2\\times5  \\end{aligned}3=34=2×25=56=2×37=78=2×2×29=3×310=2×5\n直接对每个数进行分解，然后打印出它的因数。\nC++ 实现：#include&lt;bits/stdc++.h&gt;using namespace std;int p[20];  //p[]记录因子，p[1]是最小因子。一个int数的质因子最多有10几个int c[40];  //c[i]记录第i个因子的个数。一个因子的个数最多有30几个int factor(int n)&#123;    int m = 0;    for(int i = 2; i &lt;= sqrt(n); i++)        if(n%i == 0)&#123;            p[++m] = i, c[m] = 0;            while(n%i == 0)            //把n中重复的因子去掉                n/=i, c[m]++;        &#125;    if(n&gt;1)                           //没有被除尽，是素数        p[++m] = n, c[m] = 1;    return m;                         //共m个因子&#125;int main()&#123;    int a,b;   cin&gt;&gt;a&gt;&gt;b;    for(int i=a;i&lt;=b;i++)&#123;        int m = factor(i);        cout&lt;&lt;i&lt;&lt;&quot;=&quot;;        for(int j=1;j&lt;=m;j++)&#123; //第j个因子            for(int k=1;k&lt;=c[j];k++)&#123;    //第j个因子的个数                cout &lt;&lt;p[j];                if(k&lt;c[j]) cout &lt;&lt;&quot;*&quot;;            &#125;            if(j&lt;m) cout &lt;&lt;&quot;*&quot;;        &#125;        cout&lt;&lt;endl;    &#125;    return 0;&#125;\nJava 实现：import java.util.Scanner;public class Main &#123;    static int[] p = new int[20];  // p[] 记录因子，p[1] 是最小因子。一个 int 数的质因子最多有 10 几个    static int[] c = new int[40];  // c[i] 记录第 i 个因子的个数。一个因子的个数最多有 30 几个    static int factor(int n) &#123;        int m = 0;        for (int i = 2; i &lt;= Math.sqrt(n); i++) &#123;            if (n % i == 0) &#123;                p[++m] = i;                c[m] = 0;                while (n % i == 0) &#123;                    n /= i;                    c[m]++;                &#125;            &#125;        &#125;        if (n &gt; 1) &#123;            p[++m] = n;            c[m] = 1;        &#125;        return m;    &#125;    public static void main(String[] args) &#123;        Scanner sc = new Scanner(System.in);        int a = sc.nextInt(), b = sc.nextInt();        for (int i = a; i &lt;= b; i++) &#123;            int m = factor(i);            System.out.print(i + &quot;=&quot;);            for (int j = 1; j &lt;= m; j++) &#123;                for (int k = 1; k &lt;= c[j]; k++) &#123;                    System.out.print(p[j]);                    if (k &lt; c[j]) &#123;                        System.out.print(&quot;*&quot;);                    &#125;                &#125;                if (j &lt; m) &#123;                    System.out.print(&quot;*&quot;);                &#125;            &#125;            System.out.println();        &#125;    &#125;&#125;\nPython 实现：import mathp = [0] * 20  # p[] 记录因子，p[1] 是最小因子。一个 int 数的质因子最多有 10 几个c = [0] * 40  # c[i] 记录第 i 个因子的个数。一个因子的个数最多有 30 几个def factor(n):    m = 0    for i in range(2, int(math.sqrt(n)) + 1):        if n % i == 0:            m += 1            p[m], c[m] = i, 0            while n % i == 0:                n //= i                c[m] += 1    if n &gt; 1:        m += 1        p[m], c[m] = n, 1    return ma, b = map(int, input().split())for i in range(a, b+1):    m = factor(i)    print(f&#x27;&#123;i&#125;=&#x27;, end=&#x27;&#x27;)    for j in range(1, m+1):        for k in range(1, c[j]+1):            print(p[j], end=&#x27;&#x27;)            if k &lt; c[j]:                print(&#x27;*&#x27;, end=&#x27;&#x27;)        if j &lt; m:            print(&#x27;*&#x27;, end=&#x27;&#x27;)    print()\n15 届蓝桥杯 14 天省赛冲刺营 1 期 - 简单数论 - 蓝桥云课 (lanqiao.cn)\n","categories":["蓝桥杯Note"],"tags":["蓝桥杯备赛","简单数论"]},{"title":"数据结构刷题题单","url":"/2024/04/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%B7%E9%A2%98%E9%A2%98%E5%8D%95/","content":"P1996 约瑟夫问题题目描述$n$ 个人围成一圈，从第一个人开始报数,数到 $m$ 的人出列，再由下一个人重新从 $1$ 开始报数，数到 $m$ 的人再出圈，依次类推，直到所有的人都出圈，请输出依次出圈人的编号。\n注意：本题和《深入浅出-基础篇》上例题的表述稍有不同。书上表述是给出淘汰 $n-1$ 名小朋友，而该题是全部出圈。\n输入格式输入两个整数 $n,m$。\n输出格式输出一行 $n$ 个整数，按顺序输出每个出圈人的编号。\n样例 #1样例输入 #110 3\n样例输出 #13 6 9 2 7 1 8 5 10 4\n提示$1 \\le m, n \\le 100$​\n解题思路：由于这题数据范围非常小，因此可以用很多比较奇怪的算法。不过，命题者的初衷是希望我们使用链表进行模拟。\n在这里，我使用了一个结构体 Peo 存储一个双向链表：\nstruct Peo&#123;    int ID;                    //编号    Peo *next, *front;&#125;;\n其中 ID 代表这个人的编号，输出时使用，另外两个指针分别指向上一个和下一个人，不过我们先要对其初始化。 使用两个变量 tot, outNum 来分别存储总人数和出局的数，然后让链表之间互相链接，最后首尾相连。\nfor (int i = 1; i &lt; tot - 1; i++) &#123; n[i].front = n + i - 1; n[i].next = n + i + 1; n[i].ID = i + 1; &#125;    n[0].front = n + tot - 1; n[0].next = n + 1; n[tot - 1].front = n + tot - 2; n[tot - 1].next = n;    n[0].ID = 1; n[tot - 1].ID = tot;\n链表初始化完成之后，我们可以使用一个结构体指针 now 来表示我们现在模拟到哪一个人了。\nPeo *now = n;            //指向目前报数的人的指针\n最后，我们需要用一种方法来删除链表当中的某一项，可以这样考虑，如果当前需要删除的项是 now, 那么链表中需要修改的变量只有它前一项和后一项的两个指针，在代码实现上，将 now-&gt;front 的 next 更改为now-&gt;next，然后 now-&gt;next 的 front 更改为now-&gt;front 就可以了。我们使用一个函数封装这一过程。\nvoid _Cut(Peo *num)    &#123;        num = num-&gt;front;        num-&gt;next = num-&gt;next-&gt;next;        num = num-&gt;next;        num-&gt;front = num-&gt;front-&gt;front;    &#125;\n这样，剩下的就是依据题意模拟了，过程虽然看似有些复杂，但是这大致就是题目期望我们去做的全部过程。\n#include&lt;iostream&gt;using namespace std;struct Peo&#123;    int ID;                                    //编号    Peo *next, *front;    Peo()&#123; next = front = nullptr; &#125;&#125;n[100];void _Cut(Peo *num)&#123;    num = num-&gt;front;    num-&gt;next = num-&gt;next-&gt;next;    num = num-&gt;next;    num-&gt;front = num-&gt;front-&gt;front;&#125;int main()&#123;    int tot, outNum, nowNum = 1;    Peo *now = n;            //指向目前报数的人的指针    cin &gt;&gt; tot &gt;&gt; outNum;        //数据读入        for (int i = 1; i &lt; tot - 1; i++) &#123; n[i].front = n + i - 1; n[i].next = n + i + 1; n[i].ID = i + 1; &#125;    n[0].front = n + tot - 1; n[0].next = n + 1; n[tot - 1].front = n + tot - 2; n[tot - 1].next = n;    n[0].ID = 1; n[tot - 1].ID = tot;    //初始化链表        while (tot &gt; 0) &#123;        if (nowNum == outNum) &#123;            cout &lt;&lt; now-&gt;ID &lt;&lt; &quot; &quot;;        //输出出局的人的编号                        _Cut(now);                    //出局            nowNum = 1;                    //初始化数字            tot--;                        //总人数-1            now = now-&gt;next;            //下一个人        &#125;        else &#123;            nowNum++;                    //数字+1            now = now-&gt;next;            //下一个人        &#125;    &#125;        return 0;&#125;\n方法2：队列若是使用链表，这题的代码实现复杂程度无疑大大上升了，其实，我们完全用不着那么麻烦，一个个地报数，可以想象成一个队列，一个人报完数后，判断他所报的数是不是出局的数，如果是，直接弹出，但若不是，将其移动至队尾。\n我们使用一个队列 q 进行模拟，在读取总人数和出局数字后，把这些人一个个地压入队列尾部。在使用队列之前，需要先加上头文件 &lt;queue&gt;.\nint tot, outNum, nowNum = 1;        queue&lt;int&gt; q;        cin &gt;&gt; tot &gt;&gt; outNum;                        //读取数据        for (int i = 1; i &lt;= tot; i++)q.push(i);    //初始化队列\n完成这些之后，开始模拟，整个过程非常直观，在这里就不详细解释了。以下是完整代码。\n#include&lt;iostream&gt;    #include&lt;queue&gt;    using namespace std;        int main()    &#123;        int tot, outNum, nowNum = 1;        queue&lt;int&gt; q;        cin &gt;&gt; tot &gt;&gt; outNum;                        //读取数据        for (int i = 1; i &lt;= tot; i++)q.push(i);    //初始化队列        while (!q.empty())                    //在队列不为空时继续模拟        &#123;            if (nowNum == outNum)            &#123;                cout &lt;&lt; q.front() &lt;&lt; &quot; &quot;;    //打印出局的人的编号                q.pop();                    //出局                nowNum = 1;                    //初始化现在的数字            &#125;            else            &#123;                nowNum++;                q.push(q.front());            //排至队尾                q.pop();            &#125;        &#125;        cout &lt;&lt; endl;        return 0;&#125;\n\n14-3-2020 UPD： 替换了正文部分错误或模棱两可的表述。规范了第一段代码中不合适的实现细节。\n作者：Mickey_snow \n解题思路（python）n, m = map(int, input().split())peo = [i for i in range(1, n+1)]ple = []i = 0while peo:    i += 1    p = peo.pop(0)    if i == m:        ple.append(p)        i = 0    else:        peo.append(p) for i in ple:    print(i,end = &quot; &quot;)\n解法2：\nimport queue        # 导入Python自带的queue标准库可以实现队列、栈、优先队列  def josephus(num1, num2):    q = queue.Queue()                # 声明q是一个队列    for i in range(1, num1 + 1):        # 数字依次导入       q.put(i)     while q.qsize() &gt; 0:        for i in range(num2 - 1):    # 死亡计数，被点到的出列            q.put(q.get())        print(q.get(), end=&#x27; &#x27;)    # 输出出列数  n, m = map(int, input().split())josephus(n, m)\nP1047 [NOIP2005 普及组] 校门外的树题目描述某校大门外长度为 $l$ 的马路上有一排树，每两棵相邻的树之间的间隔都是 $1$ 米。我们可以把马路看成一个数轴，马路的一端在数轴 $0$ 的位置，另一端在 $l$ 的位置；数轴上的每个整数点，即 $0,1,2,\\dots,l$，都种有一棵树。\n由于马路上有一些区域要用来建地铁。这些区域用它们在数轴上的起始点和终止点表示。已知任一区域的起始点和终止点的坐标都是整数，区域之间可能有重合的部分。现在要把这些区域中的树（包括区域端点处的两棵树）移走。你的任务是计算将这些树都移走后，马路上还有多少棵树。\n输入格式第一行有两个整数，分别表示马路的长度 $l$ 和区域的数目 $m$。\n接下来 $m$ 行，每行两个整数 $u, v$，表示一个区域的起始点和终止点的坐标。\n输出格式输出一行一个整数，表示将这些树都移走后，马路上剩余的树木数量。\n样例 #1样例输入 #1500 3150 300100 200470 471\n样例输出 #1298\n提示【数据范围】\n\n对于 $20\\%$ 的数据，保证区域之间没有重合的部分。\n对于 $100\\%$ 的数据，保证 $1 \\leq l \\leq 10^4$，$1 \\leq m \\leq 100$，$0 \\leq u \\leq v \\leq l$。\n\n【题目来源】\nNOIP 2005 普及组第二题\n解题思路#include&lt;stdio.h&gt;int main()&#123;    int l = 0, m = 0;//马路长度和区间个数    scanf(&quot;%d%d&quot;, &amp;l, &amp;m);    int u = 0, v = 0;//区间的左右位置，u肯定小于v滴    int tree[10001]=&#123;0&#125;;    //树树全部初始化为0，代表没砍过    for (int i = 0; i &lt; m; i++)//一共有m个区间，那就得操作m次呐    &#123;        scanf(&quot;%d%d&quot;, &amp;u, &amp;v);//想从哪砍到哪呢        for (int j = u; j &lt;= v; j++)        &#123;            if(tree[j]==0)            tree[j] = 1;//砍过的标记为1        &#125;    &#125;    int sum = 0;//剩余sum棵树树还没被砍    for (int k = 0; k &lt;= l; k++)//遍历树树    &#123;        if (tree[k] == 0) sum++;    &#125;    printf(&quot;%d&quot;, sum);    return 0;&#125;\nP5732 【深基5.习7】杨辉三角题目描述给出 $n(n\\le20)$，输出杨辉三角的前 $n$ 行。\n如果你不知道什么是杨辉三角，可以观察样例找找规律。\n输入格式输出格式样例 #1样例输入 #16\n样例输出 #111 11 2 11 3 3 11 4 6 4 11 5 10 10 5 1\n解题思路杨辉三角形的规律：\n\n1、每个数等于它上方两数之和。\n2、每行数字左右对称，由1开始逐渐变大。\n3、第n行的数字有n项。\n4、第n行数字和为2^(n-1)。（2的(n-1)次方）\n5 (a+b)^n的展开式中的各项系数依次对应杨辉三角的第(n+1)行中的每一项。\n6、第n行的第m个数和第n-m个数相等，即C(n,m)=C(n,n-m)，这是组合数性质\n\n# include &lt;stdio.h&gt;int main ()&#123;\tint n;\tscanf(&quot;%d&quot;,&amp;n);\tint arr[30][30]=&#123;0&#125;;\tfor(int i=1;i&lt;=n;i++)\t&#123;\t\tfor(int j=1;j&lt;=i;j++)\t\t&#123;\t\t\tif(i==1&amp;&amp;j==1)\t\t\t&#123;\t\t\t\tarr[1][1]=1;\t\t\t\tprintf(&quot;%d &quot;,arr[i][j]);     //第一行是特殊的，需要注意\t\t\t\tbreak;\t\t\t&#125;\t\t\tarr[i][j]=arr[i-1][j-1]+arr[i-1][j];\t\t\tprintf(&quot;%d &quot;,arr[i][j]);\t\t&#125;\t\tprintf(&quot;\\n&quot;);\t&#125;&#125;\nP1160 队列安排题目描述一个学校里老师要将班上 $N$ 个同学排成一列，同学被编号为 $1\\sim N$，他采取如下的方法：\n\n先将 $1$ 号同学安排进队列，这时队列中只有他一个人；\n\n$2\\sim N$ 号同学依次入列，编号为 $i$ 的同学入列方式为：老师指定编号为 $i$ 的同学站在编号为 $1\\sim(i-1)$ 中某位同学（即之前已经入列的同学）的左边或右边；\n\n从队列中去掉 $M$ 个同学，其他同学位置顺序不变。\n\n\n在所有同学按照上述方法队列排列完毕后，老师想知道从左到右所有同学的编号。\n输入格式第一行一个整数 $N$，表示了有 $N$ 个同学。\n第 $2\\sim N$ 行，第 $i$ 行包含两个整数 $k,p$，其中 $k$ 为小于 $i$ 的正整数，$p$ 为 $0$ 或者 $1$。若 $p$ 为 $0$，则表示将 $i$ 号同学插入到 $k$ 号同学的左边，$p$ 为 $1$ 则表示插入到右边。\n第 $N+1$ 行为一个整数 $M$，表示去掉的同学数目。\n接下来 $M$ 行，每行一个正整数 $x$，表示将 $x$ 号同学从队列中移去，如果 $x$ 号同学已经不在队列中则忽略这一条指令。\n输出格式一行，包含最多 $N$ 个空格隔开的整数，表示了队列从左到右所有同学的编号。\n样例 #1样例输入 #141 02 11 0233\n样例输出 #12 4 1\n提示【样例解释】\n将同学 $2$ 插入至同学 $1$ 左边，此时队列为：\n2 1\n将同学 $3$ 插入至同学 $2$ 右边，此时队列为：\n2 3 1  \n将同学 $4$ 插入至同学 $1$ 左边，此时队列为：\n2 3 4 1  \n将同学 $3$ 从队列中移出，此时队列为：\n2 4 1  \n同学 $3$ 已经不在队列中，忽略最后一条指令\n最终队列：\n2 4 1  \n【数据范围】\n对于 $20\\%$ 的数据，$1\\leq N\\leq 10$。\n对于 $40\\%$ 的数据，$1\\leq N\\leq 1000$。\n对于 $100\\%$ 的数据，$1&lt;M\\leq N\\leq 10^5$​。\n解题思路#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cmath&gt;#include&lt;algorithm&gt;#include&lt;list&gt;#include&lt;cstring&gt;#include&lt;string&gt;using namespace std;const int N = 100005;struct node &#123;\tint l = 0, r = 0;&#125;L[N];int h[N];int main() &#123;\tint n, m, head = 1;//初始化头节点为第一个同学\tcin &gt;&gt; n;\tmemset(h, 1, sizeof(h));//h数组用来检查第i个同学有没有被删除，置1。\tint k, p;\tfor (int i = 2; i &lt;= n; ++i) &#123;\t\tscanf(&quot;%d %d&quot;, &amp;k, &amp;p);\t\tif (p == 0) &#123;\t\t\tif (L[k].l) &#123;//如果k同学左边还有同学\t\t\t\tL[L[k].l].r = i;//先修改k左边的同学的右边为i\t\t\t\tL[i].l = L[k].l;\t\t\t&#125;\t\t\tL[i].r = k;//注意不能写在if (L[k].l)前。\t\t\tL[k].l = i;\t\t\tif (head == k) &#123;//k为头节点的话，i又插入在k左边，则将head=i；\t\t\t\thead = i;\t\t\t&#125;\t\t&#125;\t\telse &#123;\t\t\t//同上\t\t\tif (L[k].r) &#123;\t\t\t\tL[L[k].r].l = i;\t\t\t\tL[i].r = L[k].r;\t\t\t&#125;\t\t\tL[i].l = k;\t\t\tL[k].r = i;\t\t&#125;\t&#125;\tcin &gt;&gt; m;\tint cur;\twhile (m--) &#123;\t\tscanf(&quot;%d&quot;, &amp;cur);\t\tif (h[cur]) &#123;//cur没有被删除\t\t\tint tmp = L[cur].l;\t\t\tif (L[cur].l) &#123;\t\t\t\tL[L[cur].l].r = L[cur].r;\t\t\t&#125;else &#123;//如果左边没有节点，则需要修改头节点\t\t\t\thead = L[cur].r;\t\t\t&#125;\t\t\tif (L[cur].r) &#123;\t\t\t\tL[L[cur].r].l = tmp;\t\t\t&#125;\t\t\th[cur] = 0;\t\t&#125; \t&#125;\tfor (int i = head; i != 0; i = L[i].r) &#123;\t\tprintf(&quot;%d &quot;, i);\t&#125;\treturn 0;&#125;\nP4387 【深基15.习9】验证栈序列题目描述给出两个序列 pushed 和 poped 两个序列，其取值从 1 到 $n(n\\le100000)$。已知入栈序列是 pushed，如果出栈序列有可能是 poped，则输出 Yes，否则输出 No。为了防止骗分，每个测试点有多组数据，不超过 $5$ 组。\n输入格式第一行一个整数 $q$，询问次数。\n接下来 $q$ 个询问，对于每个询问：\n第一行一个整数 $n$ 表示序列长度；\n第二行 $n$ 个整数表示入栈序列；\n第三行 $n$ 个整数表示出栈序列；\n输出格式对于每个询问输出答案。\n样例 #1样例输入 #1251 2 3 4 55 4 3 2 141 2 3 42 4 1 3\n样例输出 #1YesNo\n解题思路在python中，对于栈使用的是stack。\n可以如下两种编写方式，重构后感觉第二种更适合刷题。\ndef judge(pushed, poped):      stack = []    push = 0      popo = 0      while push &lt; len(pushed) and popo &lt; len(poped):           stack.append(pushed[push])          push += 1           while stack and stack[-1] == poped[popo]:              stack.pop()              popo += 1      return push == len(pushed) and popo == len(poped) and not stack  q = int(input())  for _ in range(q):      n = int(input())      pushed = list(map(int, input().split()))      poped = list(map(int, input().split()))      print(&quot;Yes&quot; if judge(pushed, poped) else &quot;No&quot;)\nq=int(input())for _ in range(q):    n=int(input())    pushed=list(map(int,input().split()))    poped=list(map(int,input().split()))    stack = []    push_index=0    pop_index=0    while push_index &lt; len(pushed) and pop_index &lt;len(poped):        stack.append(pushed[push_index])        push_index +=1        while stack and stack[-1]==poped[pop_index]:            stack.pop()            pop_index += 1    if push_index == len(pushed) and pop_index ==len(poped) and not stack:        print(&quot;Yes&quot;)    else:        print(&quot;No&quot;)\n解题思路2使用C语言\n   每个数字只能入栈出栈1次，无法将入栈数字全部出栈的输出No\n   除出栈入栈数组外多一个数组作为缓冲区外部循环做n次每次将第i个数据放在缓冲区最顶的内存里，进入内循环如果缓冲区最顶的数据与第j个出栈的数据一致就将数据出栈，内循环直到缓冲区没有数据退出内循环，外循环结束时缓冲区没有数据代表出栈成功。\n#include&lt;stdio.h&gt;#include&lt;string.h&gt;int a[100005]=&#123;0&#125;,top=0,b[100005]=&#123;0&#125;,c[100005]=&#123;0&#125;;main()&#123;\tint i,j=0,k,q,n;\tscanf(&quot;%d&quot;,&amp;q);\twhile(q--)\t&#123;\t\tscanf(&quot;%d&quot;,&amp;n);\t\tmemset(a,0,n*4);\t\tmemset(b,0,n*4);\t\tmemset(c,0,n*4);\t\tfor(i=0;i&lt;n;i++)\t\tscanf(&quot;%d&quot;,&amp;a[i]);\t\tfor(i=0;i&lt;n;i++)\t\tscanf(&quot;%d&quot;,&amp;b[i]);\t\ti=0;j=0;  top=0;\t\twhile(i&lt;n)\t\t&#123;\t\tc[top++]=a[i++];\t\twhile(c[top-1]==b[j] )&#123;\t\t\tj++,top--;\t\t\tif(top==0)break;\t\t&#125;\t\t\t\t\t&#125;\t\tif(top==0)printf(&quot;Yes\\n&quot;);\t\telse printf(&quot;No\\n&quot;);\t&#125;&#125;\nP1090 [NOIP2004 提高组] 合并果子 / [USACO06NOV] Fence Repair G题目描述在一个果园里，多多已经将所有的果子打了下来，而且按果子的不同种类分成了不同的堆。多多决定把所有的果子合成一堆。\n每一次合并，多多可以把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和。可以看出，所有的果子经过 $n-1$ 次合并之后， 就只剩下一堆了。多多在合并果子时总共消耗的体力等于每次合并所耗体力之和。\n因为还要花大力气把这些果子搬回家，所以多多在合并果子时要尽可能地节省体力。假定每个果子重量都为 $1$ ，并且已知果子的种类 数和每种果子的数目，你的任务是设计出合并的次序方案，使多多耗费的体力最少，并输出这个最小的体力耗费值。\n例如有 $3$ 种果子，数目依次为 $1$ ， $2$ ， $9$ 。可以先将 $1$ 、 $2$ 堆合并，新堆数目为 $3$ ，耗费体力为 $3$ 。接着，将新堆与原先的第三堆合并，又得到新的堆，数目为 $12$ ，耗费体力为 $12$ 。所以多多总共耗费体力 $=3+12=15$ 。可以证明 $15$ 为最小的体力耗费值。\n输入格式共两行。第一行是一个整数 $n(1\\leq n\\leq 10000)$ ，表示果子的种类数。  \n第二行包含 $n$ 个整数，用空格分隔，第 $i$ 个整数 $a_i(1\\leq a_i\\leq 20000)$ 是第 $i$ 种果子的数目。\n输出格式一个整数，也就是最小的体力耗费值。输入数据保证这个值小于 $2^{31}$ 。\n样例 #1样例输入 #13 1 2 9\n样例输出 #115\n提示对于 $30\\%$ 的数据，保证有 $n \\le 1000$：\n对于 $50\\%$ 的数据，保证有 $n \\le 5000$；\n对于全部的数据，保证有 $n \\le 10000$​。\n解题思路这是一个典型的哈夫曼树，哈夫曼树是二叉树中的一种完全二叉树\n#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;using namespace std; int n, a1[99999], a2[99999];       //a1用于存剩余元素，a2用于存合并之后的元素int ans, x;            //x为a2的元素个数int main()&#123;\tcin &gt;&gt; n;\tmemset(a1, 127, sizeof(a1));\tmemset(a2, 127, sizeof(a2));\tfor (int i = 0; i &lt; n; i++)\t\tcin &gt;&gt; a1[i];\tsort(a1, a1 + n);\tint i = 0, j = 0, w;        //w为每次一消耗的体力\tfor (int k = 1; k &lt; n; k++)\t&#123;\t\tw = a1[i] &lt; a2[j] ? a1[i++] : a2[j++];\t\t\t\t\tw += a1[i] &lt; a2[j] ? a1[i++] : a2[j++];\t\t\ta2[x++] = w;\t\tans += w;\t&#125;\tcout &lt;&lt; ans; \treturn 0;&#125;\n首先将两个数组的元素初始值设置为int的最大值，使得后续找最小值时方便，再将数组进行从小到大的排序，当然也是便于寻找最小值。\nok，进入核心步骤，也就是找最小值合并。\n有n个堆，那么合并成一个堆只需要n-1次操作，因此循环为n-1次\n由于a1(利用了sort函数),a2(每次取最小值合并，下一次合并的堆一定比上一次大)均为从小到大排序\n  w = a1[i] &lt; a2[j] ? a1[i++] : a2[j++];\t    //第一次取最小值\t\tw += a1[i] &lt; a2[j] ? a1[i++] : a2[j++];\t    //第二次去最小值a2[x++] = w;ans += w;\n那么就可以直接在两个数组中按下标顺序找最小值，i和j起一个指针作用，若该元素已经使用了，就指到下一个元素。通过两次取最小值，找到最小堆合并存入第二个数组中，最后利用ans算出结果\nP1449 后缀表达式题目描述所谓后缀表达式是指这样的一个表达式：式中不再引用括号，运算符号放在两个运算对象之后，所有计算按运算符号出现的顺序，严格地由左而右新进行（不用考虑运算符的优先级）。\n本题中运算符仅包含 $\\texttt{+-/}$。保证对于 $\\texttt{/}$ 运算除数不为 0。特别地，其中 $\\texttt{/}$ 运算的结果需要*向 0 取整（即与 C++ / 运算的规则一致）。\n如：$\\texttt{3(5-2)+7}$ 对应的后缀表达式为：$\\texttt{3.5.2.-7.+@}$。在该式中，@ 为表达式的结束符号。. 为操作数的结束符号。\n输入格式输入一行一个字符串 $s$，表示后缀表达式。\n输出格式输出一个整数，表示表达式的值。\n样例 #1样例输入 #13.5.2.-*7.+@\n样例输出 #116\n样例 #2样例输入 #210.28.30./*7.-@\n样例输出 #2-7\n提示数据保证，$1 \\leq |s| \\leq 50$，答案和计算过程中的每一个值的绝对值不超过 $10^9$​。\n解题思路     上图是一棵表达式树，对应的后缀表达式是4 1 5 2 - * + 6 3 / -。\n可以看出，每个运算符结点都有左子树和右子树，每个数字结点都是叶子节点。    表达式树的中序遍历就是中缀表达式。运算方式：左子树的结果 运算符 右子树的结果\n#include &lt;iostream&gt;#include &lt;stack&gt;using namespace std;stack &lt;int&gt; n;int s=0;int main()&#123;    char ch;    while(1)&#123;        cin&gt;&gt;ch;        if(ch&lt;=&#x27;9&#x27;&amp;&amp;ch&gt;=&#x27;0&#x27;) s=s*10+ch-&#x27;0&#x27;;//累计        else if(ch==&#x27;.&#x27;)&#123;            n.push(s);//压栈            s=0;//s清零        &#125;        else if(ch!=&#x27;@&#x27;)&#123;            int a1=n.top();n.pop();int a2=n.top();n.pop();//弹出栈顶两个元素            if(ch==&#x27;+&#x27;) n.push(a1+a2);            if(ch==&#x27;-&#x27;) n.push(a2-a1);            if(ch==&#x27;*&#x27;) n.push(a1*a2);            if(ch==&#x27;/&#x27;) n.push(a2/a1);            //压入结果        &#125;        else break;    &#125;    cout&lt;&lt;n.top();    return 0;&#125;\nP1241 括号序列题目描述定义如下规则：\n\n空串是「平衡括号序列」\n若字符串 $S$ 是「平衡括号序列」，那么 $\\texttt{[}S\\texttt]$ 和 $\\texttt{(}S\\texttt)$ 也都是「平衡括号序列」\n若字符串 $A$ 和 $B$ 都是「平衡括号序列」，那么 $AB$（两字符串拼接起来）也是「平衡括号序列」。\n\n例如，下面的字符串都是平衡括号序列：\n\n()，[]，(())，([])，()[]，()[()]\n\n而以下几个则不是：\n\n(，[，]，)(，())，([()\n\n现在，给定一个仅由 (，)，[，]构成的字符串 $s$，请你按照如下的方式给字符串中每个字符配对：\n\n从左到右扫描整个字符串。\n对于当前的字符，如果它是一个右括号，考察它与它左侧离它最近的未匹配的的左括号。如果该括号与之对应（即小括号匹配小括号，中括号匹配中括号），则将二者配对。如果左侧未匹配的左括号不存在或与之不对应，则其配对失败。\n\n配对结束后，对于 $s$ 中全部未配对的括号，请你在其旁边添加一个字符，使得该括号和新加的括号匹配。\n输入格式输入只有一行一个字符串，表示 $s$。\n输出格式输出一行一个字符串表示你的答案。\n样例 #1样例输入 #1([()\n样例输出 #1()[]()\n样例 #2样例输入 #2([)\n样例输出 #2()[]()\n提示数据规模与约定对于全部的测试点，保证 $s$ 的长度不超过 $100$​，且只含  (，)，[，] 四种字符。\n解题思路\n参考思路原题目：扫描一遍原序列，对每一个右括号，找到在它左边最靠近它的左括号匹配，如果没有就放弃。\n\n翻译：扫描一遍原序列，当找到一个右括号（即找到一个 ‘ ) ‘ 或者 ‘ ] ‘ 时），以它为起点向左找，找到一个没被标记成功匹配的左括号（即找到一个 ‘ ( ‘ 或者 ‘ [ ‘ ），如果两者匹配的话，标记它们成功匹配，如果不匹配，或者找不到左括号的话，不做任何标记。\n\n原题目：在以这种方式把原序列匹配完成后，把剩下的未匹配的括号补全。\n\n翻译：上面扫描一遍标记完成功匹配的括号之后，扫描一遍序列，对于标记过的括号，则直接输出；对于没有标记的括号，则补全成对输出\n\n举例：如果有个 ‘ [ ‘ 或 ‘ ] ‘ 没被标记匹配，则输出 [ ]\n#include &lt;bits/stdc++.h&gt; using namespace std; int a[105]; // 标记 int main()&#123;    int i,j;    string s;    cin &gt;&gt; s;    for (i=0; i&lt;s.length(); i++) &#123;        if (s[i] == &#x27;)&#x27;) &#123; // 找到了右括号            for (j=i-1; j&gt;=0; j--) &#123;                if (s[j] == &#x27;(&#x27; and a[j] == 0) &#123; // 找到了没被匹配过的左括号且匹配成功                    a[i] = a[j] = 1;                    break;                &#125;                else if (s[j] == &#x27;[&#x27; and a[j] == 0) break; // 找到了左括号但匹配失败            &#125;            // 找不到左括号，不做任何操作        &#125;        // 下面同理        else if (s[i] == &#x27;]&#x27;) &#123;            for (j=i-1; j&gt;=0; j--) &#123;                if (s[j] == &#x27;[&#x27; and a[j] == 0) &#123;                    a[i] = a[j] = 1;                    break;                &#125;                else if (s[j] == &#x27;(&#x27; and a[j] == 0) break;            &#125;        &#125;    &#125;    for (i=0; i&lt;s.length(); i++) &#123;        if (a[i] == 0) &#123; // 没有匹配则成对输出            if (s[i] == &#x27;(&#x27; or s[i] == &#x27;)&#x27;) cout &lt;&lt; &quot;()&quot;;            else cout &lt;&lt; &quot;[]&quot;;        &#125;        else cout &lt;&lt; s[i]; // 匹配成功则直接输出    &#125;    return 0;&#125;\n\n\nP1044 [NOIP2003 普及组] 栈题目背景栈是计算机中经典的数据结构，简单的说，栈就是限制在一端进行插入删除操作的线性表。\n栈有两种最重要的操作，即 pop（从栈顶弹出一个元素）和 push（将一个元素进栈）。\n栈的重要性不言自明，任何一门数据结构的课程都会介绍栈。宁宁同学在复习栈的基本概念时，想到了一个书上没有讲过的问题，而他自己无法给出答案，所以需要你的帮忙。\n题目描述\n宁宁考虑的是这样一个问题：一个操作数序列，$1,2,\\ldots ,n$（图示为 1 到 3 的情况），栈 A 的深度大于 $n$。\n现在可以进行两种操作，\n\n将一个数，从操作数序列的头端移到栈的头端（对应数据结构栈的 push 操作）\n将一个数，从栈的头端移到输出序列的尾端（对应数据结构栈的 pop 操作）\n\n使用这两种操作，由一个操作数序列就可以得到一系列的输出序列，下图所示为由 1 2 3 生成序列 2 3 1 的过程。\n\n（原始状态如上图所示）\n你的程序将对给定的 $n$，计算并输出由操作数序列 $1,2,\\ldots,n$ 经过操作可能得到的输出序列的总数。\n输入格式输入文件只含一个整数 $n$（$1 \\leq n \\leq 18$）。\n输出格式输出文件只有一行，即可能输出序列的总数目。\n样例 #1样例输入 #13\n样例输出 #15\n提示【题目来源】\nNOIP 2003 普及组第三题\n解题思路思路：先定义数组和变量，然后令f[0]=1,f[1]=1,默认f[0]=1纯粹是为了满足表达式计算，无实际意义；然后用卡特兰数递推式方可求出从2开始到n的各个f值，最后输出f[n]即可.    卡特兰数原理：令h(0)=1,h(1)=1，catalan数满足递推式:h(n)= h(0)h(n-1)+h(1)h(n-2) + … + h(n-1)h(0) (n&gt;=2)\n#include&lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 1001;int f[MAXN],n;int main()&#123;    cin&gt;&gt;n;    f[0] = 1, f[1] = 1;    //从2到n按规律递推    for(int i = 2;i &lt;= n;i++)        for(int j = 0;j &lt; i;j++)            f[i] += f[j] * f[i-j-1];//卡特兰数递推式    cout&lt;&lt;f[n];    return 0;&#125;\nP6033 [NOIP2004 提高组] 合并果子 加强版题目背景本题除【数据范围与约定】外与 P1090 完  全  一  致。\n题目描述在一个果园里，多多已经将所有的果子打了下来，而且按果子的不同种类分成了不同的堆。多多决定把所有的果子合成一堆。\n每一次合并，多多可以把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和。可以看出，所有的果子经过 $(n - 1)$ 次合并之后， 就只剩下一堆了。多多在合并果子时总共消耗的体力等于每次合并所耗体力之和。\n因为还要花大力气把这些果子搬回家，所以多多在合并果子时要尽可能地节省体力。假定每个果子重量都为 $1$，并且已知果子的种类数和每种果子的数目，你的任务是设计出合并的次序方案，使多多耗费的体力最少，并输出这个最小的体力耗费值。\n例如有 $3$ 堆果子，数目依次为 $1,~2,~9$。可以先将 $1$、$2$ 堆合并，新堆数目为 $3$，耗费体力为 $3$。接着，将新堆与原先的第三堆合并，又得到新的堆，数目为 $12$，耗费体力为 $12$。所以多多总共耗费体力为 $3+12=15$。可以证明 $15$ 为最小的体力耗费值。\n输入格式输入的第一行是一个整数 $n$，代表果子的堆数。\\输入的第二行有 $n$ 个用空格隔开的整数，第 $i$ 个整数代表第 $i$ 堆果子的个数 $a_i$。\n输出格式输出一行一个整数，表示最小耗费的体力值。\n样例 #1样例输入 #13 1 2 9\n样例输出 #115\n提示【数据规模与约定】\n本题采用多测试点捆绑测试，共有四个子任务。\n\nSubtask 1（10 points）：$1 \\leq n \\leq 8$。\nSubtask 2（20 points）：$1 \\leq n \\leq 10^3$。\nSubtask 3（30 points）：$1 \\leq n \\leq 10^5$。\nSubtask 4（40 points）：$1 \\leq n \\leq 10^7$。\n\n对于全部的测试点，保证 $1 \\leq a_i \\leq 10^5$。\n【提示】\n\n请注意常数因子对程序效率造成的影响。\n请使用类型合适的变量来存储本题的结果。\n本题输入规模较大，请注意数据读入对程序效率造成的影响。\n\n解题思路参考文章：【洛谷】P6033 合并果子 加强版（配数学证明）_洛谷6033测试数据-CSDN博客\n#include &lt;iostream&gt;using namespace std;const int M = 1e5 + 10, N = 1e7 + 10;int n, a[M];long res;long q1[N], q2[N];int hh1, tt1, hh2, tt2;// 快读void read(int &amp;x) &#123;  int si = 1;  x = 0;  char c = getchar();  if (c == &#x27;-&#x27;) si = -1, c = getchar();  for (; &#x27;0&#x27; &lt;= c &amp;&amp; c &lt;= &#x27;9&#x27;; c = getchar())    x = x * 10 + c - &#x27;0&#x27;;  x *= si;&#125;// 两个队列里取队头最小值long find_min() &#123;  long x;  if (hh2 == tt2 || hh1 &lt; tt1 &amp;&amp; q1[hh1] &lt; q2[hh2]) x = q1[hh1++];  else x = q2[hh2++];  return x;&#125;int main() &#123;  read(n);  for (int i = 1, x; i &lt;= n; i++) &#123;    read(x);    a[x]++;  &#125;  for (int i = 1; i &lt; M; i++) while (a[i]) a[i]--, q1[tt1++] = i;  for (int i = 1; i &lt; n; i++) &#123;    long x = find_min(), y = find_min();    res += x + y;    q2[tt2++] = x + y;  &#125;  printf(&quot;%ld\\n&quot;, res);&#125;\nP3370 【模板】字符串哈希题目描述如题，给定 $N$ 个字符串（第 $i$ 个字符串长度为 $M_i$，字符串内包含数字、大小写字母，大小写敏感），请求出 $N$ 个字符串中共有多少个不同的字符串。\n友情提醒：如果真的想好好练习哈希的话，请自觉。\n输入格式第一行包含一个整数 $N$，为字符串的个数。\n接下来 $N$ 行每行包含一个字符串，为所提供的字符串。\n输出格式输出包含一行，包含一个整数，为不同的字符串个数。\n样例 #1样例输入 #15abcaaaaabcabcc12345\n样例输出 #14\n提示对于 $30\\%$ 的数据：$N\\leq 10$，$M_i≈6$，$Mmax\\leq 15$。\n对于 $70\\%$ 的数据：$N\\leq 1000$，$M_i≈100$，$Mmax\\leq 150$。\n对于 $100\\%$ 的数据：$N\\leq 10000$，$M_i≈1000$，$Mmax\\leq 1500$。\n样例说明：\n样例中第一个字符串(abc)和第三个字符串(abc)是一样的，所以所提供字符串的集合为{aaaa,abc,abcc,12345}，故共计4个不同的字符串。\nTip：感兴趣的话，你们可以先看一看以下三题：\nBZOJ3097：http://www.lydsy.com/JudgeOnline/problem.php?id=3097\nBZOJ3098：http://www.lydsy.com/JudgeOnline/problem.php?id=3098\nBZOJ3099：http://www.lydsy.com/JudgeOnline/problem.php?id=3099\n如果你仔细研究过了（或者至少仔细看过AC人数的话），我想你一定会明白字符串哈希的正确姿势的^_^\n提示对于 $30\\%$ 的数据：$N\\leq 10$，$M_i≈6$，$Mmax\\leq 15$。\n对于 $70\\%$ 的数据：$N\\leq 1000$，$M_i≈100$，$Mmax\\leq 150$。\n对于 $100\\%$ 的数据：$N\\leq 10000$，$M_i≈1000$，$Mmax\\leq 1500$。\n样例说明：\n样例中第一个字符串(abc)和第三个字符串(abc)是一样的，所以所提供字符串的集合为{aaaa,abc,abcc,12345}，故共计4个不同的字符串。\nTip：感兴趣的话，你们可以先看一看以下三题：\nBZOJ3097：http://www.lydsy.com/JudgeOnline/problem.php?id=3097\nBZOJ3098：http://www.lydsy.com/JudgeOnline/problem.php?id=3098\nBZOJ3099：http://www.lydsy.com/JudgeOnline/problem.php?id=3099\n如果你仔细研究过了（或者至少仔细看过AC人数的话），我想你一定会明白字符串哈希的正确姿势的^_^\n解题代码n=int(input())a=list(input() for _ in range(n))a.sort()cout=0while a:    if len(a)==1:        cout+=1        break    if a[0]!=a[1]:        cout+=1        a.pop(0)    else:        a.pop(0)print(cout)\nn = int(input())lst = [input() for _ in range(n)]lst.sort() count = nfor i in range(1, n):    if lst[i] == lst[i - 1]:        count -= 1 print(count)\n解题思路《洛谷深入浅出基础篇》 p3370字符串哈希——hash表_洛谷p3370-CSDN博客\n#include&lt;bits/stdc++.h&gt;using namespace std;#include &lt;vector&gt;#include &lt;cstring&gt;typedef long long int LL;const int mod = 1007;const int base = 117;vector&lt;string&gt; linker[mod + 2];string s;int ans;void insert1(string s)&#123;\tint hash = 0;\tfor (int i = 0; i &lt; s.size(); i++)\t&#123;\t\thash = (hash*1ll*base + (LL)s[i]) % mod;\t&#125; \tfor (int i = 0; i &lt; linker[hash].size(); i++)\t\tif (linker[hash][i] == s)return;\tlinker[hash].push_back(s);\tans++;&#125;int main()&#123;\tint n;\tcin &gt;&gt; n;\twhile (n--)\t&#123;\t\tcin &gt;&gt; s;\t\tinsert1(s);\t&#125;\tcout &lt;&lt; ans;&#125;\nP5250 【深基17.例5】木材仓库题目描述博艾市有一个木材仓库，里面可以存储各种长度的木材，但是保证没有两个木材的长度是相同的。作为仓库负责人，你有时候会进货，有时候会出货，因此需要维护这个库存。有不超过 100000 条的操作：\n\n进货，格式1 Length：在仓库中放入一根长度为 Length(不超过 $10^9$) 的木材。如果已经有相同长度的木材那么输出Already Exist。\n出货，格式2 Length：从仓库中取出长度为 Length 的木材。如果没有刚好长度的木材，取出仓库中存在的和要求长度最接近的木材。如果有多根木材符合要求，取出比较短的一根。输出取出的木材长度。如果仓库是空的，输出Empty。\n\n输入格式输出格式样例 #1样例输入 #171 11 51 32 32 32 32 3\n样例输出 #1315Empty\n解题答案python版\nfrom bisect import bisect_left    s = set()  n = int(input())    for _ in range(n):      k, l = map(int, input().split())            if k == 1:          if l not in s:              s.add(l)          else:              print(&quot;Already Exist&quot;)      else:          if not s:              print(&quot;Empty&quot;)              continue                    # Python的set没有lower_bound方法，但我们可以使用bisect_left来找到最接近l的元素索引          # 首先将set转换为sorted list          sorted_s = sorted(s)          index = bisect_left(sorted_s, l)                    if index == 0:              print(sorted_s[index])              s.remove(sorted_s[index])              continue                    if index == len(sorted_s):              index -= 1              print(sorted_s[index])              s.remove(sorted_s[index])              continue                    # 找出离l最近的两个元素          prev = sorted_s[index - 1]          curr = sorted_s[index]                    # 根据差值大小决定删除哪个元素          if l - prev &lt;= curr - l:              print(prev)              s.remove(prev)          else:              print(curr)              s.remove(curr)\nc语言版\n#include&lt;bits/stdc++.h&gt;using namespace std;#define IOS ios::sync_with_stdio(0),cin.tie(0),cout.tie(0)#define endl &quot;\\n&quot;#define int long long#define pb push_back#define lb lower_bound#define ub upper_boundconst int INF = 1e12+10;set&lt;int&gt; s;//存放木材 int num=0;//目前有几个木材 void solve()&#123;\tint op,x;\tcin&gt;&gt;op&gt;&gt;x;\tif(op==1)&#123;\t\tif(s.count(x))\t\t  cout&lt;&lt;&quot;Already Exist&quot;&lt;&lt;endl;\t\telse\t\t  s.insert(x);//存放长度为x木材  \t&#125;else if(op==2)&#123;\t\tif(s.size()==2)\t\t  cout&lt;&lt;&quot;Empty&quot;&lt;&lt;endl;\t\telse &#123;\t\t\tauto k=s.lb(x);\t\t\tif(*k==x)&#123;//有刚好长度的木材 \t\t\t\tcout&lt;&lt;x&lt;&lt;endl;\t\t\t\ts.erase(k);\t\t\t&#125;else&#123;\t\t\t\tauto k1=s.lb(x),k2=--s.lb(x);//找到长度接近x的木材 \t\t\t\tif(abs(*k1-x)&lt;abs(*k2-x))&#123; \t\t\t\t\tcout&lt;&lt;*k1&lt;&lt;endl;\t\t\t\t\ts.erase(k1); \t\t\t\t&#125;else&#123;//取最接近x且比较短的一根木材\t\t\t\t\tcout&lt;&lt;*k2&lt;&lt;endl;\t\t\t\t\ts.erase(k2); \t\t\t\t&#125;\t\t\t&#125;\t\t&#125;\t&#125; \t&#125;signed main()&#123;\tIOS;\ts.insert(INF),s.insert(-INF);\tint T=1;\tcin&gt;&gt;T;\twhile(T--)&#123;\t\tsolve();\t&#125;\treturn 0;&#125;\nP5266 【深基17.例6】学籍管理题目描述您要设计一个学籍管理系统，最开始学籍数据是空的，然后该系统能够支持下面的操作（不超过 $10^5$ 条）：\n\n插入与修改，格式1 NAME SCORE：在系统中插入姓名为 NAME(由字母和数字组成不超过 20 个字符的字符串，区分大小写) ，分数为 $\\texttt{SCORE}$（$0&lt;\\texttt{SCORE}&lt;2^{31}$） 的学生。如果已经有同名的学生则更新这名学生的成绩为 SCORE。如果成功插入或者修改则输出OK。\n查询，格式2 NAME：在系统中查询姓名为 NAME 的学生的成绩。如果没能找到这名学生则输出Not found，否则输出该生成绩。\n删除，格式3 NAME：在系统中删除姓名为 NAME 的学生信息。如果没能找到这名学生则输出Not found，否则输出Deleted successfully。\n汇总，格式4：输出系统中学生数量。\n\n输入格式输出格式样例 #1样例输入 #151 lxl 102 lxl3 lxl2 lxl4\n样例输出 #1OK10Deleted successfullyNot found0\n解题思路题目要求对字符串进行存储、修改、查询、删除、统计数目等操作，考虑到直接对字符串进行上述操作在代码实现和时间复杂度上都不够优，从而想到利用哈希建立映射关系，对哈希函数的返回值进行操作。\n代码：\n#include&lt;cstdio&gt;#include&lt;cstring&gt;using namespace std;int n,sc,k,num,haxh;//n为操作总数，sc为学生分数，k为操作格式，num记录系统中的人数，haxh用于存储字符串hash值。 long long base=173,mod=19260817;//哈希函数的基数和模数。 char s[114];//学生姓名。 int b[30000000];//利用数组进行操作。 long long hs(char str[])&#123;\tlong long len=strlen(str),ans=0;\tfor(int i=0;i&lt;len;i++)\tans=(ans*base+(long long)str[i])%mod;\treturn ans;&#125;//通过哈希函数将字符串映射到 int 类型上。 int main()&#123;\tscanf(&quot;%d&quot;,&amp;n);\twhile(n--)\t&#123;\t\tscanf(&quot;%d&quot;,&amp;k);\t\tif(k&lt;4)\t\tscanf(&quot;%s&quot;,s);//前三种操作需要读入学生姓名。 \t\thaxh=hs(s);//计算学生姓名的hash值。 \t\tif(k==1)\t\t&#123;\t\t\tscanf(&quot;%d&quot;,&amp;sc);\t\t\tif(b[haxh]&lt;=0) \t\t\tnum++;//分数小于等于0说明系统中没有该学生，学生总数加一。\t\t\tb[haxh]=sc;\t\t\tprintf(&quot;OK\\n&quot;);\t\t&#125;\t\telse if(k==2)\t\t&#123;\t\t\tif(b[haxh]&gt;0)//判断系统中有无该学生的信息。 \t\t\tprintf(&quot;%d\\n&quot;,b[haxh]);\t\t\telse printf(&quot;Not found\\n&quot;);\t\t&#125;\t\telse if(k==3)\t\t&#123;\t\t\tif(b[haxh]&gt;0)\t\t\t&#123;\t\t\t\tb[haxh]=0;\t\t\t\tnum--;//删除该生信息。 \t\t\t\tprintf(&quot;Deleted successfully\\n&quot;);\t\t\t&#125;\t\t\telse printf(&quot;Not found\\n&quot;);\t\t&#125;\t\telse printf(&quot;%d\\n&quot;,num);\t&#125;\treturn 0;&#125;\n当然也可以用 $STL$ 中的 $map$ 来建立映射关系，但在时间常数上要比手打哈希略大。\n\n上面三次提交使用的是手打哈希，下面两次提交使用的是 $map$ ，可以明显看出 $map$ 比手打哈希要慢。\n代码：\n#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;#include&lt;algorithm&gt;#include&lt;map&gt;using namespace std;int n,sc,k,num;char s[114];map&lt;string,int&gt;sys;int main()&#123;\tscanf(&quot;%d&quot;,&amp;n);\twhile(n--)\t&#123;\t\tscanf(&quot;%d&quot;,&amp;k);\t\tif(k&lt;4)\t\tscanf(&quot;%s&quot;,s);\t\tif(k==1)\t\t&#123;\t\t\tscanf(&quot;%d&quot;,&amp;sc);\t\t\tif(sys[s]&lt;=0)\t\t\tnum++;\t\t\tsys[s]=sc;\t\t\tprintf(&quot;OK\\n&quot;);\t\t&#125;\t\telse if(k==2)\t\t&#123;\t\t\tif(sys[s]&gt;0)\t\t\tprintf(&quot;%d\\n&quot;,sys[s]);\t\t\telse printf(&quot;Not found\\n&quot;);\t\t&#125;\t\telse if(k==3)\t\t&#123;\t\t\tif(sys[s]&gt;0)\t\t\t&#123;\t\t\t\tsys[s]=0;\t\t\t\tnum--;\t\t\t\tprintf(&quot;Deleted successfully\\n&quot;);\t\t\t&#125;\t\t\telse printf(&quot;Not found\\n&quot;);\t\t&#125;\t\telse printf(&quot;%d\\n&quot;,num);\t&#125;\treturn 0;&#125;\n作者：linponess    创建时间：2019-12-26 11:45:56\nP1102 A-B 数对题目背景出题是一件痛苦的事情！\n相同的题目看多了也会有审美疲劳，于是我舍弃了大家所熟悉的 A+B Problem，改用 A-B 了哈哈！\n题目描述给出一串正整数数列以及一个正整数 $C$，要求计算出所有满足 $A - B = C$ 的数对的个数（不同位置的数字一样的数对算不同的数对）。\n输入格式输入共两行。\n第一行，两个正整数 $N,C$。\n第二行，$N$ 个正整数，作为要求处理的那串数。\n输出格式一行，表示该串正整数中包含的满足 $A - B = C$ 的数对的个数。\n样例 #1样例输入 #14 11 1 2 3\n样例输出 #13\n提示对于 $75\\%$ 的数据，$1 \\leq N \\leq 2000$。\n对于 $100\\%$ 的数据，$1 \\leq N \\leq 2 \\times 10^5$，$0 \\leq a_i &lt;2^{30}$，$1 \\leq C &lt; 2^{30}$。\n2017/4/29 新添数据两组\n解题思路map 映照容器可以解决这一题首先，我们来了解一下 map 是个什么东西：\n\nmap 映照容器在头文件中定义，它的元素数据是由一个键值和一个映照数据组成的，键值和映照数据具有一一对应的关系，键值可以是数，也可以是字符。 例如：\n\n\n键值    映照数据  (name)     (score)   Alice        98   Mary        96   156        66\n\n在没有指定比较函数时，元素是从小到大插入的。比较函数只对键值进行比较，元素的各项数据可以通过键值检索出来。\n\n对于这一道题，我们可以把 A-B=C 改成 B+C=A，再通过 map 进行映照，就可以得出答案。\ncode:\n#include &lt;bits/stdc++.h&gt;//万能头文件,不用调用头文件&lt;map&gt;using namespace std; int main() &#123;    long long n,c,co=0; //要开long long,否则会 WA 一个数据点     cin&gt;&gt;n&gt;&gt;c;     int a[n+1];    map&lt;int,int&gt; b;//键值和映照数据都是 int 类型    for(int i=1; i&lt;=n; i++) &#123;         cin&gt;&gt;a[i]; b[a[i]]++;    &#125;    for(int i=1; i&lt;=n; i++)         co+=b[a[i]+c];//反向思维,枚举 B+C     cout&lt;&lt;co&lt;&lt;endl;     return 0; &#125;\n作者：onepeople666    创建时间：2020-02-04 13:12:37\n以上是洛谷题解中的一种C++做法，那么对于这个问题，肯定要使用自己熟悉的语言来进行实现。\npython如何解决这一个问题？常规思路：遍历n,c=map(int,input().split())nums=list=list(map(int,input().split()))count_dict=&#123;&#125;pair_count=0for num in nums:    if num -c in count_dict:        pair_count +=count_dict[num -c]    count_dict[num] =count_dict.get(num,0) +1print(pair_count)\n虽然确实符合思维逻辑，但是超时了。\n那就使用算法，使用二分算法比较符合当前的情况，在python中，可以使用bisect库来实现。\n二分实现：import bisectn,c = map(int,input().split())lst0 = list(map(int,input().split()))lst0.sort() #此方法用到了二分查找,所以需要先对列表进行排序lst1 = [0 for i in range(n)]for i in range(n):    lst1[i] = lst0[i]-ccount = 0for i in range(n):    x = bisect.bisect_left (lst0,lst1[i])    y = bisect.bisect_right(lst0,lst1[i])    count += y-xprint(count)\n知识点补充（bisect库）1 基础知识前提：列表有序！！！\nbisect()和bisect_right()等同，那下面就介绍bisect_left()和bisec_right()的区别！\n用法：\nindex1 = bisect(ls, x)   #第1个参数是列表，第2个参数是要查找的数，返回值为索引index2 = bisect_left(ls, x)index3 = bisec_right(ls, x)\nbisect.bisect和bisect.bisect_right返回大于x的第一个下标(相当于C++中的upper_bound)，bisect.bisect_left返回大于等于x的第一个下标(相当于C++中的lower_bound)。\ncase1如果列表中没有元素x，那么bisect_left(ls, x)和bisec_right(ls, x)返回相同的值，该值是x在ls中“合适的插入点索引，使得数组有序”。此时，ls[index2] &gt; x，ls[index3] &gt; x。\nimport bisectls = [1,5,9,13,17]index1 = bisect.bisect(ls,7)index2 = bisect.bisect_left(ls,7)index3 = bisect.bisect_right(ls,7)print(&quot;index1 = &#123;&#125;, index2 = &#123;&#125;, index3 = &#123;&#125;&quot;.format(index1, index2, index3))\n程序运行结果为，\nindex1 = 2, index2 = 2, index3 = 2\ncase2如果列表中只有一个元素等于x，那么bisect_left(ls, x)的值是x在ls中的索引，ls[index2] = x。而bisec_right(ls, x)的值是x在ls中的索引加1，ls[index3] &gt; x。\nimport bisectls = [1,5,9,13,17]index1 = bisect.bisect(ls,9)index2 = bisect.bisect_left(ls,9)index3 = bisect.bisect_right(ls,9)print(&quot;index1 = &#123;&#125;, index2 = &#123;&#125;, index3 = &#123;&#125;&quot;.format(index1, index2, index3))\n程序运行结果为，\nindex1 = 3, index2 = 2, index3 = 3\ncase3如果列表中存在多个元素等于x，那么bisect_left(ls, x)返回最左边的那个索引，此时ls[index2] = x。bisect_right(ls, x)返回最右边的那个索引加1，此时ls[index3] &gt; x。\nimport bisectls = [1,5,5,5,17]index1 = bisect.bisect(ls,5)index2 = bisect.bisect_left(ls,5)index3 = bisect.bisect_right(ls,5)print(&quot;index1 = &#123;&#125;, index2 = &#123;&#125;, index3 = &#123;&#125;&quot;.format(index1, index2, index3))\n程序运行结果为，\nindex1 = 4, index2 = 1, index3 = 4\n2 扩展知识（一）\nj = bisect.bisect_right(rides, start, hi = i - 1, key = lambda x : x[1])\nrides：这是一个列表，已经按顺序排列。\nstart：这是我们要在rides中查找的元素。\nhi = i - 1：这是查找的上界。具体而言，在[0, hi)这个左闭右开区间中，寻找满足rides[x][1] &gt; start且x最小的case，返回x。如果没有找到，则返回hi。\nkey = lambda x : x[1]：这是用于比较的元素。默认情况下，bisect_right比较元素x的值，而这里表示比较元素x的下标等于1的元素的值（说明元素x是一个列表或元组等等），即x[1]。\n参考文章：http://t.csdnimg.cn/ZdACV\nP8681 [蓝桥杯 2019 省 AB] 完全二叉树的权值题目描述给定一棵包含 $N$ 个节点的完全二叉树，树上每个节点都有一个权值，按从上到下、从左到右的顺序依次是 $A_1,A_2, \\cdots A_N$，如下图所示：\n\n现在小明要把相同深度的节点的权值加在一起，他想知道哪个深度的节点权值之和最大？如果有多个深度的权值和同为最大，请你输出其中最小的深度。\n注：根的深度是 $1$。\n输入格式第一行包含一个整数 $N$。\n第二行包含 $N$ 个整数 $A_1,A_2, \\cdots, A_N$。\n输出格式输出一个整数代表答案。\n样例 #1样例输入 #171 6 5 4 3 2 1\n样例输出 #12\n提示对于所有评测用例，$1 \\le N \\le 10^5$，$0 \\le |A_i| \\le 10^5$。\n蓝桥杯 2019 省赛 A 组 F 题（B 组 G 题）。\nP4715 【深基16.例1】淘汰赛题目描述有 $2^n$（$n\\le7$）个国家参加世界杯决赛圈且进入淘汰赛环节。已经知道各个国家的能力值，且都不相等。能力值高的国家和能力值低的国家踢比赛时高者获胜。1 号国家和 2 号国家踢一场比赛，胜者晋级。3 号国家和 4 号国家也踢一场，胜者晋级……晋级后的国家用相同的方法继续完成赛程，直到决出冠军。给出各个国家的能力值，请问亚军是哪个国家？\n输入格式第一行一个整数 $n$，表示一共 $2^n$ 个国家参赛。\n第二行 $2^n$ 个整数，第 $i$ 个整数表示编号为 $i$ 的国家的能力值（$1\\leq i \\leq 2^n$）。\n数据保证不存在平局。\n输出格式仅一个整数，表示亚军国家的编号。\n样例 #1样例输入 #134 2 3 1 10 5 9 7\n样例输出 #11\n解题答案n=int(input())L=list(map(int,input().split()))q=[]for i in L:    q.append(i)while len(q)&gt;2:    a,b=q.pop(0),q.pop(0)    if a&gt;b:        q.append(a)    else:        q.append(b)print(L.index(min(q))+1)\nP4913 【深基16.例3】二叉树深度题目描述有一个 $n(n \\le 10^6)$ 个结点的二叉树。给出每个结点的两个子结点编号（均不超过 $n$），建立一棵二叉树（根节点的编号为 $1$），如果是叶子结点，则输入 0 0。\n建好这棵二叉树之后，请求出它的深度。二叉树的深度是指从根节点到叶子结点时，最多经过了几层。\n输入格式第一行一个整数 $n$，表示结点数。\n之后 $n$ 行，第 $i$ 行两个整数 $l$、$r$，分别表示结点 $i$ 的左右子结点编号。若 $l=0$ 则表示无左子结点，$r=0$ 同理。\n输出格式一个整数，表示最大结点深度。\n样例 #1样例输入 #172 73 64 50 00 00 00 0\n样例输出 #14\n解题答案可以使用bfs或dfs进行求解\nDFS搜索答案import sys sys.setrecursionlimit(5000)  def dfs(x, y):    global longth    if x == 0 or V[x] == (0, 0):        return    longth = max(longth, y)    dfs(V[x][0], y + 1)    dfs(V[x][1], y + 1)  n = int(input())V = &#123;&#125;  # 建个字典longth = 0for i in range(n):    l, r = map(int, input().split())    V[i + 1] = (l, r)  # 塞键值对,节点数 dfs(1, 1)print(longth + 1, end=&#x27;&#x27;)\nBFS搜索答案def bfs(n):    q.append(n)    G[n]=1    while q:        x=q.pop(0)        for j in range(2):            if dict[x][j]!=0:                q.append(dict[x][j])                G[dict[x][j]]=G[x]+1n=int(input())q=[]dict=&#123;&#125;for i in range(n):    l,r=map(int,input().split())    dict[i+1]=(l,r)G=[0 for i in range(n+1)]bfs(1)print(max(G))\nP1030 [NOIP2001 普及组] 求先序排列题目描述给出一棵二叉树的中序与后序排列。求出它的先序排列。（约定树结点用不同的大写字母表示，且二叉树的节点个数 $ \\le 8$）。\n输入格式共两行，均为大写字母组成的字符串，表示一棵二叉树的中序与后序排列。\n输出格式共一行一个字符串，表示一棵二叉树的先序。\n样例 #1样例输入 #1BADCBDCA\n样例输出 #1ABCD\n提示【题目来源】\nNOIP 2001 普及组第三题\n解题思路首先先序中序后序，搞懂我们知道，后序是“左 右 根”中序是“左 根 右”所以，后序的最后一个必定是“根”接着，在中序中找到这个根，它左边便是此时这个节点的左子树，右边便是这个节点的右子树，一直递归为了优化，我们发现先序是“根 左 右”，所以每次循环的时候打出后序的最后一个，便是这个树的“根”\n# 从用户那里获取中序遍历的字符串输入  mid = input()  # 从用户那里获取后序遍历的字符串输入  last = input()  # 定义一个函数bf，用于构建先序遍历  # 参数m表示中序遍历字符串，l表示后序遍历字符串  def bf(m, l):      # 如果中序遍历或后序遍历的字符串为空，则直接返回空字符串      if len(l) == 0 or len(m) == 0:          return &quot;&quot;      # 找到后序遍历字符串最后一个字符（即根节点）在中序遍历字符串中的位置      k = m.index(l[-1])      # 拼接先序遍历的结果：根节点 + 左子树的先序遍历 + 右子树的先序遍历      # 注意：左子树的中序遍历是m[0:k]，后序遍历是l[0:k]      #       右子树的中序遍历是m[k+1:]，后序遍历是l[k:-1]（去掉根节点）      return l[-1] + bf(m[0:k], l[0:k]) + bf(m[k+1:], l[k:-1])  # 调用bf函数，传入中序遍历和后序遍历的字符串，得到先序遍历的结果  t = bf(mid, last)  # 打印先序遍历的结果，注意这里t[1:]是为了去掉根节点前的多余字符（如果有的话）  print(t[1:])\nmid=input()last=input()def bf(m,l):    if len(l)==0 or len(m)==0:        return &quot;&quot;    k=m.index(l[-1])    return l[-1]+bf(m[0:k],l[0:k])+bf(m[k+1:],l[k:-1])t=bf(mid,last)print(t[1:])\nP1157 组合的输出题目描述排列与组合是常用的数学方法，其中组合就是从 $n$ 个元素中抽出 $r$ 个元素（不分顺序且 $r \\le n$），我们可以简单地将 $n$ 个元素理解为自然数 $1,2,\\dots,n$，从中任取 $r$ 个数。\n现要求你输出所有组合。\n例如 $n=5,r=3$，所有组合为：\n$123,124,125,134,135,145,234,235,245,345$。\n输入格式一行两个自然数 $n,r(1&lt;n&lt;21,0 \\le r \\le n)$。\n输出格式所有的组合，每一个组合占一行且其中的元素按由小到大的顺序排列，每个元素占三个字符的位置，所有的组合也按字典顺序。\n注意哦！输出时，每个数字需要 $3$ 个场宽。以 C++ 为例，你可以使用下列代码：\ncout &lt;&lt; setw(3) &lt;&lt; x;\n输出占 $3$ 个场宽的数 $x$。注意你需要头文件 iomanip。\n样例 #1样例输入 #15 3\n样例输出 #11  2  3  1  2  4  1  2  5  1  3  4  1  3  5  1  4  5  2  3  4  2  3  5  2  4  5  3  4  5\nP3378 【模板】堆题目描述给定一个数列，初始为空，请支持下面三种操作：\n\n给定一个整数 $x$，请将 $x$ 加入到数列中。\n输出数列中最小的数。\n删除数列中最小的数（如果有多个数最小，只删除 $1$ 个）。\n\n输入格式第一行是一个整数，表示操作的次数 $n$。接下来 $n$ 行，每行表示一次操作。每行首先有一个整数 $op$ 表示操作类型。\n\n若 $op = 1$，则后面有一个整数 $x$，表示要将 $x$ 加入数列。\n若 $op = 2$，则表示要求输出数列中的最小数。\n若 $op = 3$，则表示删除数列中的最小数。如果有多个数最小，只删除 $1$ 个。\n\n输出格式对于每个操作 $2$，输出一行一个整数表示答案。\n样例 #1样例输入 #151 21 5232\n样例输出 #125\n提示【数据规模与约定】\n\n对于 $30\\%$ 的数据，保证 $n \\leq 15$。\n对于 $70\\%$ 的数据，保证 $n \\leq 10^4$。\n对于 $100\\%$ 的数据，保证 $1 \\leq n \\leq 10^6$，$1 \\leq x \\lt 2^{31}$，$op \\in \\{1, 2, 3\\}$。\n\nP1135 奇怪的电梯题目背景感谢 @yummy 提供的一些数据。\n题目描述呵呵，有一天我做了一个梦，梦见了一种很奇怪的电梯。大楼的每一层楼都可以停电梯，而且第 $i$ 层楼（$1 \\le i \\le N$）上有一个数字 $K_i$（$0 \\le K_i \\le N$）。电梯只有四个按钮：开，关，上，下。上下的层数等于当前楼层上的那个数字。当然，如果不能满足要求，相应的按钮就会失灵。例如： $3, 3, 1, 2, 5$ 代表了 $K_i$（$K_1=3$，$K_2=3$，……），从 $1$ 楼开始。在 $1$ 楼，按“上”可以到 $4$ 楼，按“下”是不起作用的，因为没有 $-2$ 楼。那么，从 $A$ 楼到 $B$ 楼至少要按几次按钮呢？\n输入格式共二行。  \n第一行为三个用空格隔开的正整数，表示 $N, A, B$（$1 \\le N \\le 200$，$1 \\le A, B \\le N$）。\n第二行为 $N$ 个用空格隔开的非负整数，表示 $K_i$。\n输出格式一行，即最少按键次数，若无法到达，则输出 -1。\n样例 #1样例输入 #15 1 53 3 1 2 5\n样例输出 #13\n提示对于 $100 \\%$ 的数据，$1 \\le N \\le 200$，$1 \\le A, B \\le N$，$0 \\le K_i \\le N$。\n本题共 $16$ 个测试点，前 $15$ 个每个测试点 $6$ 分，最后一个测试点 $10$ 分。\nP1334 瑞瑞的木板题目背景瑞瑞想要亲自修复在他的一个小牧场周围的围栏。\n题目描述他测量栅栏并发现他需要 $n$ 根木板，每根的长度为整数 $l_i$。于是，他买了一根足够长的木板，长度为所需的 $n$ 根木板的长度的总和，他决定将这根木板切成所需的 $n$ 根木板（瑞瑞在切割木板时不会产生木屑，不需考虑切割时损耗的长度)。\n瑞瑞切割木板时使用的是一种特殊的方式，这种方式在将一根长度为 $x$ 的木板切为两根时，需要消耗 $x$ 个单位的能量。瑞瑞拥有无尽的能量，但现在提倡节约能量，所以作为榜样，他决定尽可能节约能量。显然，总共需要切割 $(n-1)$ 次，问题是，每次应该怎么切呢？请编程计算最少需要消耗的能量总和。\n输入格式输入的第一行是整数，表示所需木板的数量 $n$。\n第 $2$ 到第 $(n + 1)$ 行，每行一个整数，第 $(i + 1)$ 行的整数 $l_i$ 代表第  $i$ 根木板的长度 $l_i$。\n输出格式一个整数，表示最少需要消耗的能量总和。\n样例 #1样例输入 #13858\n样例输出 #134\n提示输入输出样例 1 解释将长度为 $21$ 的木板，第一次切割为长度为 $8$ 和长度为 $13$ 的，消耗 $21$ 个单位的能量，第二次将长度为 $13$ 的木板切割为长度为 $5$ 和 $8$ 的，消耗 $13$ 个单位的能量，共消耗 $34$ 个单位的能量，是消耗能量最小的方案。\n\n数据规模与约定\n对于 $100\\%$ 的数据，保证 $1\\le n \\le 2 \\times 10^4$，$1 \\leq l_i \\leq 5 \\times 10^4$。\n\nP1631 序列合并题目描述有两个长度为 $N$ 的单调不降序列 $A,B$，在 $A,B$ 中各取一个数相加可以得到 $N^2$ 个和，求这 $N^2$ 个和中最小的 $N$ 个。\n输入格式第一行一个正整数 $N$；\n第二行 $N$ 个整数 $A_{1\\dots N}$。\n第三行 $N$ 个整数 $B_{1\\dots N}$。\n输出格式一行 $N$ 个整数，从小到大表示这 $N$ 个最小的和。\n样例 #1样例输入 #132 6 61 4 8\n样例输出 #13 6 7\n提示对于 $50\\%$ 的数据，$N \\le 10^3$。\n对于 $100\\%$ 的数据，$1 \\le N \\le 10^5$，$1 \\le a_i,b_i \\le 10^9$。\nP5657 [CSP-S2019] 格雷码题目描述通常，人们习惯将所有 $n$ 位二进制串按照字典序排列，例如所有 2 位二进制串按字典序从小到大排列为：00，01，10，11。\n格雷码（Gray Code）是一种特殊的 $n$ 位二进制串排列法，它要求相邻的两个二进制串间恰好有一位不同，特别地，第一个串与最后一个串也算作相邻。\n所有 2 位二进制串按格雷码排列的一个例子为：00，01，11，10。\n$n$ 位格雷码不止一种，下面给出其中一种格雷码的生成算法：\n\n1 位格雷码由两个 1 位二进制串组成，顺序为：0，1。\n$n + 1$ 位格雷码的前 $2^n$ 个二进制串，可以由依此算法生成的 $n$ 位格雷码（总共 $2^n$ 个 $n$ 位二进制串）按顺序排列，再在每个串前加一个前缀 0 构成。\n$n + 1$ 位格雷码的后 $2^n$ 个二进制串，可以由依此算法生成的 $n$ 位格雷码（总共 $2^n$ 个 $n$ 位二进制串）按逆序排列，再在每个串前加一个前缀 1 构成。\n\n综上，$n + 1$ 位格雷码，由 $n$ 位格雷码的 $2^n$ 个二进制串按顺序排列再加前缀 0，和按逆序排列再加前缀 1 构成，共 $2^{n+1}$ 个二进制串。另外，对于 $n$ 位格雷码中的 $2^n$ 个 二进制串，我们按上述算法得到的排列顺序将它们从 $0 \\sim 2^n - 1$ 编号。\n按该算法，2 位格雷码可以这样推出：\n\n已知 1 位格雷码为 0，1。\n前两个格雷码为 00，01。后两个格雷码为 11，10。合并得到 00，01，11，10，编号依次为 0 ~ 3。\n\n同理，3 位格雷码可以这样推出：\n\n已知 2 位格雷码为：00，01，11，10。\n前四个格雷码为：000，001，011，010。后四个格雷码为：110，111，101，100。合并得到：000，001，011，010，110，111，101，100，编号依次为 0 ~ 7。\n\n现在给出 $n$，$k$，请你求出按上述算法生成的 $n$ 位格雷码中的 $k$ 号二进制串。\n输入格式仅一行两个整数 $n$，$k$，意义见题目描述。\n输出格式仅一行一个 $n$ 位二进制串表示答案。\n样例 #1样例输入 #12 3\n样例输出 #110\n样例 #2样例输入 #23 5\n样例输出 #2111\n样例 #3样例输入 #344 1145141919810\n样例输出 #300011000111111010000001001001000000001100011\n提示【样例 1 解释】\n2 位格雷码为：00，01，11，10，编号从 0∼3，因此 3 号串是 10。\n【样例 2 解释】\n3 位格雷码为：000，001，011，010，110，111，101，100，编号从 0∼7，因此 5 号串是 111。\n【数据范围】\n对于 $50\\%$ 的数据：$n \\leq 10$\n对于 $80\\%$ 的数据：$k \\leq 5 \\times 10^6$\n对于 $95\\%$ 的数据：$k \\leq 2^{63} - 1$\n对于 $100\\%$ 的数据：$1 \\leq n \\leq 64$, $0 \\leq k \\lt 2^n$\nP3884 [JLOI2009] 二叉树问题题目描述如下图所示的一棵二叉树的深度、宽度及结点间距离分别为：\n\n深度：$4$\n宽度：$4$\n结点 8 和 6 之间的距离：$8$\n结点 7 和 6 之间的距离：$3$\n\n其中宽度表示二叉树上同一层最多的结点个数，节点 $u, v$ 之间的距离表示从 $u$ 到 $v$ 的最短有向路径上向根节点的边数的两倍加上向叶节点的边数。\n\n给定一颗以 1 号结点为根的二叉树，请求出其深度、宽度和两个指定节点 $x, y$ 之间的距离。\n输入格式第一行是一个整数，表示树的结点个数 $n$。接下来 $n - 1$ 行，每行两个整数 $u, v$，表示树上存在一条连接 $u, v$ 的边。最后一行有两个整数 $x, y$，表示求 $x, y$ 之间的距离。\n输出格式输出三行，每行一个整数，依次表示二叉树的深度、宽度和 $x, y$ 之间的距离。\n样例 #1样例输入 #110                                1 2                            1 3                            2 42 53 63 75 85 96 108 6\n样例输出 #1448\n提示对于全部的测试点，保证 $1 \\leq u, v, x, y \\leq n \\leq 100$​，且给出的是一棵树。\n解题思路读题可知题目需要求出二叉树的深度宽度与两点间最短路径，这其实是三个问题分别解决并输出，求宽度与深度可以在一个dfs中完成，开数组记录每一深度下的节点数，最大的即为宽度，对于最短路径则使用bfs，用队列保存节点，每次弹出队头并加入左右父节点，左右节点则路径加一，父节点则路径加二，直到搜索到目的。\n#include&lt;bits/stdc++.h&gt;using namespace std;struct Treenode&#123;\tint left,right,father,val;&#125;node[101];struct Station&#123;\tint pos,step;&#125;;int width[101],visited[101];int dfs(Treenode nod,int deep)&#123;\tif(nod.val!=0)\twidth[deep]++;\tif(nod.left==0&amp;&amp;nod.right==0)\treturn 1;\telse\treturn max(dfs(node[nod.left],deep+1),dfs(node[nod.right],deep+1))+1;&#125;int main()&#123;\tint n,i,u,v,x,y;\tcin&gt;&gt;n;\tfor(i=0;i&lt;=n;i++)\t&#123;\t\tnode[i].val=i;\t&#125;\tfor(i=1;i&lt;n;i++)\t&#123;\t\tcin&gt;&gt;u&gt;&gt;v;\t\tif(!node[u].left)\t\tnode[u].left=v;\t\telse\t\tnode[u].right=v;\t\tnode[v].father=u;\t&#125;\tcin&gt;&gt;x&gt;&gt;y;\tint ans,wide=0;\tans=dfs(node[1],1);\tfor(i=1;i&lt;=n;i++) \twide=max(wide,width[i]);\tcout&lt;&lt;ans&lt;&lt;endl&lt;&lt;wide&lt;&lt;endl;\t\t\tStation tn=&#123;x,0&#125;;\tqueue&lt;Station&gt; tem;\tmemset(visited,0,sizeof(visited));\tvisited[x]=1;\ttem.push(tn);\twhile(!tem.empty())\t&#123;\t\tStation nodes=tem.front();\t\ttem.pop();\t\tif(nodes.pos==y)\t\t&#123;\t\t\tcout&lt;&lt;nodes.step;\t\t\tbreak;\t\t&#125;\t\tint left=node[nodes.pos].left,right=node[nodes.pos].right,father=node[nodes.pos].father,step=nodes.step;\t\tif(left&amp;&amp;!visited[left])\t\t&#123;\t\t\tvisited[left]=1;\t\t\ttem.push(&#123;left,step+1&#125;);\t\t&#125;\t\tif(right&amp;&amp;!visited[right])\t\t&#123;\t\t\tvisited[right]=1;\t\t\ttem.push(&#123;right,step+1&#125;);\t\t&#125;\t\tif(father&amp;&amp;!visited[father])\t\t&#123;\t\t\tvisited[father]=1;\t\t\ttem.push(&#123;father,step+2&#125;);\t\t&#125;\t&#125;\treturn 0;&#125;\nP6915 [ICPC2015 WF] Weather Report题面翻译给定4种天气情况出现的概率，你需要将n天的所有可能的 $4^{n}$ 种情况已某种方式编码为01串，使得：\n\n编码长度的期望最短\n任何一个编码不是另一个编码的前缀\n\n求期望长度。\n题目描述\nYou have been hired by the Association for Climatological Measurement, a scientific organization interested in tracking global weather trends over a long period of time. Of course, this is no easy task. They have deployed many small devices around the world, designed to take periodic measurements of the local weather conditions. These are cheap devices with somewhat restricted capabilities. Every day they observe which of the four standard kinds of weather occurred: Sunny, Cloudy, Rainy, or Frogs. After every $n$ of these observations have been made, the results are reported to the main server for analysis. However, the massive number of devices has caused the available communication bandwidth to be overloaded. The Association needs your help to come up with a method of compressing these reports into fewer bits. \nFor a particular device’s location, you may assume that the weather each day is an independent random event, and you are given the predicted probabilities of the four possible weather types. Each of the $4^ n$ possible weather reports for a device must be encoded as a unique sequence of bits, such that no sequence is a prefix of any other sequence (an important property, or else the server would not know when each sequence ends). The goal is to use an encoding that minimizes the expected number of transmitted bits.\n输入格式The first line of input contains an integer $1 \\le n \\le 20$, the number of observations that go into each report. The second line contains four positive floating-point numbers, $p_{\\text {sunny}}$, $p_{\\text {cloudy}}$, $p_{\\text {rainy}}$, and $p_{\\text {frogs}}$, representing the respective weather probabilities. These probabilities have at most 6 digits after the decimal point and sum to 1.\n输出格式Display the minimum expected number of bits in the encoding of a report, with an absolute or relative error of at most $10^{-4}$.\n样例 #1样例输入 #120.9 0.049999 0.05 0.000001\n样例输出 #11.457510\n样例 #2样例输入 #2200.25 0.25 0.25 0.25\n样例输出 #240.000000\n提示Time limit: 1000 ms, Memory limit: 1048576 kB. \n International Collegiate Programming Contest (ACM-ICPC) World Finals 2015\n解题思路\n给出四种天气出现的概率（每天都一样），要求把nnn天中4n4n4^n种可能的天气序列映射成010101串，满足任何一个010101串不是另一个010101串的前缀，且期望串长最短。\nn≤20n≤20n\\\\le20\n\n哈夫曼树：堆+贪心哈夫曼树是满足∑x∈leafdepx×valx∑x∈leafdepx×valx\\\\sum_{x\\\\in leaf}dep_x\\\\times val_x最小的二叉树。\n把4n4n4^n种可能的天气序列看作叶节点，valxvalxval_x取每种天气数列出现的概率，发现上面的式子恰好就是期望的计算式。因此，只要建出哈夫曼树就解决了这道题目。\n4n4n4^n太大不可能直接单独考虑每种天气序列。发现一种天气序列的概率只取决于其中每种天气各自的个数而与顺序无关，因此不同的概率只有C3n+3Cn+33C_{n+3}^3种，我们可以把相同的概率绑成一个pairpairpair一起求解。\n求解的过程就是经典的堆+贪心，每次取出最小元素，先让它自己尽可能两两配对，如果有一个多余的就再和新的堆顶配对。\n答案#include&lt;bits/stdc++.h&gt;#define Tp template&lt;typename Ty&gt;#define Ts template&lt;typename Ty,typename... Ar&gt;#define Rg register#define RI Rg int#define Cn const#define CI Cn int&amp;#define I inline#define W while#define N 20#define fi first#define se second#define LL long long#define DB long doubleusing namespace std;int n,C[N+5][N+5];DB p[4];typedef pair&lt;DB,LL&gt; Pr;priority_queue&lt;Pr,vector&lt;Pr&gt;,greater&lt;Pr&gt; &gt; q;I void dfs(CI x,CI t,DB w,Cn LL&amp; s)//暴搜可能状态&#123;\tif(x==3) &#123;for(RI i=1;i&lt;=t;++i) w*=p[x];q.push(make_pair(w,s));return;&#125;//概率和个数绑成pair扔入堆\tfor(RI i=0;i&lt;=t;++i) dfs(x+1,t-i,w,s*C[t][i]),w*=p[x];&#125;int main()&#123;\tRI i,j;for(scanf(&quot;%d&quot;,&amp;n),i=0;i^4;++i) scanf(&quot;%Lf&quot;,p+i);\tfor(C[0][0]=i=1;i&lt;=n;++i) for(C[i][0]=j=1;j&lt;=i;++j) C[i][j]=C[i-1][j-1]+C[i-1][j];\t#define Push(x,y) (q.push(make_pair(x,y)),ans+=(x)*(y))//合并得到y个x，扔入堆，同时统计答案\tdfs(0,n,1,1);Pr k,o;DB ans=0;W(!q.empty()) k=q.top(),q.pop(),\t\tk.se&gt;1&amp;&amp;Push(2*k.fi,k.se&gt;&gt;1),k.se&amp;1&amp;&amp;!q.empty()&amp;&amp;(o=q.top(),q.pop(),--o.se&amp;&amp;(q.push(o),0),Push(k.fi+o.fi,1));//尽可能自己两两配对，若有剩余和新的堆顶配对\treturn printf(&quot;%.4Lf\\n&quot;,ans),0;&#125;\nP3916 图的遍历题目描述给出 $N$ 个点，$M$ 条边的有向图，对于每个点 $v$，求 $A(v)$ 表示从点 $v$ 出发，能到达的编号最大的点。\n输入格式第 $1$ 行 $2$ 个整数 $N,M$，表示点数和边数。\n接下来 $M$ 行，每行 $2$ 个整数 $U_i,V_i$，表示边 $(U_i,V_i)$。点用 $1,2,\\dots,N$ 编号。\n输出格式一行 $N$ 个整数 $A(1),A(2),\\dots,A(N)$。\n样例 #1样例输入 #14 31 22 44 3\n样例输出 #14 4 3 4\n提示\n对于 $60\\%$ 的数据，$1 \\leq N,M \\leq 10^3$。\n对于 $100\\%$ 的数据，$1 \\leq N,M \\leq 10^5$​。\n\n解题思路使用链式前向星\n#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;#define AUTHOR &quot;HEX9CF&quot;const int maxn = 100005;int cnt = 0;int maxi[maxn];// 链式前向星struct Sedge&#123;    int to;    int next;&#125; edge[maxn];int head[maxn];void add(int u, int v)&#123;    edge[cnt].to = v;    edge[cnt].next = head[u];    head[u] = cnt++;&#125;void dfs(int x, int ori)&#123;    if (maxi[x])    &#123;        return;    &#125;    maxi[x] = ori;    for (int i = head[x]; ~i; i = edge[i].next)    &#123;        dfs(edge[i].to, ori);    &#125;&#125;void read(int &amp;x)&#123;    char ch;    x = 0;    while (!(&#x27;0&#x27; &lt;= ch &amp;&amp; &#x27;9&#x27; &gt;= ch))    &#123;        ch = getchar();    &#125;    while ((&#x27;0&#x27; &lt;= ch &amp;&amp; &#x27;9&#x27; &gt;= ch))    &#123;        x = x * 10 + ch - &#x27;0&#x27;;        ch = getchar();    &#125;&#125;int main()&#123;    int n, m;    int a, b;    memset(head, -1, sizeof(head));    memset(maxi, 0, sizeof(maxi));    read(n);    read(m);    for (int i = 1; i &lt;= m; i++)    &#123;        read(a);        read(b);        add(b, a); // 反向添加边    &#125;    for (int i = n; i; i--)    &#123;        // 反向搜索        dfs(i, i);    &#125;    for (int i = 1; i &lt;= n; i++)    &#123;        cout &lt;&lt; maxi[i];        if (i != n)        &#123;            cout &lt;&lt; &quot; &quot;;        &#125;    &#125;    return 0;&#125;\n","categories":["数据结构"],"tags":["数据结构"]},{"title":"算法学习笔记","url":"/2024/03/31/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","content":"前缀和前缀和是：\nsum[i]=a[0]+a[1]+……+a[i]\n前缀和的性质#第一条性质用于处理前缀和sum[i]=sum[i-1]+a[i]#第二条性质可以在O（1）的时间内求出区间和a[l]+……+a[r]=sum[r]-sum[l-1]\n前缀和的目的就是快速求出区间之和\ndef get_sum(sum,l,r):    if l==0:        return sum[r]    else:        return sum[r]-sum[l-1]\n","categories":["算法学习笔记"],"tags":["蓝桥杯备赛"]},{"title":"算法竞赛入门经典（第2版）学习记录","url":"/2024/04/25/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8%EF%BC%88%E7%AC%AC2%E7%89%88%EF%BC%89%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/","content":"第一章#include&lt;stdio.h&gt;#include &lt;math.h&gt;#include &lt;iostream&gt;#include &lt;iomanip&gt;using namespace std;//算数表达式的计算int main()&#123;    /* 算术表达式的计算 */    // printf(&quot;%d\\n&quot;,1+2);    // //实验一    // printf(&quot;%d\\n&quot;,3-4);    // //二    // printf(&quot;%d\\n&quot;,5*6);    // //三    // printf(&quot;%d\\n&quot;,7/8);    // //四    // printf(&quot;%d\\n&quot;,9%10);    // //五    // printf(&quot;%.1f\\n&quot;,8.0/5.0);    // //整数值用%d,浮点数用%f    // //比较复杂的表达式计算    // printf(&quot;%.8f\\n&quot;,1+2*sqrt(3)/(5-0.1));    // //数学函数sqrt(x)的作用是计算x的算术平方根    // printf(&quot;%.8f\\n&quot;,pow(2,3));    // //pow(x,y)的作用是计算x的y次方    /* 1.2 输入输出 */    // int a,b;    // scanf(&quot;%d%d&quot;,&amp;a,&amp;b);    // printf(&quot;%d\\n&quot;,a+b);    // 输入的样例    // //例题1-1 圆柱体的表面积    // const double PI=acos(-1.0);    // double r,h,s1,s2,s;    // //cin&gt;&gt;r&gt;&gt;h;    // scanf(&quot;%lf%lf&quot;,&amp;r,&amp;h);    // s1=2*PI*r*r;    // s2=2*PI*r*h;    // s=s1+s2;    // printf(&quot;Area=%.3f\\n&quot;,s);    // cout &lt;&lt; &quot;&quot; &lt;&lt; endl;    //算法竞赛的程序应当只做3件事情：    //读入数据、计算结果、打印输出。    //尽量使用const关键字声明常数    /*1.3 顺序结构程序设计*/    // //三位数翻转    // int a,b,c;    // cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;    // cout&lt;&lt;c&lt;&lt;b&lt;&lt;a&lt;&lt;endl;    // // 交换变量    // // 三变量法    // int a,b,c;    // cin&gt;&gt;a&gt;&gt;b;    // c=a;    // a=b;    // b=c;    // cout&lt;&lt;a&lt;&lt;&quot; &quot;&lt;&lt;b&lt;&lt;endl;    // // 两变量法    // int a,b;    // cin&gt;&gt;a&gt;&gt;b;    // a=a+b;    // b=a-b;    // a=a-b;    // cout&lt;&lt;a&lt;&lt;&quot; &quot;&lt;&lt;b&lt;&lt;endl;    // // 输入输出    // int a,b;    // cin&gt;&gt;a&gt;&gt;b;    // cout&lt;&lt;b&lt;&lt;&quot; &quot;&lt;&lt;a&lt;&lt;endl;    /*1.4 分支结构程序设计*/    // //鸡兔同笼    // int a,b,n,m;    // cin&gt;&gt;n&gt;&gt;m;    // if(n&gt;m)&#123;cout&lt;&lt;&quot;No answer&quot;&lt;&lt;endl;&#125;    // else&#123;    //     a=(4*n-m)/2;    //     b=n-a;    //     if (m%2==1 || a&lt;0 || b&lt;0)    //     &#123;    //         cout&lt;&lt;&quot;No answer&quot;&lt;&lt;endl;    //     &#125;    //     else&#123;    //         cout&lt;&lt;a&lt;&lt;&quot; &quot;&lt;&lt;b&lt;&lt;endl;    //     &#125;    // &#125;    // //C语言中的逻辑运算符都是短路运算符    // //&amp;&amp;和||都是短路运算符，当第一个运算符为假时，第二个运算符将不会被执行。    // // 三整数排序    // int a,b,c,t;    // cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;    // if(a&gt;b)&#123;t=a;a=b;b=t;&#125;    // if(a&gt;c)&#123;t=a;a=c;c=t;&#125;    // if(b&gt;c)&#123;t=b;b=c;c=t;&#125;    // cout&lt;&lt;a&lt;&lt;&quot; &quot;&lt;&lt;b&lt;&lt;&quot; &quot;&lt;&lt;c&lt;&lt;endl;    /*1.5 注解和习题*/    //实验A1：表达式11111*11111的值是多少？把5个1改成6个1呢？9个1呢？    //cout&lt;&lt;11111*11111&lt;&lt;endl;// 1234534321    //实验A2：把实验A1中的所有数换成浮点数，结果如何？    //cout&lt;&lt;11111.0*11111.0&lt;&lt;endl;// 1.23454e+08    //实验A3：表达式sqrt（-10）的值是多少？尝试用各种方式输出。在计算的过程中系统会报错吗？    //cout&lt;&lt;sqrt(-10)&lt;&lt;endl;// nan    // cout&lt;&lt;&quot;sqrt(-10)=&quot;&lt;&lt;sqrt(-10)&lt;&lt;endl;    // cout&lt;&lt;&quot;sqrt(-10)=&quot;&lt;&lt;sqrt(-10.0)&lt;&lt;endl;    // cout&lt;&lt;&quot;sqrt(-10)=&quot;&lt;&lt;sqrt(-10.0f)&lt;&lt;endl;    // cout&lt;&lt;&quot;sqrt(-10)=&quot;&lt;&lt;sqrt(-10.0l)&lt;&lt;endl;    // //实验A4：表达式1.0/0.0、0.0/0.0的值是多少？尝试用各种方式输出。在计算的过程中系统会报错吗？    // cout&lt;&lt;1.0/0.0&lt;&lt;endl; // inf    // cout&lt;&lt;0.0/0.0&lt;&lt;endl; // nan    //实验A5：表达式1/0的值是多少？在计算的过程中系统会报错吗？    //cout&lt;&lt;1/0&lt;&lt;endl; // Arithmetic exception    // //实验B1：在同一行中输入12和2，并以空格分隔，是否得到了预期的结果？    // int a,b;    // cin&gt;&gt;a&gt;&gt;b;    // cout&lt;&lt;a/b&lt;&lt;endl; // 6 正常    // //实验B2：在不同的两行中输入12和2，是否得到了预期的结果？    // int a,b;    // cin&gt;&gt;a;    // cin&gt;&gt;b;    // cout&lt;&lt;a/b&lt;&lt;endl; // 6 正常    // // 实验B3：在实验B1和B2中，在12和2的前面和后面加入大量的空格或水平制表符（TAB），甚至插入一些空行。    // int a,b;    // cin&gt;&gt;a&gt;&gt;b;    // cout&lt;&lt;a/b&lt;&lt;endl;// 6 正常    // //实验B4：把2换成字符s，重复实验B1～B3。    // char s;    // cin&gt;&gt;s;    // cout&lt;&lt;s/s&lt;&lt;endl; // 1 正常    /*习题*/    // // 平均数    // int a,b,c;    // cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;    // //保留三位小数    // //cout输出控制小数位，需要添加头文件#include &lt;iomanip&gt;    // cout&lt;&lt;setiosflags(ios::fixed)    //     &lt;&lt;setprecision(3)&lt;&lt;(a+b+c)/3.0&lt;&lt;endl;    // // 温度    // double f,c;    // cin&gt;&gt;f;    // c=(f-32)*5/9;    // cout&lt;&lt;setiosflags(ios::fixed)    //     &lt;&lt;setprecision(3)&lt;&lt;c&lt;&lt;endl;    // // 连续和    // // 输入正整数n，输出1到n的连续和。    // int n,m;    // cin&gt;&gt;n;    // m=n*(n+1)/2;    // cout&lt;&lt;m&lt;&lt;endl;    // // sin和cos    // int n;    // cin&gt;&gt;n;    // cout&lt;&lt;sin(n)&lt;&lt;&quot; &quot;&lt;&lt;cos(n)&lt;&lt;endl;    // // 打折    // double price,discount,total;    // cin&gt;&gt;discount;    // price=95;    // total=price*discount;    // if (total&gt;=300)    // &#123;    //     cout&lt;&lt;&quot;Total price is &quot;&lt;&lt;total*0.85&lt;&lt;&quot; yuan.&quot;&lt;&lt;endl;    // &#125;else&#123;    //     cout&lt;&lt;&quot;Total price is &quot;&lt;&lt;total&lt;&lt;&quot; yuan.&quot;&lt;&lt;endl;    // &#125;    // // 三角形    // int a,b,c;    // cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;    // if (a+b&gt;c &amp;&amp; a+c&gt;b &amp;&amp; b+c&gt;a)    // &#123;    //     cout&lt;&lt;&quot;Yes&quot;&lt;&lt;endl;    // &#125;else&#123;    //     cout&lt;&lt;&quot;No&quot;&lt;&lt;endl;    // &#125;    // // 年份    // int year;    // cin&gt;&gt;year;    // if (year%400==0 || (year%4==0 &amp;&amp; year%100!=0))    // &#123;    //     cout&lt;&lt;&quot;Yes&quot;&lt;&lt;endl;    // &#125;else&#123;    //     cout&lt;&lt;&quot;No&quot;&lt;&lt;endl;    // &#125;    // //问题1：int型整数的最小值和最大值是多少（需要精确值）？    // cout&lt;&lt;INT_MIN&lt;&lt;&quot; &quot;&lt;&lt;INT_MAX&lt;&lt;endl;// -2147483648 2147483647    // //问题2：double型浮点数能精确到多少位小数？或者，这个问题本身值得商榷？    // cout&lt;&lt;DBL_DIG&lt;&lt;endl;// 15    // //问题3：double型浮点数最大正数值和最小正数值分别是多少（不必特别精确）？    // cout&lt;&lt;DBL_MIN&lt;&lt;&quot; &quot;&lt;&lt;DBL_MAX&lt;&lt;endl;// 2.22507e-308 1.79769e+308    // //问题4：逻辑运算符号“&amp;&amp;”、“||”和“！”（表示逻辑非）的相对优先级是怎样的？也就是说，a&amp;&amp;b||c应理解成（a&amp;&amp;b）||c还是a&amp;&amp;（b||c），或者随便怎么理解都可以？    //  cout&lt;&lt;&quot;&amp;&amp;优先级高于||&quot;&lt;&lt;endl;    //  cout&lt;&lt;&quot;!优先级最低&quot;&lt;&lt;endl;    //  cout&lt;&lt;&quot;a&amp;&amp;b||c&quot;&lt;&lt;endl;    //  cout&lt;&lt;&quot;(a&amp;&amp;b)||c&quot;&lt;&lt;endl;    //  cout&lt;&lt;&quot;a&amp;&amp;(b||c)&quot;&lt;&lt;endl;    // // 问题5：if（a）if（b）x＋＋；else  y＋＋的确切含义是什么？这个else应和哪个if配套？有没有办法明确表达出配套方法？    // int a,b,x,y;    // a=1,b=1,x=0,y=0;    // if(a)if(b)x++;else y++;    // cout&lt;&lt;a&lt;&lt;&quot; &quot;&lt;&lt;b&lt;&lt;endl;    system(&quot;pause&quot;);    return 0;&#125;\n","categories":["算法与数据结构"],"tags":["算法与数据结构"]},{"title":"线性动态规划问题&背包问题进阶策略详解","url":"/2024/05/06/%E7%BA%BF%E6%80%A7%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E8%BF%9B%E9%98%B6%E7%AD%96%E7%95%A5%E8%AF%A6%E8%A7%A3/","content":"1. DP 概述DP（dynamic Progamming），动态规划算法，是一类常见、常考的算法。\n在算法竞赛中，DP的考法多而杂，并且难度可以从简单到超难，主要难在状态的设计，以及思考如何转移；但是在蓝桥杯比赛中，涉及到的往往都是简单，基础的DP考点，十分考验基本功。\n动态规划是一种通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。\n由于动态规划并不是某种具体的算法，而是一种解决特定问题的方法，因此它会出现在各式各样的数据结构中，与之相关的题目种类也更为繁杂。\n在算法类竞赛中，计数等非最优化问题的递推解法也常被不规范地称作 DP。\n2. 主要思想以及条件DP 将原问题划分划分为若干个重叠的子问题，并且逐层递进，每个子问题在求解的过程中，都会被抽象为“阶段”，也叫做“状态”，在完成前一个阶段的计算后，才能进行下一阶段的计算。\n最广泛运用的例子就是数字三角形问题：\n给定一个三角形，第 $i$ 行有 $i$ 个元素，如下图：\n​        5 ​      5   4     8   9   0 \n你初始在第一行的第一个元素位置，每一次，可以选择左下，或者右下的位置进行移动，每次移动到一个位置上，可以获得相应的分数。问：你可以任意规划自己的路线，请问在走到最后一行时，能够获得的最大分数是多少？\n同学们可以自行计算一下，当然，很多同学可以一眼看出来，答案是 $5 + 5 + 9 = 19$。从第一行开始，往左边，然后往右边。\n如果利用动态规划的思想，应该如下考虑：\n而对于每一个点，它的下一步决策只有两种：往左下角或者往右下角（如果存在）。因此只需要记录当前点的最大权值，用这个最大权值执行下一步决策，来更新后续点的最大权值。即，对于每一个点，当作一种状态，代表的意义是：到达当前点能累积的最大分数。\n如果你理解了这一步，并且认为其设计的十分有道理，那么我们来剖析一下其中原理：\n2.1 条件能用动态规划解决的问题，需要满足三个条件：最优子结构，无后效性和子问题重叠。\n\n无后效性\n\n已经求解的子问题，不会再受到后续决策的影响，即后续状态不会影响前序状态，也说明了求解的有序性。\n\n子问题重叠\n\n子问题 A 和子问题 B 可能存在共同的子问题 C，那么我们可以将一些重叠的子问题存储下来，特别来说，重叠的越多，我们的空间利用率越高。\n\n最优子结构\n\n当前问题的最优解一定可以由子问题的最优解导出。\n再抽象一点，其实大部分的 DP 问题，都可以抽象为数字三角形问题，结构图如下：\n\n箭头源代表子问题，箭头指向，代表后续问题。\n例如：$\\lbrace 1 \\rbrace$ 同时是 $\\lbrace 2,3 \\rbrace$ 的子问题，并且 $2$ 问题的解可以由 $1$ 导出。\n总结：动态规划对状态的遍历，构成了一张有向无环图，遍历顺序（或者求解顺序）应该是该图的一个拓扑序。\n3. 关于比赛中的状态设计DP 的难点在于状态的设计和子结构的发掘，即使学界讨论了诸多DP转移的状态设计和优化手段，但是如何把问题形式化为状态空间，往往是一件考察智力而非套路的事情。\n但是在蓝桥杯的赛题中，考察的是选手的基本功，与一点点的拔高，所以不会太难，可以遵循某些套路。\n笔者按照经验，先讲授一些自己常用的状态设计思路，然后结合例题讲解。\n设计一个状态分为如下几步：\n\n尝试找到题目中的需要优化的值，例如最小值，最大值，次数等，做为目标，也是就是状态的最优值。\n尝试找到题目中的条件，例如长度，区间数量等，做为状态设计。\n尝试模拟题目中的求解步骤，这往往是题目中的条件，例如对某个数加一，或者在占领某些土地。作为转移的部分。\n尝试结合将 1，2，3 结合起来，看能否找到一个合理的最优结构，并且无后向性。\n如果不是最优，尝试这加大状态的条件，例如在补上一个必要的量，在进行3步骤。\n\n笔者还有一些习惯，例如在看到某个题目时，如果准备尝试用DP解题，就是按照题目中的量进行一个简单尝试。例如，题目中有三个量，就会尝试写出 $dp_{i,j,k}$ ，然后尝试读出其代表的实际意义。如果可行，就进行优化或者细化。\n一般而言，常见的线性DP，都能用此种方法解决，对于较难的问题，往往很难一下子设计出一个较好的状态，这就需要大量的经验以及一些天赋。\n例如，你可以尝试设计这两个问题的状态：\n\n蓝桥云课-青蛙吃虫\n\n蓝桥算法赛-食堂\n\n\n可以很明显的感觉出设计的难点。\n4. 线性DP本部分将结合一些题，来不断的重复上述建立 DP 状态的方法，意图帮助读者强化一些简单的DP状态设计。\n4.1 蓝桥云课-青蛙吃虫\n\n找到题目中的需要优化的值，“最多吃多少昆虫”，完美符合要求，我们将这个最大值作为状态的最优值，也就是说，如果我们设计了一个状态 $s$，那么我们的 $dp_s$ 所代表的意义大概率在 $s$ 情况下的吃虫的最大虫数。\n尝试找到题目中的条件，路径长度为 $N$，最多跳 $K$ 次。\n尝试模拟题目中的求解步骤，这往往是题目中的条件。每次跳 $T$ 格，但是满足 $A \\le T \\le B$，可以看作跳一次，就是一次转移。\n\n尝试结合将 1，2，3 结合起来，看能否找到一个合理的最优结构，并且无后向性。\n\n得到的状态以及转移如下：\n定义 $dp_{i,j}$ 为跳跃了 $i$ 次后，当前处在 $j$ 位置能吃到的最大昆虫数量。\n那么由定义得到 $dp_{0,0} = 0$，这是初始状态，代表的意义是在未跳跃前的状态，很明显符合定义（初始状态的定义，往往是需要对应于真实情况）。\n我们思考如何转移，由于转移的过程为题目中的求解条件：每次跳跃一些格子，那么跳跃就是转移的过程。\n我们思路如何得到 $dp_{i,j}$ ，复习定义：跳跃了 $i$ 次后，当前处在 $j$ 位置能吃到的最大昆虫数量。\n那么这个状态的前一个状态是什么，也是就说，他的子问题是什么，根据实际情况，我们可以得到上一个状态一定是 $dp_{i-1,j’}$，定义为 跳跃了 $i-1$ 次后，到达位置为 $j’$ 的位置，如果满足跳一次可以到达 $j$，那么必须满足 $A \\le j-j’ \\le B$。\n\n有了这个过程，那么我们实际上就得到了转移的逻辑，你完全可以根据这个思路写出代码核心：\n\nC++\n\nmemset(dp, -0x3f3f3f3f, sizeof(dp)); for (int i = 1; i &lt;= K; ++i) &#123; for (int j = 1; j &lt;= n; ++j) &#123; for (int k = A; k &lt;= B; ++k) &#123; if (j - k &lt; 0) continue; dp[i][j] = max(dp[i][j], dp[i - 1][j - k] + a[j]); &#125; ans = max(ans, dp[i][j]); &#125; &#125; cout &lt;&lt; ans &lt;&lt; endl;\n\nJava\n\nfor (int[] row : dp) &#123; for (int j = 0; j &lt; row.length; j++) &#123; row[j] = -0x3f3f3f3f; &#125; &#125; dp[0][0] = 0; for (int i = 1; i &lt;= K; ++i) &#123; for (int j = 1; j &lt;= n; ++j) &#123; for (int k = A; k &lt;= B; ++k) &#123; if (j - k &lt; 0) continue; dp[i][j] = Math.max(dp[i][j], dp[i - 1][j - k] + a[j]); &#125; ans = Math.max(ans, dp[i][j]); &#125; &#125; System.out.println(ans);\n\nPython\n\ndp[0][0] = 0 for i in range(1, K + 1): for j in range(1, n + 1): for k in range(A, B + 1): if j - k &lt; 0: continue dp[i][j] = max(dp[i][j], dp[i - 1][j - k] + a[j]) ans = max(ans, dp[i][j]) print(ans)\n我们可以写出更具规整的转移： $dp_{0,0} = 0 \\\\ dp_{i,j} = \\max_{A \\le k \\le B}(dp_{i-1,k})$ 我们要求的答案为 $\\underset{0 \\le i \\le k, 0 \\le j \\le n}{\\max}(dp_{i,j})$。\n4.2 蓝桥算法赛-奇怪的段\n我们继续重复上述解题方法：\n\n找到题目中的需要优化的值，“加权和值最大”，完美符合要求，我们将这个最大值作为状态的最优值，也就是说，如果我们设计了一个状态 $s$，那么我们的 $dp_s$ 所代表的意义大概率在 $s$ 情况下的最大加权和值。\n\n尝试找到题目中的条件，序列长度为 $n$，划分出 $k$ 个区间。\n\n尝试模拟题目中的求解步骤，这往往是题目中的条件。在本题中，划分区间就是一次转移。\n\n尝试结合将1，2，3结合起来，看能否找到一个合理的最优结构，并且无后向性。\n\n\n我们可以尝试建立如下转移：\n\n定义状态 $dp_{i,j}$ 表示处理到第 $i$ 个数字，分出 $j$ 个区间的最大值。\n初始状态为 $dp_{0,0} = 0$。这个代表初始情况下，未划分区间的最大值，是符合实际情况，并且是符合定义的。\n由于一次划分就是一次转移，我们考虑 $dp_{i,j}$，他的上一次划分一定是 $dp_{i’,j-1}$，所代表的意义是，划分 $j-1$ 段时，最后一个元素是 $i$ 的情况。\n那么我们的转移就是 $dp_{i,j} = dp_{i’,j-1} + p_j \\times \\sum _{y=i’+1} ^i a_y$。\n当然，我们要求的是最大值，所以我们需要加一个条件： $dp_{i,j} = \\underset {j \\le i’ \\le i} {\\max}  (dp_{i’,j-1} + p_j \\times \\sum _{y=i’+1} ^i a_y)$ 状态是 $n \\times k$ 个，每次转移的代价是 $n$ 次，那么这个转移的复杂度为 $O(n^2 \\times k)$。\n当然，对于这个题来说，复杂度太高了，无法通过本题，由于是算法赛，所以无法通过，如果是蓝桥大赛的题，那么大概率能得到 $50$ % 的分数。 当然需要一些优化策略，不然求和的这一部分也会增加复杂度，同学们自行思考（提示：前缀和，或者边循环边算）。\n如果要解决本题，我们考虑优化\n将式子拆开\n\n上述的理解为，将 $a_i$ 新开一个区间，还是并入旧区间。\n转移的复杂度为：$O(n\\times k)$。\n实现过程中用了滚动数组，用来节约空间，当然也可以不用。\n滚动数组： 由于每次转移 $dp_{i,j}$ 只与 $dp_{i-1, j’}$ 有关，对于第一维来说， $dp_i$ 只与 $dp_{i-1}$ 有关，所以，我们用两个量来表示当前的 $dp_i$ 和 $dp_{i-1}$ 即可。在代码中用 $dp_{now}$ 和 $dp_{pre}$ 表示。\n\n代码如下：\n\nC++\n\n#include &lt;iostream&gt; #include &lt;cstring&gt; using namespace std; const int N = 1e5+100; using ll = long long; ll dp[2][204]; int n, k; int a[N], b[204]; int main() &#123; cin &gt;&gt; n &gt;&gt; k; for (int i = 1; i &lt;= n; ++i) cin &gt;&gt; a[i]; for (int i = 1; i &lt;= k; ++i) cin &gt;&gt; b[i]; memset(dp, -0x3f, sizeof(dp)); int now = 0, pre = 1; dp[now][0] = 0; for (int i = 1; i &lt;= n; ++i) &#123; swap(now, pre); memset(dp[now], -0x3f, sizeof(dp[now])); for (int j = 1; j &lt;= k; ++j) &#123; dp[now][j] = max(dp[pre][j], dp[pre][j - 1]) + 1ll * a[i] * b[j]; &#125; &#125; cout &lt;&lt; dp[now][k] &lt;&lt; &#x27;\\n&#x27;; return 0; &#125;\n\nJava\n\nimport java.util.Scanner; public class std &#123; public static void main(String[] args) &#123; Scanner scanner = new Scanner(System.in); int N = 100500; long[][] dp = new long[2][205]; int n = scanner.nextInt(); int k = scanner.nextInt(); int[] a = new int[N]; int[] b = new int[205]; for (int i = 1; i &lt;= n; ++i) &#123; a[i] = scanner.nextInt(); &#125; for (int i = 1; i &lt;= k; ++i) &#123; b[i] = scanner.nextInt(); &#125; for (int i = 0; i &lt; 205; ++i) dp[0][i] = dp[1][i] = -9000000000000000000L; dp[0][0] = 0; int now = 0, pre = 1; for (int i = 1; i &lt;= n; ++i) &#123; now ^= 1; pre ^= 1; for (int j = 0; j &lt; 205; ++j) dp[now][j] = -9000000000000000000L; for (int j = 1; j &lt;= k; ++j) &#123; dp[now][j] = Math.max(dp[pre][j], dp[pre][j - 1]) + 1L * a[i] * b[j]; &#125; &#125; System.out.println(dp[now][k]); &#125; &#125;\n\nPython\n\nN = 100500 dp = [[-float(&#x27;inf&#x27;)] * 205 for _ in range(2)] n, k = map(int, input().split()) a = [0] + list(map(int, input().split())) b = [0] + list(map(int, input().split())) now, pre = 0, 1 dp[now][0] = 0 for i in range(1, n + 1): now, pre = pre, now dp[now] = [-float(&#x27;inf&#x27;)] * 205 for j in range(1, k + 1): dp[now][j] = max(dp[pre][j], dp[pre][j - 1]) + a[i] * b[j] print(dp[now][k])\n5. 背包背包问题是老生常谈的经典问题了。\n原始模型如下：\n有 $n$ 个物品和一个容量为 $m$ 的背包，每个物品有一个价值 $p$ 和 体积 $v$ 。问在总容量不超过 $m$ 的情况下，你能装载的最大价值和为多少？\n背包有多种模型：\n\n0/1 背包，在这种情况下，每个物品只有一个。\n完全背包，在这种情况下，每个物品有无穷个。\n多重背包，在这种情况下，每个物品有 $c_i$ 个，$c_i$ 为第 $i$ 个物品的数量。\n分组背包，在这种情况下，存在 $n$ 个组别，每个组别有若干个物品，但是每组至多只能选择一个。\n依赖背包，在这种情况下，某些物品之间存在依赖关系。\n\n最基础的属于 0/1 背包和完全背包。\n其模板代码如下：\n5.1 0/1 背包\nC++\n\n// 二维数组版本 for (int i = 1; i &lt;= n; ++i) &#123; for (int j = m; j - v[i] &gt;= 0; --j) &#123; dp[i][j] = max(dp[i][j], dp[i - 1][j - v[i]] + p[i]); &#125; &#125; // ------------- 一维数组版本 for (int i = 1; i &lt;= n; ++i) &#123; for (int j = m; j - v[i] &gt;= 0; --j) &#123; dp[j] = max(dp[j], dp[j - v[i]] + p[i]); &#125; &#125; // dp[i][j] 代表处理到第 i 个物品，容量为 j 时的最大值。\n\nJava\n\n// 二维数组版本 for (int i = 1; i &lt;= n; ++i) &#123; for (int j = m; j - v[i] &gt;= 0; --j) &#123; dp[i][j] = Math.max(dp[i][j], dp[i - 1][j - v[i]] + p[i]); &#125; &#125; // ------------- 一维数组版本 for (int i = 1; i &lt;= n; ++i) &#123; for (int j = m; j - v[i] &gt;= 0; --j) &#123; dp[j] = Math.max(dp[j], dp[j - v[i]] + p[i]); &#125; &#125; // dp[i][j] 代表处理到第 i 个物品，容量为 j 时的最大值。\n\npython\n\n# 二维数组版本 for i in range(1, n + 1): for j in range(m, v[i] - 1, -1): dp[i][j] = max(dp[i][j], dp[i - 1][j - v[i]] + p[i]) # ------------- 一维数组版本 for i in range(1, n + 1): for j in range(m, v[i] - 1, -1): dp[j] = max(dp[j], dp[j - v[i]] + p[i])\n5.2 完全背包\nC++\n\n// ------------- 一维数组版本 for (int i = 1; i &lt;= n; ++i) &#123; for (int j = v[i]; j &lt;= m; ++j) &#123; dp[j] = max(dp[j], dp[j - v[i]] + p[i]); &#125; &#125; // dp[i][j] 代表处理到第 i 个物品，容量为 j 时的最大值。\n\nJava\n\n// ------------- 一维数组版本 for (int i = 1; i &lt;= n; ++i) &#123; for (int j = v[i]; j &lt;= m; ++j) &#123; dp[j] = Math.max(dp[j], dp[j - v[i]] + p[i]); &#125; &#125; // dp[i][j] 代表处理到第 i 个物品，容量为 j 时的最大值。\n\npython\n\nfor i in range(1, n + 1): for j in range(v[i], m + 1): dp[j] = max(dp[j], dp[j - v[i]] + p[i])\n5.3 多重背包多重背包可以转化为 $0/1$ 背包。\n首先我们可以将每个物品的 $c_i$ 个全部拆出来，变成0/1 背包，但是这样的话复杂度就变成了 $O(m \\times \\sum c_i)$。\n还有另外一种方式，我们可以将 $c_i$ 按照进制拆分，分为 $\\lbrace 1, 2, 4, 8, … \\rbrace$ 个，例如，如果是 $5$ 个，每个物品的容量为 $v$，价值为 $p$，那么划分为 $\\lbrace 1, 2, 2\\rbrace$，将这 $5$ 个物品划分为 $3$ 个物品，第一个物品容量为 $v$，价格为 $p$，第二个物品容量为 $2v$，价格为 $2p$，第三个物品容量为 $2v$，价格为 $2p$，这样就将复杂度降低为了 $O(m \\sum \\log_2(c_i))$。\n\n这样的划分，可以拼凑出 $0 \\sim c_i$ 所有数量的物品。因为是按照二进制划分的，假设划分的最大数量是 $2^k$，那么最后一个是 $x = c_i-2^{k+1} + 1$。\n我们首先可以用前 $k$ 个拼凑出 $0 \\sim 2 ^{k+1} - 1$ 种情况，并且 $x \\lt 2^{k+1}$，所以其他数可以先加上 $x$ ，然后再加上 $0 \\sim 2^{k+1} - 1$ 中的一个，那么就可以拼凑出 $0 \\sim c_i$ 所有的数量了。\n\n拆分代码：\n\nC++\n\n// index 为新的物品编号 index = 0; for (int i = 1; i &lt;= m; i++) &#123; int cnt = 1, p, v, c; cin &gt;&gt; p &gt;&gt; v &gt;&gt; c; while (c &gt; cnt) &#123; c -= cnt; list[++index].p = c * p; list[index].v = c * v; cnt *= 2; &#125; list[++index].p = c * p; list[index].v = c * v; &#125; // list 存储所有新的物品\n\nPython\n\nfor _ in range(m): cnt = 1 p, v, c = map(int, input().split()) while c &gt; cnt: c = c - cnt list.append((c * p, c * v)) cnt = cnt * 2 list.append((c * p, c * v))\n\nJava\n\nScanner scanner = new Scanner(System.in); p = scanner.nextInt(); v = scanner.nextInt(); c = scanner.nextInt(); while (c &gt; cnt) &#123; c -= cnt; index++; list[index].p = c * p; list[index].v = c * v; cnt *= 2; &#125; index++; list[index].p = c * p; list[index].v = c * v;\n5.3.1 小明的背包4\n算是一个多重背包模板题，套用上述模板解题即可。\n当然，本题中存在无限的数量，可以有两种考虑方法，对于无穷数量，我们定义会满载的数量，例如 $\\frac{V}{w_i}$；或者在分完多重背包后，在进行完全背包。\n都可以，推荐同学们两种都试试。\n\nC++\n\n#include &lt;iostream&gt; using namespace std; int idx = 0; int w[40003], v[40003]; int N, V; int dp[2003]; int main() &#123; cin &gt;&gt; N &gt;&gt; V; int ww, vv, c; while (N --) &#123; cin &gt;&gt; ww &gt;&gt; vv &gt;&gt; c; if (c == 0) c = V / ww; int cnt = 1; while (c &gt; cnt) &#123; idx ++; c -= cnt; w[idx] = cnt * ww; v[idx] = cnt * vv; cnt *= 2; &#125; idx ++; w[idx] = c * ww; v[idx] = c * vv; &#125; for (int i = 1; i &lt;= idx; ++i) &#123; for (int j = V; j - w[i] &gt;= 0; --j) &#123; dp[j] = max(dp[j], dp[j - w[i]] + v[i]); &#125; &#125; cout &lt;&lt; dp[V] &lt;&lt; endl; return 0; &#125;\n\nJava\n\nimport java.util.Scanner; public class std &#123; public static void main(String[] args) &#123; Scanner scanner = new Scanner(System.in); int idx = 0; int[] w = new int[40003]; int[] v = new int[40003]; int N = scanner.nextInt(); int V = scanner.nextInt(); int[] dp = new int[2003]; while (N-- &gt; 0) &#123; int ww = scanner.nextInt(); int vv = scanner.nextInt(); int c = scanner.nextInt(); if (c == 0) c = V / ww; int cnt = 1; while (c &gt; cnt) &#123; idx++; c -= cnt; w[idx] = cnt * ww; v[idx] = cnt * vv; cnt *= 2; &#125; idx++; w[idx] = c * ww; v[idx] = c * vv; &#125; for (int i = 1; i &lt;= idx; ++i) &#123; for (int j = V; j - w[i] &gt;= 0; --j) &#123; dp[j] = Math.max(dp[j], dp[j - w[i]] + v[i]); &#125; &#125; System.out.println(dp[V]); &#125; &#125;\n\nPython\n\nidx = 0 w = [0] * 40003 v = [0] * 40003 N, V = map(int, input().split()) dp = [0] * 2003 for _ in range(N): ww, vv, c = map(int, input().split()) if c == 0: c = V // ww cnt = 1 while c &gt; cnt: idx += 1 c -= cnt w[idx] = cnt * ww v[idx] = cnt * vv cnt *= 2 idx += 1 w[idx] = c * ww v[idx] = c * vv for i in range(1, idx + 1): for j in range(V, w[i] - 1, -1): dp[j] = max(dp[j], dp[j - w[i]] + v[i]) print(dp[V])\n5.4 分组背包给定 $n$ 组物品，第 $i$ 组中有 $c_i$ 个物品，第 $i$ 组中第 $j$ 个物品的价值为 $p_{i,j}$ ，体积为 $v_{i,j}$，每组物品最多只能选择一个。\n背包大小为 $m$ ，问装载的最大价值。\n这个问题与原始的 $0/1$ 背包十分相似，复习下，原始的 $0/1$ 背包如何建立的状态转移：$dp_{i,j}$ 为处理到第 $i$ 个物品，装载体积为 $j$ 的最大价值。\n其转移为 $dp_{i,j} = \\max(dp_{i-1, j} , dp_{i-1,j-v_i} + p_i)$\n我们只要稍作思考，就可以完成转化：\n我们定义：$dp_{i,j}$ 为处理到第 $i$ 组物品，装载体积为 $j$ 的最大价值。\n那么转移为： $dp_{i,j} = \\max(dp_{i-1, j} , \\max_{1 \\le j \\le c_i}(dp_{i-1,j-v_{i,j}} + p_{i,j}))$ 观察到了吗，这两种甚至没有区别，只有再处理每一组的过程中进行了一次选择，逻辑通顺，完美转移！\n我们来看一道例题：\n5.4.1 金明的预算\n我们简化一下题意：\n有 $m$ 块钱，$n$ 件物品，每个物品的价值为 $p_i \\times v_i$，价格为 $v_i$。有一些物品存在依赖关系，想要购买当前物品，就一定要购买前置物品。\n问能购买的最大价值。\n条件：每一件物品最多只有两件附属物品。\n看起来是一个依赖有关的背包问题，但是仔细思考就会发现，如果 $A$ 物品有两件附属物品 $B,C$，那么对于这三件物品，只有这么几种情况 $\\lbrace \\varnothing \\rbrace,\\lbrace A \\rbrace,\\lbrace A,B \\rbrace,\\lbrace A, C \\rbrace,\\lbrace A, B, C \\rbrace$，并且对于这三个物品的组合，只能选择一种。对于有一个附属物品和没有附属物品的情况，类似考虑。\n回过头来，是不是发现，很想分组背包的感觉。\n我们重新描绘一下题意：\n有 $m$ 块钱，$n$ 组物品，每组物品数量不超过三，每个物品有价值、价格。每组物品只能选择一种组合。问能购买的最大价值。\n完美转换为分组背包。\n代码如下：\n\nC++\n\n#include &lt;iostream&gt; #include &lt;vector&gt; using namespace std; int n, m; vector&lt;int&gt; G[65]; int v[65], p[65], q[65]; int dp[33000]; int main() &#123; cin &gt;&gt; n &gt;&gt; m; for (int i = 1; i &lt;= m; ++i) &#123; cin &gt;&gt; v[i] &gt;&gt; p[i] &gt;&gt; q[i]; p[i] *= v[i]; if (q[i]) &#123; G[q[i]].push_back(i); &#125; &#125; for (int i = 1; i &lt;= m; ++i) &#123; if (q[i] == 0) &#123; for (int j = n; j &gt;= 0; --j) &#123; if (j - v[i] &gt;= 0) dp[j] = max(dp[j], dp[j - v[i]] + p[i]); if (G[i].size() &gt; 0 &amp;&amp; j - v[i] - v[G[i][0]] &gt;= 0) dp[j] = max(dp[j], dp[j - v[i] - v[G[i][0]]] + p[i] + p[G[i][0]]); if (G[i].size() &gt; 1 &amp;&amp; j - v[i] - v[G[i][1]] &gt;= 0) dp[j] = max(dp[j], dp[j - v[i] - v[G[i][1]]] + p[i] + p[G[i][1]]); if (G[i].size() &gt; 1 &amp;&amp; j - v[i] - v[G[i][0]] - v[G[i][1]] &gt;= 0) dp[j] = max(dp[j], dp[j - v[i] - v[G[i][0]] - v[G[i][1]]] + p[i] + p[G[i][0]] + p[G[i][1]]); &#125; &#125; &#125; cout &lt;&lt; dp[n] &lt;&lt; endl; return 0; &#125;\n\nJava\n\nimport java.util.ArrayList; import java.util.List; import java.util.Scanner; public class Main &#123; static int n, m; static List&lt;Integer&gt;[] G = new ArrayList[65]; // 使用ArrayList数组来表示图 static int[] v = new int[65], p = new int[65], q = new int[65]; static int[] dp = new int[33000]; public static void main(String[] args) &#123; Scanner scanner = new Scanner(System.in); n = scanner.nextInt(); m = scanner.nextInt(); // 初始化G数组 for (int i = 0; i &lt; G.length; i++) &#123; G[i] = new ArrayList&lt;&gt;(); &#125; for (int i = 1; i &lt;= m; i++) &#123; v[i] = scanner.nextInt(); p[i] = scanner.nextInt(); q[i] = scanner.nextInt(); p[i] *= v[i]; if (q[i] != 0) &#123; G[q[i]].add(i); // 将后继节点i添加到q[i]的列表中 &#125; &#125; for (int i = 1; i &lt;= m; i++) &#123; if (q[i] == 0) &#123; for (int j = n; j &gt;= 0; j--) &#123; if (j - v[i] &gt;= 0) dp[j] = Math.max(dp[j], dp[j - v[i]] + p[i]); // 处理后继节点 for (int k = 0; k &lt; G[i].size(); k++) &#123; int nextItem = G[i].get(k); if (j - v[i] - v[nextItem] &gt;= 0) &#123; dp[j] = Math.max(dp[j], dp[j - v[i] - v[nextItem]] + p[i] + p[nextItem]); &#125; &#125; if (G[i].size() &gt; 1) &#123; int p1 = G[i].get(0), p2 = G[i].get(1); if (j - v[i] - v[p1] - v[p2] &gt;= 0) &#123; dp[j] = Math.max(dp[j], dp[j - v[i] - v[p1] - v[p2]] + p[i] + p[p1] + p[p2]); &#125; &#125; &#125; &#125; &#125; System.out.println(dp[n]); scanner.close(); &#125; &#125;\n\nPython\n\nn, m = map(int, input().split()) G = [[] for _ in range(65)] v = [0] * 65 p = [0] * 65 q = [0] * 65 dp = [0] * 33000 for i in range(1, m + 1): v[i], p[i], q[i] = map(int, input().split()) p[i] *= v[i] if q[i]: G[q[i]].append(i) for i in range(1, m + 1): if q[i] == 0: for j in range(n, -1, -1): if j - v[i] &gt;= 0: dp[j] = max(dp[j], dp[j - v[i]] + p[i]) if G[i]: for k in range(len(G[i])): if j - v[i] - v[G[i][k]] &gt;= 0: dp[j] = max(dp[j], dp[j - v[i] - v[G[i][k]]] + p[i] + p[G[i][k]]) if len(G[i]) &gt; 1 and j - v[i] - v[G[i][0]] - v[G[i][1]] &gt;= 0: dp[j] = max(dp[j], dp[j - v[i] - v[G[i][0]] - v[G[i][1]]] + p[i] + p[G[i][0]] + p[G[i][1]]) print(dp[n])\n6. 依赖背包这个比较复杂，一般来讲是树形的依赖关系，我们放在树形DP再讲。\n7. 作业\n\n\n\n考点\n题目\n\n\n\n\n线性 DP\n李白打酒-真题\n\n\n线性 DP\n保险箱-真题\n\n\n背包问题\n健身-算法赛\n\n\n背包问题\n包子凑数\n\n\n\n\n"},{"title":"组合数学","url":"/2024/03/11/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/","content":"组合数学计数原理：加法原理\n加法原理： 集合 $S$ 被分成两两不相交的部分 $S_1, S_2, S_3, …, S_m$，那么 $S$ 的对象数目等于：$|S| = |S_1| + |S_2| + |S_3| + … + |S_m|$\n\n例： 一个学生想学一门数学课，一门文化课，但不能同时选，现在从 $4$ 门数学课和 $4$ 门文化课中选，一共有 $4 + 4 = 8$ 种方法选一门课。\n\n加法原理的关键是将计数分解为若干个独立（不相容）的部分，保证既不重复也不遗漏地进行计数。 加法原理是利用完备事件组的一个体现，我们可以利用一个集合的补记做题。\n\n\n例题：分割立方体 lanqiaoOJ 题号 1620题目描述： 一个立方体，边长为 $n$，分割成 $n × n × n$ 个单位立方体。任意两个单位立方体，或者有 $2$ 个公共点，或者有 $4$ 个公共点，或者没有公共点。请问，没有公共点和有 $2$ 个公共点的立方体，共有多少对？\n输入描述： 一个整数 $n，1 \\leq n \\leq 30$\n思路： 反过来计算，先算出有 $4$ 个公共点的立方体有多少对，然后用总对数减去。分几种情况讨论：\n\n正方体和周围 $3$ 个正方体相邻，这种情况共有 $8$ 个，就是顶角上的 $8$ 个，总个数 $3 \\times 8$；\n正方体和周围 $4$ 个正方体相邻，这种情况共有 $(n-2) \\times 12$ 个 （棱）总个数 $4 \\times (n-2) \\times 12$；\n正方体和周围 $5$ 个正方体相邻，这种情况共有 $6 \\times (n \\times n - 4 \\times n + 4)$ 个，总个数 $5 \\times 6 \\times (n \\times n - 4 \\times n + 4)$；\n正方体和周围 $6$ 个正方体相邻，这种情况共有 $(n \\times n \\times n - n \\times n \\times 6 + n \\times 12 - 8)$ 个，总个数 $6 \\times (n \\times n \\times n - n \\times n \\times 6 + n \\times 12 - 8)$； 最后把这 $4$ 个情况求和再除以 $2$。\n\n正方体一共 $n^3$ 个，共有 $\\frac{n^3(n^3 - 1)}{2}$ 种关系\n\n正方体和周围 $3$ 个正方体相邻，总个数 $3 \\times 8$；\n正方体和周围 $4$ 个正方体相邻，总个数 $4 \\times (n-2) \\times 12$；\n正方体和周围 $5$ 个正方体相邻，总个数 $5 \\times 6 \\times (n \\times n - 4 \\times n + 4)$；\n正方体和周围 $6$ 个正方体相邻，总个数 $6 \\times (n \\times n \\times n - n \\times n \\times 6 + n \\times 12 - 8)$；\n最后把这 $4$ 个情况求和再除以 $2$。\n\n#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123;    int n; cin &gt;&gt; n;    if(n == 1)&#123;             // 边长为 1 时特判        cout &lt;&lt; 0 &lt;&lt; endl;        return 0;    &#125;    long long sum = n * n * n * (n * n * n - 1) / 2;     //总数    int edge3 = 8;    int ans3 = 3 * edge3;    int edge4 = (n - 2) * 12;    int ans4 = 4 * edge4;    int edge5 = n * n - 4 * n + 4;    int ans5 = 5 * 6 * edge5;    int edge6 = n * n * n - n * n * 6 + n * 12 - 8;    int ans6 = 6 * edge6;    cout &lt;&lt; sum - (ans3 + ans4 + ans5 + ans6) / 2 &lt;&lt; endl;    return 0;&#125;\nn = int(input())if n == 1: # 边长为 1 时特判    print(0)else:    sum = n * n * n * (n * n * n - 1) // 2 # 总数    edge3 = 8    ans3 = 3 * edge3    edge4 = (n - 2) * 12    ans4 = 4 * edge4    edge5 = n * n - 4 * n + 4    ans5 = 5 * 6 * edge5    edge6 = n * n * n - n * n * 6 + n * 12 - 8    ans6 = 6 * edge6    print(sum - (ans3 + ans4 + ans5 + ans6) // 2)\nimport java.util.*;public class Main &#123;    public static void main(String[] args) &#123;        Scanner sc = new Scanner(System.in);        int n = sc.nextInt();        if (n == 1) &#123; // 边长为 1 时特判            System.out.println(0);            return;        &#125;        long sum = (long) n * n * n * (n * n * n - 1) / 2; // 总数        int edge3 = 8;        int ans3 = 3 * edge3;        int edge4 = (n - 2) * 12;        int ans4 = 4 * edge4;        int edge5 = n * n - 4 * n + 4;        int ans5 = 5 * 6 * edge5;        int edge6 = n * n * n - n * n * 6 + n * 12 - 8;        int ans6 = 6 * edge6;        System.out.println(sum - (ans3 + ans4 + ans5 + ans6) / 2);    &#125;&#125;\n计数原理：乘法原理令 $S$ 是对象的有序对 $(a, b)$ 的集合，其中第一个对象 $a$ 来自大小为 $p$ 的一个集合，对于对象 $a$ 的每个选择，对象 $b$ 有 $q$ 个选择，那么 $S$ 的大小：$|S| = p \\times q$\n例：中性笔的长度有 $3$ 种，颜色有 $4$ 种，直径有 $5$ 种。不同种类的中性笔有：$3 \\times 4 \\times 5 = 60$ 种。\n例：$34 \\times 55 \\times 72 \\times 113$ 的正整数因子有多少？答：这是算数基本定理的概念。$3$ 有 $0$ ~ $4$ 这 $5$ 种选择，$5$ 有 $6$ 个选择，$7$ 有 $3$ 个选择，$11$ 有 $4$ 个选择，因子总数是 $5 \\times 6 \\times 3 \\times 4 = 360$ 种。\n排列数排列是有序的。\n不可重复排列数：从 $n$ 个不同的物品中取出 $r$ 个，排列数为：\n$\\mathrm{A_{n}^{r}=n(n-1)(n-2)…(n-r+1)=\\frac{n!}{(n-r)!}}$\n可重复排列数，从 $n$ 个不同的物品中可重复地取出 $r$ 个的排列数为：$n^r$。\n组合数排列是有序的，组合是无序的。\n如果 $S$ 中的元素都不相同，组合数：\n$\\mathrm{C_{n}^{r}={\\binom{n}{r}}={\\frac{A_{n}^{r}}{r!}}={\\frac{n!}{r!(n-r)!}}}$\n糊涂人寄信 lanqiaoOJ 题号 1622题目描述： 有一个糊涂人，写了 $n$ 封信和 $n$ 个信封，到了邮寄的时候，把所有的信都装错了信封。求装错信封可能的种类数。\n输入描述： 每行输入一个正整数 $n$，表示一种情况。$(n \\leq 20)$\n输出描述： 输出相应的答案。\n解题思路：题目建模为：有 $1 \\sim n$ 个数字，分别放在 $n$ 个位置，问都放错的情况有多少种。\n用 DP 来做。定义 $dp[]$，$dp[i]$ 表示数字 $1 \\sim i$ 都放错的种类数。$dp[n]$ 是答案。\n下面考虑状态转移方程，从 $1 \\sim i$ 递推到 $i$。\n数字 $i$ 如果放错，有 $i-1$ 个位置可以放，假设其放在第 $k$ 个位置。对于数字 $k$，可以放在 $i$ 位置也可以不放在 $i$ 位置。\n如果 $k$ 放在 $i$ 位置，那么对于剩下 $i-2$ 个数字放的次数，就是 $i-2$ 个数字都放错的方法数 $dp[i-2]$。\n如果 $k$ 不放在 $i$ 位置，和 $i-1$ 个数字放错的情况相同，为 $dp[i-1]$。\n状态转移方程：$dp[i] = (i-1) \\times (dp[i-1] + dp[i-2])$\n#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;ll dp[30];int main()&#123;    dp[1]= dp[0]=0;    dp[2]=1;    for(int i=3;i&lt;=22;i++) dp[i]=(i-1)*(dp[i-1]+dp[i-2]);    int n;    while(cin&gt;&gt;n) cout&lt;&lt;dp[n]&lt;&lt;endl;    return 0;&#125;\nimport sysdef f(n):    if n==0 or n==1: return 0    elif n==2:  return 1    else:  return (n-1)*(f(n-1)+f(n-2))for n in sys.stdin:   #读入n，和C++代码的while(cin&gt;&gt;n)功能一样    n = int(n)    print(f(n))\nimport java.util.Scanner;public class Main &#123;    static long[] dp = new long[30];    public static void main(String[] args) &#123;        Scanner sc = new Scanner(System.in);        dp[1] = dp[0] = 0;        dp[2] = 1;        for (int i = 3; i &lt;= 22; i++) &#123;            dp[i] = (i - 1) * (dp[i - 1] + dp[i - 2]);        &#125;        while (sc.hasNext()) &#123;            int n = sc.nextInt();            System.out.println(dp[n]);        &#125;        sc.close();    &#125;&#125;\n鸽巢原理鸽巢原理，又称抽屉原理。\n鸽巢原理： 把 $n+1$ 个物体放进 $n$ 个盒子，至少有一个盒子包含 $2$ 个或更多的物体。\n\n例：在 $370$ 人中，至少有 $2$ 人生日相同；\n例：$n$ 个人互相握手，一定有 $2$ 个人握手次数相同。\n\n例：$n$ 个人互相握手，一定有 $2$ 个人握手次数相同。 每人跟其他人握手，最少可以是 $0$ 次，最多可以是$n-1$次。 如果握手最少的是 $0$ 次，那么剩下的$n-1$人中，握手最多的人不会超过$n-2$次。$0 \\sim n-2$ 共$n-1$种情况。 如果握手最少的张三是 $1$ 次，那么剩下的$n-1$人中，握手最多的李四除了跟张三握手一次，跟其他$n-2$人最多握手$n-2$次，李四最多握手$n-1$次。$1 \\sim n-1$ 共$n-1$种情况。 如果握手最少的张三是 $2$ 次，那么剩下的$n-1$人中，握手最多的李四除了跟张三握手一次，跟其他$n-2$人最多握手$n-2$次，李四最多握手$n-1$次。$2 \\sim n-1$ 共$n-2$种情况。 …… 所以握手次数最多有$n-1$种情况，最少只有 $1$ 种情况。 把最多的$n-1$种情况看成$n-1$个抽屉，$n$个人放进这$n-1$个抽屉，至少有一个抽屉里面有 $2$ 人。\n例题：小蓝吃糖果 lanqiaoOJ 题号 1624题目描述： Gardon 有 $n$ 种糖果，每种数量已知。Gardon 不喜欢连续 $2$ 次吃同样的糖果。问有没有可行的吃糖方案。\n输入： 第一行是整数 N，$0 &lt; n &lt; 1000000$，第二行是 $n$ 个数，表示 $n$ 种糖果的数量 $m_i$，$0 &lt; m_i &lt; 1000000$\n输出： 输出一行，包含一个 “Yes” 或 “no”。\n解题思路继续处理格式，鸽巢原理，用“隔板法”求解。\n找出最多的一种糖果，把它的数量 $K$ 看成 $K$ 个隔板，隔成 $K$ 个空间（把每个隔板的右边看成一个空间）；其它所有糖果的数量为 $S$。\n最多的一种糖果，把它的数量 $K$ 看成 $K$ 个隔板，隔成 $K$ 个空间（把每个隔板的右边看成一个空间）；其它所有糖果的数量为 $S$。\n\n（1）如果 $S &lt; K-1$，把 $S$ 个糖果放到隔板之间，这 $K$ 个隔板不够放，必然至少有 2 个隔板之间没有糖果，由于这 2 个隔板是同一种糖果，所以无解。\n（2）$S \\geq K-1$ 时，肯定有解。其中一个解是：把 $S$ 个糖果排成一个长队，其中同种类的糖果是挨在一起的，然后每次取 $K$ 个糖果，按顺序一个一个地放进 $K$ 个空间。由于隔板数量比每一种糖果的数量都多，所以不可能有 $2$ 个同样的糖果被放进一个空间里。把 $S$ 个糖果放完，就是一个解，一些隔板里面可能放好几种糖果。\n\n#include&lt;bits/stdc++.h&gt;using namespace std;int a[1005000];int main()&#123;    long long sum=0;    int Max=0;    int n; scanf(&quot;%d&quot;,&amp;n);    for(int i=1;i&lt;=n;i++)&#123;        scanf(&quot;%d&quot;,&amp;a[i]);        sum += a[i];              //所有糖果数量        if(a[i]&gt;Max)  Max=a[i];   //最多的一种糖果    &#125;    if(sum-Max+1&gt;=Max) printf(&quot;Yes\\n&quot;);    else               printf(&quot;No\\n&quot;);return 0;&#125;\nn=int(input())a=list(map(int,input().split()))if sum(a)-max(a) &lt; max(a)-1:    print(&quot;No&quot;)else:    print(&quot;Yes&quot;)\nimport java.util.*;public class Main &#123;    public static void main(String[] args) &#123;        Scanner input = new Scanner(System.in);        long sum = 0;        int max = 0;        int n = input.nextInt();        for (int i = 1; i &lt;= n; i++) &#123;            int x = input.nextInt();            sum += x;            if (x &gt; max) &#123;                max = x;            &#125;        &#125;        if (sum - max + 1 &gt;= max) &#123;            System.out.println(&quot;Yes&quot;);        &#125; else &#123;            System.out.println(&quot;No&quot;);        &#125;    &#125;&#125;\n二项式定理和杨辉三角杨辉三角：排列成如下三角形的数字\n      1    1   1   1  2  1 1   3  3  11  4   6  4  1\n每个数是它上面 $2$ 个数的和。\n求杨辉三角第 $n$ 行的数字，可以模拟这个推导过程，逐级递推，复杂度 $O(n^2)$。\n用数学公式计算，可以直接得到结果，这个公式是$(1 + x)n$。\n\n二项式系数就是$(1 + x)^n$ 展开后第 $r$ 项的系数。\n$\\mathrm{C_{n}^{r}={\\binom{n}{r}}=\\frac{n!}{r!(n-r)!}}$\n对应杨辉三角的第 $n$ 行第 $r$ 个数是\n例：杨辉三角的第 $4$ 行是“$1 3 3 1$”，\n$\\mathrm{C_{n-1}^{r-1}=C_{4-1}^{1-1}=C_3^0=1、C_3^1=3、C_3^2=3、C_3^3=1}$\n理解：$(1 + x)^n$ 的第 $r$ 项，就是从 $n$ 个 $x$ 中选出 $r$ 个，这就是组合数的定义\n当 n 较大，且需要取模时，二项式系数有两种计算方法：\n（1）递推公式：$\\mathrm{C_{n}^{r}=C_{n-1}^{r}+C_{n-1}^{r-1}}$\n公式是杨辉三角的定义，即“每个数是它上面 $2$ 个数的和”。计算复杂度是 $O(n^2)$。\n（2）用逆直接计算\n因为输出取模，那么不用递推公式，直接用公式计算更快。不过，由于除法不能直接取模，需要用到逆。用逆计算二项式系数，有：\n$\\mathrm{C_{n}^{r}={\\binom{n}{r}}=\\frac{n!}{r!(n-r)!}}$\n$\\mathrm{C_{r}^{n}\\bmod m=\\frac{n!}{r!(n-r)!}\\bmod m=(n!\\bmod m)((r!)^{-1}\\bmod m)(((n-r)!)^{-1}\\bmod m)\\bmod m}$\n用逆计算二项式系数，复杂度是 $O(n)$​ 的。\n","categories":["蓝桥杯Note"],"tags":["蓝桥杯备赛","组合数学"]},{"title":"蓝桥常规考点总结","url":"/2024/05/30/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/","content":"动态规划基础DP线性DP\n\n\n动态规划分析步骤\n模板题——破损的楼梯&quot;&quot;&quot;3367 破损的楼梯https://www.lanqiao.cn/problems/3367/learning这是一个典型的线性DP问题，dp[i]表示到达第i阶楼梯的方法数状态转移方程：dp[i]=dp[i-1]+dp[i-2]状态压缩：dp[i]只与dp[i-1]和dp[i-2]有关，所以可以压缩时间复杂度：O(n)空间复杂度：O(n)&quot;&quot;&quot;N = int(1e5 + 10)mod = int(1e9 + 7)n, m = map(int, input().split())a = list(map(int, input().split()))vis = [0] * Nfor i in a: vis[i] = 1dp = [0] * Ndp[0] = 1dp[1] = 1 - vis[1]for i in range(2, n + 1):    if vis[i]:        continue    dp[i] = (dp[i - 1] + dp[i - 2]) % modprint(dp[n])\nn,m=map(int,input().split())a=list(map(int,input().split()))dp=[0]*(n+1)tp=[0]*(n+1)for i in a:  tp[i]=1dp[0]=1dp[1]=1-tp[1]for i in range(2,n+1):  if tp[i]==1:    continue  dp[i]=dp[i-1]+dp[i-2]mod=10**9+7print(dp[i]%mod)\n二维DP\n分析步骤\n模板题——数字三角形import osimport sys# 请在此输入您的代码N = int(input())dp = [list(map(int, input().split())) for _ in range(N)]for i in range(1, N):    for j in range(i + 1):        if j == 0:            dp[i][j] += dp[i - 1][j]        elif j == i:            dp[i][j] += dp[i - 1][j - 1]        else:            dp[i][j] += max(dp[i - 1][j - 1], dp[i - 1][j])print(max(dp[N - 1]))\n\n\n模板题——摆花&#x27;&#x27;&#x27;n种花凑 m盆 每种&lt;a[i]1.分解子问题前i种花，一共j盆，答案是dp[n][m]2.状态转移前i种花有j盆方案数  如何由前i-1种有j盆得出.以下每一种选择是一种方案第i种花可以选0盆,前i-1种花有j盆：dp[i][j] = dp[i-1][j]第i种花可以选1盆,前i-1种花有j-1盆：：dp[i][j] = dp[i-1][j-1]...第i种花可以选a[i]盆,前i-1种花有j-a[i]盆：：dp[i][j] = dp[i-1][j-a[i]]3.边界条件，每种花都不选前i种花 0盆 是 一种方案 dp[i][0] = 1&#x27;&#x27;&#x27;MOD = 10 ** 6 + 7n, m = map(int, input().split())a = [0] + list(map(int, input().split()))dp = [[0] * (m + 1) for i in range(n + 1)]for i in range(n+1):    dp[i][0] = 1# 状态转移,当下做出的选择，利用之前dp,求dp[i][j]for i in range(1,n+1):    for j in range(1,m+1):        for k in range(min(a[i],j)+1):            dp[i][j]+=dp[i-1][j-k]            dp[i][j]%=MODprint(dp[n][m])\n模板题——选数异或n,x = map(int,input().split())a = [0] + list(map(int,input().split()))Mod = 998244353&#x27;&#x27;&#x27; dp[i][j]前i个正整数有j个子序列异或成 j 的方案；答案dp[n][x] dp[i][j] = 选第i个数字 + 不选第i个数字          = dp[i - 1][j ^ a[i]] + dp[i - 1][j]             (因为如果选了第i个数字，那么a[i] ^ 前数 = j, 所以：前数 = j ^ a[i])&#x27;&#x27;&#x27;dp = [[0] * (64) for _ in range(n + 1)]# 初始化为 0dp[0][0] = 1for i in range(1, n + 1):    for j in range(64):        dp[i][j] = (dp[i-1][j] + dp[i-1][j ^ a[i]]) % Modprint(dp[n][x])\nLIS最长上升子序列\n\n模板题——蓝桥勇士n=int(input())a=[0]+list(map(int,input().split()))dp=[1]*(n+1)for i in range(1,n):  for j in range(i+1,n+1):    if a[i]&lt;a[j]:      dp[j]=max(dp[j],dp[i]+1)print(max(dp))\n模板题——合唱队形n = int(input())a = [0] + list(map(int, input().split()))dp1 = [0] * (n + 1)  # dp1[i]表示以i结尾的最长上升子序列长度dp2 = [0] * (n + 1)  # dp2[i]表示以i出发的最长下降子序列长度for i in range(1, n + 1):    dp1[i] = 1    for j in range(1, i):        if a[i] &gt; a[j]:            dp1[i] = max(dp1[i], dp1[j] + 1)for i in range(n, 0, -1):    dp2[i] = 1    for j in range(i + 1, n + 1):        if a[i] &gt; a[j]:            dp2[i] = max(dp2[i], dp2[j] + 1)ans = max((dp1[i] + dp2[i] - 1) for i in range(1, n + 1))print(n-ans)\nLCS最长公共子序列\n\n模板题——最长公共子序列import osimport sys# 这段代码实现的是计算两个序列（a 和 b）的最长公共子序列（Longest Common Subsequence, LCS）的长度。LCS 是一种在计算两个序列相似度时常用的度量方法。这个问题通常通过动态规划来解决。现在，我将逐步解释这段代码的各个部分：# 输入处理n, m = map(int, input().split())a = [0] + list(map(int, input().split()))b = [0] + list(map(int, input().split()))# 首先，通过 input().split() 获取两个整数 n 和 m，分别表示序列 a 和 b 的长度。# 接着，读取这两个序列，并在序列前面各自加上一个 0 作为哨兵值。这样做是为了让序列的索引从 1 开始，方便后续操作。# 初始化动态规划数组dp = [[0] * (m + 1) for _ in range(2)]  # 注意这里是 m，不是 nnow = 0; old = 1# 初始化一个二维动态规划数组 dp，但这里只用到了两行（range(2)），目的是节省空间。因为在计算当前状态时，只需要用到前一行（即上一状态）的数据。m + 1 是因为考虑到从 0 开始到 m 的所有可能位置。# now 和 old 变量用来在这两行之间切换，表示当前行和上一行。# 动态规划过程for i in range(1, n + 1):    now, old = old, now    for j in range(1, m + 1):        dp[now][j] = max(dp[now][j - 1], dp[old][j])        if a[i] == b[j]:             dp[now][j] = max(dp[now][j], dp[old][j - 1] + 1)# 这部分是动态规划的核心。# 外层循环遍历序列 a，内层循环遍历序列 b。# dp[now][j] = max(dp[now][j - 1], dp[old][j])：当前状态是基于之前状态的最大值，这表示如果当前字符不匹配，LCS 长度不变。# 如果当前位置的字符相等（a[i] == b[j]），则检查上一个状态的值并加一，即 dp[now][j] = max(dp[now][j], dp[old][j - 1] + 1)。这反映了找到了一个公共元素，因此当前的最长公共子序列长度增加了 1。# 输出结果print(dp[now][m])# 最后，打印出最长公共子序列的长度，即在遍历完两个序列后，dp 数组最后一个元素（dp[now][m]）的值。# 通过这种方式，代码高效地计算了两个序列的最长公共子序列的长度，同时通过只使用两行的动态规划数组大大减少了空间复杂度。\n\n背包DP01背包\n\n\n模板题——小明的背包1#dp[i][j]    前i件物品，总体积不超过j 的最大价值n,v=map(int,input().split())dp=[[0]*(v+1) for i in range(n+1)]for i in range(1,n+1):    wi,vi=map(int,input().split())    for j in range(0,v+1):        if j&gt;=wi:            dp[i][j]=max(dp[i-1][j],dp[i-1][j-wi]+vi)        else:            dp[i][j]=dp[i-1][j]            print(dp[n][v])\n滚动数组优化\n\n\nn,V=map(int,input().split())dp=[0]*(V+1)for i in range(1,n+1):  w,v=map(int,input().split())  for j in range(V,w-1,-1):    dp[j]=max(dp[j],dp[j-w]+v)print(dp[V])\n完全背包\n\n\n\n模板题——小明的背包2\n# dp[i][j]=max(dp[i-1][j],dp[i][j-wi]+vi)  不取或在先前基础上取第i种（所以可以取多次）n,v=map(int,input().split())dp=[[0]*(v+1) for i in range(n+1)]for  i in range(1,n+1):    wi,vi=map(int,input().split())    for j in range(0,v+1):        if (j&gt;=wi):            dp[i][j]=max(dp[i-1][j],dp[i][j-wi]+vi)        else:            dp[i][j]=dp[i-1][j]print(dp[n][v])\n滚动数组优化import osimport sysN, V = map(int, input().split())items = []for _ in range(N):    w, v = map(int, input().split())    items.append((w, v))dp = [0] * (V + 1)for i in range(1, V + 1):    for w, v in items:        if i &gt;= w:            dp[i] = max(dp[i], dp[i - w] + v)print(dp[V])&#x27;&#x27;&#x27;读取输入的商场物品数量N和小明的背包容量V，以及每种物品的体积和价值。初始化一个长度为V+1的动态规划数组dp，dp[i]表示背包容量为i时所能获得的最大价值。使用动态规划求解，外层循环遍历背包容量从1到V，内层循环遍历每种物品，更新dp[i]的值为dp[i-w]+v和当前dp[i]的较大值。输出dp[V]即为小明所能获得的最大价值。&#x27;&#x27;&#x27;\n多重背包\n\n模板题——小明的背包3\n\n#dp[i][j] =max(dp[i][j],dp[i-1][j-k*wi]+k*vi)  k属于(0，si)n,v=map(int,input().split())dp=[[0]*(v+1) for i in range(n+1)]for i in range(1,n+1):    wi,vi,si=map(int,input().split())    for j in range(0,v+1):        for k in range(0,min(si,j//wi)+1):            dp[i][j]=max(dp[i][j],dp[i-1][j-k*wi]+k*vi)print(dp[n][v])\n滚动数组优化N,V=map(int,input().split())w,v,s=[[0]*(N+1) for _ in range(3)]dp=[0 for _ in range(V+1)]for i in range(1,N+1):  w[i],v[i],s[i]=map(int,input().split())for i in range(1,N+1):  for j in range(s[i]):    for k in range(V,0,-1):      if w[i]&lt;=k:        dp[k]=max(dp[k-w[i]]+v[i],dp[k])print(dp[-1])\n二维费用背包&amp;分组背包\n\n模板题——小蓝的神秘行囊import sysn, v, m = map(int, sys.stdin.readline().split())dp = [[0]*(v + 1) for _ in range(m + 1)]for _ in range(n):    volume, mass, value = map(int, sys.stdin.readline().split())    for i in range(m, 0, -1):        for j in range(v, 0, -1):            if i &gt;= mass and j &gt;= volume:                dp[i][j] = max(dp[i][j], dp[i-mass][j-volume] + value)print(dp[m][v])\nn,v,m=map(int,input().split())dp=[[0]*(m+1) for i in range(v+1)]for i in range(1,n+1):    vi,mi,wi=map(int,input().split())    for j in range(v,vi-1,-1):        for k in range(m,mi-1,-1):            dp[j][k] =max(dp[j][k],dp[j-vi][k-mi]+wi)           print(dp[v][m])\n树形DP状压DP数位DP字符串KMP模式匹配\n\nKMP算法\n\n\n\n模板题——斤斤计较的小ZNext = [0] * 1000010def get_next(T):    for i in range(1,len(T)):        j = Next[i]        while j &gt; 0 and T[i] != T[j]:            j = Next[j]        if T[i] == T[j]:            Next[i + 1] = j + 1        else:            Next[i + 1] = 0def KMP(s,t):    get_next(t)    ans = 0    j = 0    for i in range(len(s)):        while j &gt; 0 and s[i] != t[j]:            j =  Next[j]        if s[i] == t[j]:            j += 1        if j == len(t):            ans += 1            j =  Next[j]    return anst = input()s = input()print(KMP(s,t))\nprint((lambda s: input().count(s))(input()))\nHash字符串哈希\n\n模板题——斤斤计较的小Zt = input()s = input()m,n = len(t), len(s)B = 26mod = 1000000007hash = [0] * (n + 1)for i in range(1,n + 1):    hash[i] = hash[i - 1] * B + ord(s[i - 1]) - ord(&#x27;A&#x27;)    hash[i] %= modnumT = 0for c in t:    numT = numT * B + ord(c) - ord(&#x27;A&#x27;)    numT %= mod    p = (B ** m) % modans = 0for l in range(1,n +1):    r = l + m - 1    if r &gt; n:        break    if (hash[r] - hash[l - 1] * p % mod + mod) % mod == numT:        ans += 1print(ans)\n排序归并排序快速排序数学二项式定理容斥原理排列组合模意义下的逆元矩阵运算数据结构ST表RMQ问题\n平衡树平衡树-Splay\n\n\n\n平衡树-FHQ_Treap无旋Treap\n无旋Treap的结构\n基本操作\n\n\n\n\n\n案例struct NODE &#123;    int val;    int cnt;    int rev;    int prio;    int size;    int ch[2];&#125;struct FHQTREAP &#123;    int root;    int size;    NODE node[MAXN];&#125;pair&lt;int, int&gt; split_by_val(int t, int val) &#123;    if (!t) &#123;        return &#123;0, 0&#125;;    &#125;    check_rev(t);    if (node[t].val &lt;= val) &#123;        auto tmp = split_by_val(node[t].ch[1], val);        node[t].ch[1] = tmp.first;        update_size(t);        return &#123;t, tmp.second&#125;;    &#125; else &#123;        auto tmp = split_by_val(node[t].ch[0], val);        node[t].ch[0] = tmp.second;        update_size(t);        return &#123;tmp.first, t&#125;;    &#125;&#125;tuple&lt;int, int, int&gt; split_by_rank(int t, int k) &#123;    if (!t) &#123;        return &#123;0, 0, 0&#125;;    &#125;    check_rev(t);    int lt, mt, rt;    if (k &lt;= node[node[t].ch[0]].size()) &#123;        tie(lt, mt, rt) = split_by_rank(node[t].ch[0], k);        node[t].ch[0] = rt;        update_size(t);        return &#123;lt, mt, t&#125;;    &#125; else if (k &gt; node[node[t]].ch[0].size() + node[t].cnt) &#123;        tie(lt, mt, rt) = split_by_rank(node[t].ch[1], k - node[node[t].ch[0]].size() - node[t].cnt);        node[t].ch[1] = lt;        update_size(t);        return &#123;t, mt, rt&#125;;    &#125; else &#123;        lt = node[t].ch[0];        rt = node[t].ch[1];        check_rev(lt);        check_rev(rt);        node[t].ch[0] = 0;        upda[t].ch[1] = 0;        update_size(t);        return &#123;lt, t, rt&#125;;    &#125;&#125;int merge(int lt, int rt) &#123;    if (!lt) &#123;        return rt;    &#125; else if (!rt) &#123;        return lt;    &#125;    check_rev(lt);    check_rev(rt);    if (node[lt].prio &lt; node[rt].prio) &#123;        node[lt].ch[1] = merge(node[lt].ch[1], rt);        update_size(lt);        return lt;    &#125; else &#123;        node[rt].ch[0] = merge(lt, node[rt].ch[0]);        update_size(rt);        return rt;    &#125;&#125;void insert(int val) &#123;    int lt, mt, rt;    tie(lt, rt) = split_by_val(root, val);    tie(lt, mt) = split_by_val(lt, val - 1);    if (!mt) &#123;        mt = new_node(val);    &#125; else &#123;        node[mt].cnt ++;        update_size(mt);    &#125;    root = merge(merge(lt, mt), rt);&#125;void del(int val) &#123;    int lt, mt, rt;    tie(lt, rt) = split_by_val(root, val);    tie(lt, mt) = split_by_val(lt, val - 1);    unode[mt].cnt --;    update_size(mt);    if (node[mt].cnt == 0) &#123;        clear(mt);    &#125; else &#123;        lt = merge(lt, mt);    &#125;    root = merge(lt, rt);&#125;void reverse(int l, int r) &#123;    int t1, t2, t3, t4, t5;    tie(t1, t2, t3) = split_by_rank(root, l - 1);    tie(t3, t4, t5) = split_by_ranl(t3, r - l + 2);    node[t3].rev = 1;    root = merge(merge(merge(merge(t1, t2), t3), t4), t5);&#125;void check_rev(int t) &#123;    if (node[t].rev) &#123;        swap(node[t].ch[0], node[t].ch[1]);        node[node[t].ch[0]].rev ^= 1;        node[node[t].ch[1]].rev ^= 1;        node[t].rev = 0;    &#125;&#125;int rank(int val) &#123;    auto tmp = split_by_val(root, val - 1);    int k = node[tmp.first].size + 1;    root = merge(tmp.first, tmp.second);    return k;&#125;int kth(int &amp;t, int k) &#123;    int lt, mt, rt;    tie(lt, mt, rt) = split_by_rank(t, k);    int val = node[mt].val;    t = merge(merge(lt, mt), rt);    return val;&#125;int pre(int val) &#123;    auto tmp = split_by_cal(root, val - 1);    int k = kth(tmp.first, node[tmp.first].size);    root = merge(tmp.first, tmp.second);    return k;&#125;int nxt(int val) &#123;    auto tmp = split_by_val(root, val);    int k = kth(tmp.second, 1);    root = merge(tmp.first, tmp.second);    return k;&#125;\n并查集基础并查集基础\n\n模板题——蓝桥幼儿园# def Findroot(x):#     while x!=p[x]:#         x=p[x]#     return x&#x27;&#x27;&#x27;使用路径压缩&#x27;&#x27;&#x27;def Findroot(x):    if x==p[x]:return x    #路径压缩    p[x]=Findroot(p[x])    return p[x]def Merge(x,y):    rootx,rooty=Findroot(x),Findroot(y)    p[rootx]=rootydef Query(x,y):    rootx,rooty=Findroot(x),Findroot(y)    return rootx==rootyn,m=map(int,input().split())p=list(range(n+1))for _ in range(m):    op,x,y=map(int,input().split())    if op ==1:        Merge(x,y)    else:        if Query(x,y):            print(&quot;YES&quot;)        else:            print(&quot;NO&quot;)\n路径压缩\n模板题——星球大战import osimport sysM = 200010; N = 2 * Mn, m = map(int, input().split())father = [0] * (n + 10)                 #并查集板块def init():    for i in range(n + 10):        father[i] = idef find_father(x):    if x != father[x]: father[x] = find_father(father[x])    return father[x]def unite(x, y):    father[find_father(x)] = find_father(y)come = [0] * N; to = [0] * N;   #存储每个边g = [[] for _ in range(N)]      #邻接表for i in range(m):    a, b = map(int, input().split())    g[a].append(b); g[b].append(a)    come[i] = a; to[i] = b broken = [0] * (n + 10)                     #记录每个点是否被修坏destroy = []k = int(input())for i in range(k):    b = int(input())    broken[b] = 1    destroy.append(b)init()res = n - k             #先计算所有剩下星球的连通块数，(最后一轮的结果)for i in range(m):    l = come[i]; r = to[i]    fl, fr = find_father(l), find_father(r)    if not broken[l] and not broken[r] and fl != fr:        res -= 1        #unite(l, r)        father[fl] = frans = [res]for i in range(len(destroy) - 1, -1, -1):       #顺序破坏，相当于倒序修建    c = destroy[i]    broken[c] = 0    res += 1                                    #修好一个星球，连通块会多一个    for j in g[c]:        fc, fp = find_father(c), find_father(j)        if not broken[j] and fc != fp:            res -= 1            father[fc] = fp    ans.append(res)for i in range(len(ans) - 1, -1, -1):           #倒序输出结果    print(ans[i])\n可撤销并查集\n\n\n\n\n\n\n\n\n\n\n可撤销并查集定义\n\n算法原理\n带权并查集\n\n\n\n\n树状数组lowbit操作\n树状数组\n\n\n\n模板题——单点修改，区间查询N = 100100#初始化树状数组 为0f = [0] * N#求下标为x的最小区间长度def lowbit(x):    return x &amp; (-x)#树状数组更新函数def upd(pos,v):#pos：下标 v：值    #在下标为pos的区间加上v 并且在每个有包含pos的大区间加上v    #包含当前区间的大区间：在pos的位置上加lowbit(pos)便能得到大区间    while pos &lt;= n:        f[pos] += v        pos += lowbit(pos)#得到1-pos位置的前缀和def get(pos):    res = 0    while pos &gt; 0:#加上组成pos每一个区间的和        res += f[pos]        pos -= lowbit(pos)    return resn = int(input())data = input().split()for i in range(0,n):    x = int(data[i])    #树状数组初始化都为0，需要将原数组每个值通过upd方法将每个值加入树状数组    upd(i+1,x)m = int(input())for _ in range(m):    opt,a,b = map(int,input().split())    if opt == 1:        upd(a,b)#更新    else:        #区间[a,b] = [1,b] - [1,a-1]        print(get(b) - get(a-1))\nimport osimport sysN = int(input())n = list(map(int,input().split()))m = int(input())for i in range(m):  s,a,b = map(int,input().split())  if s == 1:    n[a-1] += b  if s == 2:    print(sum(n[a-1:b]))\n\n树状数组\n模板题——殷老师排队import osimport sysdef lowbit(x):  return x &amp; (-x)def query(x):  ans = 0  while x:    ans += tree[x]    x -= lowbit(x)  return ans def add(x,y):  while x &lt;= n:    tree[x] += y    x += lowbit(x)n, m = map(int,input().split())a =[0] + list(map(int,input().split()))tree = [0] * (n + 1)for i in range(1,n+1):  add(i,a[i])for i in range(m):  lt = list(map(int,input().split()))  if lt[0] == 1:    x, y = lt[1], lt[2]    add(x,y - a[x])    a[x] = y  else:    x = lt[1]    ans = (2 * x - n - 2) * a[x] + query(n) - 2*query(x-1)    print(ans)\n二维树状数组\n\n\n模板题——\n树状数组上二分\n模板题——maxn = 110000ans = [0] * maxntree = [0] * maxna = [0] * maxndef lowbit(x):    return x &amp; -xdef add(pos, x):    while pos &lt; maxn:        tree[pos] += x        pos += lowbit(pos)def query(pos):    res = 0    while pos &gt; 0:        res += tree[pos]        pos -= lowbit(pos)    return resn = int(input())nums = list(map(int, input().strip().split()))for i in range(1, n + 1):    a[i] = nums[i - 1]    add(i, 1)for i in range(n, 0, -1):    l, r = 1, n    while l &lt;= r:        mid = (l + r) // 2        if query(mid) &lt; a[i] + 1:            l = mid + 1        else:            r = mid - 1    ans[i] = r    add(r, -1)for i in range(1, n + 1):    print(ans[i], end=&#x27; &#x27;)\n线段树线段树-动态开点\n\n\n\n\n\n\n\n\n\n例题\nstruct Tree &#123;    int l, r, n, ls, rs;&#125;void update(int &amp;t, int l, int r, int pos, int n) &#123;    if (!t) &#123;        t = ++ cnt;        tree[t].l = l;        tree[t].r = r;    &#125;    if (l == r) &#123;        tree[t].n = n;        return;    &#125;    int mid = (l + r) &gt;&gt; 1;    if (pos &lt;= mid) &#123;        update(tree[t].ls, l, mid, pos, n);    &#125; else &#123;        update(tree[t].rs, mid + 1, r, pos, n);    &#125;&#125;int getnum(int t, int l, int r) &#123;    if (!t) &#123;        return 0;    &#125;    if (tree[t].l == l &amp;&amp; tree[t].r == r) &#123;        return tree[t].n;    &#125;    int mid = (tree[t].l + tree[t].r) &gt;&gt; 1;    if (r &lt;= mid) &#123;        return getnum(tree[t].ls, l, r);    &#125; else if (l &gt; mid) &#123;        return getnum(tree[t].rs, l, r);    &#125; else &#123;        return getnum(tree[t].ls, l, mid) + getnum(tree[t].rs, mid + 1, r);    &#125;&#125;\n线段树-标记永久化\n\n\n\n\n\n\n\n\n案例void build(int t, int l, int r, int *v) &#123;    _l[t] = l;    _r[t] = r;    if (l == r) &#123;        _v[t] = v[l];        return ;    &#125;    int mid = (l + r) &gt;&gt; 1;    build(t &lt;&lt; 1, l, mid, v);    build(t &lt;&lt; 1 | 1, mid + 1, r, v);    _v[t] = _v[t &lt;&lt; 1] + _v[t &lt;&lt; 1 | 1];&#125;void update(int t, int l, int r, int k) &#123;    _v[t] += k * (r - l + 1);    if (_l[t] == l &amp;&amp; _r[t] == r) &#123;        _laz[t] += k;        return ;    &#125;    int mid = (_l[t] + _r[t]) &gt;&gt; 1;    if (r &lt;= mid) &#123;        update(t &lt;&lt; 1, l, r, k);    &#125; else if (l &gt; mid) &#123;        update(t &lt;&lt; 1 | 1, l, r, k);    &#125; else &#123;        update(t &lt;&lt; 1, l, mid, k);        update(t &lt;&lt; 1 | 1, mid + 1, r, k);    &#125;&#125;int getv(int t, int l, int r, int sum) &#123;    if (_l[t] == l &amp;&amp; _r[t] == r) &#123;        return _v[t] + sum * (_r[t] - _l[t] + 1);;    &#125;    int mid = (_l[t] + _r[t]) &gt;&gt; 1;    if (r &lt;= mid) &#123;        return getv(t &lt;&lt; 1, l, r, sum + _laz[t]);    &#125; else if (l &gt; mid) &#123;        return getv(t &lt;&lt; 1 | 1, l, r, sum + _laz[t]);    &#125; else &#123;        return getv(t &lt;&lt; 1, l, mid, sum + _laz[t])            + getv(t &lt;&lt; 1 | 1, mid + 1, r, sum + _laz[t]);    &#125;&#125;\n线段树维护矩阵\n\n\n\nvoid build(int t, int l, int r) &#123;    _l[t] = l;    _r[t] = r;    _v[t] = _E;    if (l == r) &#123;        return ;    &#125;    int mid = (l + r) &gt;&gt; 1;    build(t &lt;&lt; 1, l, mid);    build(t &lt;&lt; 1 | 1, mid + 1, r);&#125;void update(int t, int pos, MATRIX &amp;v) &#123;    if (_l[t] = _r[t]) &#123;        _v[t] = v;        return ;    &#125;    int mid = (_l[t] + _r[t]) &gt;&gt; 1;    if (pos &lt;= mid) &#123;        update(t &lt;&lt; 1, pos, v);    &#125; else &#123;        update(t &lt;&lt; 1 | 1, pos, v);    &#125;    _v[t] = _v[t &lt;&lt; 1] * _v[t &lt;&lt; 1 | 1];&#125;MATRIX getv(int t, int l, int r) &#123;    if (_l[t] == l &amp;&amp; _r[t] == r) &#123;        return _v[t];    &#125;    int mid = (_l[t] + _r[t]) &gt;&gt; 1;    if (r &lt;= mid) &#123;        return getv(t &lt;&lt; 1, l, r);    &#125; else if (l &gt; mid) &#123;        return getv(t &lt;&lt; 1 | 1, l, r);    &#125; else &#123;        return getv(t &lt;&lt; 1, l, mid) * getv(t &lt;&lt; 1 | 1, mid + 1, r);    &#125;&#125;\n线段树维护哈希\n\n\n\n\n\nbs1= []bs2= []mod1 = 998244353mod2 = 19260817bas = 233s = []class asdf:    def __init__(self, h1, h2, length):        self.h1 = h1        self.h2 = h2        self.length = length        def __add__(self, c):        return asdf((self.h1 * bs1[c.length] + c.h1) % mod1, (self.h2 * bs2[c.length] + c.h2) % mod2, self.length + c.length)        def __eq__(self, c):        return self.h1 == c.h1 and self.h2 == c.h2 and self.length == c.lengthdef build(l, r, rt):    if l == r:        s[rt] = asdf(ord(a[l]), ord(a[l]), 1)        return s[rt]    s[rt] = build(l, (l + r) // 2, rt * 2) + build((l + r) // 2 + 1, r, rt * 2 + 1)    return s[rt]def query(l, r, rt, x, y):    if x &lt;= l and r &lt;= y:        return s[rt]    if y &lt;= (l + r) // 2:        return query(l, (l + r) // 2, rt * 2, x, y)    if x &gt; (l + r) // 2:        return query((l + r) // 2 + 1, r, rt * 2 + 1, x, y)    return query(l, (l + r) // 2, rt * 2, x, y) + query((l + r) // 2 + 1, r, rt * 2 + 1, x, y)def modify(l, r, rt, ad, ch):    if l == r:        s[rt] = asdf(ord(ch), ord(ch), 1)        return s[rt]    if ad &lt;= (l + r) // 2:        s[rt] = modify(l, (l + r) // 2, rt * 2, ad, ch) + s[rt * 2 + 1]    else:        s[rt] = s[rt * 2] + modify((l + r) // 2 + 1, r, rt * 2 + 1, ad, ch)    return s[rt]n = int(input())a = input()a = &quot;!&quot; + abs1.append(1)bs2.append(1)for i in range(n):    bs1.append(bs1[i]*bas%mod1)    bs2.append(bs2[i]*bas%mod2)s = [None] * (4 * (n+5))build(1, n, 1)q = int(input())for _ in range(q):    ls=input().split()    opt = ls[0]    if opt == &#x27;1&#x27;:        ad = int(ls[1])        ch = ls[2]        modify(1, n, 1, int(ad), ch)    else:        l1 = int(ls[1])        r1 = int(ls[2])        l2 = int(ls[3])        r2 = int(ls[4])        x = query(1, n, 1, l1, r1)        y = query(1, n, 1, l2, r2)        if x == y:            print(&quot;YES&quot;)        else:            print(&quot;NO&quot;)\n可持久化线段树\n\n\n\n\n\n\n\n\n可持久化线段树struct NODE &#123;    int v, ls, rs;&#125;struct SEGTREE &#123;    int cnt = 0;    int root[MAXN &lt;&lt; 5];    NODE node[MAXN &lt;&lt; 5];&#125;void SEGTREE::update(int _t, int &amp;t, int l, int r, int pos, int k) &#123;    if (!t) &#123;        t = ++cnt;        node[t].v = node[_t].v;    &#125;    if (l == r) &#123;        node[t].v += k;        return;    &#125;    int mid = (l + r) &gt;&gt; 1;    if (pos &lt;= mid) &#123;        node[t].rs = node[_t].rs;        update(node[_t].ls, node[t].ls, l, mid, pos, k);    &#125; else &#123;        node[t].ls = node[_t].ls;        update(node[_t]).rs, node[t].rs, mid + 1, r, pos, k);    &#125;    node[t].v = node[node[t].ls].v + node[node[t].rs].v;&#125;int SEGTREE::getV(int t, int _l, int _r, int l, int r) &#123;    if (!t) &#123;        return 0;    &#125;    if (l == _l &amp;&amp; r == _r) &#123;        return node[t].v;    &#125;    int mid = (_l + _r) &gt;&gt; 1;    if (r &lt;= mid) &#123;        return getV(node[t].ls, _l, mid, l, r);    &#125; else if (l &gt; mid) &#123;        return getV(node[t].rs, mid + 1, _r, l, r);    &#125; else &#123;        return getV(node[t].ls, _l, mid, l, mid)            + getV(node[t].rs, mid + 1, _r, mid + 1, r);    &#125;&#125;\n模板题——区间第k小#include&lt;bits/stdc++.h&gt;using namespace std;#define lc(x) tr[x].l#define rc(x) tr[x].rconst int N=2e5+6;int n,m,a[N],b[N];struct Node &#123; int l,r,s;//左右儿子，该节点在值域中的个数&#125;tr[N*20];int idx,root[N];void build(int &amp;x,int l,int r)&#123;    x=++idx;    if(l==r)return ;    int mid=(l+r)&gt;&gt;1;    build(lc(x),l,mid);    build(rc(x),mid+1,r);&#125;void update(int x,int &amp;y,int l,int r,int v)&#123;    y=++idx;    tr[y]=tr[x];    tr[y].s++;    if(l==r)return;    int mid=(l+r)&gt;&gt;1;    if(v&lt;=mid)        update(lc(x),lc(y),l,mid,v);    else        update(rc(x),rc(y),mid+1,r,v);&#125;int query(int x,int y,int l,int r,int k)&#123;    if(l==r)return l;    int mid=(l+r)&gt;&gt;1;    int s=tr[lc(y)].s-tr[lc(x)].s;    if(k&lt;=s)        return query(lc(x),lc(y),l,mid,k);    else         return query(rc(x),rc(y),mid+1,r,k-s);&#125;int main()&#123;    ios::sync_with_stdio(0),cin.tie(0),cout.tie(0);    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=n;i++)    &#123;        cin&gt;&gt;a[i];        b[i]=a[i];    &#125;    sort(b+1,b+1+n);    int bn=unique(b+1,b+1+n)-b-1;    build(root[0],1,bn);    for(int i=1;i&lt;=n;i++)    &#123;        int id=lower_bound(b+1,b+1+bn,a[i])-b;        update(root[i-1],root[i],1,bn,id);    &#125;    while(m--)    &#123;        int l,r,k;        cin&gt;&gt;l&gt;&gt;r&gt;&gt;k;        int id=query(root[l-1],root[r],1,bn,k);        cout&lt;&lt;b[id]&lt;&lt;&#x27;\\n&#x27;;    &#125;    return 0;&#125;\n图论单源最短路Floyd\n\n模板题—— 蓝桥公园import sysinput=sys.stdin.readlinen,m,q=map(int,input().split())inf=int(1e18)dp=[[inf]*(n+1) for i in range(n+1)]for i in range(1,n+1):  dp[i][i]=0for i in range(1,m+1):  u,v,w=map(int,input().split())  dp[u][v]=dp[v][u]=min(dp[u][v],w)#Floyd 模板for k in range(1,n+1):  for i in range(1,n+1):    for j in range(1,n+1):      dp[i][j]=min(dp[i][j],dp[i][k]+dp[k][j])for i in range(1,n+1):    for j in range(1,n+1):      if dp[i][j]==inf:        dp[i][j]=-1for _ in range(q):  s,e=map(int,input().split())  print(dp[s][e])\n# Floyd 算法  多个起点--多个终点  多源最短路算法（多对多）# 最简单的最短路径算法# 存图:最简单的矩阵存图# 效率不高，不能用于大图# 动态规划：求图上两点i,j之间的最短距离，按‘从小图到全图’的步骤，在逐步扩大图的过程中计算和更新最短路# 定义状态：dp[k][i][j]: i,j,k是点的编号，范围1--n# 状态dp[k][i][j]表示在包含1--k点的子图上，点对i,j之间的最短路# 状态转移方程 从子图1-k-1 扩展到子图 1-k# dp[k][i][j]=min(dp[k-1][i][j],dp[k-1][i][k]+dp[k-1][k][j])# 初始值：i,j直连 就是他们的边长； 若不直连，赋值为无穷大 / 0x3f3f3f3f3f3f3f3f# 滚动数组优化：dp[i][j]=min(dp[i][j],dp[i][k]+dp[k][j])#                           不经过k     经过k# for k in range(1,n+1):# for i in range(1,n+1):# for j in range(1,n+1):# dp[i][j]=min(dp[i][j],dp[i][k]+dp[k][j])# 只能用于n&lt;300 的小规模图def floyd():    global dp    for k in range(1,n+1):        for i in range(1, n + 1):            for j in range(1, n + 1):                dp[i][j]=min(dp[i][j],dp[i][k]+dp[k][j])# 蓝桥公园# n个点 m条边 q次查询n,m,q=map(int,input().split())INF = 0x3f3f3f3f3f3f3f3fdp=[[INF for _ in range(n+50)] for _ in range(n+50)]# 记录路径for i in range(1,m+1):    u,v,w=map(int,input().split())    dp[u][v]=dp[v][u]=min(dp[u][v],w)floyd()for _ in range(q):    start,end=map(int,input().split())    # 无法到达    if dp[start][end]==INF:        print(-1)    # 起点终点相同    elif start==end:        print(0)    else:        print(dp[start][end])# 1-12\nimport osimport sys# 请在此输入您的代码N, M, Q = map(int, input().split())weight = [[0 if i == j else sys.maxsize for i in range(N + 1) ] for j in range(N + 1)]  # 领接矩阵for i in range(M):    u, v, w = map(int, input().split())    weight[u][v] = min(weight[u][v], w)    weight[v][u] = weight[u][v]for k in range(1, N + 1):  # N次递推    for i in range(1, N + 1):        for j in range(i + 1, N + 1):  # 更新最小值                weight[i][j] = min(weight[i][j], weight[i][k] + weight[k][j])                weight[j][i] = weight[i][j]for i in range(Q):    st, ed = map(int, input().split())    t = weight[st][ed]    if t == sys.maxsize:        print(-1)    else:        print(t)\n模板题——城市间的交易import osimport sys# 请在此输入您的代码# 8336 城市间的交易INF =1e18n, m = map(int, input().split())# 产量、成本和售价a, p, s = [0] * (n+1), [0] * (n+1), [0] * (n+1)f = [[INF] * (n+1) for i in range(n+1)]g = [[0] * (n+1) for i in range(n+1)]for i in range(1, n+1):    a[i], p[i], s[i] = map(int, input().split())# 邻接矩阵初始化for i in range(1, m+1):    u, v, w = map(int, input().split())    f[u][v] = f[v][u] = min(f[u][v], w)for i in range(1, n+1):    f[i][i] = 0# Floydfor k in range(1, n+1):    for i in range(1, n+1):        for j in range(1, n+1):            f[i][j] = min(f[i][j], f[i][k]+f[k][j])# g[i][j]表示城市i的物品运输到城市j可得到的利润 = 城市j的售价 - 城市i的成本 - 从i到j的运输成本ans = 0for i in range(1, n+1):    # 求每个城市的利润    cnt = 0    for j in range(1, n+1):        g[i][j] = s[j] - p[i] - f[i][j]        cnt = max(cnt, g[i][j])    ans += a[i] * cntprint(ans)\nimport osimport sysn,m=map(int,input().split())res=[]for _ in range(n):  a,p,s=map(int,input().split())  res.append((a,p,s))inf=int(1e10)path=[[inf]*(n+1) for _ in range(n+1)]for _ in range(m):  u,v,w=map(int,input().split())  path[u][v]=path[v][u]=min(w,path[u][v])for i in range(1,1+n):  path[i][i]=0for k in range(1,n+1):  for i in range(1,n+1):    for j in range(1,n+1):      path[i][j]=min(path[i][j],path[i][k]+path[k][j])re=0for i in range(1,n+1):  result=0  for j in range(1,n+1):    if path[i][j]!=inf:       result=max(result,res[j-1][2]*res[i-1][0]-res[i-1][0]*res[i-1][1]-path[i][j]*res[i-1][0])  re+=resultprint(re)\nDijkstra\n\n\n模板题——蓝桥王国import osimport sys# 请在此输入您的代码# 1122_蓝桥王国_Dijkstra算法from queue import PriorityQueue  # 导入优先队列from collections import dequeINF = 1e18def dijkstra(s):    # 返回从s出发到所有点的最短路    # d[i]表示从s到i的最短路    d = [INF] * (n + 1)    # vis[i]表示是否出队列（注：与传统BFS不同）    vis = [0] * (n + 1)    q = PriorityQueue()    # 1.将起点入队列，更新距离    d[s] = 0    # 将距离放在前面，才能对距离使用优先队列    q.put((d[s], s))  # 入队用put()    # 当队列非空    while not q.empty():  # 或者写为： while len(q.queue) != 0:        dis, u = q.get()        # 每个点只有第一次出队列是有用的        if vis[u]: continue        vis[u] = 1  # 出队列打标记        # 对于从u出发，到达v，权重为w的边        for v, w in G[u]:            if d[v] &gt; d[u] + w:                d[v] = d[u] + w                q.put((d[v], v))    for i in range(1, n + 1):        if d[i] == INF:            d[i] = -1    # d.pop(0)    return d[1::] # 从1到最后# 皇宫编号为1# 输入n, m = map(int, input().split())G = [[] for i in range(n + 1)]  # 图的存储：邻接表。此题N为10^5，不能用邻接矩阵存图for i in range(m):    u, v, w = map(int, input().split())    G[u].append((v, w))print(*dijkstra(1)) # 列表前面加星号作用是将列表解开（unpacke）成多个独立的参数，传入函数。\n模板题——混境之地3import osimport sys# 3818 混境之地  Dijkstrafrom queue import PriorityQueue# 数据较大时可以进行如下优化import sysinput = sys.stdin.readlineINF = 1e18def get(c):    if c == &#x27;.&#x27;:        return 0    else:        s = &#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;        for i in range(len(s)):            if c == s[i]:                return i + 1        # return ord(c) - ord(&#x27;A&#x27;) + 1def dijkstra():    d = [[INF] * m for _ in range(n)]    vis = [[0] * m for _ in range(n)]    q = PriorityQueue()  # 创建优先队列    # 1.将起点塞入队列    d[x1][y1] = 0    q.put((d[x1][y1], x1, y1))    # 2.当队列非空    while not q.empty():        dis, x, y = q.get()        if x == x2 and y == y2:            return dis        # 每个点只有第一次出队列是有用的        if vis[x][y]:            continue        vis[x][y] = 1  # 出队列打标记        for d elta_x, delta_y in [[1, 0], [0, 1], [-1, 0], [0, -1]]:            xx, yy = x + delta_x, y + delta_y            # 判断未越界、未标记、非障碍物            if 0 &lt;= xx &lt; n and 0 &lt;= yy &lt; m and vis[xx][yy] == 0 and Map[xx][yy] != &quot;#&quot;:                if d[xx][yy] &gt; d[x][y] + get(Map[xx][yy]):  # 写一个get函数获取权重                    d[xx][yy] = d[x][y] + get(Map[xx][yy])                    q.put((d[xx][yy], xx, yy))    return INF# 输入n, m = map(int, input().split())  # 地图大小x1, y1, x2, y2 = map(int, input().split())  # 起始点坐标x1, y1, x2, y2 = x1 - 1, y1 - 1, x2 - 1, y2 - 1# 地图Map = [input() for i in range(n)]e = int(input())  # 剩余能量# 如果能量支撑到达终点，返回Yes，否则，返回No.if e &gt;= dijkstra():  # 不传参，使用全局变量    print(&#x27;Yes&#x27;)else:    print(&#x27;No&#x27;)\n最小生成树Kruskal\n\n模板题——繁忙的都市def kruskal():    # 初始化    n, m = map(int, input().split())    Map = []    for _ in range(m):        u, v, w = map(int, input().split())        Map.append([w, u, v])  # 注意第一个参数是边权    Map.sort()    # 并查集    p = list(range(n+1))    def root(x):        if x != p[x]:            p[x] = root(p[x])        return p[x]    # 非连环时更新    _sum, _max = 0, 0    for w, u, v in Map:        root_u = root(u)        root_v = root(v)        if root_u != root_v:            p[root_u] = root_v            _sum += 1            _max = max(_max, w)    return _sum, _maxprint(*kruskal())\nPrim\n\n\n\n模板题——繁忙的都市import osimport sysn,m=map(int,input().split())e=[]for  _ in range(m):  u,v,w=map(int,input().split())  e.append((w,u,v))#边按照权重进行排序e.sort()#需要一个并查集p=list(range(n+1))def findroot(x):  if x==p[x]:return x  else:    p[x]=findroot(p[x])    return p[x]ans=0#进行遍历所有的边，进行合并：for w,u,v in e:  #只要u和v不在同一集合内就可以进行合并：  rootu=findroot(u)  rootv=findroot(v)  if rootu!=rootv:    p[rootu]=rootv    ans=max(ans,w)print(n-1,ans)\n\n最近共同祖先最近公共祖先\n\n\n模板题——最近公共祖先LCA查询import osimport sys#设置deep数组表示深度。#front数组，表示节点u,前2**i层的爹是谁？？？n=int(input())tree=[[] for _ in range(n+1)]fornt=[[0]*(21) for _ in range(n+1)]#如果你是0你就是孤儿。deep=[0]*(n+1)#0节点没有层数。for i in range(n-1):  u,v=map(int,input().split())  tree[u].append(v)def dfs(er,die):  if die==0:    deep[er]=1#这是第一层,同时，第一层也没有爹啊，也不需要更新如何层数相关节点。  else:    deep[er]=deep[die]+1#更新层数。    fornt[er][0]=die#上一层的点，就是die。    for cc in range(1,21):      if fornt[fornt[er][cc-1]][cc-1]!=0:        fornt[er][cc]=fornt[fornt[er][cc-1]][cc-1]        #倍增法。2**i层之上的点=        #2**(cc-1)上面的点的上面2**(cc-1)的点。就，无限套娃。    for i in tree[er]:    dfs(i,er)#儿子变成新的爹。dfs(1,0)#儿子是根，爹不存在。def find(x,y):  #第一步，拉升。将x拉到和y一个水平。一开始走2**20步，太大，就走2**19步，然后走一半，再走一半  #就像那个乌龟与跑步哥一样。二进制原理使得这个步数遍历后一定是一个高度。  for i in range(20,-1,-1):    if deep[fornt[x][i]]&gt;=deep[y] and fornt[x][i]!=0:      x=fornt[x][i]#自动判断能走不能走，能走则走一大步。x提升到别的节点。  #此时提升必定一样了。  if x==y:    return x#原来你就是我爹！    else:#不是？我们再度提升吧！神明！    for i in range(20,-1,-1):      if fornt[x][i]!=fornt[y][i] and fornt[x][i]!=0 and fornt[y][i]!=0:#相等反而不能决定什么，因为可能不是最近的公共祖先        x=fornt[x][i]        y=fornt[y][i]    return fornt[y][0]#最后，y上面的就是自己的公共祖先。q=int(input())for i in range(q):  x,y=map(int,input().split())  if deep[x]&lt;deep[y]:#我们设x是深节点。    x,y=y,x  print(find(x,y))\n","categories":["刷题","蓝桥国赛"],"tags":["蓝桥杯"]},{"title":"蓝桥国赛知识梳理","url":"/2024/05/24/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/","content":"动态规划基础线性DP\n\n\n动态规划分析步骤\n模板题——破损的楼梯&quot;&quot;&quot;3367 破损的楼梯https://www.lanqiao.cn/problems/3367/learning这是一个典型的线性DP问题，dp[i]表示到达第i阶楼梯的方法数状态转移方程：dp[i]=dp[i-1]+dp[i-2]状态压缩：dp[i]只与dp[i-1]和dp[i-2]有关，所以可以压缩时间复杂度：O(n)空间复杂度：O(n)&quot;&quot;&quot;N = int(1e5 + 10)mod = int(1e9 + 7)n, m = map(int, input().split())a = list(map(int, input().split()))vis = [0] * Nfor i in a: vis[i] = 1dp = [0] * Ndp[0] = 1dp[1] = 1 - vis[1]for i in range(2, n + 1):    if vis[i]:        continue    dp[i] = (dp[i - 1] + dp[i - 2]) % modprint(dp[n])\nn,m=map(int,input().split())a=list(map(int,input().split()))dp=[0]*(n+1)tp=[0]*(n+1)for i in a:  tp[i]=1dp[0]=1dp[1]=1-tp[1]for i in range(2,n+1):  if tp[i]==1:    continue  dp[i]=dp[i-1]+dp[i-2]mod=10**9+7print(dp[i]%mod)\n二维DP\n分析步骤\n模板题——数字三角形import osimport sys# 请在此输入您的代码N = int(input())dp = [list(map(int, input().split())) for _ in range(N)]for i in range(1, N):    for j in range(i + 1):        if j == 0:            dp[i][j] += dp[i - 1][j]        elif j == i:            dp[i][j] += dp[i - 1][j - 1]        else:            dp[i][j] += max(dp[i - 1][j - 1], dp[i - 1][j])print(max(dp[N - 1]))\n\n\n模板题——摆花&#x27;&#x27;&#x27;n种花凑 m盆 每种&lt;a[i]1.分解子问题前i种花，一共j盆，答案是dp[n][m]2.状态转移前i种花有j盆方案数  如何由前i-1种有j盆得出.以下每一种选择是一种方案第i种花可以选0盆,前i-1种花有j盆：dp[i][j] = dp[i-1][j]第i种花可以选1盆,前i-1种花有j-1盆：：dp[i][j] = dp[i-1][j-1]...第i种花可以选a[i]盆,前i-1种花有j-a[i]盆：：dp[i][j] = dp[i-1][j-a[i]]3.边界条件，每种花都不选前i种花 0盆 是 一种方案 dp[i][0] = 1&#x27;&#x27;&#x27;MOD = 10 ** 6 + 7n, m = map(int, input().split())a = [0] + list(map(int, input().split()))dp = [[0] * (m + 1) for i in range(n + 1)]for i in range(n+1):    dp[i][0] = 1# 状态转移,当下做出的选择，利用之前dp,求dp[i][j]for i in range(1,n+1):    for j in range(1,m+1):        for k in range(min(a[i],j)+1):            dp[i][j]+=dp[i-1][j-k]            dp[i][j]%=MODprint(dp[n][m])\n模板题——选数异或n,x = map(int,input().split())a = [0] + list(map(int,input().split()))Mod = 998244353&#x27;&#x27;&#x27; dp[i][j]前i个正整数有j个子序列异或成 j 的方案；答案dp[n][x] dp[i][j] = 选第i个数字 + 不选第i个数字          = dp[i - 1][j ^ a[i]] + dp[i - 1][j]             (因为如果选了第i个数字，那么a[i] ^ 前数 = j, 所以：前数 = j ^ a[i])&#x27;&#x27;&#x27;dp = [[0] * (64) for _ in range(n + 1)]# 初始化为 0dp[0][0] = 1for i in range(1, n + 1):    for j in range(64):        dp[i][j] = (dp[i-1][j] + dp[i-1][j ^ a[i]]) % Modprint(dp[n][x])\nLIS最长上升子序列\n\n模板题——蓝桥勇士n=int(input())a=[0]+list(map(int,input().split()))dp=[1]*(n+1)for i in range(1,n):  for j in range(i+1,n+1):    if a[i]&lt;a[j]:      dp[j]=max(dp[j],dp[i]+1)print(max(dp))\n模板题——合唱队形n = int(input())a = [0] + list(map(int, input().split()))dp1 = [0] * (n + 1)  # dp1[i]表示以i结尾的最长上升子序列长度dp2 = [0] * (n + 1)  # dp2[i]表示以i出发的最长下降子序列长度for i in range(1, n + 1):    dp1[i] = 1    for j in range(1, i):        if a[i] &gt; a[j]:            dp1[i] = max(dp1[i], dp1[j] + 1)for i in range(n, 0, -1):    dp2[i] = 1    for j in range(i + 1, n + 1):        if a[i] &gt; a[j]:            dp2[i] = max(dp2[i], dp2[j] + 1)ans = max((dp1[i] + dp2[i] - 1) for i in range(1, n + 1))print(n-ans)\nLCS最长公共子序列\n\n模板题——最长公共子序列import osimport sys# 这段代码实现的是计算两个序列（a 和 b）的最长公共子序列（Longest Common Subsequence, LCS）的长度。LCS 是一种在计算两个序列相似度时常用的度量方法。这个问题通常通过动态规划来解决。现在，我将逐步解释这段代码的各个部分：# 输入处理n, m = map(int, input().split())a = [0] + list(map(int, input().split()))b = [0] + list(map(int, input().split()))# 首先，通过 input().split() 获取两个整数 n 和 m，分别表示序列 a 和 b 的长度。# 接着，读取这两个序列，并在序列前面各自加上一个 0 作为哨兵值。这样做是为了让序列的索引从 1 开始，方便后续操作。# 初始化动态规划数组dp = [[0] * (m + 1) for _ in range(2)]  # 注意这里是 m，不是 nnow = 0; old = 1# 初始化一个二维动态规划数组 dp，但这里只用到了两行（range(2)），目的是节省空间。因为在计算当前状态时，只需要用到前一行（即上一状态）的数据。m + 1 是因为考虑到从 0 开始到 m 的所有可能位置。# now 和 old 变量用来在这两行之间切换，表示当前行和上一行。# 动态规划过程for i in range(1, n + 1):    now, old = old, now    for j in range(1, m + 1):        dp[now][j] = max(dp[now][j - 1], dp[old][j])        if a[i] == b[j]:             dp[now][j] = max(dp[now][j], dp[old][j - 1] + 1)# 这部分是动态规划的核心。# 外层循环遍历序列 a，内层循环遍历序列 b。# dp[now][j] = max(dp[now][j - 1], dp[old][j])：当前状态是基于之前状态的最大值，这表示如果当前字符不匹配，LCS 长度不变。# 如果当前位置的字符相等（a[i] == b[j]），则检查上一个状态的值并加一，即 dp[now][j] = max(dp[now][j], dp[old][j - 1] + 1)。这反映了找到了一个公共元素，因此当前的最长公共子序列长度增加了 1。# 输出结果print(dp[now][m])# 最后，打印出最长公共子序列的长度，即在遍历完两个序列后，dp 数组最后一个元素（dp[now][m]）的值。# 通过这种方式，代码高效地计算了两个序列的最长公共子序列的长度，同时通过只使用两行的动态规划数组大大减少了空间复杂度。\n\n背包DP01背包\n\n\n模板题——小明的背包1#dp[i][j]    前i件物品，总体积不超过j 的最大价值n,v=map(int,input().split())dp=[[0]*(v+1) for i in range(n+1)]for i in range(1,n+1):    wi,vi=map(int,input().split())    for j in range(0,v+1):        if j&gt;=wi:            dp[i][j]=max(dp[i-1][j],dp[i-1][j-wi]+vi)        else:            dp[i][j]=dp[i-1][j]            print(dp[n][v])\n滚动数组优化\n\n\nn,V=map(int,input().split())dp=[0]*(V+1)for i in range(1,n+1):  w,v=map(int,input().split())  for j in range(V,w-1,-1):    dp[j]=max(dp[j],dp[j-w]+v)print(dp[V])\n完全背包\n\n\n\n模板题——小明的背包2\n# dp[i][j]=max(dp[i-1][j],dp[i][j-wi]+vi)  不取或在先前基础上取第i种（所以可以取多次）n,v=map(int,input().split())dp=[[0]*(v+1) for i in range(n+1)]for  i in range(1,n+1):    wi,vi=map(int,input().split())    for j in range(0,v+1):        if (j&gt;=wi):            dp[i][j]=max(dp[i-1][j],dp[i][j-wi]+vi)        else:            dp[i][j]=dp[i-1][j]print(dp[n][v])\n滚动数组优化import osimport sysN, V = map(int, input().split())items = []for _ in range(N):    w, v = map(int, input().split())    items.append((w, v))dp = [0] * (V + 1)for i in range(1, V + 1):    for w, v in items:        if i &gt;= w:            dp[i] = max(dp[i], dp[i - w] + v)print(dp[V])&#x27;&#x27;&#x27;读取输入的商场物品数量N和小明的背包容量V，以及每种物品的体积和价值。初始化一个长度为V+1的动态规划数组dp，dp[i]表示背包容量为i时所能获得的最大价值。使用动态规划求解，外层循环遍历背包容量从1到V，内层循环遍历每种物品，更新dp[i]的值为dp[i-w]+v和当前dp[i]的较大值。输出dp[V]即为小明所能获得的最大价值。&#x27;&#x27;&#x27;\n多重背包\n\n模板题——小明的背包3\n\n#dp[i][j] =max(dp[i][j],dp[i-1][j-k*wi]+k*vi)  k属于(0，si)n,v=map(int,input().split())dp=[[0]*(v+1) for i in range(n+1)]for i in range(1,n+1):    wi,vi,si=map(int,input().split())    for j in range(0,v+1):        for k in range(0,min(si,j//wi)+1):            dp[i][j]=max(dp[i][j],dp[i-1][j-k*wi]+k*vi)print(dp[n][v])\n滚动数组优化N,V=map(int,input().split())w,v,s=[[0]*(N+1) for _ in range(3)]dp=[0 for _ in range(V+1)]for i in range(1,N+1):  w[i],v[i],s[i]=map(int,input().split())for i in range(1,N+1):  for j in range(s[i]):    for k in range(V,0,-1):      if w[i]&lt;=k:        dp[k]=max(dp[k-w[i]]+v[i],dp[k])print(dp[-1])\n二维费用背包&amp;分组背包\n\n模板题——小蓝的神秘行囊import sysn, v, m = map(int, sys.stdin.readline().split())dp = [[0]*(v + 1) for _ in range(m + 1)]for _ in range(n):    volume, mass, value = map(int, sys.stdin.readline().split())    for i in range(m, 0, -1):        for j in range(v, 0, -1):            if i &gt;= mass and j &gt;= volume:                dp[i][j] = max(dp[i][j], dp[i-mass][j-volume] + value)print(dp[m][v])\nn,v,m=map(int,input().split())dp=[[0]*(m+1) for i in range(v+1)]for i in range(1,n+1):    vi,mi,wi=map(int,input().split())    for j in range(v,vi-1,-1):        for k in range(m,mi-1,-1):            dp[j][k] =max(dp[j][k],dp[j-vi][k-mi]+wi)           print(dp[v][m])\n树形DP自上而下树形DPfrom collections import defaultdictn = int(input())val = [0] + [int(x) for x in input().split()]edges = defaultdict(list)f = [[0, val[i]] for i in range(n + 1)]def add_edge(from_node, to_node):    edges[from_node].append(to_node)def dfs(u, fa):    for v in edges[u]:        if v == fa:            continue        dfs(v, u)        f[u][0] += max(f[v][0], f[v][1])        f[u][1] += f[v][0]for _ in range(n - 1):    u, v = map(int, input().split())    add_edge(u, v)    add_edge(v, u)dfs(1, 0)print(max(f[1][0], f[1][1]))\n自下而上树形DPimport sysfrom collections import defaultdictN = 100005a = [0]*Ndp = [[0]*2 for _ in range(N)]e = defaultdict(list)def dfs(u):    for v in e[u]:        dfs(v)        dp[u][1] += dp[v][0]        dp[u][0] += max(dp[v])    dp[u][1] += a[u]def main():    global N, a, dp, e    n = int(sys.stdin.readline())    st = set(range(1, n+1))    for i in range(1, n+1):        a[i] = int(sys.stdin.readline())    for _ in range(1, n):        x, y = map(int, sys.stdin.readline().split())        e[y].append(x)        st.discard(x)    rt = st.pop()    dfs(rt)    print(max(dp[rt]))if __name__ == &quot;__main__&quot;:    main()\n路径相关树形DPN = 2005e = [[] for _ in range(N)]w = [[] for _ in range(N)]dp = [0]*Nn, m, k = 0, 0, 0dep = [0]*Nf = [0]*Nt = []def dfs(u):    global dp, e, w    for v in e[u]:        dfs(v)        dp[u] += dp[v]    for t in w[u]:        sum = dp[u]        for nw in t[&#x27;vec&#x27;]:            sum -= dp[nw]            for v in e[nw]:                sum += dp[v]        dp[u] = max(dp[u], sum + t[&#x27;val&#x27;])def main():    global n, m, f, e, dep, dp, w, t    n, m = map(int, input().split())    for i in range(2, n+1):        f[i] = int(input())        e[f[i]].append(i)        dep[i] = dep[f[i]] + 1    for i in range(1, m+1):        x, y, val = map(int, input().split())        t.clear()        while x != y:            if dep[x] &gt; dep[y]:                t.append(x)                x = f[x]            else:                t.append(y)                y = f[y]        t.append(x)        w[x].append(&#123;&#x27;vec&#x27;: list(t), &#x27;val&#x27;: val&#125;)    dfs(1)    print(dp[1])if __name__ == &quot;__main__&quot;:    main()\n换根DPfrom collections import defaultdictdef dfs(u, dep, fa):  # 传入当前节点u,深度，父节点    global sum_depth    sum_depth += dep  # 加上当前节点u的深度    # 遍历u的所有子节点    for v in e[u]:        if v == fa:            continue        dfs(v, dep + 1, u)  # 遍历到子节点        siz[u] += siz[v]  # 通过这一步，可以统计u所有子节点数def dfs2(u, fa):  # 用来跟新其余节点为根的解    for v in e[u]:        if v == fa:            continue        # dp[v] = dp[u] - siz[v] + (n - siz[v])        dp[v] = dp[u] - 2 * siz[v] + n  # 当前节点v的解=左边变化值+右边变化值        dfs2(v, u)n = int(input())dp = [0] * (n + 1)  # 用来更新不同节点为根时的深度和siz = [1] * (n + 1)  # 以i为根节点，其左子树的节点数，初始值为1表示仅包含该节点# 建树e = defaultdict(list)for _ in range(n - 1):    u, v = map(int, input().split())    e[u].append(v)    e[v].append(u)# 第一遍dfs,找到以1为根节点的深度和sum_depth = 0  # 用来记录深度和dfs(1, 0, 0)# 第二遍dfs，求出其余点作为根的答案dp[1] = sum_depth  # 6dfs2(1, 0)  # dp=[0, 6, 5, 9, 8, 8]print(max(dp))\n区间DP\n\n普通区间DP模板题——石子合并n = int(input())a = [0] + list(map(int, input().split()))f = [[float(&#x27;inf&#x27;)] * (n+1) for _ in range(n+1)]for i in range(1, n+1):    f[i][i] = 0    a[i] += a[i-1]for length in range(2, n+1):    for i in range(1, n-length+2):        j = i + length - 1        for k in range(i, j):            f[i][j] = min(f[i][j], f[i][k] + f[k+1][j] + a[j] - a[i-1])print(f[1][n])\n模板题——涂色s = input()n = len(s)f = [[float(&#x27;inf&#x27;)] * n for _ in range(n)]for i in range(n):    f[i][i] = 1for length in range(2, n+1):    for i in range(n - length + 1):        j = i + length - 1        if s[i] == s[j]:            f[i][j] = min(f[i + 1][j], f[i][j - 1])        else:            for k in range(i, i + length - 1):                f[i][j] = min(f[i][j], f[i][k] + f[k + 1][j])print(f[0][n - 1])\n模板题——制作回文串m, n = map(int, input().split())s = input()w1 = [0] * 30w2 = [0] * 30f = [[0] * n for _ in range(n)]for i in range(m):    ch, weight1, weight2 = input().split()    w1[ord(ch) - ord(&#x27;a&#x27;)] = int(weight1)    w2[ord(ch) - ord(&#x27;a&#x27;)] = int(weight2)for length in range(2, n+1):    for i in range(n - length + 1):        j = i + length - 1        if s[i] == s[j]:            if length == 2:                f[i][j] = 0            else:                f[i][j] = f[i + 1][j - 1]        else:            f[i][j] = min(                f[i + 1][j] + min(w1[ord(s[i]) - ord(&#x27;a&#x27;)], w2[ord(s[i]) - ord(&#x27;a&#x27;)]),                f[i][j - 1] + min(w1[ord(s[j]) - ord(&#x27;a&#x27;)], w2[ord(s[j]) - ord(&#x27;a&#x27;)])            )print(f[0][n - 1])\n环形区间DP模板题——能量项链n = int(input())v = [0] * (2 * n + 2)a = [0] + list(map(int, input().split()))for i in range(1, n + 1):    v[i] = a[i]    v[i + n] = v[i]f = [[0] * (2 * n + 1) for _ in range(2 * n + 1)]for length in range(2, n + 1):    for i in range(1, 2 * n - length + 2):        j = i + length - 1        for k in range(i, j):            f[i][j] = max(f[i][j], f[i][k] + f[k + 1][j] + v[i] * v[k + 1] * v[j + 1])ans = 0for i in range(1, n + 1):    ans = max(ans, f[i][i + n - 1])print(ans)\n状压DP\n\n模板题——例1MAXN = 105N, M, K = map(int, input().split())a = [0] * MAXNf = [float(&#x27;inf&#x27;)] * (1 &lt;&lt; 20)for i in range(N):    for j in map(int, input().split()):        a[i] |= 1 &lt;&lt; (j - 1)f[0] = 0for i in range(N):    for S in range(1 &lt;&lt; M):        if f[S] &gt; MAXN:            continue        f[S | a[i]] = min(f[S | a[i]], f[S] + 1)print(f[(1 &lt;&lt; M) - 1] if f[(1 &lt;&lt; M) - 1] &lt; MAXN else -1)\n模板题——例2\nimport mathmaxn = 2100000f = [float(&#x27;inf&#x27;)] * maxnlowbit = [0] * maxnline = [[0] * 20 for _ in range(20)]x = [0.0] * maxny = [0.0] * maxneps = 1e-8def equ(a1, b1, c1, a2, b2, c2):    y = (a1 * c2 - a2 * c1) / (a1 * b2 - a2 * b1)    x = (c1 - b1 * y) / a1    return x, yfor i in range(1, (1 &lt;&lt; 18)):    j = 1    while (i &amp; (1 &lt;&lt; (j - 1))):        j += 1    lowbit[i] = jn = int(input())for i in range(1, n + 1):    x[i], y[i] = map(float, input().split())for i in range(1, n + 1):    for j in range(1, n + 1):        if math.isclose(x[i], x[j], abs_tol=eps):            continue        a, b = equ(x[i] * x[i], x[i], y[i], x[j] * x[j], x[j], y[j])        if math.isclose(a, 0, abs_tol=eps):            continue        for k in range(1, n + 1):            if math.isclose(a * x[k] * x[k] + b * x[k], y[k], abs_tol=eps):                line[i][j] |= (1 &lt;&lt; (k - 1))for i in range(1, (1 &lt;&lt; n)):    j = lowbit[i]    f[i | (1 &lt;&lt; (j - 1))] = min(f[i | (1 &lt;&lt; (j - 1))], f[i] + 1)    for k in range(1, n + 1):        f[i | line[j][k]] = min(f[i | line[j][k]], f[i] + 1)print(f[(1 &lt;&lt; n) - 1])\n数位DP期望DP数据结构链表，栈，队列链表\n\n模板题——约瑟夫环n,k,m=map(int,input().split())a=list(range(1,n+1))i=k-1while a:    i=(i+(m-1))%len(a)    print(a.pop(i))\n栈\n模板题——小蓝的括号串1n=int(input())s=input()a=[]ok=Truefor c in s:    if c == &#x27;(&#x27;:        a.append(c)    else:        if len(a) == 0:            ok = False            break        a.pop()if ok and len(a) == 0:    print(&#x27;Yes&#x27;)else:    print(&#x27;No&#x27;)\n队列\n\n\n模板题——队列操作N=int(input())a=[]for i in range(N):    s=list(map(int,input().split()))    if s[0]==1:        a.append(s[1])    elif s[0]==2:        if a:            print(a.pop(0))        else:            print(&quot;no&quot;)    else:        print(len(a))\n堆\n\n\n优先队列\n\n\n模板题——小蓝的神奇复印机from queue import PriorityQueue,QueueN,X=map(int,input().split())a=list(map(int,input().split()))q=Queue()pq=PriorityQueue()for i,x in enumerate(a):  q.put((i,x))  pq.put(-x)time=0while True:  i,x=q.get()  if -x==pq.queue[0]:    pq.get()    time+=1    if i==X:      print(time)      break  else:    q.put((i,x))\nST表RMQ问题\n并查集基础并查集基础\n\n模板题——蓝桥幼儿园# def Findroot(x):#     while x!=p[x]:#         x=p[x]#     return x&#x27;&#x27;&#x27;使用路径压缩&#x27;&#x27;&#x27;def Findroot(x):    if x==p[x]:return x    #路径压缩    p[x]=Findroot(p[x])    return p[x]def Merge(x,y):    rootx,rooty=Findroot(x),Findroot(y)    p[rootx]=rootydef Query(x,y):    rootx,rooty=Findroot(x),Findroot(y)    return rootx==rootyn,m=map(int,input().split())p=list(range(n+1))for _ in range(m):    op,x,y=map(int,input().split())    if op ==1:        Merge(x,y)    else:        if Query(x,y):            print(&quot;YES&quot;)        else:            print(&quot;NO&quot;)\n路径压缩\n模板题——星球大战import osimport sysM = 200010; N = 2 * Mn, m = map(int, input().split())father = [0] * (n + 10)                 #并查集板块def init():    for i in range(n + 10):        father[i] = idef find_father(x):    if x != father[x]: father[x] = find_father(father[x])    return father[x]def unite(x, y):    father[find_father(x)] = find_father(y)come = [0] * N; to = [0] * N;   #存储每个边g = [[] for _ in range(N)]      #邻接表for i in range(m):    a, b = map(int, input().split())    g[a].append(b); g[b].append(a)    come[i] = a; to[i] = b broken = [0] * (n + 10)                     #记录每个点是否被修坏destroy = []k = int(input())for i in range(k):    b = int(input())    broken[b] = 1    destroy.append(b)init()res = n - k             #先计算所有剩下星球的连通块数，(最后一轮的结果)for i in range(m):    l = come[i]; r = to[i]    fl, fr = find_father(l), find_father(r)    if not broken[l] and not broken[r] and fl != fr:        res -= 1        #unite(l, r)        father[fl] = frans = [res]for i in range(len(destroy) - 1, -1, -1):       #顺序破坏，相当于倒序修建    c = destroy[i]    broken[c] = 0    res += 1                                    #修好一个星球，连通块会多一个    for j in g[c]:        fc, fp = find_father(c), find_father(j)        if not broken[j] and fc != fp:            res -= 1            father[fc] = fp    ans.append(res)for i in range(len(ans) - 1, -1, -1):           #倒序输出结果    print(ans[i])\n可撤销并查集\n\n\n\n\n\n\n\n\n\n\n可撤销并查集定义\n\n算法原理\n带权并查集\n\n\n\n\n树上问题树的基本概念\n\n二叉树\n\n模板题——完全二叉树的权值import maths = []n = int(input())x = list(map(int, input().split()))deep = int(math.log(n, 2)) + 1  # 完全二叉树求深度公式for i in range(deep):  # 按层数来遍历    s.append(sum(x[2 ** i - 1:2 ** i + 2 ** i - 1]))  # 切片出每层的节点，并计算其权值print(s.index(max(s)) + 1)  # 找出权值最大的层级，并返回其索引\n\n树的遍历\n先序遍历\n\n中序遍历\n后序遍历\n层序遍历\n树的遍历\n\n模板题——欧涛爬树import syssys.setrecursionlimit(100000)input=sys.stdin.readlinedef dfs(u,fa):#进行判断是否是叶子节点    path.append(s[u])    flag=True    for v in G[u]:        if v==fa:continue        dfs(v,u)        flag=False    if flag:        S.add(&#x27;&#x27;.join(path))    path.pop()while True:    try:        n=int(input())        #邻接表进行存放树        G=[[] for _ in range(n+1)]        s=&#x27; &#x27;+input()        for _ in range(n-1):            u,v=map(int,input().split())            G[u].append(v)            G[v].append(u)        path=[]        S=set()        dfs(1,-1)        print(len(S))    except:        break\ndef read():    import sys    return sys.stdin.readline().strip()def dfs(root, fa):    path.append(s[root])    flag = True    for to in vis[root]:        if to == fa:            continue        dfs(to, root)        flag = False    if flag:        result.add(&quot;&quot;.join(path))    path.pop()# 多次输入模板while True:    try:        n = int(read())        s = read()        vis = [[] for _ in range(n)]        for _ in range(n - 1):            u, v = map(int, read().split())            u -= 1            v -= 1            vis[u].append(v)            vis[v].append(u)        result = set()        path = []        dfs(0, -1)        print(len(result))    except:        break\n树的直径与重心树的直径\n\n\n模板题——直径import osimport sysinput = sys.stdin.readlinesys.setrecursionlimit(100000)def dfs(u, fa, pre=None):    global S    if d[u] &gt; d[S]: S = u    for v, w in G[u]:        if v == fa: continue        d[v] = d[u] + w        if pre: pre[v] = u        dfs(v, u, pre)n = int(input())G = [[] for i in range(n + 1)]d = [0] * (n + 1)pre = [0] * (n + 1)for _ in range(n - 1):    u, v, w = map(int, input().split())    G[u].append([v, w])    G[v].append([u, w])S = 1dfs(1, 0)d[S] = 0dfs(S, 0, pre)L = [S]L_list = set()while S != 0:    L_list.add(S)    S = pre[S]for u in L_list:    for i, (v, w) in enumerate(G[u]):        if v in L_list:            G[u][i] = [v, w - 1]S = 1dfs(1, 0)d[S] = 0dfs(S, 0)L2 = d[S]print(L)print(L - L2)\n\nLCA最近公共祖先\n\n\n模板题——最近公共祖先LCA查询import osimport sys#设置deep数组表示深度。#front数组，表示节点u,前2**i层的爹是谁？？？n=int(input())tree=[[] for _ in range(n+1)]fornt=[[0]*(21) for _ in range(n+1)]#如果你是0你就是孤儿。deep=[0]*(n+1)#0节点没有层数。for i in range(n-1):  u,v=map(int,input().split())  tree[u].append(v)def dfs(er,die):  if die==0:    deep[er]=1#这是第一层,同时，第一层也没有爹啊，也不需要更新如何层数相关节点。  else:    deep[er]=deep[die]+1#更新层数。    fornt[er][0]=die#上一层的点，就是die。    for cc in range(1,21):      if fornt[fornt[er][cc-1]][cc-1]!=0:        fornt[er][cc]=fornt[fornt[er][cc-1]][cc-1]        #倍增法。2**i层之上的点=        #2**(cc-1)上面的点的上面2**(cc-1)的点。就，无限套娃。    for i in tree[er]:    dfs(i,er)#儿子变成新的爹。dfs(1,0)#儿子是根，爹不存在。def find(x,y):  #第一步，拉升。将x拉到和y一个水平。一开始走2**20步，太大，就走2**19步，然后走一半，再走一半  #就像那个乌龟与跑步哥一样。二进制原理使得这个步数遍历后一定是一个高度。  for i in range(20,-1,-1):    if deep[fornt[x][i]]&gt;=deep[y] and fornt[x][i]!=0:      x=fornt[x][i]#自动判断能走不能走，能走则走一大步。x提升到别的节点。  #此时提升必定一样了。  if x==y:    return x#原来你就是我爹！    else:#不是？我们再度提升吧！神明！    for i in range(20,-1,-1):      if fornt[x][i]!=fornt[y][i] and fornt[x][i]!=0 and fornt[y][i]!=0:#相等反而不能决定什么，因为可能不是最近的公共祖先        x=fornt[x][i]        y=fornt[y][i]    return fornt[y][0]#最后，y上面的就是自己的公共祖先。q=int(input())for i in range(q):  x,y=map(int,input().split())  if deep[x]&lt;deep[y]:#我们设x是深节点。    x,y=y,x  print(find(x,y))\n树上差分\n问题引入\n\n\n\n\n\n模板题——import sysimport mathfrom collections import defaultdictmaxn = 110000n, k = map(int, sys.stdin.readline().split())maxx = int(math.log2(n))edge = defaultdict(list)head = [0] * (n + 1)dep = [0] * (n + 1)dlt = [0] * (n + 1)fa = [[0] * 20 for _ in range(n + 1)]cnt = 0def add_edge(a, b, dis):    global cnt    cnt += 1    edge[cnt] = [head[a], b, dis]    head[a] = cnt    cnt += 1    edge[cnt] = [head[b], a, dis]    head[b] = cntfor _ in range(n - 1):    a, b, dis = map(int, sys.stdin.readline().split())    add_edge(a, b, dis)dfs(1)for _ in range(k):    a, b, x = map(int, sys.stdin.readline().split())    dlt[a] += x    dlt[b] += x    c = lca(a, b)    dlt[c] -= 2 * xdfs1(1)for i in range(1, n + 1):    print(dlt[i], end=&#x27; &#x27;)print()\nDFS序\n\n\n\n\n\n\n\n\n\n\n\n\n模板题——异或和dfs序和树状数组n, m = map(int, input().split())v = [0] + list(map(int, input().split()))g = [[] for _ in range(n + 1)]for _ in range(n - 1):    u, va = map(int, input().split())    g[u].append(va)    g[va].append(u)tree = [0] * (n + 1)a = [[0, 0] for _ in range(n + 1)] # 存dfs序cnt = 0def dfs(node, fa):    global cnt    cnt += 1    a[node][0] = cnt    for i in g[node]:        if i != fa:            dfs(i, node)    a[node][1] = cntdfs(1, 0)def lowbit(x):    return x &amp; (-x)def update(x, d):    while x &lt;= n:        tree[x] ^= d        x += lowbit(x)        def query(x):    ans = 0    while x:        ans ^= tree[x]        x -= lowbit(x)    return ansfor i in range(1, n + 1):    update(a[i][0], v[i])for _ in range(m):    o = list(map(int, input().split()))    if o[0] == 2:        print(query(a[o[1]][1]) ^ query(a[o[1]][0] - 1))    else:        x, y = o[1], o[2]        update(a[x][0], v[x] ^ y)        v[x] = y\n模拟暴力代码n, m = map(int, input().split())a = [0] + list(map(int, input().split()))g = [[] for i in range(n + 1)]for _ in range(n - 1):    c, d =map(int, input().split())    g[c].append(d)    g[d].append(c)dep = [0] * (n + 1)dep[1] = 1def depth(node, fa):    for i in g[node]:        if i != fa:            dep[i] = dep[node] + 1            depth(i, node)depth(1, 0)def dfs(node):    for i in g[node]:        if dep[i] &gt; dep[node]:            li.append(a[i])            dfs(i)def query(n):    global li    li = [a[n]]    dfs(n)    ans = li[0]    for i in range(1, len(li)):        ans = ans ^ li[i]    print(ans)def change(x, y):    a[x] = yfor _ in range(m):    o = list(map(int, input().split()))    if o[0] == 2: query(o[1])    else: change(o[1], o[2])\n利用邻接表打印树结构，然后根据子树根节点寻找打印子树的元素，存到列表中，最后对列表的所有元素（即子树的所有点）进行异或和运算\nimport osimport sysn, m = map(int, input().split())  # 读取输入的 n 和 mvalue = list(map(int, input().split()))  # 读取输入的值列表value.insert(0, 0)  # 在值列表的最前面插入 0,根节点为1，索引从1开始yihuo = []  # 存储异或运算结果的列表tree = [[] for _ in range(n + 1)]  # 初始化邻接表,表示树结构for i in range(n - 1):  # 读取 n-1 次输入    a, b = map(int, input().split())    a, b = min(a, b), max(a, b)    tree[a].append(b)  # 在 a 结点的邻接表中添加 b 结点，说明b为a的子节点for i in range(m):  # 读取 m 次操作输入    op = list(map(int, input().split()))    if op[0] == 1:  # 如果是操作 1        value[op[1]] = op[2]  # 更新点权    else:  # 如果是操作 2        x = op[1]#子树根节点        vis = [x]  # 把子树存到该列表里        qfront = 0  # 队列的头指针        qend = 1  # 队列的尾指针        while qfront != qend:  # 当队列不为空时            if tree[vis[qfront]] != []:  # 该节点有子节点                vis.extend(tree[vis[qfront]])  # 将子节点存到子树中                qend += len(tree[vis[qfront]])  # 更新队列的尾指针            qfront += 1  # 更新队列的头指针        ans = value[vis[0]]  # 初始化异或运算的结果        for i in range(1, len(vis)):  # 遍历访问列表中的结点            ans ^= value[vis[i]]  # 对每个结点的值进行异或运算        yihuo.append(ans)  # 将异或运算的结果加入到结果列表中for i in yihuo:  # 遍历结果列表    print(i)  # 输出每个异或运算的结果\n树链剖分\n\n重链部分\n\n\n\n\n\n\n\n\n树链部分的性质\n\n\n\n树形数据结构树状数组基础lowbit操作\n树状数组\n\n\n\n模板题——单点修改，区间查询N = 100100#初始化树状数组 为0f = [0] * N#求下标为x的最小区间长度def lowbit(x):    return x &amp; (-x)#树状数组更新函数def upd(pos,v):#pos：下标 v：值    #在下标为pos的区间加上v 并且在每个有包含pos的大区间加上v    #包含当前区间的大区间：在pos的位置上加lowbit(pos)便能得到大区间    while pos &lt;= n:        f[pos] += v        pos += lowbit(pos)#得到1-pos位置的前缀和def get(pos):    res = 0    while pos &gt; 0:#加上组成pos每一个区间的和        res += f[pos]        pos -= lowbit(pos)    return resn = int(input())data = input().split()for i in range(0,n):    x = int(data[i])    #树状数组初始化都为0，需要将原数组每个值通过upd方法将每个值加入树状数组    upd(i+1,x)m = int(input())for _ in range(m):    opt,a,b = map(int,input().split())    if opt == 1:        upd(a,b)#更新    else:        #区间[a,b] = [1,b] - [1,a-1]        print(get(b) - get(a-1))\nimport osimport sysN = int(input())n = list(map(int,input().split()))m = int(input())for i in range(m):  s,a,b = map(int,input().split())  if s == 1:    n[a-1] += b  if s == 2:    print(sum(n[a-1:b]))\n\n树状数组\n模板题——殷老师排队import osimport sysdef lowbit(x):  return x &amp; (-x)def query(x):  ans = 0  while x:    ans += tree[x]    x -= lowbit(x)  return ans def add(x,y):  while x &lt;= n:    tree[x] += y    x += lowbit(x)n, m = map(int,input().split())a =[0] + list(map(int,input().split()))tree = [0] * (n + 1)for i in range(1,n+1):  add(i,a[i])for i in range(m):  lt = list(map(int,input().split()))  if lt[0] == 1:    x, y = lt[1], lt[2]    add(x,y - a[x])    a[x] = y  else:    x = lt[1]    ans = (2 * x - n - 2) * a[x] + query(n) - 2*query(x-1)    print(ans)\n二维树状数组\n\n\n模板题——\n树状数组上二分\n模板题——maxn = 110000ans = [0] * maxntree = [0] * maxna = [0] * maxndef lowbit(x):    return x &amp; -xdef add(pos, x):    while pos &lt; maxn:        tree[pos] += x        pos += lowbit(pos)def query(pos):    res = 0    while pos &gt; 0:        res += tree[pos]        pos -= lowbit(pos)    return resn = int(input())nums = list(map(int, input().strip().split()))for i in range(1, n + 1):    a[i] = nums[i - 1]    add(i, 1)for i in range(n, 0, -1):    l, r = 1, n    while l &lt;= r:        mid = (l + r) // 2        if query(mid) &lt; a[i] + 1:            l = mid + 1        else:            r = mid - 1    ans[i] = r    add(r, -1)for i in range(1, n + 1):    print(ans[i], end=&#x27; &#x27;)\n线段树-动态开点\n\n\n\n\n\n\n\n\n\n例题\nstruct Tree &#123;    int l, r, n, ls, rs;&#125;void update(int &amp;t, int l, int r, int pos, int n) &#123;    if (!t) &#123;        t = ++ cnt;        tree[t].l = l;        tree[t].r = r;    &#125;    if (l == r) &#123;        tree[t].n = n;        return;    &#125;    int mid = (l + r) &gt;&gt; 1;    if (pos &lt;= mid) &#123;        update(tree[t].ls, l, mid, pos, n);    &#125; else &#123;        update(tree[t].rs, mid + 1, r, pos, n);    &#125;&#125;int getnum(int t, int l, int r) &#123;    if (!t) &#123;        return 0;    &#125;    if (tree[t].l == l &amp;&amp; tree[t].r == r) &#123;        return tree[t].n;    &#125;    int mid = (tree[t].l + tree[t].r) &gt;&gt; 1;    if (r &lt;= mid) &#123;        return getnum(tree[t].ls, l, r);    &#125; else if (l &gt; mid) &#123;        return getnum(tree[t].rs, l, r);    &#125; else &#123;        return getnum(tree[t].ls, l, mid) + getnum(tree[t].rs, mid + 1, r);    &#125;&#125;\n线段树-标记永久化\n\n\n\n\n\n\n\n\n案例void build(int t, int l, int r, int *v) &#123;    _l[t] = l;    _r[t] = r;    if (l == r) &#123;        _v[t] = v[l];        return ;    &#125;    int mid = (l + r) &gt;&gt; 1;    build(t &lt;&lt; 1, l, mid, v);    build(t &lt;&lt; 1 | 1, mid + 1, r, v);    _v[t] = _v[t &lt;&lt; 1] + _v[t &lt;&lt; 1 | 1];&#125;void update(int t, int l, int r, int k) &#123;    _v[t] += k * (r - l + 1);    if (_l[t] == l &amp;&amp; _r[t] == r) &#123;        _laz[t] += k;        return ;    &#125;    int mid = (_l[t] + _r[t]) &gt;&gt; 1;    if (r &lt;= mid) &#123;        update(t &lt;&lt; 1, l, r, k);    &#125; else if (l &gt; mid) &#123;        update(t &lt;&lt; 1 | 1, l, r, k);    &#125; else &#123;        update(t &lt;&lt; 1, l, mid, k);        update(t &lt;&lt; 1 | 1, mid + 1, r, k);    &#125;&#125;int getv(int t, int l, int r, int sum) &#123;    if (_l[t] == l &amp;&amp; _r[t] == r) &#123;        return _v[t] + sum * (_r[t] - _l[t] + 1);;    &#125;    int mid = (_l[t] + _r[t]) &gt;&gt; 1;    if (r &lt;= mid) &#123;        return getv(t &lt;&lt; 1, l, r, sum + _laz[t]);    &#125; else if (l &gt; mid) &#123;        return getv(t &lt;&lt; 1 | 1, l, r, sum + _laz[t]);    &#125; else &#123;        return getv(t &lt;&lt; 1, l, mid, sum + _laz[t])            + getv(t &lt;&lt; 1 | 1, mid + 1, r, sum + _laz[t]);    &#125;&#125;\n线段树维护矩阵\n\n\n\nvoid build(int t, int l, int r) &#123;    _l[t] = l;    _r[t] = r;    _v[t] = _E;    if (l == r) &#123;        return ;    &#125;    int mid = (l + r) &gt;&gt; 1;    build(t &lt;&lt; 1, l, mid);    build(t &lt;&lt; 1 | 1, mid + 1, r);&#125;void update(int t, int pos, MATRIX &amp;v) &#123;    if (_l[t] = _r[t]) &#123;        _v[t] = v;        return ;    &#125;    int mid = (_l[t] + _r[t]) &gt;&gt; 1;    if (pos &lt;= mid) &#123;        update(t &lt;&lt; 1, pos, v);    &#125; else &#123;        update(t &lt;&lt; 1 | 1, pos, v);    &#125;    _v[t] = _v[t &lt;&lt; 1] * _v[t &lt;&lt; 1 | 1];&#125;MATRIX getv(int t, int l, int r) &#123;    if (_l[t] == l &amp;&amp; _r[t] == r) &#123;        return _v[t];    &#125;    int mid = (_l[t] + _r[t]) &gt;&gt; 1;    if (r &lt;= mid) &#123;        return getv(t &lt;&lt; 1, l, r);    &#125; else if (l &gt; mid) &#123;        return getv(t &lt;&lt; 1 | 1, l, r);    &#125; else &#123;        return getv(t &lt;&lt; 1, l, mid) * getv(t &lt;&lt; 1 | 1, mid + 1, r);    &#125;&#125;\n线段树维护哈希\n\n\n\n\n\nbs1= []bs2= []mod1 = 998244353mod2 = 19260817bas = 233s = []class asdf:    def __init__(self, h1, h2, length):        self.h1 = h1        self.h2 = h2        self.length = length        def __add__(self, c):        return asdf((self.h1 * bs1[c.length] + c.h1) % mod1, (self.h2 * bs2[c.length] + c.h2) % mod2, self.length + c.length)        def __eq__(self, c):        return self.h1 == c.h1 and self.h2 == c.h2 and self.length == c.lengthdef build(l, r, rt):    if l == r:        s[rt] = asdf(ord(a[l]), ord(a[l]), 1)        return s[rt]    s[rt] = build(l, (l + r) // 2, rt * 2) + build((l + r) // 2 + 1, r, rt * 2 + 1)    return s[rt]def query(l, r, rt, x, y):    if x &lt;= l and r &lt;= y:        return s[rt]    if y &lt;= (l + r) // 2:        return query(l, (l + r) // 2, rt * 2, x, y)    if x &gt; (l + r) // 2:        return query((l + r) // 2 + 1, r, rt * 2 + 1, x, y)    return query(l, (l + r) // 2, rt * 2, x, y) + query((l + r) // 2 + 1, r, rt * 2 + 1, x, y)def modify(l, r, rt, ad, ch):    if l == r:        s[rt] = asdf(ord(ch), ord(ch), 1)        return s[rt]    if ad &lt;= (l + r) // 2:        s[rt] = modify(l, (l + r) // 2, rt * 2, ad, ch) + s[rt * 2 + 1]    else:        s[rt] = s[rt * 2] + modify((l + r) // 2 + 1, r, rt * 2 + 1, ad, ch)    return s[rt]n = int(input())a = input()a = &quot;!&quot; + abs1.append(1)bs2.append(1)for i in range(n):    bs1.append(bs1[i]*bas%mod1)    bs2.append(bs2[i]*bas%mod2)s = [None] * (4 * (n+5))build(1, n, 1)q = int(input())for _ in range(q):    ls=input().split()    opt = ls[0]    if opt == &#x27;1&#x27;:        ad = int(ls[1])        ch = ls[2]        modify(1, n, 1, int(ad), ch)    else:        l1 = int(ls[1])        r1 = int(ls[2])        l2 = int(ls[3])        r2 = int(ls[4])        x = query(1, n, 1, l1, r1)        y = query(1, n, 1, l2, r2)        if x == y:            print(&quot;YES&quot;)        else:            print(&quot;NO&quot;)\n可持久化线段树\n\n\n\n\n\n\n\n\n可持久化线段树struct NODE &#123;    int v, ls, rs;&#125;struct SEGTREE &#123;    int cnt = 0;    int root[MAXN &lt;&lt; 5];    NODE node[MAXN &lt;&lt; 5];&#125;void SEGTREE::update(int _t, int &amp;t, int l, int r, int pos, int k) &#123;    if (!t) &#123;        t = ++cnt;        node[t].v = node[_t].v;    &#125;    if (l == r) &#123;        node[t].v += k;        return;    &#125;    int mid = (l + r) &gt;&gt; 1;    if (pos &lt;= mid) &#123;        node[t].rs = node[_t].rs;        update(node[_t].ls, node[t].ls, l, mid, pos, k);    &#125; else &#123;        node[t].ls = node[_t].ls;        update(node[_t]).rs, node[t].rs, mid + 1, r, pos, k);    &#125;    node[t].v = node[node[t].ls].v + node[node[t].rs].v;&#125;int SEGTREE::getV(int t, int _l, int _r, int l, int r) &#123;    if (!t) &#123;        return 0;    &#125;    if (l == _l &amp;&amp; r == _r) &#123;        return node[t].v;    &#125;    int mid = (_l + _r) &gt;&gt; 1;    if (r &lt;= mid) &#123;        return getV(node[t].ls, _l, mid, l, r);    &#125; else if (l &gt; mid) &#123;        return getV(node[t].rs, mid + 1, _r, l, r);    &#125; else &#123;        return getV(node[t].ls, _l, mid, l, mid)            + getV(node[t].rs, mid + 1, _r, mid + 1, r);    &#125;&#125;\n模板题——区间第k小#include&lt;bits/stdc++.h&gt;using namespace std;#define lc(x) tr[x].l#define rc(x) tr[x].rconst int N=2e5+6;int n,m,a[N],b[N];struct Node &#123; int l,r,s;//左右儿子，该节点在值域中的个数&#125;tr[N*20];int idx,root[N];void build(int &amp;x,int l,int r)&#123;    x=++idx;    if(l==r)return ;    int mid=(l+r)&gt;&gt;1;    build(lc(x),l,mid);    build(rc(x),mid+1,r);&#125;void update(int x,int &amp;y,int l,int r,int v)&#123;    y=++idx;    tr[y]=tr[x];    tr[y].s++;    if(l==r)return;    int mid=(l+r)&gt;&gt;1;    if(v&lt;=mid)        update(lc(x),lc(y),l,mid,v);    else        update(rc(x),rc(y),mid+1,r,v);&#125;int query(int x,int y,int l,int r,int k)&#123;    if(l==r)return l;    int mid=(l+r)&gt;&gt;1;    int s=tr[lc(y)].s-tr[lc(x)].s;    if(k&lt;=s)        return query(lc(x),lc(y),l,mid,k);    else         return query(rc(x),rc(y),mid+1,r,k-s);&#125;int main()&#123;    ios::sync_with_stdio(0),cin.tie(0),cout.tie(0);    cin&gt;&gt;n&gt;&gt;m;    for(int i=1;i&lt;=n;i++)    &#123;        cin&gt;&gt;a[i];        b[i]=a[i];    &#125;    sort(b+1,b+1+n);    int bn=unique(b+1,b+1+n)-b-1;    build(root[0],1,bn);    for(int i=1;i&lt;=n;i++)    &#123;        int id=lower_bound(b+1,b+1+bn,a[i])-b;        update(root[i-1],root[i],1,bn,id);    &#125;    while(m--)    &#123;        int l,r,k;        cin&gt;&gt;l&gt;&gt;r&gt;&gt;k;        int id=query(root[l-1],root[r],1,bn,k);        cout&lt;&lt;b[id]&lt;&lt;&#x27;\\n&#x27;;    &#125;    return 0;&#125;\n扫描线与二维数点\n\n\n\n二维数点\n\n\n#include&lt;bits/stdc++.h&gt;using namespace std;#define maxn 110000struct Point&#123;    int x,y;&#125;point[maxn];struct Rect&#123;    int p1,p2,q1,q2,id;&#125;rect[maxn];int n,m,ans[maxn];int len[maxn],cnt;bool cmp(const Point &amp;a,const Point &amp;b)&#123;    return a.x &lt; b.x;&#125;bool cmp1(const Rect &amp;a,const Rect &amp;b)&#123;    return a.p1&lt;b.p1;&#125;bool cmp2(const Rect &amp;a,const Rect &amp;b)&#123;    return a.q1&lt;b.q1;&#125;struct Node&#123;    int sum;&#125;tree[maxn&lt;&lt;1];void pushup(int rt)&#123;    tree[rt].sum=tree[rt&lt;&lt;1].sum+tree[rt&lt;&lt;1|1].sum;&#125;void add(int rt,int l,int r,int x)&#123;    if(l==r)&#123;        if(l==x)tree[rt].sum+=1;        return ;    &#125;    int mid=(l+r)&gt;&gt;1;    if(x&lt;=mid)add(rt&lt;&lt;1,l,mid,x);    if(x&gt;mid)add(rt&lt;&lt;1|1,mid+1,r,x);    pushup(rt);&#125;int query(int rt,int l,int r,int x,int y)&#123;    if(x&lt;=l&amp;&amp;r&lt;=y)&#123;        return tree[rt].sum;    &#125;    int mid=(l+r)&gt;&gt;1;    int ans=0;    if(x&lt;=mid)ans+=query(rt&lt;&lt;1,l,mid,x,y);    if(y&gt;mid)ans+=query(rt&lt;&lt;1|1,mid+1,r,x,y);    pushup(rt);    return ans;&#125;int main()&#123;    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);    for(int i=1;i&lt;=n;i++)&#123;        scanf(&quot;%d%d&quot;,&amp;point[i].x,&amp;point[i].y);        len[++cnt]=point[i].x,len[++cnt]=point[i].y;    &#125;    for(int i=1;i&lt;=m;i++)&#123;        int a,b,c,d;        scanf(&quot;%d%d%d%d&quot;,&amp;a,&amp;b,&amp;c,&amp;d);        rect[i]=&#123;a,b,c,d,i&#125;;        len[++cnt]=a;len[++cnt]=b;len[++cnt]=c;len[++cnt]=d;    &#125;    sort(len+1,len+cnt+1);    int tot=unique(len+1,len+cnt+1)-len-1;    for(int i=1;i&lt;=n;i++)&#123;        point[i].x=lower_bound(len+1,len+cnt+1,point[i].x)-len;        point[i].y=lower_bound(len+1,len+cnt+1,point[i].y)-len;    &#125;    for(int i=1;i&lt;=m;i++)&#123;        rect[i].p1=lower_bound(len+1,len+cnt+1,rect[i].p1)-len;        rect[i].q1=lower_bound(len+1,len+cnt+1,rect[i].q1)-len;        rect[i].p2=lower_bound(len+1,len+cnt+1,rect[i].p2)-len;        rect[i].q1=lower_bound(len+1,len+cnt+1,rect[i].q2)-len;    &#125;    sort(point+1,point+n+1,cmp);    sort(rect+1,rect+m+1,cmp1);    int pos=0;    for(int i=1;i&lt;=m;i++)&#123;        while(rect[i].p1&gt;point[pos+1].x&amp;&amp;pos&lt;=n)&#123;            pos+=1;            add(1,1,n,point[i].y);        &#125;        ans[rect[i].id]-=query(1,1,n,rect[i].p2,rect[i].q2);    &#125;    memset(tree,0,sizeof(tree));    sort(rect+1,rect+m+1,cmp);    pos=0;    for(int i=1;i&lt;=m;i++)&#123;        while(rect[i].q1&gt;=point[pos+1].x&amp;&amp;pos&lt;=n)&#123;            pos+=1;            add(1,1,n,pos[i].y);        &#125;        ans[rect[i].id]+=query(1,1,n,rect[i].p2,rect[i].q2);    &#125;    for(int i=1;i&lt;=m;i++)printf(&quot;%d\\n&quot;,ans[i]);    return 0;&#125;\n平衡树-Splay\n\n\n\n平衡树-FHQ_Treap无旋Treap\n无旋Treap的结构\n基本操作\n\n\n\n\n\n案例struct NODE &#123;    int val;    int cnt;    int rev;    int prio;    int size;    int ch[2];&#125;struct FHQTREAP &#123;    int root;    int size;    NODE node[MAXN];&#125;pair&lt;int, int&gt; split_by_val(int t, int val) &#123;    if (!t) &#123;        return &#123;0, 0&#125;;    &#125;    check_rev(t);    if (node[t].val &lt;= val) &#123;        auto tmp = split_by_val(node[t].ch[1], val);        node[t].ch[1] = tmp.first;        update_size(t);        return &#123;t, tmp.second&#125;;    &#125; else &#123;        auto tmp = split_by_val(node[t].ch[0], val);        node[t].ch[0] = tmp.second;        update_size(t);        return &#123;tmp.first, t&#125;;    &#125;&#125;tuple&lt;int, int, int&gt; split_by_rank(int t, int k) &#123;    if (!t) &#123;        return &#123;0, 0, 0&#125;;    &#125;    check_rev(t);    int lt, mt, rt;    if (k &lt;= node[node[t].ch[0]].size()) &#123;        tie(lt, mt, rt) = split_by_rank(node[t].ch[0], k);        node[t].ch[0] = rt;        update_size(t);        return &#123;lt, mt, t&#125;;    &#125; else if (k &gt; node[node[t]].ch[0].size() + node[t].cnt) &#123;        tie(lt, mt, rt) = split_by_rank(node[t].ch[1], k - node[node[t].ch[0]].size() - node[t].cnt);        node[t].ch[1] = lt;        update_size(t);        return &#123;t, mt, rt&#125;;    &#125; else &#123;        lt = node[t].ch[0];        rt = node[t].ch[1];        check_rev(lt);        check_rev(rt);        node[t].ch[0] = 0;        upda[t].ch[1] = 0;        update_size(t);        return &#123;lt, t, rt&#125;;    &#125;&#125;int merge(int lt, int rt) &#123;    if (!lt) &#123;        return rt;    &#125; else if (!rt) &#123;        return lt;    &#125;    check_rev(lt);    check_rev(rt);    if (node[lt].prio &lt; node[rt].prio) &#123;        node[lt].ch[1] = merge(node[lt].ch[1], rt);        update_size(lt);        return lt;    &#125; else &#123;        node[rt].ch[0] = merge(lt, node[rt].ch[0]);        update_size(rt);        return rt;    &#125;&#125;void insert(int val) &#123;    int lt, mt, rt;    tie(lt, rt) = split_by_val(root, val);    tie(lt, mt) = split_by_val(lt, val - 1);    if (!mt) &#123;        mt = new_node(val);    &#125; else &#123;        node[mt].cnt ++;        update_size(mt);    &#125;    root = merge(merge(lt, mt), rt);&#125;void del(int val) &#123;    int lt, mt, rt;    tie(lt, rt) = split_by_val(root, val);    tie(lt, mt) = split_by_val(lt, val - 1);    unode[mt].cnt --;    update_size(mt);    if (node[mt].cnt == 0) &#123;        clear(mt);    &#125; else &#123;        lt = merge(lt, mt);    &#125;    root = merge(lt, rt);&#125;void reverse(int l, int r) &#123;    int t1, t2, t3, t4, t5;    tie(t1, t2, t3) = split_by_rank(root, l - 1);    tie(t3, t4, t5) = split_by_ranl(t3, r - l + 2);    node[t3].rev = 1;    root = merge(merge(merge(merge(t1, t2), t3), t4), t5);&#125;void check_rev(int t) &#123;    if (node[t].rev) &#123;        swap(node[t].ch[0], node[t].ch[1]);        node[node[t].ch[0]].rev ^= 1;        node[node[t].ch[1]].rev ^= 1;        node[t].rev = 0;    &#125;&#125;int rank(int val) &#123;    auto tmp = split_by_val(root, val - 1);    int k = node[tmp.first].size + 1;    root = merge(tmp.first, tmp.second);    return k;&#125;int kth(int &amp;t, int k) &#123;    int lt, mt, rt;    tie(lt, mt, rt) = split_by_rank(t, k);    int val = node[mt].val;    t = merge(merge(lt, mt), rt);    return val;&#125;int pre(int val) &#123;    auto tmp = split_by_cal(root, val - 1);    int k = kth(tmp.first, node[tmp.first].size);    root = merge(tmp.first, tmp.second);    return k;&#125;int nxt(int val) &#123;    auto tmp = split_by_val(root, val);    int k = kth(tmp.second, 1);    root = merge(tmp.first, tmp.second);    return k;&#125;\n单调栈\n\n模板题——百亿富翁def right_bigger():  ans=[-1]*n  stack=[]  for i in range(n):    while stack and h[stack[-1]]&lt;h[i]:      ans[stack[-1]]=i+1      stack.pop()    stack.append(i)  return ansdef left_bigger():  ans=[-1]*n  stack=[]  for i in range(n-1,-1,-1):    while stack and h[stack[-1]]&lt;h[i]:      ans[stack[-1]]=i+1      stack.pop()    stack.append(i)  return ansimport sysn=int(input())h=list(map(int,input().split()))print(*left_bigger())print(*right_bigger())\n分块字符串KMP&amp;字符串哈希模式匹配\n\nKMP算法\n\n\n\n模板题——斤斤计较的小ZNext = [0] * 1000010def get_next(T):    for i in range(1,len(T)):        j = Next[i]        while j &gt; 0 and T[i] != T[j]:            j = Next[j]        if T[i] == T[j]:            Next[i + 1] = j + 1        else:            Next[i + 1] = 0def KMP(s,t):    get_next(t)    ans = 0    j = 0    for i in range(len(s)):        while j &gt; 0 and s[i] != t[j]:            j =  Next[j]        if s[i] == t[j]:            j += 1        if j == len(t):            ans += 1            j =  Next[j]    return anst = input()s = input()print(KMP(s,t))\nprint((lambda s: input().count(s))(input()))\n字符串哈希\n\n模板题——斤斤计较的小Zt = input()s = input()m,n = len(t), len(s)B = 26mod = 1000000007hash = [0] * (n + 1)for i in range(1,n + 1):    hash[i] = hash[i - 1] * B + ord(s[i - 1]) - ord(&#x27;A&#x27;)    hash[i] %= modnumT = 0for c in t:    numT = numT * B + ord(c) - ord(&#x27;A&#x27;)    numT %= mod    p = (B ** m) % modans = 0for l in range(1,n +1):    r = l + m - 1    if r &gt; n:        break    if (hash[r] - hash[l - 1] * p % mod + mod) % mod == numT:        ans += 1print(ans)\nManacher\n模板\n字典树基础\n\n\n模板题——前缀判定class TreeNode():  def __init__(self):    self.nodes = &#123;&#125;    #插入  def insert(self,s):    curr = self    for i in s:      if i not in curr.nodes.keys():        curr.nodes[i] = TreeNode()      #往下走      curr = curr.nodes[i]    #检查是否为前缀  def pre(self,s):    curr = self    for i in s:      if i not in curr.nodes.keys():        return False      curr = curr.nodes[i]    return Truen,m = map(int,input().split())tree = TreeNode()for _ in range(n):  s = input()  tree.insert(s)for _ in range(m):  t = input()  if tree.pre(t):    print(&#x27;Y&#x27;)  else:    print(&#x27;N&#x27;)\n模板题——依依的瓶中信&#x27;&#x27;&#x27;多个字符串，求公共前缀长度问题，用字典树同一个字符串不可与自身比较：构建树的时候打标记，查找的时候清除标记，若标记为0，则说明当前在于自己比较，直接返回。&#x27;&#x27;&#x27;class TreeNode():  def __init__(self):    self.nodes = &#123;&#125;          #用于存放以当前点为根的子树    self.value = 1           #每可子树的权值，初始为1  def insert(self,s):#建树    for c in s:      if c not in self.nodes.keys():     #若不存在，则添加该子树        self.nodes[c] = TreeNode()      else:        self.nodes[c].value +=1       #若存在，则该子树的权值+1，      self = self.nodes[c]          #进入下一层#&#123;1,a:&#123;2,b:&#123;2,c:&#123;1,&#125;&#125;&#125;,b:&#123;1,c:&#123;1&#125;&#125;&#125;  def commen_pre(self,t):  #查找    cnt = 0    for c in t:           #该题不用判断c是否存在，因为每个点都存在      if self.nodes[c].value -1 == 0:    #如果走到自己独有的节点上时，就返回其与其它子串的公共前缀长        return cnt      cnt += 1      self = self.nodes[c]   #进入下一层    return cnt    #若自己本身就是某个串的前缀，则返回自己的长度n = int(input())S =[]tree = TreeNode() #实例化根节点for i in range(n):  #建树  s = input()  S.append(s)  tree.insert(s)for s in S:      #查找、统计  print(tree.commen_pre(s))\n01tire\n\nmaxn = 210000ch = [[0]*2 for _ in range(maxn)]val = [0]*maxnn, ans, tot = 0, 0, 0def insert(x):    global tot    now = 0    for j in range(31, -1, -1):        pos = ((x &gt;&gt; j) &amp; 1)        if ch[now][pos] == 0:            tot += 1            ch[now][pos] = tot        now = ch[now][pos]    val[now] = xdef query(x):    now = 0    for j in range(31, -1, -1):        pos = ((x &gt;&gt; j) &amp; 1)        if ch[now][pos ^ 1] != 0:            now = ch[now][pos ^ 1]        else:            now = ch[now][pos]    return val[now]n = int(input())for i in range(1, n+1):    x = int(input())    insert(x)for i in range(1, n+1):    ans = max(ans, query(val[i]))print(ans)\n图论基础基本概念\n\n\n\nDFS&amp;BFS\n\nDFS模板题——帮派弟位n,m=map(int,input().split())G=[[] for i in range(n+1)]#bfs和图的结合rudu=[0]*(n+1) #计数，根结点是没有rudu的biaoji=[0]*(n+1)sum=[[0,i] for i in range(n+1)] #注意是二元组，记录子数数量，是先按数量排，再按序号排.然后是包括他自己的，所以初始化为1for _ in range(n-1):    l,r=map(int,input().split()) #表示序号为l的人附属于r    G[r].append(l) #表示r下面有l 可以看出r和谁相邻    rudu[l]+=1 #表明l头上是有父亲的for i in range(1,n+1): #找出谁的rudu为0，即找出谁是根结点    if rudu[i]==0:        root=idef dfs(u):    biaoji[u]=1 #打上标记    sum[u][0]=-1#为什么这里设置成-1，而不是1呢，因为题目要求如果手下相同的，序号小的排在前面，设置成-1就可以这样了。！    for v in G[u]: #遍历和u相邻的每个节点        if biaoji[v]==0: #如果没有打上标记            dfs(v)#遍历和u相邻的节点，就是遍历子节点            sum[u][0]+=sum[v][0] #遍历v子节点的同时，可以把v下的子节点也加上去dfs(root)sum.sort()for i,(x,y) in enumerate(sum,start=1):#输出小明的排列    if y==m:        print(i)        break\n\n\nBFS模板题——最少操作数from collections import dequedef bfs(s,t):    &#x27;&#x27;&#x27;    :param s: 起点    :param t: 终点    :return:    &#x27;&#x27;&#x27;    dis = [-1]*100001    queue = deque()    #1、将起点塞入到队列中，打上标记    queue.append(s)    dis[s] = 0    #2、当队列非空    while len(queue) != 0:        # 2.1 取出队首元素u        u = queue.popleft()        #2.2 判断u是否为终点        if u == t:            return dis[u]        #2.3 将u相连的所有点v，只要v未标记，则入队列        for v in [u-1,u+1,u*2]:            #特判：未越界、未标记            if 0&lt;=v&lt;=100000 and dis[v] == -1:                queue.append(v)                dis[v] = dis[u] + 1    return -1n,k = map(int,input().split())print(bfs(n,k))\nBFS模板题——混境之地4import osimport sys# 请在此输入您的代码#  3819 混境之地# BFS遍历  经典题目&quot;&quot;&quot;&quot;&quot;&quot;from collections import deque  # 使用队列INF = 0x3f3f3f3f   # 对应的十进制为：1061109567，一般的数据小于10^9，因此可将其作为一个边界def BFS(x, y, dist):    # 从(x, y)到每个点的最短时间    queue = deque()    vis = [[0] * m for i in range(n)]    # 1、将起点加入队列    queue.append([x, y])    dist[x][y] = 0  # 更新距离    vis[x][y] = 1  # 打标记    # 2、当队列非空    while len(queue) != 0:        x, y = queue.popleft()        # 对于每个相邻的点，都进行一次判断        for deltax, deltay in [(1, 0), (0, 1), (-1, 0), (0, -1)]:            xx, yy = x + deltax, y + deltay            # 未越界、未标记、非障碍物            if 0 &lt;= xx &lt; n  and 0 &lt;= yy &lt; m and g[xx][yy] != &quot;#&quot; and vis[xx][yy] == 0:                queue.append([xx, yy])                dist[xx][yy] = dist[x][y] + 1                vis[xx][yy] = 1n, m = map(int, input().split())A, B, C, D = map(int, input().split())A, B, C, D = A-1, B-1, C-1, D-1# 输入图g = [input() for i in range(n)]E = int(input())# dist1[i][j]表示起点到(i, j)的最短时间dist1 = [[INF] * m for i in range(n)]  # INF无穷大# dist2[i][j]表示终点到(i, j)的最短时间dist2 = [[INF] * m for i in range(n)]BFS(A, B, dist1)  # 起点做一遍BFS(C, D, dist2)  # 终点做一遍# 判断能否直接走到终点res = dist1[C][D]if res &lt;= E:    print(res)else:    # 枚举所有的圣泉    res = INF    for i in range(n):        for j in range(m):            # 能量E不可小于0，可以等于0            if g[i][j] == &#x27;V&#x27; and dist1[i][j] &lt;= E:  # 不需要经过多个圣泉                res = min(dist1[i][j] + dist2[i][j], res)    # 如果走不到圣泉    if res == INF:        print(&#x27;No&#x27;)    else:        # 初始能量为E，总共距离为res，相当于，后面的res-E需要花费两倍时间，因为需要等待能量恢复        print((res - E) * 2 + E)\n拓扑排序\n\n\n模板题——走多远import osimport sysfrom collections import deque# INF = 0x3f3f3f3f# 针对有向无环图，在进行拓扑排序时，可以进行状态转移def topo():    q = deque()    # 1。将入度为0的点加入队列中    for i in range(1, n + 1):        if ru[i] == 0:            q.append(i)    # 2. 当队列非空    while len(q) != 0:        # 2.1 取出队首元素        u = q.popleft()        # 2.2 对于和u相连的每个点v        for v in G[u]:            # 从u走到v，说明dp[v]可以从dp[u]+1转移            dp[v] = max(dp[v], dp[u] + 1)            # 进行动态规划            ru[v] -= 1            if ru[v] == 0:                q.append(v)n, m = map(int, input().split())# 图的存储——邻接表G = [[] for i in range(n+1)]ru = [0] * (n + 1)for i in range(m):    u, v = map(int, input().split())    G[u].append(v)    ru[v] += 1# dp[i]表示走到i的最长路/最大值dp = [0] * (n + 1)topo()print(max(dp))\n模板题——最小字典序排列import osimport sys# 3351 最小字典序排列# 拓扑排序+优先队列# 需要字典序最小的拓扑序列，只需要将普通队列转换成优先队列即可from collections import dequefrom queue import PriorityQueuedef topo():    q = PriorityQueue()    # 1。将入度为0的点加入队列中    for i in range(1, n + 1):        if ru[i] == 0:            q.put(i) # append改为put    # 2. 当队列非空    ans = []    while not q.empty(): # 判断优先队列q是否非空    # while len(q.queue) != 0:        # 2.1 取出队首元素        u = q.get()  # popleft改为put        ans.append(u)        # 2.2 对于和u相连的每个点v        for v in G[u]:            # 进行动态规划            ru[v] -= 1            if ru[v] == 0:                q.put(v)    if len(ans) != n:        print(-1)    else:        print(*ans, sep = &#x27; &#x27;)n, m = map(int, input().split())# 图的存储——邻接表G = [[] for i in range(n+1)]ru = [0] * (n + 1)for i in range(m):    u, v = map(int, input().split())    G[u].append(v)    ru[v] += 1topo()\n最短路Floyd\n\n模板题—— 蓝桥公园import sysinput=sys.stdin.readlinen,m,q=map(int,input().split())inf=int(1e18)dp=[[inf]*(n+1) for i in range(n+1)]for i in range(1,n+1):  dp[i][i]=0for i in range(1,m+1):  u,v,w=map(int,input().split())  dp[u][v]=dp[v][u]=min(dp[u][v],w)#Floyd 模板for k in range(1,n+1):  for i in range(1,n+1):    for j in range(1,n+1):      dp[i][j]=min(dp[i][j],dp[i][k]+dp[k][j])for i in range(1,n+1):    for j in range(1,n+1):      if dp[i][j]==inf:        dp[i][j]=-1for _ in range(q):  s,e=map(int,input().split())  print(dp[s][e])\n# Floyd 算法  多个起点--多个终点  多源最短路算法（多对多）# 最简单的最短路径算法# 存图:最简单的矩阵存图# 效率不高，不能用于大图# 动态规划：求图上两点i,j之间的最短距离，按‘从小图到全图’的步骤，在逐步扩大图的过程中计算和更新最短路# 定义状态：dp[k][i][j]: i,j,k是点的编号，范围1--n# 状态dp[k][i][j]表示在包含1--k点的子图上，点对i,j之间的最短路# 状态转移方程 从子图1-k-1 扩展到子图 1-k# dp[k][i][j]=min(dp[k-1][i][j],dp[k-1][i][k]+dp[k-1][k][j])# 初始值：i,j直连 就是他们的边长； 若不直连，赋值为无穷大 / 0x3f3f3f3f3f3f3f3f# 滚动数组优化：dp[i][j]=min(dp[i][j],dp[i][k]+dp[k][j])#                           不经过k     经过k# for k in range(1,n+1):# for i in range(1,n+1):# for j in range(1,n+1):# dp[i][j]=min(dp[i][j],dp[i][k]+dp[k][j])# 只能用于n&lt;300 的小规模图def floyd():    global dp    for k in range(1,n+1):        for i in range(1, n + 1):            for j in range(1, n + 1):                dp[i][j]=min(dp[i][j],dp[i][k]+dp[k][j])# 蓝桥公园# n个点 m条边 q次查询n,m,q=map(int,input().split())INF = 0x3f3f3f3f3f3f3f3fdp=[[INF for _ in range(n+50)] for _ in range(n+50)]# 记录路径for i in range(1,m+1):    u,v,w=map(int,input().split())    dp[u][v]=dp[v][u]=min(dp[u][v],w)floyd()for _ in range(q):    start,end=map(int,input().split())    # 无法到达    if dp[start][end]==INF:        print(-1)    # 起点终点相同    elif start==end:        print(0)    else:        print(dp[start][end])# 1-12\nimport osimport sys# 请在此输入您的代码N, M, Q = map(int, input().split())weight = [[0 if i == j else sys.maxsize for i in range(N + 1) ] for j in range(N + 1)]  # 领接矩阵for i in range(M):    u, v, w = map(int, input().split())    weight[u][v] = min(weight[u][v], w)    weight[v][u] = weight[u][v]for k in range(1, N + 1):  # N次递推    for i in range(1, N + 1):        for j in range(i + 1, N + 1):  # 更新最小值                weight[i][j] = min(weight[i][j], weight[i][k] + weight[k][j])                weight[j][i] = weight[i][j]for i in range(Q):    st, ed = map(int, input().split())    t = weight[st][ed]    if t == sys.maxsize:        print(-1)    else:        print(t)\n模板题——城市间的交易import osimport sys# 请在此输入您的代码# 8336 城市间的交易INF =1e18n, m = map(int, input().split())# 产量、成本和售价a, p, s = [0] * (n+1), [0] * (n+1), [0] * (n+1)f = [[INF] * (n+1) for i in range(n+1)]g = [[0] * (n+1) for i in range(n+1)]for i in range(1, n+1):    a[i], p[i], s[i] = map(int, input().split())# 邻接矩阵初始化for i in range(1, m+1):    u, v, w = map(int, input().split())    f[u][v] = f[v][u] = min(f[u][v], w)for i in range(1, n+1):    f[i][i] = 0# Floydfor k in range(1, n+1):    for i in range(1, n+1):        for j in range(1, n+1):            f[i][j] = min(f[i][j], f[i][k]+f[k][j])# g[i][j]表示城市i的物品运输到城市j可得到的利润 = 城市j的售价 - 城市i的成本 - 从i到j的运输成本ans = 0for i in range(1, n+1):    # 求每个城市的利润    cnt = 0    for j in range(1, n+1):        g[i][j] = s[j] - p[i] - f[i][j]        cnt = max(cnt, g[i][j])    ans += a[i] * cntprint(ans)\nimport osimport sysn,m=map(int,input().split())res=[]for _ in range(n):  a,p,s=map(int,input().split())  res.append((a,p,s))inf=int(1e10)path=[[inf]*(n+1) for _ in range(n+1)]for _ in range(m):  u,v,w=map(int,input().split())  path[u][v]=path[v][u]=min(w,path[u][v])for i in range(1,1+n):  path[i][i]=0for k in range(1,n+1):  for i in range(1,n+1):    for j in range(1,n+1):      path[i][j]=min(path[i][j],path[i][k]+path[k][j])re=0for i in range(1,n+1):  result=0  for j in range(1,n+1):    if path[i][j]!=inf:       result=max(result,res[j-1][2]*res[i-1][0]-res[i-1][0]*res[i-1][1]-path[i][j]*res[i-1][0])  re+=resultprint(re)\nDijkstra\n\n\n模板题——蓝桥王国import osimport sys# 请在此输入您的代码# 1122_蓝桥王国_Dijkstra算法from queue import PriorityQueue  # 导入优先队列from collections import dequeINF = 1e18def dijkstra(s):    # 返回从s出发到所有点的最短路    # d[i]表示从s到i的最短路    d = [INF] * (n + 1)    # vis[i]表示是否出队列（注：与传统BFS不同）    vis = [0] * (n + 1)    q = PriorityQueue()    # 1.将起点入队列，更新距离    d[s] = 0    # 将距离放在前面，才能对距离使用优先队列    q.put((d[s], s))  # 入队用put()    # 当队列非空    while not q.empty():  # 或者写为： while len(q.queue) != 0:        dis, u = q.get()        # 每个点只有第一次出队列是有用的        if vis[u]: continue        vis[u] = 1  # 出队列打标记        # 对于从u出发，到达v，权重为w的边        for v, w in G[u]:            if d[v] &gt; d[u] + w:                d[v] = d[u] + w                q.put((d[v], v))    for i in range(1, n + 1):        if d[i] == INF:            d[i] = -1    # d.pop(0)    return d[1::] # 从1到最后# 皇宫编号为1# 输入n, m = map(int, input().split())G = [[] for i in range(n + 1)]  # 图的存储：邻接表。此题N为10^5，不能用邻接矩阵存图for i in range(m):    u, v, w = map(int, input().split())    G[u].append((v, w))print(*dijkstra(1)) # 列表前面加星号作用是将列表解开（unpacke）成多个独立的参数，传入函数。\n模板题——混境之地3import osimport sys# 3818 混境之地  Dijkstrafrom queue import PriorityQueue# 数据较大时可以进行如下优化import sysinput = sys.stdin.readlineINF = 1e18def get(c):    if c == &#x27;.&#x27;:        return 0    else:        s = &#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;        for i in range(len(s)):            if c == s[i]:                return i + 1        # return ord(c) - ord(&#x27;A&#x27;) + 1def dijkstra():    d = [[INF] * m for _ in range(n)]    vis = [[0] * m for _ in range(n)]    q = PriorityQueue()  # 创建优先队列    # 1.将起点塞入队列    d[x1][y1] = 0    q.put((d[x1][y1], x1, y1))    # 2.当队列非空    while not q.empty():        dis, x, y = q.get()        if x == x2 and y == y2:            return dis        # 每个点只有第一次出队列是有用的        if vis[x][y]:            continue        vis[x][y] = 1  # 出队列打标记        for d elta_x, delta_y in [[1, 0], [0, 1], [-1, 0], [0, -1]]:            xx, yy = x + delta_x, y + delta_y            # 判断未越界、未标记、非障碍物            if 0 &lt;= xx &lt; n and 0 &lt;= yy &lt; m and vis[xx][yy] == 0 and Map[xx][yy] != &quot;#&quot;:                if d[xx][yy] &gt; d[x][y] + get(Map[xx][yy]):  # 写一个get函数获取权重                    d[xx][yy] = d[x][y] + get(Map[xx][yy])                    q.put((d[xx][yy], xx, yy))    return INF# 输入n, m = map(int, input().split())  # 地图大小x1, y1, x2, y2 = map(int, input().split())  # 起始点坐标x1, y1, x2, y2 = x1 - 1, y1 - 1, x2 - 1, y2 - 1# 地图Map = [input() for i in range(n)]e = int(input())  # 剩余能量# 如果能量支撑到达终点，返回Yes，否则，返回No.if e &gt;= dijkstra():  # 不传参，使用全局变量    print(&#x27;Yes&#x27;)else:    print(&#x27;No&#x27;)\n生成树Kruskal\n\n模板题——繁忙的都市def kruskal():    # 初始化    n, m = map(int, input().split())    Map = []    for _ in range(m):        u, v, w = map(int, input().split())        Map.append([w, u, v])  # 注意第一个参数是边权    Map.sort()    # 并查集    p = list(range(n+1))    def root(x):        if x != p[x]:            p[x] = root(p[x])        return p[x]    # 非连环时更新    _sum, _max = 0, 0    for w, u, v in Map:        root_u = root(u)        root_v = root(v)        if root_u != root_v:            p[root_u] = root_v            _sum += 1            _max = max(_max, w)    return _sum, _maxprint(*kruskal())\nPrim\n\n\n\n模板题——繁忙的都市import osimport sysn,m=map(int,input().split())e=[]for  _ in range(m):  u,v,w=map(int,input().split())  e.append((w,u,v))#边按照权重进行排序e.sort()#需要一个并查集p=list(range(n+1))def findroot(x):  if x==p[x]:return x  else:    p[x]=findroot(p[x])    return p[x]ans=0#进行遍历所有的边，进行合并：for w,u,v in e:  #只要u和v不在同一集合内就可以进行合并：  rootu=findroot(u)  rootv=findroot(v)  if rootu!=rootv:    p[rootu]=rootv    ans=max(ans,w)print(n-1,ans)\n\n","categories":["刷题","蓝桥国赛"],"tags":["蓝桥杯"]},{"title":"蓝桥杯国赛试题解析","url":"/2024/05/26/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9B%BD%E8%B5%9B%E8%AF%95%E9%A2%98%E8%A7%A3%E6%9E%90/","content":"第十四届Python大学C组跑步计划问题描述小蓝计划在某天的日期中出现 $1$ 时跑 $5$ 千米，否则只跑 $1$ 千米。注意日期中出现 $1$ 不仅指年月日也指星期。\n请问按照小蓝的计划，$2023$ 年小蓝总共会跑步锻炼多少千米?例如，$5$ 月 $1$ 日、$1$ 月 $13$ 日、$11$ 月 $5$ 日、$4$ 月 $3$ 日 (星期一) 小蓝会跑 $5$ 千米，而 $5$ 月 $23$ 日小蓝会跑 $1$ 千米 (示例日期均为 $2023$ 年)\n答案提交这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nJava\n2s\n256M\n\n\nPython3\n3s\n256M\n\n\nPyPy3\n3s\n256M\n\n\nGo\n3s\n256M\n\n\nJavaScript\n3s\n256M\n\n\n\n\n总通过次数: 714  |  总提交次数: 778  |  通过率: 91.8%\n难度: 中等   标签: 2023, 国赛, 日期问题\n版权声明\n部分题目由用户贡献，若您是著作权持有人，请与我们联系。\n解题思路import datetimebt = datetime.date(2023, 1, 1)c = 0for i in range(1, 366):    bt += datetime.timedelta(days=1)    if &#x27;1&#x27; in bt.isoformat() or bt.isoweekday() == 1:        c += 5    else:        c += 1print(c)\nsun = 0import datetimea = datetime.date(2023,1,1)for i in range(1,366):  if &#x27;1&#x27; in a.strftime(&quot;%m%d%w&quot;) :sun+=4  sun+=1  a += datetime.timedelta(days = 1)print(sun)\n混乘数字问题描述混乘数字的定义如下: 对于一个正整数 $n$，如果存在正整数 $a, b$，使得 $n = a \\times b$，而且 $a$ 和 $b$ 的十进制数位中每个数字出现的次数之和与 $n$ 中对应数字出现次数相同，则称 $n$ 为混乘数字。\n例如，对于正整数 $n = 126$，存在 $a = 6$, $b = 21$ 满足条件，因此 $126$ 是一个混乘数字。\n又如，对于正整数 $n = 180225$，存在 $a = 225$, $b = 801$ 满足条件，因此 $180225$ 是一个混乘数字。\n请你帮助计算出，$1 \\sim 1000000$ (含)之间一共有多少个数字是混乘数字。\n答案提交这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nJava\n2s\n256M\n\n\nPython3\n5s\n256M\n\n\nPyPy3\n5s\n256M\n\n\nGo\n5s\n256M\n\n\nJavaScript\n5s\n256M\n\n\n\n\n解题思路import mathfrom collections import defaultdict# 混乘数字：# 条件1：a * b == n# 条件2：a、b一定是n的因子# 条件3：且a、b中各个数字出现次数 == n中各个数字出现次数def isHunc(n):    &quot;&quot;&quot;返回True代表是混乘数字&quot;&quot;&quot;    # 1. 求n中每个数字出现次数    nums = defaultdict(int)    for kwd in list(str(n)):        nums[kwd] += 1    # 2. 开启暴力美学    for a in range(1, int(math.sqrt(n)) + 1):    # 两个因子相乘，绝对有一个因子&lt;= 开平方后的值        # 判断是否符合条件1、2        if n % a == 0:            b = n // a            # 判断是否符合条件3            if cnt_dy(a, b, nums):                return Truedef cnt_dy(a, b, nums):    &quot;&quot;&quot;符合条件3 返回 True&quot;&quot;&quot;    # nums是可变对象，形参改变实参也会改变，我们需要将他的值复制，这样才不对原始数据造成更改    now = nums.copy()    for k in str(a):        now[k] -= 1        if now[k] &lt; 0:            return False    for k in str(b):        now[k] -= 1        if now[k] &lt; 0:            return False    # 判断字典中是否还有值    if sum(now.values()) != 0:        return False    return Trueans = 0for i in range(125, 1000001):     if isHunc(i):         ans += 1print(ans)\nimport osimport sysimport mathcount=0for i in range(1,1000001):  for j in range(2,int(math.sqrt(i))+1):    if i % j == 0:      if sorted(str(i)) == sorted(str(j)+str(i//j)):        count += 1        break  if i % 100000 == 0:    print(i,count)print(count)print(590)\n整数变换问题描述小蓝有一个整数 $n$。每分钟，小蓝的数都会发生变化，变为上一分钟的数减去上一分钟的数的各个数位和。\n例如，如果小蓝开始时的数为 $23$，则下一分钟变为 $23 − (2 + 3) = 18$，再下一分钟变为 $18 − (1 + 8) = 9$，再下一分钟变为 $9 − 9 = 0$，共经过了 $3$ 分钟变为 $0$。\n给定一个正整数，请问这个数多少分钟后变为 $0$。\n输入格式输入一行包含一个整数 $n$。\n输出格式输出一个整数，表示答案。\n样例输入23\n样例输出3\n评测用例规模与约定对于 $30\\%$ 的评测用例，$1 ≤ n ≤ 1000$;\n对于 $60\\%$ 的评测用例，$1 ≤ n ≤ 10^6$;\n对于所有评测用例，$1 ≤ n ≤ 10^9$。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nJava\n2s\n256M\n\n\nPython3\n3s\n256M\n\n\nPyPy3\n3s\n256M\n\n\nGo\n3s\n256M\n\n\nJavaScript\n3s\n256M\n\n\n\n\n解题思路这道题目需要使用pypy3，否则会超时\nn = input()int_n = int(n)ans = 0while int_n &gt; 0:    s = sum(map(int,list(str(int_n))))    int_n -= s    ans += 1print(ans)\n定时任务问题描述Cron 表达式在定时任务中经常被使用，在这里我们用了一种简化后的版本 SimpleCron 表达式：SimpleCron 表达式是一个具有时间含义的字符串，字符串以 $4$ 个空格隔开，分为 $5$ 个域，格式为 $X X X X X$，其中 $X$ 是一个域的占位符。$5$ 个域从左至右依次为秒 $(0 - 59)$、分钟 $(0 - 59)$、小时 $(0 - 23)$、日期 $(1 - 31)$、月份 $(1 - 12)$，其中括号内为他们各自的取值范围。同时域内取值也可以使用一些特殊字符（每个域内只能使用一种特殊字符）:\n\n特殊字符 $*$ （ASCII 码为 $42$）表示所有可能的值。例如：在分钟域内表示每一分钟；在日期域内表示月内的每一天。\n特殊字符 $,$ （ASCII 码为 $44$）表示列出枚举值。例如：在秒域内，$3,20$ 表示分别在 $3$ 秒和 $20$ 秒执行一次任务。\n特殊字符 $-$ （ASCII 码为 $45$）表示范围，可以视为连续的若干个枚举值。例如：$1-5$ 等价于 $1,2,3,4,5$。\n\n例如，$4 2 1,3,15 1-31 *$ 表示的含义是每个月份中的每一天中的 $01:02:04$、$03:02:04$、$15:02:04$ 这三个时刻各执行一次，在 $2023$ 年一共会执行 $1095$ 次。\n现在给出你一个合法的 SimpleCron 表达式，其中用到的所有数字均没有前导零。请问在 $2023$ 一整年当中，使用了这个表达式的定时任务总计会执行多少次?\n输入格式输入一行，包含一个 SimpleCron 字符串。\n输出格式输出一行，包含一个整数表示答案。\n样例输入4 2 1,3,15 1-31 *\n样例输出1095\n评测用例规模与约定对于所有评测用例，$0 ≤$ 秒域的取值 $≤ 59$，$0 ≤$ 分钟域的取值 $≤ 59$，$0 ≤$ 小时域的取值 $≤ 23$，$1 ≤$ 日期域的取值 $≤ 31$，$1 ≤$ 月份域的取值 $≤ 12$。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nJava\n2s\n256M\n\n\nPython3\n3s\n256M\n\n\nPyPy3\n3s\n256M\n\n\nGo\n3s\n256M\n\n\nJavaScript\n3s\n256M\n\n\n\n\n总通过次数: 181  |  总提交次数: 251  |  通过率: 72.1%\n难度: 中等   标签: 2023, 国赛, 日期问题\n版权声明\n部分题目由用户贡献，若您是著作权持有人，请与我们联系。\n解题思路import datetimetime = input().split()a = [[0, 59], [0, 59], [0, 23], [1, 31], [1, 12]]for i in range(5): # 先得到对应时间点，哪些时间有任务    if &#x27;*&#x27; in time[i]:        time[i] = range(a[i][0], a[i][1] + 1)    elif &#x27;-&#x27; in time[i]:        l, r = map(int, time[i].split(&#x27;-&#x27;))        time[i] = range(l, r + 1)    elif &#x27;,&#x27; in time[i]:        time[i] = list(map(int, time[i].split(&#x27;,&#x27;)))    else:        time[i] = [int(time[i])]s, f, h, d, m = timedays = len(s) * len(f) * len(h) #一天的任务次数可以直接求得start = datetime.date(2023, 1, 1)end = datetime.date(2024, 1, 1)t = datetime.timedelta(days=1)cnt = 0while start &lt; end: #按天遍历    _, M, D = map(int, str(start).split(&#x27;-&#x27;))    if M in m and D in d:#满足累加每天的任务        cnt += days    start += tprint(cnt)\n2023问题描述给定 $n$, $m$，请求出所有 $n$ 位十进制整数中有多少个数中恰好出现了 $m$ 个 $2023$。\n例如 $00202312023$ 是一个 $11$ 位的出现了 $2$ 个 $2023$ 的十进制整数。由于结果可能很大，请输出答案对 $998244353$ 取模的结果。\n输入格式输入一行包含两个整数 $n$, $m$，用一个空格分隔。\n输出格式输出一行包含一个整数表示答案。\n样例输入5 1\n样例输出20\n评测用例规模与约定对于 $40\\%$ 的评测用例，$n ≤ 10^5$，$m ≤ 10$；\n对于所有评测用例，$4 ≤ n ≤ 10^5$，$0 ≤ 4m ≤ n$。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nJava\n2s\n256M\n\n\nPython3\n3s\n256M\n\n\nPyPy3\n3s\n256M\n\n\nGo\n3s\n256M\n\n\nJavaScript\n3s\n256M\n\n\n\n\n总通过次数: 34  |  总提交次数: 232  |  通过率: 14.7%\n难度: 中等   标签: 2023, 国赛, 排列组合, 二项式定理\n版权声明\n部分题目由用户贡献，若您是著作权持有人，请与我们联系。\n解题思路def quickpow(a, n, mod):    &quot;&quot;&quot;    快速幂算法，计算 a 的 n 次幂对 mod 取模的结果    &quot;&quot;&quot;    ans = 1    while n:        if n &amp; 1:            ans = ans * a % mod        a = a * a % mod        n &gt;&gt;= 1    return ansdef C(m, n, fact, inv, mod):    &quot;&quot;&quot;    计算组合数 C(m, n) % mod 的值    &quot;&quot;&quot;    return fact[n] * inv[m] % mod * inv[n - m] % moddef fact_init(mod):    &quot;&quot;&quot;    初始化阶乘数组和逆元数组    &quot;&quot;&quot;    fact = [0] * (100001)    inv = [0] * (100001)    fact[0] = inv[0] = 1    for i in range(1, 100001):        fact[i] = fact[i - 1] * i % mod        inv[i] = inv[i - 1] * quickpow(i, mod - 2, mod) % mod    return fact, invn, m = map(int, input().split())k = n // 4ans = 0mod = 998244353fact, inv = fact_init(mod)for i in range(m, k + 1):    ans += (-1 if (i - m) % 2 else 1) * C(m, i, fact, inv, mod) * C(i, n - 3 * i, fact, inv, mod) * quickpow(10, n - 4 * i, mod)    ans %= modprint(ans)\n\n最大算式问题描述给定 $n$ 个非负整数 $A_i$ ，你可以在不改变这些数顺序的前提下任意在他们之间插入 $+,*,(,)$ 四种符号 。\n请问在得到的算式合法的前提下，算式的结果最大可以是多少?\n由于结果很大，你只需要输出答案对 $10^9+7$ 取模的结果即可。\n输入描述输入的第一行包含一个整数 $n$ 。\n第二行包含 $n$ 个整数，分别表示 $A_1, A_2, \\cdots, A_n$ ，相邻两个整数之间使用一个空格分隔。\n输出描述输出一行包含一个整数表示答案。\n样例输入7 1 2 1 1 1 2 1\n样例输出27\n样例说明$(1+2)\\times(1+1+1)\\times(2+1)=27$ .\n评测用例规模对于 $40\\%$ 的评测用例， $n \\leq 5000$ ；\n对于所有评测用例， $1 \\leq n \\leq 10^5$ ， $0 \\leq A_i \\leq 10^9$ 。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nJava\n2s\n256M\n\n\nPython3\n3s\n256M\n\n\nPyPy3\n3s\n256M\n\n\nGo\n3s\n256M\n\n\nJavaScript\n3s\n256M\n\n\n\n\n总通过次数: 22  |  总提交次数: 38  |  通过率: 57.9%\n难度: 中等   标签: 2023, 贪心, 国赛, 数学\n版权声明\n部分题目由用户贡献，若您是著作权持有人，请与我们联系。\n解题思路import osimport sysdef find(x):    if m[i]==1:        if s[-1]==2:            s[-1]+=1        elif s[-1]&gt;m[i+1] and m[i+1]!=0:            m[i+1]+=1        else:            s[-1]+=1    else:        s.append(m[i])n=int(input())m=list(map(int,input().split()))s=[]if m[0]==1:    m[1]+=1else:    s.append(m[0])for i in range(1,n-1):    if m[i]!=0:        find(i)if m[-1]==1:    s[-1]+=1elif m[-1]!=0:    s.append(m[-1])k=1num=0for j in s:    k=k*jnum+=kprint(num%1000000007)\n躲炮弹问题描述小蓝正在玩一个躲炮弹的游戏。游戏中有一个人物和一个炮塔，它们的初始距离为 $n$。\n炮塔可能选择在区间 $[L, R]$ 上的任意一个整数 $x$，然后发射的炮弹会飞向小蓝操控的人物。但炮弹只会在飞出 $x$ 的倍数的距离($x, 2x, 3x, \\ldots$)时落地，然后弹回到空中。如果小蓝操控的人物恰好站在了炮弹落地的位置，那么游戏就会结束。\n小蓝只能在炮弹发射前移动他的人物，每移动一步，可以使得人物和炮塔的距离增加 $1$ 或者减少 $1$。他想知道最少要移动多少步才能保证自己的人物一定能躲过炮弹。\n输入格式输入一行包含三个整数 $n, L, R$，相邻的整数之间使用一个空格分隔。\n输出格式输出一行包含一个整数，表示小蓝操纵的人物最少需要移动的步数。\n样例输入10 2 13\n样例输出7\n评测用例规模与约定对于 $40\\%$ 的评测用例，$n, L, R \\leq 10^6$；\n对于所有评测用例，$1 \\leq n, L, R \\leq 10^9$，$2 \\leq L \\leq R$。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nJava\n2s\n256M\n\n\nPython3\n3s\n256M\n\n\nPyPy3\n3s\n256M\n\n\nGo\n3s\n256M\n\n\nJavaScript\n3s\n256M\n\n\n\n\n总通过次数: 38  |  总提交次数: 94  |  通过率: 40.4%\n难度: 中等   标签: 2023, 国赛, 质因子分解\n版权声明\n部分题目由用户贡献，若您是著作权持有人，请与我们联系。\n解题思路n, L, R = map(int, input().split())&#x27;&#x27;&#x27;case 1: ans在n的右边 或者就是ncase 2: n大于R ans在n-1到R+1之间case 3: ans在l-1这个位置&#x27;&#x27;&#x27;# 找出当前数的所有质因数def pr_(xx):    pr = []    for i in range(2, int(xx ** 0.5) + 1):        while xx % i == 0:            pr.append(i)            xx //= i    if xx &gt; 1: pr.append(xx)    return pr# 如果当前x是质数或者x除以x的质因子的值小于low 则当前位置是安全位置def judge(x, low):    nums = pr_(x)    if len(nums) == 1:        return x    else:        for j in nums:            # 安全位置一定满足这一个条件 但是满足条件的不一定是安全位置            # 但我们可以保证最近的一个安全位置的前面一定不存在错误位置            if x // j &lt; low:                return x            else:                return -1ans = 0# case 1res = max(R + 1, n)while True:    new_seat = judge(res, L)    if new_seat != -1:        ans = res - n        break    res += 1# case 2res = n - 1while res &gt; R:    new_seat = judge(res, L)    if new_seat != -1:        ans = min(n - res, ans)        break    res -= 1# case 3 and 1, 2# 如果n在L的特别左边是会返回负数的 所以要特判if n &lt; L:    print(&#x27;0&#x27;)elif n == L:    print(&#x27;1&#x27;)else:      print(min(n - L + 1, ans))\n走方格问题描述给定一个 $N$ 行 $N$ 列的方格，第 $i$ 行第 $j$ 列的方格坐标为 $(i, j)$，高度为 $H_{i, j}$。小蓝从左上角坐标 $(0, 0)$ 出发，目的地是右下角坐标 $(N - 1, N - 1)$。\n当小蓝位于第 $r$ 行第 $c$ 列时，他有如下的移动方式:\n\n若 $r + 1 &lt; N$，可以移动到 $(r + 1, c)$，花费 $1$ 秒;\n若 $c + 1 &lt; N$，可以移动到 $(r, c + 1)$，花费 $1$ 秒;\n对于任意整数 $L$，若 $H_{r,c} &gt; H_{r,c+1} &gt; \\dots &gt; H_{r,c+L}$，可以移动到 $(r, c + L)$，花费 $1$ 秒;\n对于任意整数 $L$，若 $H_{r,c} &gt; H_{r,c-1} &gt; \\dots &gt; H_{r,c-L}$，可以移动到 $(r, c - L)$，花费 $1$ 秒。\n\n现在给出方格，请问小蓝从 $(0, 0)$ 移动到 $(N - 1, N - 1)$ 最少需要多少秒?\n输入格式输入的第一行包含一个整数 $N$ 表示方格大小。\n接下来 $N$ 行，每行包含 $N$ 个整数，表示每个方格上的数字。\n输出格式输出一个整数表示答案。\n样例输入40 1 9 32 9 3 78 4 8 99 8 0 7\n样例输出5\n样例说明移动顺序为: $(0,0) \\rightarrow (1,0) \\rightarrow (2,0) \\rightarrow (3,0) \\rightarrow (3,2) \\rightarrow (3,3)$，其中坐标 $(3,0)$、$(3,1)$、$(3,2)$ 处的数字分别为 $9 &gt; 8 &gt; 0$，所以可以花费 $1$ 秒从 $(3,0)$ 移动到 $(3, 2)$。\n评测用例规模与约定对于 $20\\%$ 的评测用例，$1 \\leq N \\leq 10$；\n对于 $50\\%$ 的评测用例，$1 \\leq N \\leq 100$；\n对于所有评测用例，$1 \\leq N \\leq 1000$，$0 \\leq H_{i,j} \\leq 100$。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nJava\n3s\n256M\n\n\nPython3\n5s\n256M\n\n\nPyPy3\n5s\n256M\n\n\nGo\n5s\n256M\n\n\nJavaScript\n5s\n256M\n\n\n\n\n解题思路import osimport sysfrom math import *# 请在此输入您的代码n = int(input())nums = [[0 for _ in range(n)] for _ in range(n) ]f = [[inf for _ in range(n+1)] for _ in range(n+1)]for i in range(n):  nums[i] = list(map(int,input().split()))#可以倒着走f[n-1][n] = -1f[n][n-1] = -1for i in range(n-1,-1,-1):  for j in range(n-1,-1,-1):    #先更新自己    f[i][j] = min(f[i][j],f[i+1][j]+1,f[i][j+1]+1)    #然后更新捷径，要连续大于两个的才算捷径    #看横向有无捷径,跳过你左边的,i不变    for l in range(j,-1,-1):      if l-1 &gt;= 0 and nums[i][l-1] &gt; nums[i][l]:        f[i][l-1] = min(f[i][l-1],f[i][j] +1)      else:        break    #看纵向有无捷径，j不变    # for r in range(i,-1,-1):    #   if r-1 &gt;= 0 and nums[r-1][j] &gt; nums[r][j]:    #     f[r-1][j] = min(f[r-1][j],f[i][j] +1)    #   else:    #     breakprint(f[0][0])\nimport osimport sysn=int(input())mp=[list(map(int,input().split())) for _ in range(n)]inf=float(&#x27;inf&#x27;)dp=[[0]*n for _ in range(n)] #到x,y花费的最少步数for i in range(n):    dp[i][0]=i #第i行第一个数为ifor i in range(n):    for j in range(1,n):        dp[i][j]=inf        if i&gt;0:            dp[i][j]=min(dp[i][j],dp[i-1][j]+1) #从上往下走一格                    k=j        while mp[i][k]&lt;mp[i][k-1] and k&gt;=1:            dp[i][j]=min(dp[i][j],dp[i][k-1]+1) #从左往右走，且判断是否满足题目第三个条件            k-=1                    dp[i][j]=min(dp[i][j],dp[i][j-1]+1) #从左往右走一格print(dp[-1][-1])#题目第四个条件会增加步数，不能减少，会多走一步\n等腰三角形问题描述给定一个包含 $n$ 个数的序列 $A_i$ ，每次操作可以选择其中任意一个数将其 $+1$ 或 $-1$ 。\n我们要让这个序列满足能够从中任选三个数，这三个数对应长度的三条边总能组成一个等腰三角形。问最少需要多少次操作才能让序列满足条件。\n输入描述输入的第一行包含一个整数 $n$ 。\n第二行包含 $n$ 个整数，分别表示 $A_1, A_2, \\cdots, A_n$ ，相邻两个整数之间使用一个空格分隔。\n输出描述输出一行包含一个整数，表示最少的操作次数。\n样例输入5 3 3 5 7 7\n样例输出3\n样例说明将原序列修改为 $4,4,4,7,7$ 即可。\n评测用例规模对于 $40\\%$ 的评测用例， $n \\leq 5000$ ， $A_i \\leq 5000$ ；\n对于 $70\\%$ 的评测用例， $n \\leq 2\\times 10^5$ ， $A_i \\leq 10^6$ ；\n对于所有评测用例， $1 \\leq n \\leq 2\\times 10^5$ ， $1 \\leq A_i \\leq 10^9$ 。w\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nJava\n2s\n256M\n\n\nPython3\n3s\n256M\n\n\nPyPy3\n3s\n256M\n\n\nGo\n3s\n256M\n\n\nJavaScript\n3s\n256M\n\n\n\n\n总通过次数: 7  |  总提交次数: 69  |  通过率: 10.1%\n难度: 中等   标签: 2023, 国赛, 数学, 分类讨论\n版权声明\n部分题目由用户贡献，若您是著作权持有人，请与我们联系。\n单词分类问题描述在遥远的 $\\text{LQ}$ 国，只存在三种字符：$\\text{l、q }$和 $\\text{b}$ (ASCII 码分别为 $108、113、98$)，所有的单词都由这三种字符组合而来。小蓝为了更加快速的记忆单词，决定将词典上所有的单词按照单词前缀将其分为 $K$ 类，具体的要求是:\n\n选出 $K$ 个不同的单词前缀作为 $K$ 类；\n对于字典上的每个单词，只能属于 $K$ 类中的某一个类，不能同时属于多个类；\n对于 $K$ 类中的每个类，至少包含有一个单词。\n\n现在已知字典上一共有 $N$ 个单词，小蓝想要知道将这 $N$ 个单词按照上述要求分为 $K$ 类，一共有多少种不同的方案。两个方案不同指的是两个方案各自选出的 $K$ 个单词前缀不完全相同。答案可能过大，所以你需要将答案对 $1000000007$ (即 $10^9 + 7$)取模后输出。\n输入格式输入的第一行包含两个整数 $N$ 和 $K$；\n接下来 $N$ 行，每行包含一个单词，由 $\\text{l、q、b}$ 三种字符组成。\n输出格式输出一个整数表示答案。答案可能很大，请输出答案对 $1000000007$ 取模的值。\n样例输入4 2lqblqlqqqqql\n样例输出4\n样例说明方案 1：$\\text{l=lqb,lql、q=qqq,qql}$; 方案 2：$\\text{lq=lqb,lql、q=qqq,qql}$; 方案 3：$\\text{l=lqb,lql、qq=qqq,qql}$; 方案 4：$\\text{lq=lqb,lql、qq=qqq,qql}$。\n以方案 1 为例，他表示选出的两类对应的前缀分别是 $\\text{l}$ 和 $text{q}$，属于前缀 $\\text{l}$ 的单词有 $\\text{lqb、lql}$，属于前缀 $\\text{q}$ 的单词有 $\\text{qqq、qql}$，方案 1 将四个单词按照前缀分成了两类，且每类至少包含一个单词，每个单词仅属于一类，所以方案 1 满足题意。\n评测用例规模与约定对于 $30\\%$ 的评测用例，$1 \\leq N \\leq 10$，$1 \\leq K \\leq 5$；\n对于 $50\\%$ 的评测用例，$1 \\leq N \\leq 50$，$1 \\leq K \\leq 10$；\n对于所有评测用例，$1 \\leq N \\leq 200$，$1 \\leq K \\leq 100$，$1 \\leq$ 单词长度 $\\leq 10$。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nJava\n2s\n256M\n\n\nPython3\n3s\n256M\n\n\nPyPy3\n3s\n256M\n\n\nGo\n3s\n256M\n\n\nJavaScript\n3s\n256M\n\n\n\n\n总通过次数: 9  |  总提交次数: 28  |  通过率: 32.1%\n难度: 中等   标签: 2023, 字典树, 国赛, 动态规划\n版权声明\n部分题目由用户贡献，若您是著作权持有人，请与我们联系。\n第十四届Python大学B组弹珠堆放\n题解\n(89)\n问题描述小蓝有 20230610 颗磁力弹珠，他对金字塔形状尤其感兴趣，如下图所示：\n\n高度为 $1$ 的金字塔需要 $1$ 颗弹珠；\n高度为 $2$ 的金字塔需要 $4$ 颗弹珠；\n高度为 $3$ 的金字塔需要 $10$ 颗弹珠；\n高度为 $4$ 的金字塔需要 $20$ 颗弹珠。\n小蓝想要知道用他手里的弹珠可以摆出的最高的金字塔的高度是多少？\n答案提交这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nJava\n2s\n256M\n\n\nPython3\n3s\n256M\n\n\nPyPy3\n3s\n256M\n\n\nGo\n3s\n256M\n\n\nJavaScript\n3s\n256M\n\n\n\n\n总通过次数: 723  |  总提交次数: 767  |  通过率: 94.3%\n难度: 中等   标签: 2023, 前缀和, 国赛\n版权声明\n部分题目由用户贡献，若您是著作权持有人，请与我们联系。\n解题思路import osimport sysn=20230610dp=[1]for i in range(2,500):    num=0    for j in range(1,i+1):      num+=j    dp.append(num+dp[i-2])for i,j in enumerate(dp):  if n&gt;dp[i]:    continue  else:    print(i)    break print(494)\n划分问题描述给定 $40$ 个数，请将其任意划分成两组，每组至少一个元素。每组的权值为组内所有元素的和。划分的权值为两组权值的乘积。请问对于以下 $40$ 个数，划分的权值最大为多少。\n5160 9191 6410 4657 7492 1531 8854 1253 4520 9231 1266 4801 3484 4323 5070 1789 2744 5959 9426 4433 4404 5291 2470 8533 7608 2935 8922 5273 8364 8819 7374 8077 5336 8495 5602 6553 3548 5267 9150 3309\n在试题包中有一个名为 \\\\verb|nums.txt| 的文本文件，文件中的数与题面上的数相同。\n答案提交这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nJava\n2s\n256M\n\n\nPython3\n3s\n256M\n\n\nPyPy3\n3s\n256M\n\n\nGo\n3s\n256M\n\n\nJavaScript\n3s\n256M\n\n\n\n\n总通过次数: 186  |  总提交次数: 248  |  通过率: 75%\n难度: 中等   标签: 2023, 国赛, 动态规划, 背包问题\n版权声明\n部分题目由用户贡献，若您是著作权持有人，请与我们联系。\n解题思路#根据题意可知分成两个集合的权值差要最小#可以看成背包问题，背包大小为所有元素和的一半，最后看背包装了多少ss = &quot;&quot;&quot;5160 9191 6410 4657 7492 1531 8854 1253 4520 9231 1266 4801 3484 4323 5070 1789 2744 5959 9426 4433 4404 5291 2470 8533 7608 2935 8922 5273 8364 8819 7374 8077 5336 8495 5602 6553 3548 5267 9150 3309&quot;&quot;&quot;nums = list(map(int, ss.split(&quot; &quot;)))bag = sum(nums) // 2n = 40dp = [[0] * (bag + 1) for i in range(n + 1)]for i in range(1, n + 1):    cur = nums[i - 1]    for j in range(1, bag + 1):        if j - cur &gt;= 0:            dp[i][j] = max(dp[i - 1][j - cur] + cur, dp[i - 1][j])a = max(dp[40])b = sum(nums) - aprint(a * b)\n偶串问题描述小蓝特别喜欢偶数，当他看到字符串时，他总数要检查一下是不是每种字符都是出现偶数次。给定一个字符串，请帮助小蓝检查一下该字符串是否满足要求。\n输入描述输入一行包含一个字符串，由小写英文字母组成。\n输出描述如果字符串中的每种字符都是出现偶数次，输出大写英文单词 $\\verb|YES|$ ，否则输出大写英文单词 $\\verb|NO|$ 。\n样例输入banana\n样例输出NO\n样例输入bbnana\n样例输出YES\n评测用例规模对于 $50\\%$ 的评测用例， $1\\le$ 字符串长度 $\\le 1000$；\n对于所有评测用例，$1\\le$ 字符串长度 $\\le 10^6$ 。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nJava\n2s\n256M\n\n\nPython3\n3s\n256M\n\n\nPyPy3\n3s\n256M\n\n\nGo\n3s\n256M\n\n\nJavaScript\n3s\n256M\n\n\n\n\n总通过次数: 386  |  总提交次数: 429  |  通过率: 90%\n难度: 中等   标签: 2023, 国赛, 语法\n版权声明\n部分题目由用户贡献，若您是著作权持有人，请与我们联系。\n解题思路常规思路直接模拟直接求\nfrom collections import Counters = list(input())d = Counter(s)mark = 1for k, v in d.items():    if v % 2 != 0:        mark = 0        breakprint(&quot;YES&quot; if mark == 1 else &quot;NO&quot;)\n使用异或根据异或的性质我们可以知道：任意两个相同的数异或的值为0，故偶数个相同的数异或的值也是0\n所以最后我们走一遍循环，最后异或值只要为0那说明所有数字出现的次数为偶数次，反之则存在一个数字出现了奇数次\n最后由于异或只能在数字之间，所以我们用字符的ascii码(ord)来代表这个字符\nans = 0for i in input():    ans ^= ord(i)print(&quot;NO&quot; if ans else &quot;YES&quot;)\n交易账本问题描述小蓝最近研发了一种新的记账方式，并邀请了一些用户参加测试。交易账本可以看作是交易记录的集合，每条交易记录都有着一个独一无二的交易编号 $txId$ （编号大小反映了交易记录产生的时间顺序， $txId$ 小的交易记录先发生于 $txId$ 大的交易记录），每条交易记录包含一个或多个输入信息以及一个或多个输出信息。\n其中输入来自于已经发生过的某比交易的某个输出，可以理解为这笔钱从某比交易输出后继续输入到了当前这比交易中，输入信息主要包含以下数据：$fromTxId$、$fromTxOutNumber$ ，这表示当前输入来自于交易编号为 $fromTxId$ 的第 $fromTxOutNumber$ $(fromTxOutNumber=0,1,2,\\cdots )$ 个输出；输出信息主要包含以下数据：$account$、$val$ ，表示将 $val$ 数目的钱转移到了账户编号为 $account$ 的账户上。注意，当 $fromTxId$ 和 $fromTxOutNumber$ 都为 $-1$ 时，表明这是一笔特殊交易，由系统账户直接产生输出，特殊交易只含有一个输入和一个输出，可以认为系统账户拥有无限多数目的钱，特殊交易一定可以成功。\n一个合法的账本应满足以下条件：1）对于每笔交易记录，所有的输入中涉及到的钱的总数目应和所有输出中钱的总数目相等；2）交易中的一个输出要么不使用，要使用的话输出中的钱应该全部分配给下一个输入，而不能分配给多个输入（特殊交易除外）；3）交易按照顺序进行，不可以在某比交易中引用还未发生的交易。\n现在已知一共有 $N$ 个不同的账户，初始时所有账户钱数目都为 $0$ ，账本上总计有 $M$ 条交易记录（按照交易完成的顺序进行记录），请你来判断下账本上的记录是否是合法的。\n输入描述输入的第一行包含一个整数 $T$ ，表示有 $T$ 组输入数据。\n对于每组输入数据：\n第一行包含两个整数 $N,M$ ，用一个空格分隔，分别表示账户的数目和账本的交易记录数目，其中账户编号为 $0,1,2,\\cdots,N-1$ ，交易记录编号为 $0,1,2,\\cdots ,M-1$ 。\n接下来 $M$ 行，每行包含一条交易记录的信息，交易记录编号依次为 $0, 1, 2, \\cdots, M-1$ 。第一个整数 $inCount$ 表示输入的个数，接下来包含 $inCount$ 个输入信息，每个输入信息包含 $fromTxId$ 和 $fromTxOutNumber$ 两个整数；接下来包含一个整数 $outCount$ 表示输出的个数，然后接着包含 $outCount$ 个输出信息，每个输出信息包含 $account$ 和 $val$ 两个整数。\n输出描述对于每组输入数据输出一行，如果账本记录合法则输出英文单词 $\\verb|YES|$ ，否则输出英文单词 $\\verb|NO|$。\n样例输入43 31 -1 -1 1 0 1001 0 0 2 1 50 2 502 1 0 1 1 1 2 1003 31 -1 -1 1 0 1001 0 0 2 1 50 2 502 1 0 1 1 1 2 1503 31 -1 -1 1 0 1001 0 0 2 1 50 2 503 0 0 1 0 1 1 1 2 2003 31 -1 -1 1 0 1002 0 0 2 0 2 1 100 2 1001 -1 -1 1 2 100\n样例输出YES NO NO NO\n样例说明对于第一个数据：第一条交易 $(txId=0)$ 为特殊交易，给账户 $0$ 转入了 $100$；第二条交易 $(txId=1)$ 将上一条交易的唯一一个输出作为当前交易的输入，有两个输出，分别给账户 $1$ 和 $2$ 转入了 $50$ ；最后一条交易 $(txId=2)$ 将上一条交易的两个输出作为当前交易的输入，给账户 $2$ 转入了 $100$ 。\n对于第二个数据，第三条交易中输入与输出总额不相等。\n对于第三个数据，第一条交易中的输出被使用了超过一次。\n对于第四个数据，第二条交易中引用了还未发生的交易的输出。\n评测用例规模对于所有评测用例， $1\\le T\\le 10$ ， $1\\le N\\le 100$ ， $1\\le M\\le 1000$ ， $1\\le inCount, outCount\\le 100$ ， $1\\le$ 交易中涉及到钱的数目$\\le 10000$ ， $0\\le account\\le N-1$ ， $0\\le fromTxId\\le M-1$ 。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nJava\n2s\n256M\n\n\nPython3\n3s\n256M\n\n\nPyPy3\n3s\n256M\n\n\nGo\n3s\n256M\n\n\nJavaScript\n3s\n256M\n\n\n\n\n解题思路import sysimport osread=sys.stdin.readlinedef judge():    n,m=list(map(int,input().split()))#    print(f&#x27;n=&#123;n&#125;,&#123;m&#125;&#x27;)    vis=[[0]*m for _ in range(m)]    flag=True    for idx in range(m):        record=list(map(int,read().split()))        money=0        for i in range(1,2*record[0]+1,2):            if record[i]==-1:                money=float(&#x27;inf&#x27;)            else:                if vis[record[i]][record[i+1]]==0:                    flag=False                else:                    money+=vis[record[i]][record[i+1]]                    vis[record[i]][record[i+1]]=0        out=2*record[0]+1        for i in range(out+2,len(record),2):            j=(i-out)//2-1#            print(f&#x27;out=&#123;out&#125;,i=&#123;i&#125;,j=&#123;j&#125;&#x27;)            vis[idx][j]=record[i]            if money!=float(&#x27;inf&#x27;):                money-=record[i]        if money!=float(&#x27;inf&#x27;) and money!=0:            flag=False    return &#x27;YES&#x27; if flag==True else &#x27;NO&#x27;def main():    t=int(input())    for _ in range(t):        print(judge())    returnmain()\n背包问题问题描述小蓝是一位狂热的积木爱好者，家里堆满了自己用积木组装的建筑模型。最近，有两款新出的积木组件上市，小蓝自然不会错过，他带上了自己的三个背包来到了积木商城，打算将尽可能多的积木组件带回家，每个背包都有一个固定的空间大小。小蓝只会购买这两种新出的积木组件 $A$ 和 $B$ ， $A$ 和 $B$ 各自会占用背包的一部分空间，但对于同一种类型的积木占用的空间是相同的。小蓝想知道自己最多能带走多少数量的积木组件。\n可以认为小蓝有足够的货币，只要背包可以装下的积木他都有能力购买。商场内的积木数量也是有限制的。\n输入描述输入的第一行包含一个整数 $T$ ，表示有 $T$ 组独立的询问。\n每一组询问由三行组成。\n每组询问的第一行包含三个整数 $B_1, B_2, B_3$ ，相邻的整数之间使用一个空格分隔，表示三个背包的空间大小。\n每组询问的第二行包含两个整数 $cnt_A, cnt_B$ ，用一个空格分隔，分别表示商场内积木组件 $A$ 和 $B$ 的总量。\n每组询问的第三行包含两个整数 $V_A, V_B$ ，用一个空格分隔，分别表示每个积木组件 $A$ 和 $B$ 所占用的空间大小。\n输出描述输出 $T$ 行，每行包含一个整数表示答案。\n样例输入3 2 2 3 1 2 1 2 3 8 3 3 4 4 2 6 8 7 10 10 5 1\n样例输出3 5 12\n样例说明对于第一组询问，第一个背包装一个 B 积木，无剩余空间；第二个背包装一个 B 积木，无剩余空间；第三个背包装一个 A 积木，剩余 2 空间，但积木已经没有了；最终答案是 $3$ ，可以带走所有的积木。\n对于第二组询问，第一个背包和第三个背包各自装一个 B 组件，第二个背包装两个 B 组件和一个 A 组件，答案是 $5$ 。\n对于第三组询问，第一个背包：1A+1B；第二个背包：8B；第三个背包：1A+1B。答案是 $12$ 。\n评测用例规模对于 $30\\%$ 的评测用例， $1\\le cnt_A,cnt_B\\le 100$ ；\n对于所有评测用例， $1\\le T\\le 100$ ， $1\\le B_1,B_2,B_3\\le 10^9$ ， $1\\le V_A,V_B\\le 10^9$ ， $1\\le cnt_A,cnt_B\\le 1,000$ 。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nJava\n2s\n256M\n\n\nPython3\n3s\n256M\n\n\nPyPy3\n3s\n256M\n\n\nGo\n3s\n256M\n\n\nJavaScript\n3s\n256M\n\n\n\n\n解题思路def solve():    a = LII()  # 3个背包    A, B = MII()  # 1e3    va, vb = MII()    if va &gt; vb:        va, vb = vb, va        A, B = B, A    res = 0    for i in range(min(A, a[0] // va) + 1):        for j in range(min(A - i, a[1] // va) + 1):            cnta, cntb = A, B            mx1 = min((a[0] - i * va) // vb, cntb)  # 更新B的剩余数量            cntb -= mx1            mx2 = min((a[1] - j * va) // vb, cntb)            cntb -= mx2            t = i + j + mx1 + mx2   # B1和B2的数量和            leftA = cnta - i - j            mi = min(leftA, a[2] // va)  # B3最多能装多少个A            left_v = a[2] - mi * va            t += mi + min(left_v // vb, cntb)  # 剩下的装B            res = max(res, t)    print(res)if __name__ == &#x27;__main__&#x27;:    # 1多组数据，0单组数据    t = 1     if t:        t = II()        for _ in range(t):            solve()    else:        solve()\n翻转问题描述小蓝制作了 $n$ 个工件，每个工件用一个由小写英文字母组成的，长度为 $2$ 的字符串表示，第 $i$ 个工件表示为 $s_i$ 。小蓝想把 $n$ 个工件拼接到一起，方便转移到另一个地方完成下一道工序，而拼接后的工件用字符串 $S=s_1+s_2+…+s_n$ 表示，其中 $+$ 表示一种奇特的拼接方式：对于 $c=a+b$ 来说，如果 $a$ 的第二个字符和 $b$ 的第一个字符相同，则拼接后的结果 $c$ 长度为 $3$ 而不是 $4$ ，中间相同的字符可以省略一个，比如 $xy+yz=xyz$ 而 $xy+zy=xyzy$ 。小蓝为了让拼接后的字符串 $S$ 的长度尽量小，可以将若干个工件进行左右翻转之后再进行拼接，请问拼接后的字符串 $S$ 的最小长度是多少？\n请注意所有工件必须按出现顺序依次拼接，可以翻转任意工件。\n输入描述输入的第一行包含一个正整数 $n$ 。\n接下来 $n$ 行，每行包含一个长度为 $2$ 字符串，依次表示 $s_1, s_2, \\cdots, s_n$ 。\n输出描述输出一行，包含一个整数表示答案。\n样例输入3 ab cb zz\n样例输出5\n样例说明将 $s_2$ 翻转后，拼接结果为 $abczz$ ，长度为 $5$ 。\n评测用例规模对于 $20\\%$ 的评测用例， $n\\le20$；\n对于所有评测用例，$1\\le n \\le 10^5$ 。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nJava\n2s\n256M\n\n\nPython3\n3s\n256M\n\n\nPyPy3\n3s\n256M\n\n\nGo\n3s\n256M\n\n\nJavaScript\n3s\n256M\n\n\n\n\n总通过次数: 204  |  总提交次数: 253  |  通过率: 80.6%\n难度: 中等   标签: 2023, 国赛, 动态规划\n版权声明\n部分题目由用户贡献，若您是著作权持有人，请与我们联系。\n解题思路import osimport sys# 请在此输入您的代码n = int(input())s = [input() for _ in range(n)]dp1 = [2] * n # dp1[i] 第i个字符串不翻转的最小长度dp2 = [2] * n # dp2[i] 第i个字符串翻转的最小长度for i in range(1, n): # 枚举每一个字符串    # 1.dp1[i]从dp1[i-1]或dp2[i-1]转移    k1 = dp1[i-1] + 2 - (s[i-1][1] == s[i][0])    k2 = dp2[i-1] + 2 - (s[i-1][0] == s[i][0])    dp1[i] = min(k1, k2)    # 2.dp1[i]从dp1[i-1]或dp2[i-1]转移    k3 = dp1[i-1] + 2 - (s[i-1][1] == s[i][1])    k4 = dp2[i-1] + 2 - (s[i-1][0] == s[i][1])    dp2[i] = min(k3, k4)print(min(dp1[n-1], dp2[n-1]))\n最大阶梯问题描述小蓝特别喜爱阶梯图案，阶梯图案可以看做是由若干个大小和颜色都相同的方格组成的，对于大小为 $N$ 的阶梯图案，包含了 $N$ 个连续的列，其中第 $i$ 列恰好有 $i$（$1\\le i\\le N$）个方格，将这 $N$ 列的底部对齐后便组成了一个阶梯图案，将其按照 $90$ 度旋转若干次后仍是阶梯图案，下图展示了几个不同大小的阶梯图案：\n\n小蓝有一块大小为 $H\\times H$ 的布匹，由 $H\\times H$ 个大小相同的方格区域组成，每一个方格都有自己的颜色。小蓝可以沿着方格的边缘对布匹进行裁剪，他想要知道自己能得到的最大的同色阶梯图案的大小是多少？\n输入描述输入的第一行包含一个整数 $H$ 表示布匹大小。\n接下来输入 $H$ 行，每行包含 $H$ 个整数，相邻的整数之间使用一个空格分隔，表示每个方格的颜色。\n输出描述输出一行包含一个整数表示答案。\n样例输入5 0 2 1 1 0 0 0 2 2 0 0 0 1 1 1 0 0 1 1 1 2 1 1 0 2\n样例输出3\n样例说明如下图所示，最大的同色阶梯图案用红色边框标出。\n\n评测用例规模对于 $30\\%$ 的评测用例， $1\\le H\\le 10$；\n对于 $60\\%$ 的评测用例， $1\\le H\\le 100$；\n对于所有评测用例， $1\\le H\\le 1000$ ， $0\\le$ 方格颜色$\\le 10$ 。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nJava\n5s\n256M\n\n\nPython3\n5s\n256M\n\n\nPyPy3\n5s\n256M\n\n\nGo\n5s\n256M\n\n\nJavaScript\n5s\n256M\n\n\n\n\n总通过次数: 96  |  总提交次数: 158  |  通过率: 60.8%\n难度: 中等   标签: 2023, 国赛, 动态规划\n版权声明\n部分题目由用户贡献，若您是著作权持有人，请与我们联系。\n解题思路import osimport sys# 既然是动态规划，就要找转移来源，发现 dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1# 图形可以旋转 90 度，对应的图形就有 4 种# 有两种解决思路: 1. 将原始图形进行旋转，用 同一个 方法 解决#                2. 原始图不动，写 四 种寻找方法 解决# 时间复杂度都是 O(n ^ 2)h = int(input())matrix = [[] for _ in range(h)]matrix_fan = [[] for _ in range(h)]matrix_col = [[0] * h for _ in range(h)]matrix_col_fan = [[0] * h for _ in range(h)]for i in range(h):  l = list(map(int, input().split()))  matrix[i].extend(l)  matrix_fan[h-i-1].extend(l[::-1])  for j, v in enumerate(l):    matrix_col[h-j-1][i] = v    matrix_col_fan[j][h-i-1] = vdef check(l: list):  ans = 1  dp = [[1] * h for _ in range(h)]  for i in range(1, h):    for j in range(1, h):      if l[i][j] == l[i-1][j] == l[i][j-1]:        dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1        ans = max(ans, dp[i][j])    return ansprint(max(check(matrix), check(matrix_fan), check(matrix_col), check(matrix_col_fan)))\n最长回文前后缀 贸易航线困局第十四届Python大学A组跑步计划残缺的数字整数变换2023火车运输走方格等腰三角形彩色二叉树选段排序最长同类子串第十四届Java大学C组跑步计划混乘数字整数变换定时任务2023最大算式火车运输走方格彩色二叉树单词分类第十四届Java大学B组互质逆元玩具不完整的算式星球序列电动车游戏非对称二叉树数和游戏第十四届Java大学A组X质数残缺的数字整数变换最大算式躲炮弹等腰三角形连续数组质数排序单词分类游戏的得分","categories":["刷题","蓝桥国赛"],"tags":["蓝桥杯"]},{"title":"蓝桥杯模拟赛","url":"/2024/04/05/%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A8%A1%E6%8B%9F%E8%B5%9B%E6%B1%87%E6%80%BB/","content":"小郑的蓝桥平衡串问题描述平衡串指的是一个字符串，其中包含两种不同字符，并且这两种字符的数量相等。\n例如，$ababab$ 和 $aababb$ 都是平衡串，因为每种字符各有三个，而 $abaab$ 和 $aaaab$ 都不是平衡串，因为它们的字符数量不相等。\n平衡串在密码学和计算机科学中具有重要应用，比如可以用于构造哈希函数或者解决一些数学问题。\n小郑拿到一个只包含 $L$、$Q$ 的字符串，他的任务就是找到最长平衡串，且满足平衡串的要求，即保证子串中 $L$、$Q$ 的数量相等。\n输入格式输入一行字符串，保证字符串中只包含字符 $L$、$Q$。\n输出格式输出一个整数，为输入字符串中最长平衡串的长度。\n样例输入LQLL\n样例输出2\n评测数据规模对于所有评测数据，输入字符串的长度 $len \\le 1000$。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nJava\n2s\n256M\n\n\nPython3\n3s\n256M\n\n\nPyPy3\n3s\n256M\n\n\nGo\n3s\n256M\n\n\nJavaScript\n3s\n256M\n\n\n\n\n解题答案import osimport sysfrom itertools import accumulatedef get_presum(a):  sum=list(accumulate(a))  return sumdef get_sum(sum,l,r):  if l==0:    return sum[r]  else:    return sum[r]-sum[l-1]s=input()n=len(s)a=[]for x in s:  if x==&quot;L&quot;:    a.append(1)  else:    a.append(-1)sum=get_presum(a)ans=0for i in range(n):  for j in range(i,n):    if get_sum(sum,i,j)==0:      ans=max(ans,j-i+1)print(ans)\n区间次方和问题描述给定一个长度为 $n$ 的整数数组 $a$ 以及 $m$ 个查询。\n每个查询包含三个整数 $l,r,k$ 表示询问 $l \\sim r$ 之间所有元素的 $k$ 次方和。\n请对每个查询输出一个答案，答案对 $10^9+7$ 取模。\n输入格式第一行输入两个整数 $n,m$ 其含义如上所述。\n第二行输入 $n$ 个整数 $a[1],a[2],…,a[n]$。\n接下来 $m$ 行，每行输入三个整数 $l,r,k$ 表示一个查询。\n输出格式输出 $m$ 行，每行一个整数，表示查询的答案对 $10^9+7$ 取模的结果。\n样例输入5 31 2 3 4 51 3 22 4 33 5 1\n样例输出149912\n评测数据规模：对于 $100$% 的评测数据：$1 \\leq n,m \\leq 10^5$ ，$1 \\leq a[i] \\leq 100$ ，$1 \\leq l \\leq r \\leq n$ ，$1 \\leq k \\leq 5$ 。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nJava\n2s\n256M\n\n\nPython3\n3s\n256M\n\n\nPyPy3\n3s\n256M\n\n\nGo\n3s\n256M\n\n\nJavaScript\n3s\n256M\n\n\n\n\n总通过次数: 1770  |  总提交次数: 2005  |  通过率: 88.3%\n难度: 简单   标签: 前缀和\n解题答案import osimport sysfrom itertools import accumulateMOD=1000000007def get_presum(a):  sum=list(accumulate(a))  sum=[x % MOD for x in sum]  return sumdef get_sum(sum,l,r):  if l==0:    return sum[r]  else:    return (sum[r]-sum[l-1]+MOD)%MODn,m=map(int,input().split())a=list(map(int,input().split()))sum_list=[]for i in range(1,6):  sum_list.append(get_presum([x**i for x in a]))for i in range(m):  l,r,k=map(int,input().split())  print(get_sum(sum_list[k-1],l-1,r-1))\n蓝桥17160问题描述小 Z 喜欢盖印章。\n有一天，小 Z 得到了一个 $n\\times m$ 的网格图，与此同时，他的手上有两种印章（分别称为 A，B），如下图所示。\n\n他想将这两种印章盖在这个网格图上。\n由于小 Z 是一个有原则的人，他将按照以下规则进行操作。\n\n每个印章所形成的图案的边必须和网格图边重合。\n对于网格图上的每一个格子，最多只能被一个印章图案覆盖。\n对于每个印章，可以将印章顺时针旋转 $90^{\\circ},180^{\\circ},270^{\\circ}$。\n印章的图案在网格图上必须是完整的。\n\n给定小 Z 所盖完印章的网格图以及两种印章的使用次数 $K$，请你分别求出两种印章的使用次数。可以证明，在这种情况下二者的使用次数是唯一的。\n数据保证存在一种方案达到要求。\n具体例子可以参考样例。\n输入格式第一行包含三个正整数 $n ,m, K(2 \\le n \\times m \\le 10^{6}, 0 \\le K \\le n \\times m)$，具体意义如题面所示。\n接下来有 $n$ 行长度为 $m$ 的 01 串，其中 1 表示这个位置被印章图案覆盖。否则表示这个位置没有被覆盖。\n输出格式输出两个整数，第一个整数为 A 出现的次数，第二个整数为 B 出现的次数。\n样例输入13 3 3110110110\nxxxxxxxxxx15 1import os2import sys3​4# 请在此输入您的代码5n = int(input())6a = list(map(int, input().split()))7a.sort()8b = []9c = []10for i in range(n):11    if a[i] % 2 == 0:12        b.append(a[i])13    else:14        c.append(a[i])15print(“ “.join(map(str, c)),” “.join(map(str,b)))python0 3\n样例输入23 3 2110110110\n样例输出22 0\n说明上述样例如图所示：\n\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n128M\n\n\nC\n1s\n128M\n\n\nJava\n2s\n128M\n\n\nPython3\n3s\n128M\n\n\nPyPy3\n3s\n128M\n\n\nGo\n3s\n128M\n\n\nJavaScript\n3s\n128M\n\n\n\n\n奇偶排序问题描述小蓝所在的王国名为偶数王国，在他们王国中数字的比较通常按以下步骤进行：\n\n如果两个数字的奇偶性不同，那么偶数一定大于奇数。\n如果两个数字的奇偶性相同，则比较它们的实际数值大小。\n\n现在给你一个正整数数组 AA，请你输出按照偶数王国规则从小到大排序后的 AA。\n输入格式第一行输入一个整数 N(1≤N≤103)N(1≤N≤103) 表示数组 AA 的长度。\n第二行输入 NN 个整数 A1,A2,A3,⋯ ,AN(1≤Ai≤105)A1,A2,A3,⋯,AN(1≤Ai≤105) 表示数组 AA。\n输出格式输出一行 NN 个整数表示答案。\n样例输入51 2 3 4 5\n样例输出1 3 5 2 4\n解题思路解法1：\nimport osimport sys# 请在此输入您的代码n = input()str_n = map(int,input().split())list_a = []list_b = []for i in str_n:    if i%2==0:        list_b.append(i)    else:        list_a.append(i)list_a.sort()list_b.sort()print(&quot; &quot;.join(map(str,list_a))+&quot; &quot;+&quot; &quot;.join(map(str,list_b)))\n解法2：\nimport osimport sys# 请在此输入您的代码a=input()b=list(map(int,input().split()))c=[]d=[]for i in range(len(b)):    if b[i]%2==0 and b[i]!=0:        c.append(b[i])    else:        d.append(b[i])c.sort()d.sort()e=d+cf=&#x27; &#x27;.join(map(str,e))print(f)\n解法3：\nn=int(input())nums=list(map(int,input().split()))a=[]b=[]for i in range(n):  if nums[i]&amp;1:    a.append(nums[i])  else:    b.append(nums[i])a.sort()b.sort()c=a+bprint(*c)\n解法4：\nimport osimport sys# 请在此输入您的代码n = int(input())a = list(map(int, input().split()))a.sort()b = []c = []for i in range(n):    if a[i] % 2 == 0:        b.append(a[i])    else:        c.append(a[i])print(&quot; &quot;.join(map(str, c)),&quot; &quot;.join(map(str,b)))\n可结合的元素对问题描述小蓝和小桥是蓝桥学院中学业成绩最好的两位同学。一天，小蓝向小桥提出了一个问题，希望小桥能够展示她最新学到的知识。问题是这样的：\n给定一个长度为 NN 的数组 A，如果一对下标 (i,j) 满足以下规则，那么称它们为可结合的元素对：\n\n1≤i&lt;j≤N。\nlowbit(ai+aj)=ai+aj ，其中 lowbit(x) 表示 x 的二进制表示中最低位的 1的值。\n\n小蓝希望小桥能够计算出数组 AA 中可结合的元素对的数量，但小桥无法解决这个问题，只能请你帮忙了。\n输入格式第一行输入一个整数 N(2≤N≤105) 表示数组 A 的长度。\n第二行输入 NN 个整数 A1,A2,A3,⋯ ,AN(1≤Ai≤109) 表示数组 A。\n输出格式输出一个整数表示答案。\n样例输入52 4 6 7 8\n样例输出1\n样例说明只有下标对 (1,3) 符合条件。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n2s\n256M\n\n\nC\n2s\n256M\n\n\nJava\n3s\n256M\n\n\nPython3\n4s\n256M\n\n\nPyPy3\n4s\n256M\n\n\nGo\n4s\n256M\n\n\nJavaScript\n4s\n256M\n\n\n\n\n解题思路：解法1：\n二者之和为2的幂次即为所求\nimport osimport sysfrom collections import Counter# 请在此输入您的代码n = int(input())a = [int(x) for x in input().split()]a.sort()pool =&#123;&#125;rs = 0for x in a:  e = 2 ** x.bit_length()-x  rs += pool.get(e,0)  if x in pool:      pool[x] += 1  else:      pool[x] = 1print(rs)\n解法2：\nfrom math import logfrom collections import Countern = int(input())arr = list(map(int, input().split()))arr.sort()d = Counter()for i in range(n):#预处理计数    d[arr[i]] += 1ans = 0for i in range(n - 1, 0, -1):    d[arr[i]] -= 1 #计数减去当前位置    cnt = int(log(arr[i], 2)) + 1    res = 2 ** cnt - arr[i]    ans += d[res]    # ans+=arr[0:i].count(res)print(ans)\n解法3：\n两个数加起来是2n的都符合条件，用hash表计数。\nn = int(input())a = sorted(map(int,input().split()))res = []for i in range(1, 32): res.append(1&lt;&lt;i)cnt = &#123;&#125;ans = 0for i in range(n):    for j in range(len(res)):        ans += cnt.get(res[j] - a[i], 0)    if a[i] not in cnt: cnt[a[i]] = 1    else: cnt[a[i]] += 1print(ans)\n题目：霓虹问题描述晚上，小蓝正无聊的走在大路上，小蓝所在的街区是一个带有赛博朋克风格的街区。\n他抬头一看，看到了很多霓虹灯牌。在其中的某一个店铺前，挂着一排的数字灯牌，每一个数字的显示都依靠 77 段 LED 管，亮着的灯管组成数字，具体来说如下图所示： \n\n小蓝刚学过数字电路，他知道具体的工作原理如下：\n\n在思考的过程中，他发现数字发生了变化。他想要知道，在数字变化的过程中，总共有多少根灯管的状态产生了变化？\n例如，从显示数字 00 到显示数字 66，会有一个灯管熄灭，一个灯管点亮，那么总共有两根灯管发生了变化。\n具体来说，当前的数字串是 AA，一秒钟之后，数字串变成了 BB，小蓝想知道，在数字跳转的过程中，有多少个灯管的状态发生了变化。\n输入格式输入共两行，包含两个等长字符串。\n第一行包含一个字符串 SS（∣S∣≤105∣S∣≤105），代表一开始的数字串。\n第二行包含一个字符串 TT（∣T∣≤105∣T∣≤105），代表跳变后的数字串。\n输出格式一个整数，代表跳变过程中变化的灯管数量。\n样例输入0156\n样例输出9\n说明跳变过程如题干中的图片。\n0→50→5 变化了 33 根灯管，1→61→6 变化了 66 根灯管，共变化 99 根灯管。\n解题思路本题考察位运算，具体考察异或运算。\n每个数字由 77 个数码管表示，我们可以用 77 个二进制位来表示每个数。\n0∼90∼9 可以表示为如下数位：\nint pos[] = &#123;0B1111110, 0B0000110, 0B1011011, 0B1001111, 0B0100111,             0B1101101, 0B1111101, 0B1000110, 0B1111111, 0B1101111&#125;;\n0B 是代码语言的二进制前缀，同样的还有 0X 是十六进制前缀，0 是八进制前缀。\n对于两个数，比如 11 和 22，我们可以用 pos1⊗pos2pos1⊗pos2，⊗⊗ 为异或，结果为 0B1011101，11 的数量就是不同的数量。\n复杂度：O(∣S∣)O(∣S∣)。\n如果你愿意统计出 100100 种情况，也是可以的。\nAC_Code\nC++\n\n#include &lt;iostream&gt;using namespace std;const int N = 1e5+100;int pos[] = &#123;0B1111110, 0B0000110, 0B1011011, 0B1001111, 0B0100111,             0B1101101, 0B1111101, 0B1000110, 0B1111111, 0B1101111&#125;;char S[N], T[N];inline int nu_i(int x) &#123;    int res = 0;    while (x) &#123;        res += (x &amp; 1);        x &gt;&gt;= 1;    &#125;    return res;&#125;int main() &#123;    cin &gt;&gt; S;    cin &gt;&gt; T;    int ans = 0;    for (int i = 0; S[i]; ++i) &#123;        ans += nu_i(pos[S[i] - &#x27;0&#x27;] ^ pos[T[i] - &#x27;0&#x27;]);    &#125;    cout &lt;&lt; ans &lt;&lt; &#x27;\\n&#x27;;    return 0;&#125;\n\nJava\n\nimport java.util.Scanner;public class std &#123;    static final int N = 100010;    static int[] pos = &#123;0B1111110, 0B0000110, 0B1011011, 0B1001111, 0B0100111,                        0B1101101, 0B1111101, 0B1000110, 0B1111111, 0B1101111&#125;;    static int nu_i(int x) &#123;        int res = 0;        while (x != 0) &#123;            res += (x &amp; 1);            x &gt;&gt;= 1;        &#125;        return res;    &#125;    public static void main(String[] args) &#123;        Scanner scanner = new Scanner(System.in);        char[] S = scanner.next().toCharArray();        char[] T = scanner.next().toCharArray();        int ans = 0;        for (int i = 0; i &lt; S.length; i++) &#123;            ans += nu_i(pos[S[i] - &#x27;0&#x27;] ^ pos[T[i] - &#x27;0&#x27;]);        &#125;        System.out.println(ans);        scanner.close();    &#125;&#125;\n\nPython\n\ndef nu_i(x):    res = 0    while x:        res += (x &amp; 1)        x &gt;&gt;= 1    return resif __name__ == &quot;__main__&quot;:    pos = [0B1111110, 0B0000110, 0B1011011, 0B1001111, 0B0100111,           0B1101101, 0B1111101, 0B1000110, 0B1111111, 0B1101111]    S = input()    T = input()    ans = 0    for i in range(len(S)):        ans += nu_i(pos[int(S[i])] ^ pos[int(T[i])])    print(ans)\n其他解法：解法1：\nli=[[1,0,1,1,0,1,1,1,1,1],[1,0,0,0,1,1,1,0,1,1],[1,1,1,1,1,0,0,1,1,1],[0,0,1,1,1,1,1,0,1,1],[1,0,1,0,0,0,1,0,1,0],[1,1,0,1,1,1,1,1,1,1],[1,0,1,1,0,1,1,0,1,1]]num1=list(map(int,input()))num2=list(map(int,input()))add=0for i in range(len(num1)):  for j in li:    add+=j[num1[i]]^j[num2[i]]print(add)\n解法2：\nimport osimport sys# 请在此输入您的代码def dd(a,b):  z = &#x27;&#x27;  for i in a:    if i not in b:      z+=i  for i in b:    if i not in a:      z+=i  return zf1 = input(&#x27; &#x27;)f2 = input(&#x27; &#x27;)sz = &#123;    &#x27;0&#x27;:&#x27;abcdef&#x27;,    &#x27;1&#x27;:&#x27;bc&#x27;,    &#x27;2&#x27;:&#x27;abged&#x27;,    &#x27;3&#x27;:&#x27;abgcd&#x27;,    &#x27;4&#x27;:&#x27;fgbc&#x27;,    &#x27;5&#x27;:&#x27;afgcd&#x27;,    &#x27;6&#x27;:&#x27;afedcg&#x27;,    &#x27;7&#x27;:&#x27;abc&#x27;,    &#x27;8&#x27;:&#x27;abcdefg&#x27;,    &#x27;9&#x27;:&#x27;abcdfg&#x27;&#125;t = &#x27;&#x27;for i,j in enumerate(f1):    t+=dd(sz[j],sz[f2[i]])print(len(t))\n解法3：\nimport osimport sysnum = [[1, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 0, 1, 0], [0, 1, 1, 1, 1, 0, 1], [0, 1, 1, 0, 1, 1, 1],       [1, 0, 1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1, 1], [1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 0, 0, 1, 0],       [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 0, 1, 1, 1]]start_num = input()end_num = input()count = 0for i in range(len(start_num)):    for j in range(7):        if num[int(start_num[i])][j] != num[int(end_num[i])][j]:            count += 1print(count)\n解法4：\nS = input()T = input()n = len(S)ans = 0res = &#123;0: &quot;1111110&quot;, 1: &quot;0011000&quot;, 2: &quot;0110111&quot;, 3: &quot;0111101&quot;, 4: &quot;1011001&quot;, 5: &quot;1101101&quot;,       6: &quot;1101111&quot;, 7: &quot;0111000&quot;, 8: &quot;1111111&quot;, 9: &quot;1111101&quot;&#125;for i in range(n):    a = res[int(S[i])]    b = res[int(T[i])]    for j in range(len(a)):        if a[j] != b[j]:            ans += 1print(ans)\n矩阵X问题描述小蓝面对一个 n×m 的矩形D，其中每个位置 (i,j) 上都有一个元素 xi,j。\n我们定义两个函数 f(D)、g(D)，f(D) 的值为矩阵 D 的所有元素的和值，g(D) 为矩阵 D 的极差，即矩阵中的最大值减去最小值。\n他需要在这个矩形中选择一个 n′×m′n′×m′ 的连续子矩阵，记为矩阵 D′，他希望选择的连续子矩阵 D′ 能够使得 f(D′)×g(D′) 最大化。\n小蓝知道你很聪明，于是他把问题交给了你，希望你回答他最大化的值是多少。\n连续子矩阵：是在原矩阵选取部分连续行、连续列所组成的新矩阵。\n输入格式第一行包含四个整数 n,m,n′,m′（n×m≤106,1≤n′≤n,1≤m′≤m），表示矩形的行数和列数，以及你需要选择的子矩阵的行数和列数。\n接下来 n 行，每行包含 m 个整数，表示矩形中每个位置的元素值 xi,j（1≤xi,j≤106）。\n输入量较大，建议采用较快的输入输出方式。\n输出格式一个整数，代表最大化的值。\n样例输入4 4 2 21 2 3 32 3 4 51 1 3 51 7 2 4\n样例输出78\n说明选择的连续子矩阵如下图黄色部分所示：\nf(D′)=13,g(D′)=6f(D′)=13,g(D′)=6。\n\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n4s\n256M\n\n\nC\n4s\n256M\n\n\nJava\n5s\n256M\n\n\nPython3\n10s\n256M\n\n\nPyPy3\n10s\n256M\n\n\nGo\n10s\n256M\n\n\nJavaScript\n10s\n256M\n\n\n\n\n解题思路本题考察单调队列，优先队列，思维，二维前缀和。\n首先第一个问题是存储问题，由于 n×m≤106n×m≤106，但是不知道 n,mn,m 的具体范围，所以，我们可以用一维数组模拟二维，或者二维 vectorvector，这样便就可以解决二维存储问题。\n第二个问题，矩阵求和，我们可以用简单的二维前缀和解决这个问题。\n第三个问题，求子矩阵的最值，我们有两个解法：\n\n我们记录一下每一行的连续 m′m′ 个元素的最值，具体用优先队列，或者单调队列实现吗，然后我们枚举每个子矩阵，并且暴力扫描这个子矩阵的所有行，由于行数可能很大，我们可以调换一下行列，因为 min⁡(n′,m′)≤106min(n′,m′)≤1\n\n06，所以整体的复杂度为 O(nmnm)O(nmnm\n\n)，四秒可以通过。\n我们不需要暴力扫描子矩阵的所有行，我们仍然可以通过单调队列完成扫描每一行，然后记录下连续 n′n′ 的最值即可。复杂度为 O(nm)O(nm)。\n\nAC_Code\nC++\n\n#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;queue&gt;#include &lt;cstring&gt;using namespace std;int n, m, n1, m1;const int N = 1e6+100;using ll = long long;int a[N];ll t[N];int Mx[N], Mn[N];inline int getidx(int a, int b) &#123;    return a * m + b;&#125;int main() &#123;    ios::sync_with_stdio(0);    cin.tie(0);    cout.tie(0);    cin &gt;&gt; n &gt;&gt; m &gt;&gt; n1 &gt;&gt; m1;    for (int i = 0; i &lt; n * m; ++i) &#123;        cin &gt;&gt; t[i];        a[i] = t[i];    &#125;    if (n1 &gt; m1) &#123;        for (int i = 0; i &lt; n; ++i) &#123;            for (int j = 0; j &lt; m; ++j) &#123;                a[j * n + i] = t[i * m + j];            &#125;        &#125;        swap(n1, m1);        swap(n, m);    &#125;    for (int i = 0; i &lt; n; ++i) &#123;        t[getidx(i, 0)] = a[getidx(i, 0)];        for (int j = 1; j &lt; m; ++j) &#123;            t[getidx(i, j)] = a[getidx(i, j)] + t[getidx(i, j - 1)];        &#125;    &#125;      using Pair = pair&lt;int, int&gt;;    priority_queue&lt;Pair&gt; qx, qn;    for (int i = 0; i &lt; n; ++i) &#123;        while (!qx.empty()) qx.pop();        while (!qn.empty()) qn.pop();        for (int j = 0; j &lt; m1 - 1; ++j) &#123;            qx.push(&#123;a[getidx(i, j)], j&#125;);            qn.push(&#123;-a[getidx(i, j)], j&#125;);        &#125;           for (int j = m1 - 1; j &lt; m; ++j) &#123;            while (!qx.empty() &amp;&amp; qx.top().second &lt;= j - m1) qx.pop();            while (!qn.empty() &amp;&amp; qn.top().second &lt;= j - m1) qn.pop();            qx.push(&#123;a[getidx(i, j)], j&#125;);            qn.push(&#123;-a[getidx(i, j)], j&#125;);            Mx[getidx(i, j)] = qx.top().first;            Mn[getidx(i, j)] = -qn.top().first;        &#125;    &#125;      ll ans = 0;    for (int i = n1 - 1; i &lt; n; ++i) &#123;        for (int j = m1 - 1; j &lt; m; ++j) &#123;            ll sum = 0;            int tx = -1e9, tn = 1e9;            for (int k = 0; k &lt; n1; ++k) &#123;                tx = max(tx, Mx[getidx(i - k, j)]);                tn = min(tn, Mn[getidx(i - k, j)]);                if (j == m1 - 1) sum += t[getidx(i - k, j)];                else sum += t[getidx(i - k, j)] - t[getidx(i - k, j - m1)];            &#125;            ans = max(ans, sum * (tx - tn));        &#125;    &#125;    cout &lt;&lt; ans &lt;&lt; &#x27;\\n&#x27;;    return 0;&#125;\n\nJava\n\nimport java.util.PriorityQueue;import java.util.Scanner;public class std &#123;    static int n, m, n1, m1;    static int[] a, Mx, Mn;    static long[] t;    public static void main(String[] args) &#123;        Scanner scanner = new Scanner(System.in);        n = scanner.nextInt();        m = scanner.nextInt();        n1 = scanner.nextInt();        m1 = scanner.nextInt();                a = new int[n * m];        t = new long[n * m];        Mx = new int[n * m];        Mn = new int[n * m];                for (int i = 0; i &lt; n * m; ++i) &#123;            t[i] = scanner.nextLong();            a[i] = (int) t[i];        &#125;        if (n1 &gt; m1) &#123;            for (int i = 0; i &lt; n; ++i) &#123;                for (int j = 0; j &lt; m; ++j) &#123;                    a[j * n + i] = (int) t[i * m + j];                &#125;            &#125;            int temp = n1;            n1 = m1;            m1 = temp;            temp = n;            n = m;            m = temp;        &#125;        for (int i = 0; i &lt; n; ++i) &#123;            t[getidx(i, 0)] = a[getidx(i, 0)];            for (int j = 1; j &lt; m; ++j) &#123;                t[getidx(i, j)] = a[getidx(i, j)] + t[getidx(i, j - 1)];            &#125;        &#125;        PriorityQueue&lt;Pair&gt; qx = new PriorityQueue&lt;&gt;((p1, p2) -&gt; Integer.compare(p2.first, p1.first));        PriorityQueue&lt;Pair&gt; qn = new PriorityQueue&lt;&gt;((p1, p2) -&gt; Integer.compare(p2.first, p1.first));        for (int i = 0; i &lt; n; ++i) &#123;            while (!qx.isEmpty()) qx.poll();            while (!qn.isEmpty()) qn.poll();                        for (int j = 0; j &lt; m1 - 1; ++j) &#123;                qx.offer(new Pair(a[getidx(i, j)], j));                qn.offer(new Pair(-a[getidx(i, j)], j));            &#125;            for (int j = m1 - 1; j &lt; m; ++j) &#123;                while (!qx.isEmpty() &amp;&amp; qx.peek().second &lt;= j - m1) qx.poll();                while (!qn.isEmpty() &amp;&amp; qn.peek().second &lt;= j - m1) qn.poll();                qx.offer(new Pair(a[getidx(i, j)], j));                qn.offer(new Pair(-a[getidx(i, j)], j));                Mx[getidx(i, j)] = qx.peek().first;                Mn[getidx(i, j)] = -qn.peek().first;            &#125;        &#125;        long ans = 0;        for (int i = n1 - 1; i &lt; n; ++i) &#123;            for (int j = m1 - 1; j &lt; m; ++j) &#123;                long sum = 0;                int tx = Integer.MIN_VALUE, tn = Integer.MAX_VALUE;                for (int k = 0; k &lt; n1; ++k) &#123;                    tx = Math.max(tx, Mx[getidx(i - k, j)]);                    tn = Math.min(tn, Mn[getidx(i - k, j)]);                    if (j == m1 - 1) sum += t[getidx(i - k, j)];                    else sum += t[getidx(i - k, j)] - t[getidx(i - k, j - m1)];                &#125;                ans = Math.max(ans, sum * (tx - tn));            &#125;        &#125;        System.out.println(ans);        scanner.close();    &#125;    static int getidx(int a, int b) &#123;        return a * m + b;    &#125;    static class Pair &#123;        int first;        int second;        Pair(int first, int second) &#123;            this.first = first;            this.second = second;        &#125;    &#125;&#125;\n\nPython\n\nimport heapqn, m, n1, m1 = map(int, input().split())a = []t = []for _ in range(n):    xx = list(map(int, input().split()))    for num in xx:        # print(num)        t.append(num)        a.append(num)if n1 &gt; m1:    a = [t[i * m + j] for j in range(m) for i in range(n)]    n1, m1 = m1, n1    n, m = m, nfor i in range(n):    for j in range(m):        if j == 0:            t[i * m + j] = a[i * m + j]        else:            t[i * m + j] = a[i * m + j] + t[i * m + j - 1]Mx = [0] * (n * m)Mn = [0] * (n * m)for i in range(n):    qx = []    qn = []    for j in range(m1 - 1):        heapq.heappush(qx, (-a[i * m + j], j))        heapq.heappush(qn, (a[i * m + j], j))    for j in range(m1 - 1, m):        while qx and qx[0][1] &lt;= j - m1:            heapq.heappop(qx)        while qn and qn[0][1] &lt;= j - m1:            heapq.heappop(qn)        heapq.heappush(qx, (-a[i * m + j], j))        heapq.heappush(qn, (a[i * m + j], j))        Mx[i * m + j] = -qx[0][0]        Mn[i * m + j] = qn[0][0]ans = 0for i in range(n1 - 1, n):    for j in range(m1 - 1, m):        sum_val = 0        tx = float(&#x27;-inf&#x27;)        tn = float(&#x27;inf&#x27;)        for k in range(n1):            tx = max(tx, Mx[(i - k) * m + j])            tn = min(tn, Mn[(i - k) * m + j])            if j == m1 - 1:                sum_val += t[(i - k) * m + j]            else:                sum_val += t[(i - k) * m + j] - t[(i - k) * m + j - m1]        ans = max(ans, sum_val * (tx - tn))print(ans)\n解题思路2import osimport sysfrom collections import dequeinput = sys.stdin.readline# 请在此输入您的代码n, m, n1, m1 = map(int, input().split())matrix = [[0] * (m + 1)]for _ in range(n):    matrix.append([0] + list(map(int, input().split())))# 二维前缀和prefix = [[0] * (m + 1) for _ in range(n + 1)]for i in range(1, n + 1):    for j in range(1, m + 1):        prefix[i][j] = prefix[i-1][j] + prefix[i][j-1] - prefix[i-1][j-1] + matrix[i][j]def shift_window(a, n, k, f, l):    b = []    de = deque()    for i in range(n):        while de and f(a[i], a[de[-1]], l):            de.pop()        de.append(i)        if i &gt;= de[0] + k:            de.popleft()        if i &gt;= k - 1:            b.append(a[de[0]])    return bdef f(x, y, l):    if l:        return x &gt;= y    return x &lt;= ybb_mx = []bb_mn = []for i in range(1, n + 1):    bb_mx.append(shift_window(matrix[i][1:], m, m1, f, 1))    bb_mn.append(shift_window(matrix[i][1:], m, m1, f, 0))cc_mx = []cc_mn = []for j in range(len(bb_mx[0])):    temp1 = []    temp2 = []    for i in range(n):        temp1.append(bb_mx[i][j])        temp2.append(bb_mn[i][j])    cc_mx.extend(shift_window(temp1, n, n1, f, 1))    cc_mn.extend(shift_window(temp2, n, n1, f, 0))gap = [0] * len(cc_mn)for i in range(len(cc_mn)):    gap[i] = cc_mx[i] - cc_mn[i]cnt = 0ans = -1for j in range(1, m - m1 + 2):    for i in range(1, n - n1 + 2):        ii, jj = i + n1 - 1, j + m1 - 1        pre_sum = prefix[ii][jj] - prefix[ii-n1][jj] - prefix[ii][jj-m1] + prefix[ii-n1][jj-m1]        ans = max(ans, pre_sum * gap[cnt])        cnt += 1print(ans)\n兽之泪问题描述\n在蓝桥王国，流传着一个古老的传说：在怪兽谷，有一笔由神圣骑士留下的宝藏。\n小蓝是一位年轻而勇敢的冒险家，他决定去寻找宝藏。根据远古卷轴的提示，如果要找到宝藏，那么需要集齐 nn 滴兽之泪，同时卷轴中也记载了，每击败一次怪物，就能够收集一滴兽之泪。\n小蓝知道，这些怪物并非泛泛之辈，每一只都拥有强大的力量和狡猾的技巧。每一只怪物都有它独特的弱点和对策，小蓝必须谨慎选择战斗的策略和使用的能量。\n在怪兽谷中，有 k 只怪兽。对于第 ii 只怪兽，第一次击败他需要 xixi 点能量，后续再击败他需要 yi点能量，由于怪兽吃了亏，所以有所准备，可以得到 yi≥xi。在挑战过程中，前 k−1 只怪兽可以随意挑战，但是第 kk 只怪兽是怪兽之王，如果要挑战第 k只怪兽，那么对于前 k−1 只怪兽都要击败至少一次。\n小蓝想知道，如果要集齐 n 滴兽之泪，那么至少需要多少能量。\n输入格式第一行包含两个整数 kk 和 nn（2≤k≤105,1≤n≤2×105），表示怪物的数量和需要收集的兽之泪的数量。\n接下来 kk 行，每行包含两个整数 xi 和 yi（1≤xi≤yi≤109），表示第 ii 只怪物第一次和后续击败所需的能量。\n输出格式输出一个整数，表示小蓝至少需要多少点能量才能收集完成。\n样例输入3 42 44 51 1\n样例输出8\n说明一种可行的方案是：\n\n第一次选择 1 号怪物，消耗能量 2。\n第二次选择 2 号怪物，消耗能量 4。\n由于 1,2都已经击败一次，所以可以选择 33 号，第三次选择 3 号怪物，消耗能量 1。\n第四次选择 3 号怪物，消耗能量 1。\n\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nJava\n2s\n256M\n\n\nPython3\n3s\n256M\n\n\nPyPy3\n3s\n256M\n\n\nGo\n3s\n256M\n\n\nJavaScript\n3s\n256M\n\n\n\n\n解题思路解题思路考察分情况讨论与优先队列。\n\n攻击最后一只怪兽。\n不攻击最后一只怪兽。\n\n如果攻击最后一只怪兽，那么每只怪兽都要攻击至少一次，然后还剩下 n−kn−k 次，只需要选择最小的一个攻击 n−kn−k 次即可。\n如果不攻击最后一只怪兽，那么只能攻击前 k−1k−1 只怪兽，考虑优先队列，我们首先将前 k−1k−1 只怪兽都入队，然后每次选择最小的那个，当他攻击过后，我们将第二次攻击的能量入队，持续 nn 次即可。\n时间复杂度：O(nlog⁡k)O(nlogk)。\nAC_Code\nC++\n\n#include &lt;iostream&gt;#include &lt;queue&gt;using namespace std;int n, k;const int N = 1e5+100;int a[N], b[N];using ll = long long;using Pair = pair&lt;int, int&gt;;int main() &#123;    cin &gt;&gt; k &gt;&gt; n;    for (int i = 1; i &lt;= k; ++i) &#123;        cin &gt;&gt; a[i] &gt;&gt; b[i];    &#125;    ll ans1 = 0, ans2 = 1e18;// ------- 不挑战最后一个怪兽    priority_queue&lt;Pair&gt; q;    for (int i = 1; i &lt; k; ++i) &#123;        q.push(&#123;-a[i], i&#125;);    &#125;    int tmp = n;    while (tmp) &#123;        auto x = q.top(); q.pop();        ans1 += -x.first;        q.push(&#123;-b[x.second], x.second&#125;);        tmp --;    &#125;    // ------- 挑战最后一个怪兽    if (n &gt;= k) &#123;        ans2 = 0;        while (!q.empty()) q.pop();        for (int i = 1; i &lt;= k; ++i) &#123;            ans2 += a[i];            q.push(&#123;-b[i], i&#125;);        &#125;        n -= k;        while (n) &#123;            auto x = q.top(); q.pop();            ans2 += -x.first;            q.push(&#123;-b[x.second], x.second&#125;);            n --;        &#125;    &#125;    cout &lt;&lt; min(ans1, ans2) &lt;&lt; endl;    return 0;&#125;\n\nJava\n\nimport java.util.PriorityQueue;import java.util.Scanner;public class std &#123;    static class Pair implements Comparable&lt;Pair&gt; &#123;        int first;        int second;        Pair(int first, int second) &#123;            this.first = first;            this.second = second;        &#125;        public int compareTo(Pair other) &#123;            return Integer.compare(this.first, other.first);        &#125;    &#125;    public static void main(String[] args) &#123;        Scanner scanner = new Scanner(System.in);        int k = scanner.nextInt();        int n = scanner.nextInt();        int[] a = new int[k + 1];        int[] b = new int[k + 1];        for (int i = 1; i &lt;= k; ++i) &#123;            a[i] = scanner.nextInt();            b[i] = scanner.nextInt();        &#125;        long ans1 = 0, ans2 = Long.MAX_VALUE;        // ------- 不挑战最后一个怪兽        PriorityQueue&lt;Pair&gt; q = new PriorityQueue&lt;&gt;();        for (int i = 1; i &lt; k; ++i) &#123;            q.offer(new Pair(a[i], i));        &#125;        int tmp = n;        while (tmp &gt; 0) &#123;            Pair x = q.poll();            ans1 += x.first;            q.offer(new Pair(b[x.second], x.second));            tmp--;        &#125;        // ------- 挑战最后一个怪兽        if (n &gt;= k) &#123;            ans2 = 0;            q.clear();            for (int i = 1; i &lt;= k; ++i) &#123;                ans2 += a[i];                q.offer(new Pair(b[i], i));            &#125;            n -= k;            while (n &gt; 0) &#123;                Pair x = q.poll();                ans2 += x.first;                q.offer(new Pair(b[x.second], x.second));                n--;            &#125;        &#125;        System.out.println(Math.min(ans1, ans2));        scanner.close();    &#125;&#125;\n\nPython\n\nimport heapqk, n = map(int, input().split())a = [0] * (k + 1)b = [0] * (k + 1)for i in range(1, k + 1):    a[i], b[i] = map(int, input().split())ans1, ans2 = 0, float(&#x27;inf&#x27;)# ------- 不挑战最后一个怪兽q = []for i in range(1, k):    heapq.heappush(q, (a[i], i))tmp = nwhile tmp:    x = heapq.heappop(q)    ans1 += x[0]    heapq.heappush(q, (b[x[1]], x[1]))    tmp -= 1# ------- 挑战最后一个怪兽if n &gt;= k:    ans2 = 0    q = []    for i in range(1, k + 1):        ans2 += a[i]        heapq.heappush(q, (b[i], i))    n -= k    while n:        x = heapq.heappop(q)        ans2 += x[0]        heapq.heappush(q, (b[x[1]], x[1]))        n -= 1print(min(ans1, ans2))\n解题思路2解法2：\nimport osimport sysimport heapqa = []b = []n,k = map(int,input().split())for _ in range(n):  x,y = map(int,input().split())  a.append(x)  b.append(y)q = []for i in range(n-1):  heapq.heappush(q,(a[i],i))t = kans = 0while t &gt; 0:  w,i = heapq.heappop(q)  heapq.heappush(q,(b[i],i))  ans += w  t -= 1ans2 = 0if k &gt;= n:  ans2 += sum(a) + (k-n) * min(b)if k &gt;= n:  print(min(ans,ans2))else:  print(ans)\n","categories":["刷题","蓝桥"],"tags":["蓝桥杯"]},{"title":"蓝桥题目汇总1-20","url":"/2024/03/15/%E8%93%9D%E6%A1%A5%E9%A2%98%E7%9B%AE%E6%B1%87%E6%80%BB1-20/","content":"门牌制作题目描述本题为填空题，只需要算出结果后，在代码中使用输出语句将所填结果输出即可。\n小蓝要为一条街的住户制作门牌号。\n这条街一共有 $2020$ 位住户，门牌号从 $1$ 到 $2020$ 编号。\n小蓝制作门牌的方法是先制作 $0$ 到 $9$ 这几个数字字符，最后根据需要将字符粘贴到门牌上，例如门牌 1017 需要依次粘贴字符 $1、0、1、7$，即需要 $1$ 个字符 $0$，$2$ 个字符 $1$，$1$ 个字符 $7$。\n请问要制作所有的 $1$ 到 $2020$ 号门牌，总共需要多少个字符 $2$？\n运行限制\n最大运行时间：1s\n最大运行内存: 128M\n\n常规思路s=[]for i in range(1,2021):    s.append(i)s=str(s)print(s.count(&quot;2&quot;))\ns=&#x27;&#x27;for i in range(1,2021):s+=str(i)print(s.count(&quot;2&quot;))\n似乎熟悉了python之后，用python求解也很快。\n简单方法使用excel的功能\n使用序列\n使用快捷键CTRL+H，唤出替换，替换所有的2。\n\n可以快速得到结果624，准确又省时间。\n迷宫题目描述本题为填空题，只需要算出结果后，在代码中使用输出语句将所填结果输出即可。\nX 星球的一处迷宫游乐场建在某个小山坡上。它是由 $10 \\times 10$ 相互连通的小房间组成的。\n房间的地板上写着一个很大的字母。我们假设玩家是面朝上坡的方向站立，则：\n\n$L$ 表示走到左边的房间，\n$R$ 表示走到右边的房间，\n$U$ 表示走到上坡方向的房间，\n$D$ 表示走到下坡方向的房间。\n\nX 星球的居民有点懒，不愿意费力思考。他们更喜欢玩运气类的游戏。这个游戏也是如此！\n开始的时候，直升机把 $100$ 名玩家放入一个个小房间内。玩家一定要按照地上的字母移动。\n迷宫地图如下：\nUDDLUULRUL  UURLLLRRRU  RRUURLDLRD  RUDDDDUUUU  URUDLLRRUU  DURLRLDLRL  ULLURLLRDU  RDLULLRDDD  UUDDUDUDLL  ULRDLUURRR  \n请你计算一下，最后，有多少玩家会走出迷宫，而不是在里边兜圈子？\n如果你还没明白游戏规则，可以参看下面一个简化的 4x4 迷宫的解说图：\n\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n128M\n\n\nC\n1s\n128M\n\n\nPython3\n1s\n128M\n\n\nJava\n1s\n128M\n\n\n\n\n解题思路str=&#x27;UDDLUULRULUURLLLRRRURRUURLDLRDRUDDDDUUUUURUDLLRRUUDURLRLDLRLULLURLLRDURDLULLRDDDUUDDUDUDLLULRDLUURRR&#x27;sum=0 #计算有几个人出来for i in range(100):  a=i//10 #一个点的坐标（a，b）  b=i%10  c = [&#123;a:b&#125;] #用于存放经过的点，若重复经过，说明走不出去了  while(1):    if(str[a*10+b]==&#x27;U&#x27;):      a=a-1    elif (str[a*10+b]==&#x27;D&#x27;):      a=a+1    elif (str[a*10+b]==&#x27;L&#x27;):      b=b-1    else:      b=b+1    if(&#123;a:b&#125; in c):      break    if(&#123;a:b&#125; not in c):      c.append(&#123;a:b&#125;)    if(a&lt;0 or a&gt;9 or b&lt;0 or b&gt;9):      sum+=1      breakprint(sum)\nDFS解法：\ndef dfs(x,y):  if 0&lt;=x&lt;10 and 0&lt;=y&lt;10:     if v[x][y] == 0:      v[x][y] = 1   #打上标识，证明此处已走过      if map[x][y] == &#x27;U&#x27;:        flag = dfs(x-1,y)      elif map[x][y] == &#x27;D&#x27;:        flag = dfs(x+1,y)      elif map[x][y] == &#x27;L&#x27;:        flag = dfs(x,y-1)      elif map[x][y] == &#x27;R&#x27;:        flag = dfs(x,y+1)      v[x][y] = 0  #按层返回，清除标识      return flag      else:  #如果回到已经走过的地方，说明发生循环，直接返回0标识走不出去      return 0  else:      #超限说明走出去了  返回1    return 1n = 0map = [list(input()) for i in range(10)] #读入迷宫v = [[0]*10 for i in range(10)]  #列表v用来标识该点是否重复经过，避免循环for i in range(10):  for j in range(10):    n += dfs(i,j)   #对每一个人进行走出迷宫的模拟，n记录最后能走出的人的总数print(n)\n#深度dfs递归map = [&#x27;UDDLUULRUL&#x27;,       &#x27;UURLLLRRRU&#x27;,       &#x27;RRUURLDLRD&#x27;,       &#x27;RUDDDDUUUU&#x27;,       &#x27;URUDLLRRUU&#x27;,       &#x27;DURLRLDLRL&#x27;,       &#x27;ULLURLLRDU&#x27;,       &#x27;RDLULLRDDD&#x27;,       &#x27;UUDDUDUDLL&#x27;,       &#x27;ULRDLUURRR&#x27;]#这里字符串元素要用单引号括起，用双引号，后面会提示数组越界count = 0tablist = [[0] * 10 for i in range(10)]def find(x, y):    if x &lt; 0 or x &gt; 9 or y &lt; 0 or y &gt; 9:  # 走出迷宫        global count        count += 1        return True    if tablist[x][y] == 1:  # 已走过        return False    tablist[x][y] = 1  # 若之前没走过，则标记走过    if map[x][y] == &quot;U&quot;:        find(x - 1, y)#递归    elif map[x][y] == &quot;D&quot;:        find(x + 1, y)    elif map[x][y] == &quot;L&quot;:        find(x, y - 1)    elif map[x][y] == &quot;R&quot;:        find(x, y + 1)    return Falsefor i in list(range(10)):    for j in list(range(10)):        tablist = [[0] * 10 for i in range(10)]#遍历每个坐标起点开始前都先清零        find(i, j)print(count)\n星期一题目描述本题为填空题，只需要算出结果后，在代码中使用输出语句将所填结果输出即可。\n整个 $20$ 世纪（$1901$ 年 $1$ 月 $1$ 日至 $2000$ 年 $12$ 月 $31$ 日之间），一共有多少个星期一？(不要告诉我你不知道今天是星期几)\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n128M\n\n\nC\n1s\n128M\n\n\nPython3\n1s\n128M\n\n\nJava\n1s\n128M\n\n\n\n\n解题思路直接用 Python datetime 库求解，第 6 行可以输出某个日期是星期几。\nfrom datetime import* dt1=datetime(1901,1,1) dt2=datetime(2000,12,31) print(dt1.weekday()) # 周一为0，周二为1... td=dt2-dt1 print(td.days//7)\n乘积尾零题目描述本题为填空题，只需要算出结果后，在代码中使用输出语句将所填结果输出即可。\n如下的 $10$ 行数据，每行有 $10$ 个整数，请你求出它们的乘积的末尾有多少个零？\n5650 4542 3554 473 946 4114 3871 9073 90 4329 2758 7949 6113 5659 5245 7432 3051 4434 6704 3594 9937 1173 6866 3397 4759 7557 3070 2287 1453 9899 1486 5722 3135 1170 4014 5510 5120 729 2880 9019 2049 698 4582 4346 4427 646 9742 7340 1230 7683 5693 7015 6887 7381 4172 4341 2909 2027 7355 5649 6701 6645 1671 5978 2704 9926 295 3125 3878 6785 2066 4247 4800 1578 6652 4616 1113 6205 3264 2915 3966 5291 2904 1285 2193 1428 2265 8730 9436 7074 689 5510 8243 6114 337 4096 8199 7313 3685 211\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n128M\n\n\nC\n1s\n128M\n\n\nPython3\n1s\n128M\n\n\nJava\n1s\n128M\n\n\n\n\n解题思路将字符串转换成表格，先计算乘积，然后结果由int整数型转换成str字符型，再存入列表中，这时候使用pop方法和列表切片，简单的遍历一下，就能得到结果。\ns=&quot;&quot;&quot;5650 4542 3554 473 946 4114 3871 9073 90 4329 2758 7949 6113 5659 5245 7432 3051 4434 6704 3594 9937 1173 6866 3397 4759 7557 3070 2287 1453 9899 1486 5722 3135 1170 4014 5510 5120 729 2880 9019 2049 698 4582 4346 4427 646 9742 7340 1230 7683 5693 7015 6887 7381 4172 4341 2909 2027 7355 5649 6701 6645 1671 5978 2704 9926 295 3125 3878 6785 2066 4247 4800 1578 6652 4616 1113 6205 3264 2915 3966 5291 2904 1285 2193 1428 2265 8730 9436 7074 689 5510 8243 6114 337 4096 8199 7313 3685 211 &quot;&quot;&quot;cnt=1for i in s.split():cnt*=int(i)cnt,res = list(str(cnt)),0for i in cnt[::-1]:    if i == &#x27;0&#x27;:        cnt.pop()        res+=1    else:breakprint(res)\n当然，也可以不使用列表\n\n付账问题题目描述几个人一起出去吃饭是常有的事。但在结帐的时候，常常会出现一些争执。\n现在有 $n$ 个人出去吃饭，他们总共消费了 $S$ 元。其中第 $i$ 个人带了 $a_i$元。幸运的是，所有人带的钱的总数是足够付账的，但现在问题来了：每个人分别要出多少钱呢？\n为了公平起见，我们希望在总付钱量恰好为 $S$ 的前提下，最后每个人付的钱的标准差最小。这里我们约定，每个人支付的钱数可以是任意非负实数，即可以不是 1 分钱的整数倍。你需要输出最小的标准差是多少。\n标准差的介绍：标准差是多个数与它们平均数差值的平方平均数，一般用于刻画这些数之间的”偏差有多大”。形式化地说，设第 $i$ 个人付的钱为 $b_i$ 元，那么标准差为 :\n$S=\\sqrt{\\frac{1}{n}\\sum_{i=1}^{n}(b_i-\\frac{1}{n}\\sum_{i=1}^{n}b_i)^{2}}$\n输入描述第一行包含两个整数 $n、S$；\n第二行包含 $n$ 个非负整数 $a_1, \\cdots, a_n$。\n其中，$n  \\leq  5 \\times 10^5, 0  \\leq  a_i  \\leq  10^9$ 。\n输出描述输出最小的标准差，四舍五入保留 4 位小数。\n保证正确答案在加上或减去 $10^{−9}$ 后不会导致四舍五入的结果发生变化。\n输入输出样例示例\n输入\n\n5 2333 666 666 666 666 666\n\n输出\n\n0.0000\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nPython3\n1s\n256M\n\n\nJava\n1s\n256M\n\n\n\n\n解题思路from math import *n, s = map(int,input().split())a = list(map(int,input().split()))a.sort()avg = s/nsum = 0for i in range(n):     if a[i]*(n-i) &lt; s:          sum += pow(a[i]-avg,2)          s -= a[i]     else:          cur_avg = s/(n-i);      #更新平均出钱数          sum += pow(cur_avg-avg,2)*(n-i)          breakprint(&quot;&#123;:.4f&#125;&quot;.format(sqrt(sum/(n))))\n数字三角形题目描述\n上图给出了一个数字三角形。从三角形的顶部到底部有很多条不同的路径。对于每条路径，把路径上面的数加起来可以得到一个和，你的任务就是找到最大的和（路径上的每一步只可沿左斜线向下或右斜线向下走）。\n输入描述输入的第一行包含一个整数 $N\\ (1 \\leq N \\leq 100)$，表示三角形的行数。\n下面的 $N$ 行给出数字三角形。数字三角形上的数都是 $0$ 至 $99$ 之间的整数。\n输出描述输出一个整数，表示答案。\n输入输出样例示例\n输入\n\n5 7 3 88 1 02 7 4 44 5 2 6 5\n\n输出\n\n30\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n128M\n\n\nC\n1s\n128M\n\n\nPython3\n1s\n128M\n\n\nJava\n1s\n128M\n\n\n\n\n42点问题题目描述请你设计一个程序对该问题进行解答。\n众所周知在扑克牌中，有一个老掉牙的游戏叫做 $24$ 点，选取 $4$ 张牌进行加减乘除，看是否能得出 $24$ 这个答案。\n现在小蓝同学发明了一个新游戏，他从扑克牌中依次抽出6张牌，注意不是一次抽出，进行计算，看是否能够组成 $42$ 点,满足输出 YES，反之输出 NO。\n最先抽出来的牌作为第一个操作数，抽出牌做第二个操作数，运算结果再当作第一个操作数，继续进行操作。\n注：除不尽的情况保留整数，而且扑克牌的四张 $10$ 都丢了，不会出现 $10$。\n请设计一个程序对该问题进行解答。\n输入描述输出仅一行包含 $6$ 个字符。\n保证字符 $\\in$ 3 4 5 6 7 8 9 10 J Q K A 2。\n输出描述若给出到字符能够组成 $42$ 点 , 满足输出 YES，反之输出 NO。\n输入输出样例示例\n输入\n\nK A Q 6 2 3\n\n输出\n\nYES\n样例说明\n$K\\times  A=K$ 即 $13\\times 1=13$\n$13/12=1$ 保留整数\n$1+6=7$\n$7*2=14$\n$14*3=42$\n\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n128M\n\n\nC\n1s\n128M\n\n\nPython3\n1s\n128M\n\n\nJava\n1s\n128M\n\n\n\n\n数的划分题目描述将整数 $n$ 分成 $k$ 份，且每份不能为空，任意两份不能相同(不考虑顺序)。\n例如：$n=7，k=3$，下面三种分法被认为是相同的。\n$1，1，5; 1，5，1; 5，1，1;$\n问有多少种不同的分法。\n输入描述输入一行，$2$ 个整数 $n,k\\ (6 \\leq n  \\leq  200，2  \\leq  k  \\leq  6)$。\n输出描述输出一个整数，即不同的分法。\n输入输出样例示例 1\n输入\n\n7 3\n\n输出\n\n4\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n128M\n\n\nC\n1s\n128M\n\n\nPython3\n1s\n128M\n\n\nJava\n1s\n128M\n\n\n\n\n数的计算题目描述输入一个自然数 $n\\ (n \\leq 1000)$，我们对此自然数按照如下方法进行处理:\n\n不作任何处理;\n\n在它的左边加上一个自然数,但该自然数不能超过原数的一半;\n\n加上数后,继续按此规则进行处理,直到不能再加自然数为止。\n\n\n问总共可以产生多少个数。\n输入描述输入一个正整数 $n$。\n输出描述输出一个整数，表示答案。\n输入输出样例示例 1\n输入\n\n6\n\n输出\n\n6\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n128M\n\n\nC\n1s\n128M\n\n\nPython3\n1s\n128M\n\n\nJava\n1s\n128M\n\n\n\n\nN皇后问题题目描述在 $N\\times N$ 的方格棋盘放置了 $N$ 个皇后，使得它们不相互攻击（即任意 $2$ 个皇后不允许处在同一排，同一列，也不允许处在与棋盘边框成 $45$ 角的斜线上。你的任务是，对于给定的 $N$，求出有多少种合法的放置方法。\n输入描述输入中有一个正整数 $N≤10$，表示棋盘和皇后的数量\n输出描述为一个正整数，表示对应输入行的皇后的不同放置数量。\n输入输出样例示例 1\n输入\n\n5\n\n输出\n\n10\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n128M\n\n\nC\n1s\n128M\n\n\nPython3\n1s\n128M\n\n\nJava\n1s\n128M\n\n\n\n\n路径之谜题目描述小明冒充 $X$ 星球的骑士，进入了一个奇怪的城堡。\n城堡里边什么都没有，只有方形石头铺成的地面。\n假设城堡地面是 $n \\times n$ 个方格。如下图所示。\n\n按习俗，骑士要从西北角走到东南角。可以横向或纵向移动，但不能斜着走，也不能跳跃。每走到一个新方格，就要向正北方和正西方各射一箭。（城堡的西墙和北墙内各有 $n$ 个靶子）同一个方格只允许经过一次。但不必走完所有的方格。如果只给出靶子上箭的数目，你能推断出骑士的行走路线吗？有时是可以的，比如上图中的例子。\n本题的要求就是已知箭靶数字，求骑士的行走路径（测试数据保证路径唯一）\n输入描述第一行一个整数 $N$ ($0  \\leq  N  \\leq  20$)，表示地面有 $N \\times N$ 个方格。\n第二行 $N$ 个整数，空格分开，表示北边的箭靶上的数字（自西向东）\n第三行 $N$ 个整数，空格分开，表示西边的箭靶上的数字（自北向南）\n输出描述输出一行若干个整数，表示骑士路径。\n为了方便表示，我们约定每个小格子用一个数字代表，从西北角开始编号: 0,1,2,3 $\\cdots$\n比如，上图中的方块编号为：\n0 1 2 3\n4 5 6 7\n8 9 10 11\n12 13 14 15\n输入输出样例示例\n输入\n\n42 4 3 44 3 3 3\n\n输出\n\n0 4 5 1 2 3 7 11 10 9 13 14 15\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n5s\n256M\n\n\nC\n5s\n256M\n\n\nPython3\n5s\n256M\n\n\nJava\n5s\n256M\n\n\n\n\n最大数字问题描述给定一个正整数 $N$ 。你可以对 $N$ 的任意一位数字执行任意次以下 2 种操 作：\n\n将该位数字加 1 。如果该位数字已经是 9 , 加 1 之后变成 0 。\n\n将该位数字减 1 。如果该位数字已经是 0 , 减 1 之后变成 9 。\n\n\n你现在总共可以执行 1 号操作不超过 $A$ 次, 2 号操作不超过 $B$ 次。 请问你最大可以将 $N$ 变成多少?\n输入格式第一行包含 3 个整数: $N, A, B$ 。\n输出格式一个整数代表答案。\n样例输入123 1 2\n样例输出933\n样例说明对百位数字执行 2 次 2 号操作, 对十位数字执行 1 次 1 号操作。\n评测用例规模与约定对于 $30 \\%$ 的数据, $1 \\leq N \\leq 100 ; 0 \\leq A, B \\leq 10$。\n对于 $100 \\%$ 的数据, $1 \\leq N \\leq 10^{17} ; 0 \\leq A, B \\leq 100$\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n512M\n\n\nC\n1s\n512M\n\n\nPython3\n1s\n512M\n\n\nJava\n1s\n512M\n\n\n\n\n长草题目描述小明有一块空地，他将这块空地划分为 $n$ 行 $m$ 列的小块，每行和每列的长度都为 1。\n小明选了其中的一些小块空地，种上了草，其他小块仍然保持是空地。\n这些草长得很快，每个月，草都会向外长出一些，如果一个小块种了草，则它将向自己的上、下、左、右四小块空地扩展，\n这四小块空地都将变为有草的小块。请告诉小明，$k$ 个月后空地上哪些地方有草。\n输入描述输入的第一行包含两个整数 $n, m$。\n接下来 $n$ 行，每行包含 $m$ 个字母，表示初始的空地状态，字母之间没有空格。如果为小数点，表示为空地，如果字母为 $g$，表示种了草。\n接下来包含一个整数 $k$。 其中，$2   \\leq   n, m   \\leq   1000，1   \\leq   k   \\leq   1000$。\n输出描述输出 $n$ 行，每行包含 $m$ 个字母，表示 $k$ 个月后空地的状态。如果为小数点，表示为空地，如果字母为 $g$，表示长了草。\n输入输出样例示例\n输入\n\n4 5 .g..........g.......2\n\n输出\n\ngggg.gggg.ggggg .ggg.\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nPython3\n1s\n256M\n\n\nJava\n1s\n256M\n\n\n\n\n走迷宫题目描述给定一个 $N\\times M$ 的网格迷宫 $G$。$G$ 的每个格子要么是道路，要么是障碍物（道路用 $1$ 表示，障碍物用 $0$ 表示）。\n已知迷宫的入口位置为 $(x_1,y_1)$，出口位置为 $(x_2 , y_2)$。问从入口走到出口，最少要走多少个格子。\n输入描述输入第 $1$ 行包含两个正整数 $N,M$，分别表示迷宫的大小。\n接下来输入一个 $N\\times M$ 的矩阵。若 $G_{i,j}=1$ 表示其为道路，否则表示其为障碍物。\n最后一行输入四个整数 $x_1,y_1,x_2,y_2$，表示入口的位置和出口的位置。\n$1\\leq N,M\\leq10^2$，$0\\leq G_{i,j}\\leq 1$，$1\\leq x_1,x_2\\leq N$，$1\\leq y_1,y_2\\leq M$。\n输出描述输出仅一行，包含一个整数表示答案。\n若无法从入口到出口，则输出 $-1$。\n输入输出样例示例 1\n输入\n\n5 51 0 1 1 0 1 1 0 1 1 0 1 0 1 1 1 1 1 1 1 1 0 0 0 11 1 5 5\n\n输出\n\n8\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n128M\n\n\nC\n1s\n128M\n\n\nPython3\n1s\n128M\n\n\nJava\n1s\n128M\n\n\n\n\n迷宫题目描述本题为填空题，只需要算出结果后，在代码中使用输出语句将所填结果输出即可。\n下图给出了一个迷宫的平面图，其中标记为 $1$ 的为障碍，标记为 $0$ 的为可以通行的地方。\n010000 000100001001 110000\n迷宫的入口为左上角，出口为右下角，在迷宫中，只能从一个位置走到这 个它的上、下、左、右四个方向之一。\n对于上面的迷宫，从入口开始，可以按 DRRURRDDDR 的顺序通过迷宫， 一共 $10$ 步。其中 $D、U、L、R$ 分别表示向下、向上、向左、向右走。 对于下面这个更复杂的迷宫（$30$ 行 $50$ 列），请找出一种通过迷宫的方式，其使用的步数最少，在步数最少的前提下，请找出字典序最小的一个作为答案。\n请注意在字典序中 $D&lt;L&lt;R&lt;U$。\nn运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nPython3\n1s\n256M\n\n\nJava\n1s\n256M\n\n\n\n\n公共抽签题目描述小$A$的学校，蓝桥杯的参赛名额非常有限，只有 $m$ 个名额，但是共有 $n$ 个人报名。\n作为老师非常苦恼，他不知道该让谁去，他在寻求一个绝对公平的方式。\n于是他准备让大家抽签决定，即 $m$ 个签是去，剩下的是不去。\n小 $A$ 非常想弄明白最后的抽签结果会有多少种不同到情况，请你设计一个程序帮帮小 $A$！\n输入描述输入第一行包含两个字符 $n,m$，其含义如题所述。\n接下来第二行到第 $n+1$ 行每行包含一个字符串 $S$ ，表示个人名。\n$1\\leq m\\leq n\\leq 15$。\n输出描述输出共若干行，每行包含 $m$ 个字符串，表示该结果被选中到人名（需按字符串的输入顺序大小对结果进行排序）。\n输入输出样例示例\n输入\n\n3 2 xiaowangxiaoA xiaoli\n\n输出\n\nxiaowang xiaoAxiaowang xiaolixiaoA xiaoli\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n128M\n\n\nC\n1s\n128M\n\n\nPython3\n1s\n128M\n\n\nJava\n1s\n128M\n\n\n\n\n座次问题题目描述小 $A$ 的学校，老师好不容易解决了蓝桥杯的报名问题，现在老师又犯愁了。\n现在有 $N$ 位同学参加比赛，但是老师想给他们排座位，但是排列方式太多了。\n老师非常想弄明白最后的排座次的结果是什么样子的，到底有多少种结果。\n请设计一个程序帮助老师。\n最后输出各种情况的人名即可，一行一种情况，每种情况的名字按照报名即输入顺序排序。\n输入描述输入第一行包含一个整数 $N$。\n接下来 $N$ 行每行包含一个字符串 $S_i$，表示人名。\n$1\\leq N \\leq 10$，$\\sum\\limits_{i=1}^{N} |S_i| \\leq 10^2$。\n输出描述输出共若干行，每行输出各种情况的人名。一行一种情况，每种情况的名字按照报名即输入顺序排序。\n输入输出样例示例\n输入\n\n3 xiaowangxiaoA xiaoli\n\n输出\n\nxiaowang xiaoA xiaolixiaowang xiaoli xiaoA xiaoA xiaowang xiaolixiaoA xiaoli xiaowang xiaoli xiaowang xiaoAxiaoli xiaoA xiaowang\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n128M\n\n\nC\n1s\n128M\n\n\nPython3\n1s\n128M\n\n\nJava\n1s\n128M\n\n\n\n\nCLZ银行问题题目描述$CLZ$ 银行只有两个接待窗口，$VIP$ 窗口和普通窗口，$VIP$ 用户进入 $VIP$ 窗口排队，剩下的进入普通窗口排队。现有 $M$ 次操作，操作有四种类型，如下：\n\nIN name V：表示一名叫 name 的用户到 $VIP$ 窗口排队\nOUT V：表示 $VIP$ 窗口队头的用户离开排队\nIN name N：表示一名叫 name 的用户到普通窗口排队\nOUT N：表示普通窗口队头的用户离开排队\n\n求 $M$ 次操作结束后 $VIP$ 窗口队列和普通窗口队列中的姓名。\n输入描述第一行是一个整数 $M（1\\leq M \\leq 1000）$，表示一共有 $M$ 次操作。\n第二行到第 $M+1$ 行输入操作，格式如下：\n\nIN name V\nOUT V\nIN name N\nOUT N\n\n输出描述输出 $M$ 次操作后 $VIP$ 窗口队列和普通窗口队列中的姓名（从头到尾），先输出 $VIP$ 窗口队列后输出普通窗口队列。\n输入输出样例示例 1\n输入\n\n5 IN xiaoming N IN Adel V IN laozhao NOUT N IN CLZ V\n\n输出\n\nAdelCLZlaozhao\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n128M\n\n\nC\n1s\n128M\n\n\nPython3\n1s\n128M\n\n\nJava\n1s\n128M\n\n\n\n\n费里的语言题目描述小发明家弗里想创造一种新的语言，众所周知，发明一门语言是非常困难的，首先你就要克服一个困难就是，有大量的单词需要处理，现在弗里求助你帮他写一款程序，判断是否出现重复的两个单词。\n输入描述第 $1$ 行，输入 $N$，代表共计创造了多少个单词。\n第 $2$ 行至第 $N+1$ 行，输入 $N$ 个单词。\n$1\\leq N \\leq 10^4$，保证字符串的总输入量不超过 $10^6$。\n输出描述输出仅一行。若有重复的单词，就输出重复单词，没有重复单词，就输出 NO，多个重复单词输出最先出现的。\n输入输出样例示例1\n输入\n\n61fagas dsafa32j lkiuopybncvhfgdjytr cncxfg sdhrest\n\n输出\n\nNO\n示例2\n输入\n\n5 sdfggfdsfgsdhsdfdsfhsdhr sdfhdfh sdfggfds\n\n输出\n\nsdfggfds\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n3s\n512M\n\n\nC\n3s\n512M\n\n\nPython3\n3s\n512M\n\n\nJava\n3s\n512M\n\n\n\n\n快递分拣题目描述蓝桥王国的每个快递都包含两个参数：1.快递单号 2.快递城市。\n小李是蓝桥王国的一名快递员，每天的快递分拣让他苦不堪言。\n于是他想要你帮他设计一个程序用于快递的分拣（将不同快递按城市信息分开）。\n输入描述输入第一行包含一个整数 $N$,表示快递的个数。\n接下来第 $2 \\sim N+1$ 行每行包含一个字符串 $S$ 和一个字符串 $P$，分别快递单号以及快递对应的城市。\n$1\\leq N \\leq 10^3$，保证数据量不超过 $10^6$。\n输出描述输出共若干行。按城市的输入顺序依次输出城市的名称以及城市的快递个数，以及该城市的所有快递单号（单号按照输入顺序排序）。\n输入输出样例示例\n输入\n\n10 10124214 北京12421565 上海sdafasdg213 天津fasdfga124 北京 145252 上海 235wtdfsg 济南 3242356fgdfsg 成都23423 武汉 23423565f 沈阳 1245dfwfs 成都\n\n输出\n\n北京 2 10124214 fasdfga124 上海 2 12421565 145252 天津 1 sdafasdg213济南 1 235wtdfsg 成都 2 3242356fgdfsg 1245dfwfs 武汉 1 23423 沈阳 1 23423565f\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nPython3\n1s\n256M\n\n\nJava\n1s\n256M\n\n\n\n\n","categories":["刷题","蓝桥"],"tags":["蓝桥杯"]},{"title":"蓝桥题目汇总21-40","url":"/2024/03/22/%E8%93%9D%E6%A1%A5%E9%A2%98%E7%9B%AE%E6%B1%87%E6%80%BB21-40/","content":"大学里到树木要打药题目描述教室外有 $N$ 棵树（树的编号从 $0\\sim N-1$），根据不同的位置和树种，学校要对其上不同的药。\n因为树的排列成线性，且非常长，我们可以将它们看作一条直线给他们编号。\n对于树的药是成区间分布，比如 $3 \\sim 5$ 号的树靠近下水道，所以他们要用驱蚊虫的药， $20 \\sim 26$ 号的树，他们排水不好，容易涝所以要给他们用点促进根系的药 $\\cdots$诸如此类。\n每种不同的药要花不同的钱。\n现在已知共有 $M$ 个这样的区间，并且给你每个区间花的钱，问最后这些树木要花多少药费。\n输入描述每组输入的第一行有两个整数 $N$和 $M$。$N$ 代表马路的共计多少棵树，$M$ 代表区间的数目，$N$ 和 $M$ 之间用一个空格隔开。\n接下来的 $M$ 行每行包含三个不同的整数，用一个空格隔开，分别表示一个区域的起始点 $L$ 和终止点 $R$ 的坐标，以及花费。\n$1\\leq L\\leq R \\leq N \\leq 10^6,1\\leq M\\leq 10^5$，保证花费总和不超过 int 范围。\n输出描述输出包括一行，这一行只包含一个整数，所有的花费。\n输入输出样例示例\n输入\n\n500 3 150 300 4100 200 20 470 471 19\n\n输出\n\n2662\n运行限制\n\n\n\n语言\n最大运行时间\nxxxxxxxxxx15 1import os2import sys3​4# 请在此输入您的代码5n = int(input())6a = list(map(int, input().split()))7a.sort()8b = []9c = []10for i in range(n):11    if a[i] % 2 == 0:12        b.append(a[i])13    else:14        c.append(a[i])15print(“ “.join(map(str, c)),” “.join(map(str,b)))python\n\n\n\n\nC++\n1s\n128M\n\n\nC\n1s\n128M\n\n\nPython3\n1s\n128M\n\n\nJava\n1s\n128M\n\n\n\n\n大学里的树木要维护题目描述教室外有 $N$ 棵树（树的编号从 $1\\sim N$），根据不同的位置和树种，学校已经对其进行了多年的维护。\n因为树的排列成线性，且非常长，我们可以将它们看作一条直线给他们编号。\n由于已经维护了多年，每一个树都由学校的园艺人员进行了维护费用的统计。\n每棵树的前期维护费用各不相同，但是由于未来需要要打药，所以有些树木的维护费用太高的话，就要重新种植。\n由于维护费用也称区间分布，所以常常需要统一个区间里的树木的维护开销。\n现给定一个长度为 $N$ 的数组 $A$ 以及 $M$ 个查询，$A_i$ 表示第 $i$ 棵树到维护费用。对于每个查询包含一个区间，园艺人员想知道该区间内的树木维护的开销是多少。\n请你编写程序帮帮他！\n输入描述每组输入的第一行有两个整数 $N$和 $M$。$N$ 代表马路的共计多少棵树，$M$ 代表区间的数目，$N$ 和 $M$ 之间用一个空格隔开。\n接下来的一行，包含 $N$ 个数 $A_1,A_2,\\cdots,A_N$，分别表示每棵树的维护费用，每个数之间用空格隔开。\n接下来的 $M$ 行每行包含两个不同的整数，用一个空格隔开，表示一个区域的起始点 $L$ 和终止点 $R$ 的坐标。\n输出描述输出包括 $M$ 行，每一行只包含一个整数，表示维护的开销。\n输入输出样例示例\n输入\n\n10 37 5 6 4 2 5 0 8 5 31 52 63 7\n\n输出\n\n242217\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n128M\n\n\nC\n1s\n128M\n\n\nPython3\n1s\n128M\n\n\nJava\n1s\n128M\n\n\n\n\n合根植物题目描述$w$ 星球的一个种植园，被分成 $m \\times n$ 个小格子（东西方向 $m$ 行，南北方向 $n$ 列）。每个格子里种了一株合根植物。\n这种植物有个特点，它的根可能会沿着南北或东西方向伸展，从而与另一个格子的植物合成为一体。\n如果我们告诉你哪些小格子间出现了连根现象，你能说出这个园中一共有多少株合根植物吗？\n输入描述第一行，两个整数 $m,n$，用空格分开，表示格子的行数、列数（$1  \\leq  m,n  \\leq  1000$）。\n接下来一行，一个整数 $k$ ($0  \\leq  k  \\leq  10^5$ )，表示下面还有 $k$ 行数据。\n接下来 $k$ 行，每行两个整数 $a，b$，表示编号为 $a$ 的小格子和编号为 $b$ 的小格子合根了。\n格子的编号一行一行，从上到下，从左到右编号。\n比如：$5 \\times 4$ 的小格子，编号：\n1 2 3 4 5 6 7 89 10 11 1213 14 15 16 17 18 19 20\n输出描述输出植物数量。\n输入输出样例示例\n输入\n\n5 416 2 3 1 55 94 8 7 89 1010 1111 12 10 1412 16 14 1817 1815 1919 209 1313 17\n\n输出\n\n5\n\n样例说明\n\n其合根情况参考下图：\n\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n2s\n256M\n\n\nC\n2s\n256M\n\n\nPython3\n2s\n256M\n\n\nJava\n2s\n256M\n\n\n\n\n修改数组题目描述给定一个长度为 $N$ 的数组 $A = [A_1,A_2,··· ,A_N]$，数组中有可能有重复出现的整数。\n现在小明要按以下方法将其修改为没有重复整数的数组。小明会依次修改$A_2,A_3,··· ,A_N$。\n当修改 $A_i$ 时，小明会检查 $A_i$ 是否在 $A_1$ ∼ $A_i−1$ 中出现过。如果出现过，则小明会给 $A_i$ 加上 1 ；如果新的 $A_i$ 仍在之前出现过，小明会持续给 $A_i$ 加 1 ，直 到 $A_i$ 没有在 $A_1$ ∼ $A_i−1$ 中出现过。\n当 $A_N$ 也经过上述修改之后，显然 $A$ 数组中就没有重复的整数了。\n现在给定初始的 $A$ 数组，请你计算出最终的 $A$ 数组。\n输入描述第一行包含一个整数 $N$。\n第二行包含 $N$ 个整数 $A_1,A_2,··· ,A_N$。\n其中，$1  \\leq  N  \\leq  10^5，1  \\leq  A_i  \\leq  10^6$。\n输出描述输出 $N$ 个整数，依次是最终的 $A_1,A_2,··· ,A_N$。\n输入输出样例示例\n输入\n\n5 2 1 1 3 4\n\n输出\n\n2 1 3 4 5\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nPython3\n1s\n256M\n\n\nJava\n1s\n256M\n\n\n\n\n分巧克力题目描述儿童节那天有 K 位小朋友到小明家做客。小明拿出了珍藏的巧克力招待小朋友们。\n小明一共有 $N$ 块巧克力，其中第 $i$ 块是 $H_i \\times Wi$ 的方格组成的长方形。为了公平起见，\n小明需要从这 $N$ 块巧克力中切出 K 块巧克力分给小朋友们。切出的巧克力需要满足：\n\n形状是正方形，边长是整数;\n\n大小相同;\n\n\n例如一块 6x5 的巧克力可以切出 6 块 2x2 的巧克力或者 2 块 3x3 的巧克力。\n当然小朋友们都希望得到的巧克力尽可能大，你能帮小明计算出最大的边长是多少么？\n输入描述第一行包含两个整数 $N,K$ ($1  \\leq  N, K  \\leq  10^5$)。\n以下 N 行每行包含两个整数 $H_i,W_i$ ($1  \\leq  H_i, W_i  \\leq  10^5$)。\n输入保证每位小朋友至少能获得一块 1x1 的巧克力。\n输出描述输出切出的正方形巧克力最大可能的边长。\n输入输出样例示例\n输入\n\n2 10 6 55 6\n\n输出\n\n2\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n2s\n256M\n\n\nC\n2s\n256M\n\n\nPython3\n2s\n256M\n\n\nJava\n2s\n256M\n\n\n\n\nM次方根题目描述小$A$最近在学高等数学，他发现了一道题，求三次根号下 $27$。\n现在已知，小$A$开始计算，$1$ 的三次方得 $1$， $2$ 的三次方得 $8$ ，$3$ 的三次方得 $27$，然后他很高兴的填上了 $3$。接着他要求 $5$ 次根号下 $164$。\n然后他开始 $1$ 的三次方得 $1$， $2$ 的三次方得 $8$ ，$3$ 的三次方得$27\\cdots$\n直到他算到了秃头，也没有找到答案。\n这时一旁的小$B$看不下去了，说这题答案又不是个整数。\n小$A$震惊，原来如此。\n作为程序高手的小$A$，打算设计一个程序用于求解 $M$ 次跟下 $N$ 的值。\n但是由于要考虑精度范围，答案必须要保留 $7$ 位小数，三次根号下 $27$ 都要掰手指的小$A$又怎么会设计呢。\n请你帮小$A$设计一个程序用于求解 $M$ 次根号 $N$。\n输入描述每组输入的第一行有两个整数 $N$ 和 $M$，数据间用空格隔开。\n$1\\leq N \\leq 10^5$，$1\\leq M \\leq 10^2$，$M &lt; N$。\n输出描述输出一个实数表示答案（请保留小数点后 $7$ 位）。\n输入输出样例示例\n输入\n\n27 3\n\n输出\n\n3.0000000\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n128M\n\n\nC\n1s\n128M\n\n\nPython3\n1s\n128M\n\n\nJava\n1s\n128M\n\n\n\n\n找零问题题目描述蓝桥商店的老板需要找零 $n$ 元钱。\n钱币的面额有：$100$ 元、$50$ 元、$20$ 元、$5$ 元、$1$ 元，问如何找零使得所需钱币的数量最少？\n注意：$n$ 可能为 $0$，也能为几百元（别问，问就是来着里微信提现来了）\n输入描述在第一行给出测试例个数 $N$，代表需要找零的钱数。\n$1\\leq N \\leq 10^5$。\n输出描述输出共有 $5$ 行，每一行输出数据输出找零的金额与数量，详情看样例。\n示例\n输入\n\n365\n\n输出\n\n100:3 50:1 20:0 5:3 1:0\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n128M\n\n\nC\n1s\n128M\n\n\nPython3\n1s\n128M\n\n\nJava\n1s\n128M\n\n\n\n\n小B的宿舍题目描述小B的宿舍楼沿着走廊南北向的两边各有 $200$ 个房间，如下所示：\n[房间1][房间3][房间5][房间7][房间9 ]...[房间399]---------------------------------------------- 走廊 ---------------------------------------------- [房间2][房间4][房间6][房间8][房间10]...[房间400]\n最近，由于转专业和专业分流的原因，宿舍将迎来新的调整，以便组成新的班级后方便管理。\n但是由于走廊狭窄，走廊里只能通过一个搬运的物品（可以同向也可以反向），因此必须指定高效的搬运计划。\n老师给了每位同学下达了以下要求，让同学们体现收拾好行李，然后给每位同学 $10$ 分钟的时间搬运。\n当从房间 $i$ 搬运行李到 $j$ 时，$i$ 与 $j$ 之间的走廊都会被占用。所以，$10$ 分钟之内同一段走廊最多 $1$ 个人同时搬运，不重叠的走廊也可以同时搬运。\n小B的老师是个数学老师，经过运筹学一通计算他得到了最优的搬运计划。\n虽然计划不唯一，但是最优值唯一，请问这个最短时间是多少？\n输入描述输入数据有 $T$ 组测试例，在第一行给出测试例个数 $T$。\n每个测试例的第一行是一个整数 $N$（$1\\leq N \\leq 200$)，表示要搬运行李的人数。\n接下来 $N$ 行，每行两个正整数 $s$ 和 $t$，表示一个人，要将行李是从房间 $s$ 移到到房间 $t$。\n输出描述每组输入都有一行输出数据，为一整数 $Time$，表示完成任务所花费的最小时间。\n示例\n输入\n\n3 410 2030 4050 6070 80 21 32 200310 100 20 8030 50\n\n输出\n\n101020\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n128M\n\n\nC\n1s\n128M\n\n\nPython3\n1s\n128M\n\n\nJava\n1s\n128M\n\n\n\n\n数字三角形题目描述\n上图给出了一个数字三角形。从三角形的顶部到底部有很多条不同的路径。对于每条路径，把路径上面的数加起来可以得到一个和，你的任务就是找到最大的和。\n路径上的每一步只能从一个数走到下一层和它最近的左边的那个数或者右 边的那个数。此外，向左下走的次数与向右下走的次数相差不能超过 1。\n输入描述输入的第一行包含一个整数 $N\\ (1 \\leq N \\leq 100)$，表示三角形的行数。\n下面的 $N$ 行给出数字三角形。数字三角形上的数都是 0 至 100 之间的整数。\n输出描述输出一个整数，表示答案。\n输入输出样例示例\n输入\n\n5 7 3 88 1 02 7 4 4 4 5 2 6 5\n\n输出\n\n27\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nPython3\n1s\n256M\n\n\nJava\n1s\n256M\n\n\n\n\n游戏中的学问题目描述大家应该都见过很多人手拉手围着篝火跳舞的场景吧？一般情况下，大家手拉手跳舞总是会围成一个大圈，每个人的左手拉着旁边朋友的右手，右手拉着另一侧朋友的左手。\n不过，如果每一个人都随机的拉住两个不同人的手，然后再慢慢散开，事情就变得有趣多了——此时大家依旧会形成圈，不过却可能会形成多个独立的圈。当然这里我们依然要求一个人的右手只能拉另一个人的左手，反之亦然。\n班里一共有 $N$ 个同学，由 $1$ 到 $N$ 编号。Will 想知道，究竟有多少种本质不同的拉手方案，使得最终大家散开后恰好形成 $k$ 个圈呢？\n给定两种方案，若存在一个人和他的一只手，满足在这两种方案中，拉着这只手的人的编号不同，则这两种方案本质不同。\n输入描述输入一行包含三个正整数$N,k,P$。\n其中，$3 \\leq k \\leq  N \\leq 3000$，$10^4 \\leq  p \\leq 2 \\times  10^9$。\n输出描述输出一行一个整数，表示本质不同的方案数对 $p$ 的余数。保证 $p$ 一定是一个质数。\n输入输出样例示例 1\n输入\n\n3 1 1000000009\n\n输出\n\n2\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n2s\n128M\n\n\nC\n2s\n128M\n\n\nPython3\n2s\n128M\n\n\nJava\n2s\n128M\n\n\n\n\n跳跃题目描述小蓝在一个 $n$ 行 $m$ 列的方格图中玩一个游戏。\n开始时，小蓝站在方格图的左上角，即第 $1$ 行第 $1$ 列。\n小蓝可以在方格图上走动，走动时，如果当前在第 $r$ 行第 $c$ 列，他不能走到行号比 $r$ 小的行，也不能走到列号比 $c$ 小的列。同时，他一步走的直线距离不超过 $3$。\n例如，如果当前小蓝在第 $3$ 行第 $5$ 列，他下一步可以走到第 $3$ 行第 $6$ 列、第 $3$ 行第 $7$ 列、第 $3$ 行第 $8$ 列、第 $4$ 行第 $5$ 列、第 $4$ 行第 $6$ 列、第 $4$ 行第 $7$ 列、第 $5$ 行第 $5$ 列、第 $5$ 行第 $6$ 列、第 $6$ 行第 $5$ 列之一。\n小蓝最终要走到第 $n$ 行第 $m$ 列。\n在图中，有的位置有奖励，走上去即可获得，有的位置有惩罚，走上去就要接受惩罚。奖励和惩罚最终抽象成一个权值，奖励为正，惩罚为负。\n小蓝希望，从第 $1$ 行第 $1$ 列走到第 $n$ 行第 $m$ 列后，总的权值和最大。请问最大是多少？\n输入描述输入的第一行包含两个整数 $n, m$，表示图的大小。\n接下来 $n$ 行，每行 $m$ 个整数，表示方格图中每个点的权值。\n其中，$1 \\leq n \\leq 100，-10^4 \\leq 权值 \\leq 10^4$。\n输出描述输出一个整数，表示最大权值和。\n输入输出样例示例 1\n输入\n\n3 5-4 -5 -10 -3 17 5 -9 3 -1010 -2 6 -10 -4\n\n输出\n\n15\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n128M\n\n\nC\n1s\n128M\n\n\nPython3\n1s\n128M\n\n\nJava\n1s\n128M\n\n\n\n\n小明的背包1题目描述小明有一个容量为 $V$ 的背包。\n这天他去商场购物，商场一共有 $N$ 件物品，第 $i$ 件物品的体积为 $w_i$，价值为 $v_i$。\n小明想知道在购买的物品总体积不超过 $V$ 的情况下所能获得的最大价值为多少，请你帮他算算。\n输入描述输入第 $1$ 行包含两个正整数 $N,V$，表示商场物品的数量和小明的背包容量。\n第 $2\\sim N+1$ 行包含 $2$ 个正整数 $w,v$，表示物品的体积和价值。\n$1\\leq N\\leq10^2$，$1\\leq V \\leq 10^3$，$1 \\leq w_i,v_i \\leq10^3$。\n输出描述输出一行整数表示小明所能获得的最大价值。\n输入输出样例示例 1\n输入\n\n5 20 1 62 53 85 153 3\n\n输出\n\n37\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n128M\n\n\nC\n1s\n128M\n\n\nPython3\n1s\n128M\n\n\nJava\n1s\n128M\n\n\n\n\n小明的背包2题目描述小明有一个容量为 $V$ 的背包。\n这天他去商场购物，商场一共有 $N$ 种物品，第 $i$ 种物品的体积为 $w_i$，价值为 $v_i$，每种物品都有无限多个。\n小明想知道在购买的物品总体积不超过 $V$ 的情况下所能获得的最大价值为多少，请你帮他算算。\n输入描述输入第 $1$ 行包含两个正整数 $N,V$，表示商场物品的数量和小明的背包容量。\n第 $2\\sim N+1$ 行包含 $2$ 个正整数 $w,v$，表示物品的体积和价值。\n$1\\leq N\\leq10^3$，$1\\leq V \\leq 10^3$，$1 \\leq w_i,v_i \\leq10^3$。\n输出描述输出一行整数表示小明所能获得的最大价值。\n输入输出样例示例 1\n输入\n\n5 201 6 2 53 85 15 3 3\n\n输出\n\n120\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nPython3\n1s\n256M\n\n\nJava\n1s\n256M\n\n\n\n\n小明的背包3题目描述小明有一个容量为 $V$ 的背包。\n这天他去商场购物，商场一共有 $N$ 种物品，第 $i$ 种物品的体积为 $w_i$，价值为 $v_i$，数量为 $s_i$。\n小明想知道在购买的物品总体积不超过 $V$ 的情况下所能获得的最大价值为多少，请你帮他算算。\n输入描述输入第 $1$ 行包含两个正整数 $N,V$，表示商场物品的数量和小明的背包容量。\n第 $2\\sim N+1$ 行包含 $3$ 个正整数 $w,v,s$，表示物品的体积和价值。\n$1\\leq N\\leq10^2$，$1\\leq V \\leq 2\\times10^2$，$1 \\leq w_i,v_i,s_i \\leq 2\\times10^2$。\n输出描述输出一行整数表示小明所能获得的最大价值。\n输入输出样例示例 1\n输入\n\n3 30 1 2 3 4 5 67 8 9\n\n输出\n\n39\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nPython3\n1s\n256M\n\n\nJava\n1s\n256M\n\n\n\n\n蓝肽子序列题目描述L 星球上的生物由蛋蓝质组成，每一种蛋蓝质由一类称为蓝肽的物资首尾连接成一条长链后折叠而成。\n生物学家小乔正在研究 L 星球上的蛋蓝质。她拿到两个蛋蓝质的蓝肽序列，想通过这两条蓝肽序列的共同特点来分析两种蛋蓝质的相似性。\n具体的，一个蓝肽可以使用 $1$ 至 $5$ 个英文字母表示，其中第一个字母大写，后面的字母小写。一个蛋蓝质的蓝肽序列可以用蓝肽的表示顺序拼接而成。\n在一条蓝肽序列中，如果选取其中的一些位置，把这些位置的蓝肽取出，并按照它们在原序列中的位置摆放，则称为这条蓝肽的一个子序列。蓝肽的子序列不一定在原序列中是连续的，中间可能间隔着一些未被取出的蓝肽。\n如果第一条蓝肽序列可以取出一个子序列与第二条蓝肽序列中取出的某个子序列相等，则称为一个公共蓝肽子序列。\n给定两条蓝肽序列，找出他们最长的那个公共蓝肽子序列的长度。\n输入描述输入两行，每行包含一个字符串，表示一个蓝肽序列。字符串中间没有空格等分隔字符。\n其中有 ，两个字符串的长度均不超过 $1000$。\n输出描述输出一个整数，表示最长的那个公共蓝肽子序列的长度。\n输入输出样例示例\n输入\n\nLanQiaoBei LanTaiXiaoQiao\n\n输出\n\n2\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n128M\n\n\nC\n1s\n128M\n\n\nPython3\n1s\n128M\n\n\nJava\n1s\n128M\n\n\n\n\n合唱队形题目描述$N$ 位同学站成一排，音乐老师要请其中的 $(N-K)$ 位同学出列，使得剩下的 $K$ 位同学排成合唱队形。\n合唱队形是指这样的一种队形：设 $K$ 位同学从左到右依次编号为 $1，2，\\cdots K$，他们的身高分别为 $T_1，T_2，\\cdots，T_K$， 则他们的身高满足 $T_1&lt; \\cdots &lt; T_i&gt; T_{i+1}&gt; \\cdots &gt;T_K(1 \\leq i \\leq K)$。\n你的任务是，已知所有 $N$ 位同学的身高，计算最少需要几位同学出列，可以使得剩下的同学排成合唱队形。\n输入描述输入两行。\n第一行是一个整数 $N\\ (2 \\leq N \\leq 100)$，表示同学的总数。\n第二行有 $n$ 个整数，用空格分隔，第 $i$ 个整数 $T_i(130 \\leq T_i \\leq 230)$ 是第 $i$ 位同学的身高(厘米)。\n输出描述输出一个整数，就是最少需要几位同学出列。\n输入输出样例示例 1\n输入\n\n8186 186 150 200 160 130 197 220\n\n输出\n\n4\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n128M\n\n\nC\n1s\n128M\n\n\nPython3\n1s\n128M\n\n\nJava\n1s\n128M\n\n\n\n\n最优包含题目描述我们称一个字符串 $S$ 包含字符串 $T$ 是指 $T$ 是 $S$ 的一个子序列，即可以从字符串 $S$ 中抽出若干个字符，它们按原来的顺序组合成一个新的字符串与 $T$ 完全一样。\n给定两个字符串 $S$ 和 $T$，请问最少修改 $S$ 中的多少个字符，能使 $S$ 包含 $T$ ？\n其中，$1 \\leq |T| \\leq |S| \\leq 1000$。\n输入描述输入两行，每行一个字符串。\n第一行的字符串为 $S$，第二行的字符串为 $T$。\n两个字符串均非空而且只包含大写英文字母。\n输出描述输出一个整数，表示答案。\n输入输出样例示例\n输入\n\nABCDEABCDXAABZ\n\n输出\n\n3\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nPython3\n1s\n256M\n\n\nJava\n1s\n256M\n\n\n\n\n路径本题为填空题，只需要算出结果后，在代码中使用输出语句将所填结果输出即可。\n小蓝学习了最短路径之后特别高兴，他定义了一个特别的图，希望找到图 中的最短路径。\n小蓝的图由 2021 个结点组成，依次编号 1 至 2021。\n对于两个不同的结点 a, b，如果 a 和 b 的差的绝对值大于 21，则两个结点 之间没有边相连；如果 a 和 b 的差的绝对值小于等于 21，则两个点之间有一条 长度为 a 和 b 的最小公倍数的无向边相连。\n例如：结点 1 和结点 23 之间没有边相连；结点 3 和结点 24 之间有一条无 向边，长度为 24；结点 15 和结点 25 之间有一条无向边，长度为 75。\n请计算，结点 1 和结点 2021 之间的最短路径长度是多少。\n提示：建议使用计算机编程解决问题。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n128M\n\n\nC\n1s\n128M\n\n\nPython3\n1s\n128M\n\n\nJava\n1s\n128M\n\n\n\n\n蓝桥王国题目描述小明是蓝桥王国的王子，今天是他登基之日。\n在即将成为国王之前，老国王给他出了道题，他想要考验小明是否有能力管理国家。\n题目的内容如下：\n蓝桥王国一共有 $N$ 个建筑和 $M$ 条单向道路，每条道路都连接着两个建筑，每个建筑都有自己编号，分别为 $1\\sim N$ 。（其中皇宫的编号为 $1$）\n国王想让小明回答从皇宫到每个建筑的最短路径是多少，但紧张的小明此时已经无法思考，请你编写程序帮助小明回答国王的考核。\n输入描述输入第一行包含三个正整数 $N,M$。\n第 $2$ 到 $M + 1$ 行每行包含三个正整数 $u,v,w$，表示 $u\\rightarrow v$ 之间存在一条距离为 $w$ 的路。\n$1\\leq N \\leq 3\\times10^5$，$1 \\leq m \\leq 10^6$，$1 \\leq u_i, v_i\\leq N$，$0 \\leq w_i \\leq 10 ^ 9$。\n输出描述输出仅一行，共 $N$ 个数，分别表示从皇宫到编号为 $1\\sim N$ 建筑的最短距离，两两之间用空格隔开。（如果无法到达则输出 $-1$）\n输入输出样例示例 1\n输入\n\n3 31 2 1 1 3 52 3 2\n\n输出\n\n0 1 3\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n2s\n512M\n\n\nC\n2s\n512M\n\n\nPython3\n2s\n512M\n\n\nJava\n2s\n512M\n\n\n\n\n随机数据下的最短路问题题目描述给定 $N$ 个点和 $M$ 条单向道路，每条道路都连接着两个点，每个点都有自己编号，分别为 $1\\sim N$ 。\n问你从 $S$ 点出发，到达每个点的最短路径为多少。\n输入描述输入第一行包含三个正整数 $N,M,S$。\n第 $2$ 到 $M + 1$ 行每行包含三个正整数 $u,v,w$，表示 $u\\rightarrow v$ 之间存在一条距离为 $w$ 的路。\n$1\\leq N \\leq 5\\times10^3$，$1 \\leq M \\leq 5\\times 10^4$，$1 \\leq u_i, v_i\\leq N$，$0 \\leq w_i \\leq 10 ^ 9$。\n本题数据随机生成。\n输出描述输出仅一行，共 $N$ 个数，分别表示从编号 $S$ 到编号为 $1\\sim N$ 点的最短距离，两两之间用空格隔开。（如果无法到达则输出 $-1$）\n输入输出样例示例 1\n输入\n\n3 3 11 2 1 1 3 52 3 2\n\n输出\n\n0 1 3\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n128M\n\n\nC\n1s\n128M\n\n\nPython3\n1s\n128M\n\n\nJava\n1s\n128M\n\n\n\n\n","categories":["刷题","蓝桥"],"tags":["蓝桥杯"]},{"title":"蓝桥题目汇总41-52","url":"/2024/03/22/%E8%93%9D%E6%A1%A5%E9%A2%98%E7%9B%AE%E6%B1%87%E6%80%BB41-52/","content":"出差问题描述$\\mathrm{A}$ 国有 $N$ 个城市, 编号为 $1 \\ldots N$ 。小明是编号为 1 的城市中一家公司的员 工, 今天突然接到了上级通知需要去编号为 $N$ 的城市出差。\n由于疫情原因, 很多直达的交通方式暂时关闭, 小明无法乘坐飞机直接从 城市 1 到达城市 $N$, 需要通过其他城市进行陆路交通中转。小明通过交通信息 网, 查询到了 $M$ 条城市之间仍然还开通的路线信息以及每一条路线需要花费的 时间。\n同样由于疫情原因, 小明到达一个城市后需要隔离观察一段时间才能离开 该城市前往其他城市。通过网络, 小明也查询到了各个城市的隔离信息。(由于 小明之前在城市 1 , 因此可以直接离开城市 1 , 不需要隔离）\n由于上级要求, 小明希望能够尽快赶到城市 $\\mathrm{N}$, 因此他求助于你, 希望你 能帮他规划一条路线, 能够在最短时间内到达城市 $N$ 。\n输入格式第 1 行: 两个正整数 $N, M, N$ 表示 A 国的城市数量, $M$ 表示末关闭的路 线数量\n第 2 行: $N$ 个正整数, 第 $i$ 个整数 $C_{i}$ 表示到达编号为 $\\mathrm{i}$ 的城市后需要隔离 的时间\n第 $3 \\ldots M+2$ 行: 每行 3 个正整数, $u, v, c$, 表示有一条城市 $u$ 到城市 $v$ 的 双向路线仍然开通着, 通过该路线的时间为 $c$\n输出格式第 1 行: 1 个正整数, 表示小明从城市 1 出发到达城市 $N$ 的最短时间（到 达城市 $N$, 不需要计算城市 $N$ 的隔离时间）\n样例输入4 4 5 7 3 41 2 4 1 3 52 4 33 4 5\n样例输出13\n样例说明\n评测用例规模与约定对于 $100 \\%$ 的数据, $1 \\leq N \\leq 1000,1 \\leq M \\leq 10000,1 \\leq C_{i} \\leq 200,1 \\leq u, v \\leq$ $N, 1 \\leq c \\leq 1000$\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n512M\n\n\nC\n1s\n512M\n\n\nPython3\n1s\n512M\n\n\nJava\n1s\n512M\n\n\n\n\n聪明的猴子题目描述在一个热带雨林中生存着一群猴子，它们以树上的果子为生。昨天下了一场大雨，现在雨过天晴，但整个雨林的地表还是被大水淹没着，部分植物的树冠露在水面上。猴子不会游泳，但跳跃能力比较强，它们仍然可以在露出水面的不同树冠上来回穿梭，以找到喜欢吃的果实。\n现在，在这个地区露出水面的有 $N$ 棵树，假设每棵树本身的直径都很小，可以忽略不计。我们在这块区域上建立直角坐标系，则每一棵树的位置由其所对应的坐标表示(任意两棵树的坐标都不相同)。\n在这个地区住着的猴子有 $M$ 个，下雨时，它们都躲到了茂密高大的树冠中，没有被大水冲走。由于各个猴子的年龄不同、身体素质不同，它们跳跃的能力不同。有的猴子跳跃的距离比较远(当然也可以跳到较近的树上)，而有些猴子跳跃的距离就比较近。这些猴子非常聪明，它们通过目测就可以准确地判断出自己能否跳到对面的树上。\n现已知猴子的数量及每一个猴子的最大跳跃距离，还知道露出水面的每一棵树的坐标，你的任务是统计有多少个猴子可以在这个地区露出水面的所有树冠上觅食。\n输入描述第 $1$ 行为一个整数，表示猴子的个数 $M(2 \\leq M \\leq 500)$；\n第 $2$ 行为 $M$ 个整数，依次表示猴子的最大跳跃距离（每个整数值在 $1 \\sim 1000$之间）；\n第 $3$ 行为一个整数表示树的总棵数 $N(2 \\leq N \\leq 1000)$；\n第 $4$ 行至第 $N+3$ 行为 $N$ 棵树的坐标（横纵坐标均为整数，范围为：$-1000 \\sim 1000$）。\n（同一行的整数间用空格分开）\n输出描述输出一个整数，表示可以在这个地区的所有树冠上觅食的猴子数。\n输入输出样例示例 1\n输入\n\n41 2 3 4 60 0 1 01 2 -1 -1-2 0 2 2\n\n输出\n\n3\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n128M\n\n\nC\n1s\n128M\n\n\nPython3\n1s\n128M\n\n\nJava\n1s\n128M\n\n\n\n\n通电题目描述2015 年，全中国实现了户户通电。作为一名电力建设者，小明正在帮助一带一路上的国家通电。\n这一次，小明要帮助 $n$ 个村庄通电，其中 1 号村庄正好可以建立一个发电站，所发的电足够所有村庄使用。\n现在，这 $n$ 个村庄之间都没有电线相连，小明主要要做的是架设电线连接这些村庄，使得所有村庄都直接或间接的与发电站相通。\n小明测量了所有村庄的位置（坐标）和高度，如果要连接两个村庄，小明需要花费两个村庄之间的坐标距离加上高度差的平方，形式化描述为坐标为($x_1, y_1$) 高度为 $h_1$ 的村庄与坐标为 ($x_2, y_2$) 高度为 $h_2$ 的村庄之间连接的费用为\n$\\sqrt{(x_1-x_2)^2+(y_1-y_2)^2}+(h_1-h_2)^2$\n高度的计算方式与横纵坐标的计算方式不同。\n由于经费有限，请帮助小明计算他至少要花费多少费用才能使这 $n$ 个村庄都通电。\n输入描述输入的第一行包含一个整数 $n$ ，表示村庄的数量。\n接下来 $n$ 行，每个三个整数 $x, y,h$，分别表示一个村庄的横、纵坐标和高度，其中第一个村庄可以建立发电站。\n其中，$1   \\leq   n  \\leq   1000，0   \\leq   x, y, h   \\leq   10000$。\n输出描述输出一行，包含一个实数，四舍五入保留 2 位小数，表示答案。\n输入输出样例示例\n输入\n\n4 1 1 3 9 9 7 8 8 6 4 5 4\n\n输出\n\n17.41\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nPython3\n1s\n256M\n\n\nJava\n1s\n256M\n\n\n\n\n机房问题描述这天, 小明在机房学习。\n他发现机房里一共有 $n$ 台电脑, 编号为 1 到 $n$, 电脑和电脑之间有网线连 接, 一共有 $n-1$ 根网线将 $n$ 台电脑连接起来使得任意两台电脑都直接或者间 接地相连。\n小明发现每台电脑转发、发送或者接受信息需要的时间取决于这台电脑和 多少台电脑直接相连, 而信息在网线中的传播时间可以忽略。比如如果某台电脑 用网线直接连接了另外 $d$ 台电脑, 那么任何经过这台电脑的信息都会延迟 $d$ 单 位时间 (发送方和接收方也会产生这样的延迟, 当然如果发送方和接收方都是 同一台电脑就只会产生一次延迟)。\n小明一共产生了 $m$ 个疑问: 如果电脑 $u_{i}$ 向电脑 $v_{i}$ 发送信息, 那么信息从 $u_{i}$ 传到 $v_{i}$ 的最短时间是多少?\n输入格式输入共 $n+m$ 行, 第一行为两个正整数 $n, m$ 。\n后面 $n-1$ 行, 每行两个正整数 $x, y$ 表示编号为 $x$ 和 $y$ 的两台电脑用网线 直接相连。\n后面 $m$ 行, 每行两个正整数 $u_{i}, v_{i}$ 表示小明的第 $i$ 个疑问。\n输出格式输出共 $m$ 行, 第 $i$ 行一个正整数表示小明第 $i$ 个疑问的答案。\n样例输入4 3 1 2 1 32 4 2 33 43 3\n样例输出561\n样例说明这四台电脑各自的延迟分别为 $2,2,1,1$ 。\n对于第一个询问, 从 2 到 3 需要经过 $2,1,3$, 所以时间和为 $2+2+1=5$ 。\n对于第二个询问, 从 3 到 4 需要经过 $3,1,2,4$, 所以时间和为 $1+2+2+1=6$。\n对于第三个询问, 从 3 到 3 只会产生一次延迟, 所以时间为 1 。\n评测用例规模与约定对于 $30 \\%$ 的数据, 保证 $n, m \\leq 1000$;\n对于 $100 \\%$ 的数据, 保证 $n, m \\leq 100000$ 。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n512M\n\n\nC\n1s\n512M\n\n\nPython3\n1s\n512M\n\n\nJava\n1s\n512M\n\n\n\n\n环境治理问题描述LQ 国拥有 $n$ 个城市, 从 0 到 $n-1$ 编号, 这 $n$ 个城市两两之间都有且仅有 一条双向道路连接, 这意味着任意两个城市之间都是可达的。每条道路都有一 个属性 $D$, 表示这条道路的灰尘度。当从一个城市 $A$ 前往另一个城市 $B$ 时, 可 能存在多条路线, 每条路线的灰尘度定义为这条路线所经过的所有道路的灰尘 度之和, LQ 国的人都很讨厌灰尘, 所以他们总会优先选择灰尘度最小的路线。\nLQ 国很看重居民的出行环境, 他们用一个指标 $P$ 来衡量 LQ 国的出行环 境, $P$ 定义为:\n$P=\\sum_{i=0}^{n-1} \\sum_{j=0}^{n-1} d(i, j)$\n其中 $d(i, j)$ 表示城市 $i$ 到城市 $j$ 之间灰尘度最小的路线对应的灰尘度的值。 为了改善出行环境, 每个城市都要有所作为, 当某个城市进行道路改善时, 会将与这个城市直接相连的所有道路的灰尘度都减少 1 , 但每条道路都有一个 灰尘度的下限值 $L$, 当灰尘度达到道路的下限值时, 无论再怎么改善, 道路的 灰尘度也不会再减小了。\n具体的计划是这样的:\n第 1 天, 0 号城市对与其直接相连的道路环境进行改善;\n第 2 天, 1 号城市对与其直接相连的道路环境进行改善;\n$\\cdots$\n第 $n$ 天, $n-1$ 号城市对与其直接相连的道路环境进行改善;\n第 $n+1$ 天, 0 号城市对与其直接相连的道路环境进行改善;\n第 $n+2$ 天, 1 号城市对与其直接相连的道路环境进行改善;\nLQ 国想要使得 $P$ 指标满足 $P \\leq Q$ 。请问最少要经过多少天之后, $P$ 指标 可以满足 $P \\leq Q$ 。如果在初始时就已经满足条件, 则输出 0 ; 如果永远不可能 满足, 则输出 $-1$ 。\n输入格式输入的第一行包含两个整数 $n, Q$, 用一个空格分隔, 分别表示城市个数和 期望达到的 $P$ 指标。\n接下来 $n$ 行, 每行包含 $n$ 个整数, 相邻两个整数之间用一个空格分隔, 其 中第 $i$ 行第 $j$ 列的值 $D_{i j}\\left(D_{i j}=D_{j i}, D_{i i}=0\\right)$ 表示城市 $i$ 与城市 $j$ 之间直接相连 的那条道路的灰尘度。\n接下来 $n$ 行, 每行包含 $n$ 个整数, 相邻两个整数之间用一个空格分隔, 其 中第 $i$ 行第 $j$ 列的值 $L_{i j}\\left(L_{i j}=L_{j i}, L_{i i}=0\\right)$ 表示城市 $i$ 与城市 $j$ 之间直接相连的 那条道路的灰尘度的下限值。\n输出格式输出一行包含一个整数表示答条。\n样例输入3 10 0 2 4 2 0 14 1 0 0 2 22 0 0 2 0 0\n样例输出2\n评测用例规模与约定对于 $30 \\%$ 的评测用例, $1 \\leq n \\leq 10 ， 0 \\leq L_{i j} \\leq D_{i j} \\leq 10$ ；\n对于 $60 \\%$ 的评测用例, $1 \\leq n \\leq 50 ， 0 \\leq L_{i j} \\leq D_{i j} \\leq 100000$;\n对于所有评测用例, $1 \\leq n \\leq 100,0 \\leq L_{i j} \\leq D_{i j} \\leq 100000,0 \\leq Q \\leq 2^{31}-1$ 。\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n10s\n512M\n\n\nC\n10s\n512M\n\n\nPython3\n10s\n512M\n\n\nJava\n10s\n512M\n\n\n\n\n刷题统计问题描述小明决定从下周一开始努力刷题准备蓝桥杯竞赛。他计划周一至周五每天 做 $a$ 道题目, 周六和周日每天做 $b$ 道题目。请你帮小明计算, 按照计划他将在 第几天实现做题数大于等于 $n$ 题?\n输入格式输入一行包含三个整数 $a, b$ 和 $n$.\n输出格式输出一个整数代表天数。\n样例输入10 20 99\n样例输出8\n评测用例规模与约定对于 $50 \\%$ 的评测用例, $1 \\leq a, b, n \\leq 10^{6}$.\n对于 $100 \\%$ 的评测用例, $1 \\leq a, b, n \\leq 10^{18}$.\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nPython3\n1s\n256M\n\n\nJava\n1s\n256M\n\n\n\n\n快速幂题目描述输入 $b，p，k$ 的值，求 $b^p \\mod k$ 的值。其中 $2 \\leq b,p,k \\leq 10^9$ 。\n输入描述三个整数 $b,p,k$。\n输出描述输出 $b^p \\mod k=s$，$s$ 为运算结果。\n输入输出样例示例\n输入\n\n2 10 9\n\n输出\n\n7\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n128M\n\n\nC\n1s\n128M\n\n\nPython3\n1s\n128M\n\n\nJava\n1s\n128M\n\n\n\n\n核桃的数量题目描述小张是软件项目经理，他带领 3 个开发组。工期紧，今天都在加班呢。为鼓舞士气，小张打算给每个组发一袋核桃（据传言能补脑）。他的要求是：\n\n各组的核桃数量必须相同\n\n各组内必须能平分核桃（当然是不能打碎的）\n\n尽量提供满足 1,2 条件的最小数量（节约闹革命嘛）\n\n\n输入描述输入一行 $a,b,c$，都是正整数，表示每个组正在加班的人数，用空格分开$(a,b,c&lt;30)$。\n输出描述输出一个正整数，表示每袋核桃的数量。\n输入输出样例示例\n输入\n\n2 4 5\n\n输出\n\n20\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n64M\n\n\nC\n1s\n64M\n\n\nPython3\n1s\n64M\n\n\nJava\n1s\n64M\n\n\n\n\n质数题目描述给定一个正整数 $N$，请你输出 $N$ 以内（不包含 $N$）的质数以及质数的个数。\n输入描述输入一行，包含一个正整数 $N$。 $1\\leq N \\leq 10^3$\n输出描述共两行。\n第 $1$ 行包含若干个素数，每两个素数之间用一个空格隔开，素数从小到大输出。\n第 $2$ 行包含一个整数，表示N以内质数的个数。\n输入输出样例示例\n输入\n\n10\n\n输出\n\n2 3 5 7 4\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n128M\n\n\nC\n1s\n128M\n\n\nPython3\n1s\n128M\n\n\nJava\n1s\n128M\n\n\n\n\n分割立方体题目描述给定一个立方体，边长为 $n$，现将其分割成 $n×n×n$ 个单位立方体。\n分割后任意两个单位立方体，或者有 $2$ 个公共点，或者有 $4$ 个公共点，或者没有公共点。\n请问，没有公共点和有 $2$ 个公共点的立方体，共有多少对？\n输入描述输入一行包含一个整数 $n(1\\leq n \\leq 30)$。\n输出描述输出一个整数表示答案。\n输入输出样例示例1\n输入\n\n1\n\n输出\n\n0\n示例2\n输入\n\n2\n\n输出\n\n16\n示例3\n输入\n\n3\n\n输出\n\n297\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nPython3\n1s\n256M\n\n\nJava\n1s\n256M\n\n\n\n\n糊涂人寄信题目描述有一个糊涂人，写了 $n$ 封信和 $n$ 个信封，到了邮寄的时候，把所有的信都装错了信封。求装错信封可能的种类数。\n输入描述有多行读入，每行输入一个正整数 $n$，表示一种情况。($n\\leq 20$)\n输出描述输出相应的答案。\n输入输出样例示例\n输入\n\n134\n\n输出\n\n0 29\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nPython3\n1s\n256M\n\n\nJava\n1s\n256M\n\n\n\n\n小蓝吃糖果题目描述小蓝有 $n$ 种糖果，每种数量已知。\n小蓝不喜欢连续 $2$ 次吃同样的糖果。问有没有可行的吃糖方案。\n输入描述第一行是整数 $n(0&lt;n&lt;1000000)$。\n第二行包含 $n$ 个数，表示 $n$ 种糖果的数量 $mi$，$0&lt;mi&lt;1000000$。\n输出描述输出一行，包含一个 Yes 或 No。\n输入输出样例示例\n输入\n\n34 1 1\n\n输出\n\nNo\n运行限制\n\n\n\n语言\n最大运行时间\n最大运行内存\n\n\n\n\nC++\n1s\n256M\n\n\nC\n1s\n256M\n\n\nPython3\n1s\n256M\n\n\nJava\n1s\n256M\n\n\n\n\n","categories":["刷题","蓝桥"],"tags":["蓝桥杯"]},{"title":"贪心算法","url":"/2024/03/11/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/","content":"贪心算法贪心算法（Greedy algorithm），又称贪婪算法。是一种在每一步选择中都采取在当前状态下最好或最优（即最有利）的选择，从而使得问题得到全局最优解。\n贪心的算法的设计就是要遵循某种规则，不断地选取当前最优解的算法设计方法。这节实验将会通过多个问题的来讲解贪心算法。\n知识点\n贪心算法的基本概念\n贪心算法的适用范围\n贪心算法的设计步骤\n贪心算法的题目讲解\n\n贪心算法基本概念贪心算法与枚举法的不同之处在于每个子问题都选择最优的情况，然后向下继续进行，且不能回溯。枚举法是将所有情况都考虑然后选出最优的情况。\n贪心算法，在解决问题时，不从整体考虑，而是采用一种一眼看到局部最优解的选择方式。并且，贪心算法没有固定的模板可以遵循，每个题目都有不同的贪心策略，所以算法设计的关键在于贪心策略的选择。\n贪心算法有一个必须注意的事情。贪心算法对于问题的要求是，所有的选择必须是无后效性的，即当前的选择不能影响后续选择对于结果的影响。\n贪心算法主要适用于最优化问题，例如：最小生成树问题。有时候贪心算法并不能得到最优答案，但是能得到精确答案的近似结果。有时可以辅助其他算法得到不那么精确的结果。\n适用范围符合贪心策略：\n所谓贪心选择性质是指所求问题的整体最优解可以通过一系列局部最优的选择，即贪心选择来达到。这是贪心算法可行的第一个基本要素，也是贪心算法与动态规划算法的主要区别。\n贪心选择性质就是指，该问题的每一步选择都在选择最优的情况下能够导致最终问题的答案也是最优。\n或者说是无后效性，如果该问题的每一步选择都对后续的选择没有影响，就可以应用贪心算法。\n贪心算法的设计步骤按照定义设计：\n\n证明原问题的最优解之一可以由贪心选择得到。\n将最优化问题转化为这样一个问题，即先做出选择，再解决剩下的一个子问题。\n对每一子问题一一求解，得到子问题的局部最优解；\n将子问题的解局部最优解合成原问题的一个解。\n\n伪代码：\n关于 Question Q：\nwhile(Q.hasNextStep)&#123;    Select(Q.nowBestSelect);    Q.NextStep&#125;Select(Q.nowBestSelect);\n贪心相关题目讲解我们在正式将题目前，聊一个大家都懂的常见的知识，也是一个常见的题目。\n找零问题题目如下：\n假设商店老板需要找零 $n$ 元钱。\n钱币的面额有：$100$ 元、$50$ 元、$20$ 元、$5$ 元、$1$ 元、如何找零使得所需钱币的数量最少？\n注意：$n$ 可能为 $0$，也能为几百元（别问，问就是来着里微信提现来了）\n输入:\n输入解法:\n在第一行给出测试例个数 $N$。\n代表需要找零的钱数。\n输入样例：\n365\n输出：\n输出解法\n有 $5$ 行输出数据，每一行输出数据输出找零的金额与数量，详情看样例。\n输出样例：\n100:350:120:05:31:0\n运行限制:\n最大运行时间：1s最大运行内存：128M\n题目解析：\n关于这个题，如果是正常人都知道从大的钱开始找钱。这就是一种贪心的思想，将大问题转化为一个个小的子问题，每次选择最大的钱数使得总量最小。\n其实再生活中贪心思想的例子还有很多，像是“自助餐“这种的都是贪心算法的印证。贪心算法其实离我们很近，掌握不会很困难的。\n我们先看一下上一道题目的代码题解是什么。\n答案解析：\nC++ 解法：\n#include &lt;iostream&gt;#include &lt;algorithm&gt;#include&lt;cstdio&gt;using namespace std;//面值int t[5]=&#123;100, 50, 20, 5, 1&#125;;//张数int m[5];void change(int n)&#123;    for(int i=0;i&lt;5;i++)    &#123;        m[i]=n/t[i];        n=n%t[i];        //print(&quot;%d&quot;,n);    &#125;&#125;int main()&#123;    int N;    cin&gt;&gt;N;    change(N);    for(int i=0;i&lt;5;i++)    &#123;        printf(&quot;%d:%d\\n&quot;,t[i],m[i]);    &#125;&#125;\nPython 解法\nt = [100, 50, 20, 5, 1]# 钱的面值def change(t, n):  # m是张数  m = [0 for _ in range(len(t))]  # print(m) #[0, 0, 0, 0]  for i, money in enumerate(t):      # print(i) #0 1 2 3      # print(money)      # i是当前的编号  举个例子 n是376 money是100      m[i] = n // money  # 商3      # n还剩多少取余      n = n % money  # 取余76 76不够100的      # print(m)      # print(n)  return mif __name__ == &#x27;__main__&#x27;:  N = int(input())  m = change(t,N)  for i in range(len(m)):      print(t[i], end=&#x27;:&#x27;)      print(m[i])\nJava 解法\nimport java.util.Arrays;import java.util.Comparator;import java.util.Scanner;import static java.lang.Integer.max;public class Main &#123;  //面值  static  int t[] = new int[]&#123;100, 50, 20, 5, 1&#125;;  //张数  static int m[] = new int[5];  static void change(int n) &#123;      for (int i = 0; i &lt; 5; i++) &#123;          m[i] = n / t[i];          n = n % t[i];          //print(&quot;%d&quot;,n);      &#125;  &#125;  public static void main(String[] args) &#123;      int N;      Scanner in = new Scanner(System.in);      N = in.nextInt();      change(N);      for (int i = 0; i &lt; 5; i++) &#123;          System.out.println(String.format(&quot;%d:%d&quot;, t[i], m[i]));      &#125;  &#125;&#125;\n蓝桥大学的小 B 同学宿舍题目如下:\n小 B 的宿舍楼沿着走廊南北向的两边各有 $200$ 个房间。\n如图所示：\n[房间1][房间3][房间5][房间7][房间9 ]...[房间399]----------------------------------------------                   走廊----------------------------------------------[房间2][房间4][房间6][房间8][房间10]...[房间400]\n最近，由于转专业和专业分流的原因，宿舍将迎来新的调整，以便组成新的班级后方便管理。\n但是由于走廊狭窄，走廊里只能通过一个搬运的物品（可以同向也可以反向），因此必须指定高效的搬运计划。\n老师给了每位同学下达了以下要求，让同学们体现收拾好行李，然后给每位同学 $10$ 分钟的时间搬运。\n当房间 $i$ 搬运行李到 $j$ 时，$i$ 与 $j$ 之间的走廊都会被占用。所以，$10$ 分钟之内同一段走廊最多$1$个人同时搬运，不重叠的走廊也可以同时搬运。\n小 $B$ 的老师是个数学老师，经过运筹学一通计算他得到了最优的搬运计划。\n虽然计划不唯一，但是最优值唯一，请问这个最短时间是多少？\n输入:\n输入解法:\n输入数据有 $T$ 组测试例，在第一行给出测试例个数 $T$。\n每个测试例的第一行是一个整数 $N$（$1≤N≤200$)，表示要搬运行李的人数。接下来 $N$ 行，每行两个正整数 $s$ 和 $t$，表示一个人，将行李是从房间号码 $s$ 移到到房间号码 $t$。\n输入样例:\n3410 2030 4050 6070 8021 32 200310 10020 8030 50\n输出：\n输出解法\n每组输入都有一行输出数据，为一整数 $T$，表示完成任务所花费的最小时间。\n输出样例:\n102030\n运行限制:\n最大运行时间：1s 最大运行内存：128M\n题目解析：\n不难发现，相对应的两个房间其实是占用一段走廊的，我们可以将将房间号映射为走廊号，然后再考虑上面的解析。\n该题属于贪心算法，因为它尽可能使搬运办公桌同时进行，以便使单独安排的搬运次数最少。这样用的时间最少，即所用最少时间为不能同时搬运桌子的次数，即某一段走廊使用次数最多（贪心标准）即为即为最少搬运时间。 答案解析：\nC++ 解法：\n#include &lt;cstdio&gt;#include &lt;iostream&gt;#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123;    int move[200];//搬运次数    int N;    int T;    cin&gt;&gt;T;    while(T--)    &#123;        //每次搬运的起点和终点        int from, to;        int maxAns=0;        scanf(&quot;%d&quot;, &amp;N);        memset(move, 0, sizeof(move));        for(int i = 0; i &lt; N; i++)        &#123;            scanf(&quot;%d%d&quot;, &amp;from, &amp;to);//将房间号映射为走廊号            from = (from - 1)/2;            to = (to - 1)/2;//确保from&lt;to，C++使用：swap(from, to)            if(from &gt; to)            &#123;                int temp = from;                from = to;                to = temp;            &#125;//统计占用走廊情况，并统计最大值            for(int j = from; j &lt;= to; j++)            &#123;                move[j]++;                maxAns=max(maxAns,move[j]);            &#125;        &#125;        cout&lt;&lt;maxAns*10&lt;&lt;endl;    &#125;&#125;\nPython 解法\n#include &lt;cstdio&gt;#include &lt;iostream&gt;#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123;    int move[200];//搬运次数    int N;    int T;    cin&gt;&gt;T;    while(T--)    &#123;        //每次搬运的起点和终点        int from, to;        int maxAns=0;        scanf(&quot;%d&quot;, &amp;N);        memset(move, 0, sizeof(move));        for(int i = 0; i &lt; N; i++)        &#123;            scanf(&quot;%d%d&quot;, &amp;from, &amp;to);//将房间号映射为走廊号            from = (from - 1)/2;            to = (to - 1)/2;//确保from&lt;to，C++使用：swap(from, to)            if(from &gt; to)            &#123;                int temp = from;                from = to;                to = temp;            &#125;//统计占用走廊情况，并统计最大值            for(int j = from; j &lt;= to; j++)            &#123;                move[j]++;                maxAns=max(maxAns,move[j]);            &#125;        &#125;        cout&lt;&lt;maxAns*10&lt;&lt;endl;    &#125;&#125;\nJava 解法\nimport java.util.Scanner;import static java.lang.Integer.max;public class Main &#123;  public static void main(String[] args) &#123;      Scanner in = new Scanner(System.in);//搬运次数      int N;      int T;      T = in.nextInt();      while (T &gt; 0) &#123;          T--;          //每次搬运的起点和终点          int from, to;          int maxAns = 0;          N = in.nextInt();          int[] move = new int[205];          for (int i = 0; i &lt; N; i++) &#123;              from=in.nextInt();              to=in.nextInt();//将房间号映射为走廊号              from = (from - 1) / 2;              to = (to - 1) / 2;//确保from&lt;to，C++使用：swap(from, to)              if (from &gt; to) &#123;                  int temp = from;                  from = to;                  to = temp;              &#125;//统计占用走廊情况，并统计最大值              for (int j = from; j &lt;= to; j++) &#123;                  move[j]++;                  maxAns = max(maxAns, move[j]);              &#125;          &#125;          System.out.println( maxAns * 10);      &#125;  &#125;&#125;\n可拆分背包问题之贪心的自助餐题目如下:\n小 $B$ 同学呢，想去吃自助餐，但是他是那种比较节俭的的人，既不想浪费食物，又想尽可能吃的贵一点，他于是私下里做了调查。\n小蓝餐厅的自助餐有 $n$ 种食材，每种食材都有它的价格。\n而且也能估计出每一份的重量，所以他列了一个表格。\n红烧牛肉  30元    300g油闷大虾  8元     5g四喜丸子  4元     8g三文鱼    5元     3g排骨      18元    200g麻辣兔头  20元    120g高汤海参  40元    70g扇贝粉丝  8元     32g牛排      79元    240g...\n现在小 $B$ 想知道在他到底最多吃多少钱的菜品。\n假设自助餐厅的菜品供应同样的菜品每个人只能取一份。\n小B的饭量假设为 $C$，单位为 $g$。\n现在请你设计一个程序帮助小 $B$ 计算他的最多吃了多少钱。\n输入:\n输入解法\n第一行输入 $n,C（0&lt;=n&lt;=1000）（0&lt;=C&lt;=10000）$\n其中 $n$ 为菜品数量，$C$ 为小 $B$ 的肚子容量。\n第二行输入两个数 $V，W$\n第一个数 $V[i]$ 是第 $i$ 个菜品的价值$（0&lt;=v[i]&lt;=10000）$\n第二个数 $V[i]$ 是第 $i$ 个菜品的质量$（0&lt;=w[i]&lt;=10000）$\n输入样例:\n20 10001 222 43123 21412 2123 43221 22322 1677 4934 7834 943 67721 3423 2312 56332 5621 99123 545389 3312 99923 88\n输出：\n输出一行数据，表示最大的价值，保留三位小数。\n输出样例：\n1204.114\n运行限制:\n最大运行时间：1s 最大运行内存：128M\n题目解析：\n可拆分背包的一般解法为：\n这里有 n 种不同值 $v[i]$ 和权重 $w[i]$ 的对象（如果选择该对象的 $w[i]$ 可以获得值 $v[i]$）。\n你有一个容器来挑选它们。你可以根据自己的需要把它们分成任意大小的碎片。可以拾取的对象的最大重量给定为 $w$。请计算您能得到的最大值。\n就像是这个题目，要想吃回本就要捡着贵的吃，但是贵只是一方面，人会饱，所以用价格除以质量所获的价格商才是贪心准则，应按照价格商优先进行选取。\n于是这个题，就要用的我们之前学的知识了。这里因为要整体排序，所以要先创建一个类，然后自定义 cmp 函数，在使用 sort 排序。\n答案解析：\nC++ 解法：\n#include &lt;iostream&gt;#include &lt;algorithm&gt;#include&lt;iomanip&gt;using namespace std;//需要一个结构体，通过性价比，能够查找到重量和价值。//做一个排序，需要将性价比由高到底排序，排序的过程中重量和（价值）要对应上struct Food&#123;    double w;    double v;    double aver;&#125;;//C++一般用 struct，因为默认都是public的bool cmp(Food a, Food b)&#123;    return a.aver &gt; b.aver;    //助记大于号就是从大到小排序，小于号就是从小到大排序&#125;int main()&#123;    Food foods[1009];    int n;    double C;    double Value = 0;    cin &gt;&gt; n &gt;&gt; C;    for (int i = 0; i &lt; n; i++)    &#123;        cin &gt;&gt; foods[i].v&gt;&gt;foods[i].w;        //求性价比        foods[i].aver = foods[i].v / foods[i].w;        //cout &lt;&lt; foods[i].aver &lt;&lt; endl;    &#125;    //性价比排序    sort(foods, foods + n, cmp);    //当背包（肚子）能装下所有物品（菜）时，直接输出所有的物品（菜品）价值之和    //    int sum = 0;    for (int i = 0; i &lt; n; i++)    &#123;        sum += foods[i].w;    &#125;    if (sum &lt;= C)    &#123;        for (int j = 0; j &lt; n; j++)            Value += foods[j].v;        //V = floor(V * 1000.0) / 1000.0;        cout &lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(3) &lt;&lt;Value &lt;&lt; endl;        return 0;    &#125;    //当背包（肚子）不能装下所有物品时应该由性价比的顺序，选择装入的物品    for (int i = 0; i &lt; n; i++)    &#123;        if (foods[i].w &lt;= C)        &#123;            Value =Value + foods[i].v;            C = C - foods[i].w;        &#125;        else        &#123;            //直接将剩余的C加入即可            Value =Value + C * foods[i].aver;            C = 0;        &#125;        if (C == 0)            break;    &#125;    //V = floor(V * 1000.0) / 1000.0;    cout &lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(3) &lt;&lt;Value &lt;&lt; endl;    return 0;&#125;\nPython 解法\nclass Food:   def __init__(self, w, v, aver):       self.w = w       self.v = v       self.aver = aver   def __repr__(self):       # print(11)       return repr((self.w, self.v, self.aver))# def cmp(foodA: Food, foodB: Food):#     if foodA.aver &gt;= foodB.aver:#         return True##     else:#         return False### 当然 python 的 sort 是不需要写 cmp 函数的，这里我们使用 sorted 就不用 cmp 函数了if __name__ == &#x27;__main__&#x27;:   foods = []   C = 0.0   Value = 0.0   n, C = map(int, input().split())   for i in range(n):       food = Food(0, 0, 0)       food.v, food.w = map(int, input().split())       food.aver = food.v / food.w       foods.append(food)       # print(food.aver)       # print(foods)   # 性价比排序   foods.sort(key=lambda f: f.aver, reverse=True)   # for i in range(n):   #     print(foods[i].aver)   sum=0   for i in range(n):       sum+= foods[i].w   # 当背包（肚子）能装下所有物品（菜）时，直接输出所有的物品（菜品）价值之和   if sum&lt;=C :       for i in range(n):           Value+=foods[i].v;       print(Value)   # 当背包（肚子）不能装下所有物品时应该由性价比的顺序，选择装入的物品   else:       for i in range(n):           if foods[i].w&lt;=C:               Value=Value+foods[i].v               C=C-foods[i].w           #     直接将剩余的C加入即可           else:               Value+=C*foods[i].aver               C=0           if C==0:               break       print(&quot;%.3f&quot; % Value)\nJava 解法\nclass Food:   def __init__(self, w, v, aver):       self.w = w       self.v = v       self.aver = aver   def __repr__(self):       # print(11)       return repr((self.w, self.v, self.aver))# def cmp(foodA: Food, foodB: Food):#     if foodA.aver &gt;= foodB.aver:#         return True##     else:#         return False### 当然 python 的 sort 是不需要写 cmp 函数的，这里我们使用 sorted 就不用 cmp 函数了if __name__ == &#x27;__main__&#x27;:   foods = []   C = 0.0   Value = 0.0   n, C = map(int, input().split())   for i in range(n):       food = Food(0, 0, 0)       food.v, food.w = map(int, input().split())       food.aver = food.v / food.w       foods.append(food)       # print(food.aver)       # print(foods)   # 性价比排序   foods.sort(key=lambda f: f.aver, reverse=True)   # for i in range(n):   #     print(foods[i].aver)   sum=0   for i in range(n):       sum+= foods[i].w   # 当背包（肚子）能装下所有物品（菜）时，直接输出所有的物品（菜品）价值之和   if sum&lt;=C :       for i in range(n):           Value+=foods[i].v;       print(Value)   # 当背包（肚子）不能装下所有物品时应该由性价比的顺序，选择装入的物品   else:       for i in range(n):           if foods[i].w&lt;=C:               Value=Value+foods[i].v               C=C-foods[i].w           #     直接将剩余的C加入即可           else:               Value+=C*foods[i].aver               C=0           if C==0:               break       print(&quot;%.3f&quot; % Value)\n实验总结贪心算法的最主要的特征就是无后效性，就像是自助餐那个题目，如果说吃了某一样食物，就不能吃另一个食物了，那么这就有了后效性，那就不能使用贪心算法进行解决问题了。\n本节课举了三个贪心算法的例子进行讲解，贪心算法是算法竞赛中最入门的算法。没接触过感觉很深奥，接触过了也就那样，简单的贪心伸伸手就可以写出来，其实非常简单，大家也不要过分的担心。\n","categories":["蓝桥杯Note"],"tags":["蓝桥杯备赛","贪心算法"]},{"title":"递推法与递归法","url":"/2024/03/10/%E9%80%92%E6%8E%A8%E6%B3%95%E4%B8%8E%E9%80%92%E5%BD%92%E6%B3%95/","content":"[TOC]8a143f69d05e2054793e049e53e43fd4\n递推法与递归法递推法：\n递推法是一种在数学和其他领域广泛应用的重要方法，它在计算机科学中被用作一种关键的数值求解算法。\n知识点：\n\n递推算法\n递归算法\n\n递推算法的特点递推法的核心在于找到递推关系式。这种方法可以将复杂的计算过程转化为简单的重复步骤，充分利用计算机在运行程序时的时间局部性和空间局部性。\n递推算法的思想：\n\n首先找到各个相邻数据项之间的递推关系；\n递推关系避开了求通项公式的麻烦，尤其是对于那些难以或无法求解通项公式的题目；\n将复杂问题分解为若干步骤的简单运算；\n一般来说，递推算法可以视为一种特殊的迭代算法。\n\n递推算法解题的基本思路：\n\n将复杂计算转换为简单重复运算；\n通过找到递推关系式进行简化运算；\n利用计算机的特性，减少运行时间。\n\n递推算法的一般步骤：\n\n根据题目确定数据项，并找到符合要求的递推关系式；\n根据递推关系式设计递推程序；\n根据题目找到递推的终点；\n单次查询可以不进行存储，多次查询都要进行存储；\n按要求输出答案即可。\n\n递归算法：\n递归算法是一种自顶向下的算法，它通过不断地直接或间接调用自身的函数，通过每次改变变量完成多个过程的重复计算，直到到达边界之后，结束调用。\n与递推法相似的是，递归与递推都是将一个复杂过程分解为几个简单重复步骤进行计算。\n递归算法的实现的核心是分治策略，即分而治之，将复杂过程分解为规模较小的同类问题，通过解决若干个小问题，进而解决整个复杂问题。\n递归算法的思想：\n\n将复杂计算过程转换为简单重复子过程；\n找到递归公式，即能够将大问题转化为小问题的公式；\n自上而下计算，在返回完成递归过程。\n\n递归算法设计的一般步骤：\n\n根据题目设计递归函数中的运算部分；\n根据题目找到递归公式，题目可能会隐含给出，也可能需要自己进行推导；\n找到递归出口，即递归的终止条件。\n\n递归法和递推法的思路已经给大家讲解得差不多了，接下来我们将结合真实的大赛题目进行讲解。这将有助于我们更好地理解和应用这两种方法。\n斐波纳契数列 fibonacci 问题在一定情况下，同一个问题可以使用用递归也可以使用递推解答。一般一个问题的递推关系和递归关系都好求的话就都可以解题。\n当然如果题目只有一个关系好求，那就最好采用关系好求的办法。\n题目描述:\n斐波那契数列（Fibonacci sequence），又称黄金分割数列，因数学家莱昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”。\n指的是这样一个数列：$0、1、1、2、3、5、8、13、21、34、…$\n在数学上，斐波那契数列以如下被以递推的方法定义：$F(0)=0$，$F(1)=1$，$F(n)=F(n - 1)+F(n - 2)$（$n ≥ 2，n ∈ N^*$）\n请求出该数列中第 $n$ 个数字（$n$ 从$1$开始计数）是多少。\n样例:\n输入样例样例1输入6样例2输入4输出样例样例1输出8样例2输出3\n对于上面的样例我们进行了如下计算；\n[0]=0[1]=1[2]=0+1[3]=1+1=2[4]=1+2=3[5]=2+3=5[6]=5+3=8 \n运行限制:\n1. 最大运行时间：1s2. 最大运行内存：128M\n题目解析：\n\n这个题给出递推式 $F(n) = F(n-1) + F(n-2)$\n转化为可用的递推关系，即$F(n) + F(n+1) = F(n+2)$\n\n这一通过从 $n=1$ 开始循环即可完成递推，当然也可以使用递归法。\n首先我们写找出递归式，$F(n)= F(n-1) + F(n-2)$。\nF(n)= F(n-1) + F(n-2)    = F(n-2)+F(n-3)+F(n-3)+F(n-4)//重复调用\n这样我们找到了递归式，然后我们应该找到递归出口。\n我们可以知道 $F(n)=0 n=0 ,F(n)=1 n=1$ 这就是递归出口，能让递归停止的条件。\n递归算法的通用框架如下：\ndo(a,b,c...)&#123;    //递归终止条件，即出口    if(a==? ,b==? ,....) return    //递归条件    if(条件1)        do(参数1)    else(条件2)        do(参数2)&#125;如本题，各子式间存在计算关系，可以化为：do(a)&#123;    if(a==0) return 0;    if(a==1) return 1;    return do(a-1)+do(a-2);&#125;\n这道题不是多次询问问题，不需要存储直接计算的复杂度是最低的。\n答案解析C++ 代码：\n\n递推算法代码\n\n#include &lt;iostream&gt;using namespace std;int main()&#123;    int n; //第几个数    int x=0; //F(n)    int y=1; //F(n+1)    int ans; //F(n+2）    cin&gt;&gt;n;    if(n==0) ans=0;    else if(n==1) ans=1;    else &#123;        for(int i=2;i&lt;=n;i++)        &#123;            ans=x+y;            x=y;            y=ans;        &#125;    &#125;    cout&lt;&lt;ans&lt;&lt;endl;&#125;\n\n递归算法代码\n\n#include &lt;iostream&gt;using namespace std;int fn(int n)&#123;    //递归出口1    if(n==0)        return 0;    //递归出口2    else if(n==1 )        return 1;    else        return fn(n-1)+fn(n-2); //递归关系式&#125;int main()&#123;    int n; //第几个数    int ans;    cin&gt;&gt;n;    ans=fn(n);    cout&lt;&lt;ans&lt;&lt;endl;&#125;\nPython 解题代码\n\n递推算法代码：\n\nif __name__ == &#x27;__main__&#x27;:    n =int( input())    x=0 # F(n)    y=1 #F(n+1)    ans=0 #F(n+2）    if n==0 :        ans=0    elif n==1:        ans=1    else:        for i in range (n-1):            ans=x+y            x=y            y=ans    print(ans)\n\n递归算法代码：\n\ndef f(n):    # 递归出口1    if n == 0:        return 0    # 递归出口2    elif n == 1:        return 1    else:        return f(n - 1) + f(n - 2)  # 递归关系式if __name__ == &#x27;__main__&#x27;:    n = int(input())    ans = f(n)    print(ans)\nJava 解题代码\n递推算法：\nimport java.util.Scanner;public class Main &#123;    public static void main(String[] args) &#123;        int n; //第几个数        int x=0; //F(n)        int y=1; //F(n+1)        int ans = 0; //F(n+2）        Scanner in = new Scanner(System.in);        n = in.nextInt();        if(n==0) ans=0;        else if(n==1) ans=1;        else &#123;            for(int i=2;i&lt;=n;i++)            &#123;                ans=x+y;                x=y;                y=ans;            &#125;        &#125;        System.out.println(ans);    &#125;&#125;\n递归算法代码：\nimport java.util.Scanner;public class Main &#123;    static  int fn(int n)    &#123;        if(n==0)            return 0;            //递归出口2        else if(n==1 )            return 1;        else            return fn(n-1)+fn(n-2); //递归关系式    &#125;    public static void main(String[] args) &#123;        int n; //第几个数        int ans = 0;        Scanner in = new Scanner(System.in);        n = in.nextInt();        ans=fn(n);        System.out.println(ans);    &#125;&#125;\n存储型的递推与递归我们在开始就讲过题目十分存储和非存储的，上面那个题目就是此询问，如果改为多次询问我们该怎么办，我们会采用存储的方式，存储的方式适用于大部分的的多次查询问题。\n我们看一下修改后的题目。\n题目描述：\n斐波那契数列（Fibonacci sequence），又称黄金分割数列，因数学家莱昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”。\n指的是这样一个数列：$0、1、1、2、3、5、8、13、21、34、…$\n在数学上，斐波那契数列以如下被以递推的方法定义：$F(0)=0$，$F(1)=1$，$F(n)=F(n - 1)+F(n - 2)$（$n ≥ 2，n ∈ N^*$）\n我们将进行M次查询，每次输入一个$N$，其中$n$小于$30$。\n请求出该数列中第$n$个数字（$n$从$1$开始计数）是多少?\n样例:\n输入样例样例1输入：64278810样例2输入：81323141724161011输出样例样例1输出：3113212155样例2输出：233286573771597463689875589\n运行限制:\n1. 最大运行时间：1s 2. 最大运行内存：128M\n题目解析：\n这道题跟上面一道题的算法原理相同，只是增加了多次查询的复杂度，所以仅需修改这一点即可。\n再有的是有的同学担心自己的输入输出是在一个屏幕上的，评测的时候会不会出现问题。\n\n类似这样的情况，这一点是不用担心的，只要不是交互题，评测机的输入与输出是分开的，只有你的输出会用来跟答案比较，所以我们只用关心我们的输出即可。\n比如有一道题让你计算 $x+y$ 的值，如果你知道每答案，就可以直接输出，都不用进行读入。\n然后我们来看一下需要多次询问的题目该怎么解决。\n答案解析C++ 代码：\n\n递推算法代码\n\n#include &lt;iostream&gt;using namespace std;int F[35];void init()&#123;    F[0]=0;    F[1]=1;    for(int i=2;i&lt;=30;i++)    &#123;        F[i]=F[i-1]+F[i-2];    &#125;&#125;int main()&#123;    int m; //m次查询    int n; //第几个数    init();    cin&gt;&gt;m;    while(m&gt;0)&#123;        m-=1;        cin&gt;&gt;n;        cout&lt;&lt;F[n]&lt;&lt;endl;    &#125;&#125;\n存储答案的递推法，才是最常使用的递推法。\n\n递归算法代码\n\n#include &lt;iostream&gt;using namespace std;int F[35];int fn(int n)&#123;    //递归出口1    if(n==0)    &#123;        F[0]=0;        return 0;    &#125;    //递归出口2    else if(n==1 )    &#123;        F[1]=1;        return 1;    &#125;    else    &#123;        F[n]=fn(n-1)+fn(n-2);        return F[n]; //递归关系式    &#125;&#125;int main()&#123;    int m; //m次查询    int n; //第几个数    fn(30);    cin&gt;&gt;m;    while(m&gt;0)&#123;        m-=1;        cin&gt;&gt;n;        cout&lt;&lt;F[n]&lt;&lt;endl;    &#125;&#125;\nPython 解题代码\n递推算法代码：\nF = [0]*35def init():    F[0] = 0    F[1] = 1    for i in range(2, 30):        F[i] = F[i-1]+F[i-2]if __name__ == &#x27;__main__&#x27;:    m = int(input())    init()    while m &gt; 0:        m -= 1        n = int(input())        print(F[n])    # print(F)\n递归算法代码：\nF = [0] * 35def f(n):    # 递归出口1    if n == 0:        F[0] = 0        return 0    # 递归出口2    elif n == 1:        F[1] = 1        return 1    else:        F[n] = f(n - 1) + f(n - 2) # 递归关系式        return F[n]if __name__ == &#x27;__main__&#x27;:    m = int(input())    f(30)    while m &gt; 0:        m -= 1        n = int(input())        print(F[n])    # print(F)\nJava 解题代码\n递推算法：\nimport java.util.Scanner;public class Main &#123;    static int []F=new int [35];    static  void init()    &#123;        F[0]=0;        F[1]=1;        for(int i=2;i&lt;=30;i++)        &#123;            F[i]=F[i-1]+F[i-2];        &#125;    &#125;    public static void main(String[] args) &#123;        int m; //m次查询        int n; //第几个数        init();        Scanner in = new Scanner(System.in);        m = in.nextInt();        while(m&gt;0)&#123;            m-=1;            n= in.nextInt();            System.out.println(F[n]);        &#125;    &#125;&#125;\n递归算法代码：\npackage com.company;import java.util.Scanner;public class Main &#123;    static int []F=new int [35];    static int fn(int n)    &#123;        //递归出口1        if(n==0)        &#123;            F[0]=0;            return 0;        &#125;        //递归出口2        else if(n==1 )        &#123;            F[1]=1;            return 1;        &#125;        else        &#123;            F[n]=fn(n-1)+fn(n-2);            return F[n]; //递归关系式        &#125;    &#125;    public static void main(String[] args) &#123;        int m; //m次查询        int n; //第几个数        fn(30);        Scanner in = new Scanner(System.in);        m = in.nextInt();        while(m&gt;0)&#123;            m-=1;            n= in.nextInt();            System.out.println(F[n]);        &#125;    &#125;&#125;\n数字三角形问题题目描述:\nxxxxxxxxxx27 1import java.io.FileNotFoundException;2import java.util.Arrays;3import java.util.Scanner;4public class Main {5public static void main(String args[]) {6        int n;7        long S;8        double ans=0,avg;9        Scanner input=new Scanner(System.in);10        n=input.nextInt();11        S=input.nextLong();12        long a[]=new long[n];13        for(int i=0;i&lt;n;i++)        14            a[i]=input.nextLong();15        Arrays.sort(a);16        avg=(double)S/n;17        for(int i=0;i&lt;n;i++) {18            if(S&lt;=(n-i)a[i]) {19                ans += (n-i)Math.pow((double)S/(n-i)-avg,2);20                break;21            }22            ans += Math.pow(a[i]-avg,2);23            S -= a[i];24        }25        System.out.printf(“%.4f\\n”,Math.sqrt(ans/n));26    }27}java\n如图数字三角形。如下所示为一个数字三角形。请编一个程序计算从顶到底的某处的一条路径，使该路径所经过的数字总和最大。只要求输出总和。 　\n\n一步可沿左斜线向下或右斜线向下走；\n三角形行数小于等于 $100$；\n三角形中的数字为 $0，1，…，99$；\n\n测试数据通过键盘逐行输入。\n如上例数据应以样例所示格式输入：\n样例:\n输入：573 88 1 02 7 4 44 5 2 6 5\n输出：30\n运行限制:\n1. 最大运行时间：1s2. 最大运行内存：128M\n题目分析:\n解决该题目的方式有很多，包括动态规划， 枚举都可以解决这个问题。\n我们从递推的思想出发，假设我们从顶层沿着某条路径已经走到了第 $i$ 层，正向着 $i+1$ 层前进， 两条可行路径中我们肯定会选择最大的方向前进，为此我们可以采用递推中的反向递推，即逆推的方式解决，设 $a[i][j]$ 存放从 $i,j$ 出发到达第 $n$ 层的最大值。\n我们可以写出递推式：\na[i][j] = max&#123;a[i][j]+a[i+1][j]，a[i][j]+a[i+1][j+1]&#125;\n则 逆推到出发点 $a[1][1]$ 为题目所求答案，即第一层到第 $N$ 层的最大值。\n答案解析C++ 代码：\n#include&lt;iostream&gt;using namespace std;int main()&#123;    int n; //n层    int a[101][101]; //路径矩阵    cin&gt;&gt;n;    //输入数字三角形的值    for (int i=1; i&lt;=n; i++)    &#123;        for (int j=1; j&lt;=i; j++)        &#123;        cin&gt;&gt;a[i][j]; //输入原始数据        &#125;    &#125;    //递推开始    for (int i=n-1; i&gt;=1; i--)//从最后一层逆推    &#123;        for (int j=1; j&lt;=i; j++)        &#123;            if (a[i+1][j]&gt;=a[i+1][j+1])                a[i][j]+=a[i+1][j];     //路径选择            else                a[i][j]+=a[i+1][j+1];        &#125;    &#125;    cout&lt;&lt;a[1][1]&lt;&lt;endl;&#125;\nPython 解题代码\na = [[0] * 101] * 101if __name__ == &#x27;__main__&#x27;:  n = int(input())  # 输入数字三角形的值  for i in range(1, n+1):      a[i] = input().split()      a[i] = list(map(int, a[i]))  # split 分割后都是 字符 这里是转化成数字  #  # for i in range(1, n + 1):  #     print(a[i]) # a = list(map(int, a)) # split 分割后都是 字符 这里是转化成数字  # 递推开始  for i in range(n - 1, 0, -1):      # 最后一层逆推      for j in range(0, i):          # 路径选择          if a[i + 1][j] &gt;= a[i + 1][j + 1]:              a[i][j] += a[i + 1][j]          else:              a[i][j] += a[i + 1][j + 1]  # for i in range(1, n + 1):  #     print(a[i])  print(a[1][0])\nJava 解题代码\npackage com.company;import java.util.Scanner;public class Main &#123;  static int [][]a=new int [101][101];  public static void main(String[] args) &#123;      int n;      Scanner in = new Scanner(System.in);      n = in.nextInt();      //输入数字三角形的值      for (int i=1; i&lt;=n; i++)      &#123;          for (int j=1; j&lt;=i; j++)          &#123;              a[i][j]=in.nextInt(); //输入原始数据          &#125;      &#125;      //递推开始      for (int i=n-1; i&gt;=1; i--)//从最后一层逆推      &#123;          for (int j=1; j&lt;=i; j++)          &#123;              if (a[i+1][j]&gt;=a[i+1][j+1])                  a[i][j]+=a[i+1][j];     //路径选择              else  a[i][j]+=a[i+1][j+1];          &#125;      &#125;      System.out.println(a[1][1]);  &#125;&#125;\n总结我们这节课讲了递推与递归的知识点，并且也讲了何时采用递归设计程序，何时采用递推设计程序。对于多次询问的题目，也为大家展示了一种解决方法。\n对于递推算法，我们覆盖了正推和逆推两种方式。无论是递推和递归的关键在于找到关系式。\n希望同学能够独立完成题目进行练习。并且在后面的学习中会多次用到递归与递推设计其他算法。\n","categories":["蓝桥杯Note"],"tags":["蓝桥杯备赛","递推法和递归法"]}]