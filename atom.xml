<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zdx-1</title>
  
  
  <link href="http://zdx-1.github.io/atom.xml" rel="self"/>
  
  <link href="http://zdx-1.github.io/"/>
  <updated>2024-07-01T05:07:12.711Z</updated>
  <id>http://zdx-1.github.io/</id>
  
  <author>
    <name>zdx</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue</title>
    <link href="http://zdx-1.github.io/2024/07/01/vue/"/>
    <id>http://zdx-1.github.io/2024/07/01/vue/</id>
    <published>2024-07-01T05:06:38.000Z</published>
    <updated>2024-07-01T05:07:12.711Z</updated>
    
    
    
    
    <category term="vue" scheme="http://zdx-1.github.io/categories/vue/"/>
    
    
    <category term="vue" scheme="http://zdx-1.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>专升本英语</title>
    <link href="http://zdx-1.github.io/2024/06/22/%E4%B8%93%E5%8D%87%E6%9C%AC%E8%8B%B1%E8%AF%AD/"/>
    <id>http://zdx-1.github.io/2024/06/22/%E4%B8%93%E5%8D%87%E6%9C%AC%E8%8B%B1%E8%AF%AD/</id>
    <published>2024-06-22T01:46:29.000Z</published>
    <updated>2024-06-24T13:16:17.746Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2024-6-18"><a href="#2024-6-18" class="headerlink" title="2024-6-18"></a>2024-6-18</h1><h2 id="1-中英文句子的对比"><a href="#1-中英文句子的对比" class="headerlink" title="1. 中英文句子的对比"></a>1. 中英文句子的对比</h2><h2 id="1-英语学习的最小单位是句子（而不是单词）"><a href="#1-英语学习的最小单位是句子（而不是单词）" class="headerlink" title="1.英语学习的最小单位是句子（而不是单词）"></a>1.英语学习的最小单位是句子（而不是单词）</h2><h2 id="2-什么是英语的句子？"><a href="#2-什么是英语的句子？" class="headerlink" title="2.什么是英语的句子？"></a>2.什么是英语的句子？</h2><h3 id="（1）英语的句子可以没有主语，那就是动词原形开头，成为祈使句，在表示“建决要命”（建议）（决定）（要求）（命令）时才可以用。"><a href="#（1）英语的句子可以没有主语，那就是动词原形开头，成为祈使句，在表示“建决要命”（建议）（决定）（要求）（命令）时才可以用。" class="headerlink" title="（1）英语的句子可以没有主语，那就是动词原形开头，成为祈使句，在表示“建决要命”（建议）（决定）（要求）（命令）时才可以用。"></a>（1）英语的句子可以没有主语，那就是动词原形开头，成为祈使句，在表示“<font color="red">建决要命”（建议）（决定）（要求）（命令）</font>时才可以用。</h3><ol><li><p>放松。</p><p>Relax.v.</p></li><li><p>请进来。 </p><p>Please come in.||Come in,please.     please既可以在句首也可以句末。</p></li><li><p>走吧。</p><p> Let’s go.      let  就是动原（动词原形），“使，让”   let us go.</p></li><li><p>别笑。</p><p>Don’t laugh.<br/>否定句——要加否定词 not<br/>肯定句</p></li></ol><h4 id="祈使句小结"><a href="#祈使句小结" class="headerlink" title="祈使句小结"></a>祈使句小结</h4><p>除了动词原形直接开头，还可以：</p><ul><li><p>please&lt;&#x3D;&#x3D;&gt;请</p></li><li><p>如果是否定，需要加don’t,或者Never (laugh)</p></li><li><p>有种特别常用的祈使句是let’s do</p></li></ul><h3 id="2-英语句子可以没有宾语，即动作后面没有承受者"><a href="#2-英语句子可以没有宾语，即动作后面没有承受者" class="headerlink" title="(2)英语句子可以没有宾语，即动作后面没有承受者"></a>(2)英语句子可以没有宾语，即动作后面没有承受者</h3><p>补充：主语是句中动作的发出者；宾语是句中动作的承受者</p><ol start="5"><li><p>她笑了    She laughs.</p><p>&#x3D;&gt;<font color="red">句中的动作要用动词表示，而英语中的动词是有变化的。(痛点)P26</font></p></li></ol><p>动词变化的五种形式：(<a href="#vi">跳转链接</a>)</p><ul><li>原形</li><li>三单（第三人称单数）——变形条件：</li></ul><p>​<font color="RoyalBlue">a.主语是第三人称单数（人称分为第一人称，“我，我们”；第二人称“你，你们；第三人称”除了一二人称，都是第三&#x3D;&#x3D;&gt;也就是说名词都是第三人称。</font></p><p>​<font color="RoyalBlue">b.时态是一般现在时</font></p><ul><li>现在分词&#x3D;&#x3D;&gt;动词后面+ing</li><li>过去式——变形条件：1时态是一般过去时2主语一般没有要求  &#x3D;&#x3D;&gt;一般动词后面+ed</li></ul><ol start="6"><li><p>他失败了。</p><p> 汉译英，很重要的一点是要判断时态</p><p>&#x3D;&#x3D;&gt;He failed. 汉语中的“了，过”，对应英语“-ed”</p></li></ol><h4 id="主谓结构小结"><a href="#主谓结构小结" class="headerlink" title="主谓结构小结"></a>主谓结构小结</h4><p>   动词后面没有宾语，称为“主谓”，这是完整句，此时的动词，在英语中称为“不及物动词vi”</p><h4 id="宾语小结"><a href="#宾语小结" class="headerlink" title="宾语小结"></a>宾语小结</h4><p>宾语一般跟在动词和介词后，分别称为动宾和介宾</p><p>look at me&#x2F;us&#x2F;you&#x2F;him&#x2F;her&#x2F;it&#x2F;them</p><h3 id="3-英语句子中必须有谓语，而且只能有一个（有且仅有）"><a href="#3-英语句子中必须有谓语，而且只能有一个（有且仅有）" class="headerlink" title="(3)英语句子中必须有谓语，而且只能有一个（有且仅有）"></a>(3)英语句子中必须有谓语，而且只能有一个（有且仅有）</h3><p>​谓语是由动词来充当的，动词分为两种，一种表示动作，一种表示“非动作”</p><ol start="7"><li><p>阿珍爱阿强</p><p>Azhen loves Aqiang.</p><p>只有一般现在时，才需要考虑“动词的三单”形式</p></li><li><p>中国人不骗中国人</p><p>动词是“骗”，“不”是否定词</p><p>先想时态——一般现在时</p><p>Chinese don’t cheat&#x2F;pian Chinese.</p></li><li><p>你很漂亮</p><p>找动词——没有——是说明这句话中没有表示“动作”的词</p><p>You are very&#x2F;so beautiful.</p><p>are——是怎么来的</p><p>are 是be的变形；be的意思是“是”</p><p>你是很漂亮。</p><p>补充：如果在汉译英过程中，汉语句中不体现动作，那么英语句子就要用以be为代表的一类动词——联系动词——不代表主语发出对宾语的动作，而是主语自己的状态、性质、变化……</p><p>补充2：动词分为表示动作的“实义动词”和不表示动作的“联系动词-be”</p></li><li><p>英语很重要</p><p>无论用什么动词，都要先想时态</p><p>一般现在时</p><p>English is exceedingly&#x2F;extraordinarily important.</p><p><font color="Turquoise">很 very&#x3D;&#x3D;&gt;exceedingly、extraordinarily</font></p></li></ol><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>​表示动作的实义&#x2F;意动词（英语中还有一种动词是“使役动词”，后面单独讲），动作如果能直接跟宾语，就是及物动词vt；如果不能直接跟宾语，就是不及物动词vi——P22</p><ol start="11"><li>遥墙机场就要到了</li></ol><p>补充：汉译英的步骤</p><ul><li><p>找汉语句中的动词</p></li><li><p>判断动词表示的动作的发出者——主语</p></li><li><p>然后判断发出者和动作的关系（主被动关系）</p></li><li><p>然后确定句子的时态</p></li></ul><p>We are arriving at Yaoqiang Airport.</p><p>Our flight is arriving at Yaoqiang Airport.</p><p>be——变形am,is,are</p><ol start="12"><li><p>我要去剪头</p><p>主语是能够发出动作的人，句中主要的动作是“剪”</p><p>cut hair</p><p>Tony will cut my hair.</p></li></ol><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p>​    找句子的主语，一定要先判断句子的动词——主语就是能够发出这个动作的人或事（主语就是句中动作的发出者）</p><h1 id="2024-6-23"><a href="#2024-6-23" class="headerlink" title="2024-6-23"></a>2024-6-23</h1><ol start="13"><li><p>飞机上有很多饮料</p><p>-&gt;”汉语没有语法性？”,汉语省略了很多东西</p><ol><li><p>动词 –有</p></li><li><p>动词发出者—不明确，甚至可以说没有</p><p>there be “有”</p><p>还有一个表示“有”——have</p><p>–&gt;举例：</p><p>​我有女朋友。</p><p>​I have a girlfriend.</p><p>很多的表达————&gt;</p><p>​普通的：many&#x2F;a lot of&#x2F;a lots of </p><p>There are  <font color="red">various&#x2F;a variety of</font>drinks on the plane.</p><p><font color="blue">地点的前面要加介词。</font></p></li></ol></li></ol><h4 id="小结-there-be-句型的使用条件"><a href="#小结-there-be-句型的使用条件" class="headerlink" title="小结:there be 句型的使用条件"></a>小结:there be 句型的使用条件</h4><ol><li><p>句中的动作是“有”</p></li><li><p>“有”的发出者不明确</p></li><li><p>从前有座山</p><p>There was a mountain long long ago.</p><p>Long long ago,there was a mountain.</p><p>时间状语可以在句首或句尾</p></li><li><p>有朋自远方来，不亦乐乎<br>​有个朋友从远方来，我非常开心。</p><ol><li><p>先找动词</p></li><li><p>有——动作发出者不明确</p></li></ol></li><li><p>一个句子中</p></li></ol><pre><code class="hljs">方案一：试试三个句子There is a friend.Come from a far place.I am very happy.  祈使句：Come from a place.(&quot;从远方来&quot;)方案二：如果一个句中，有多余一个的谓动，可以保留一个做谓动，另外一个变成非谓语动词（由动词变化而来，不做谓语的形式——doing 主动/done 被动/to do 目的，将来）There is a friend coming from a far place.Iam exceedingly delighted.​补充例子：你爱我，我爱你，蜜雪冰城甜蜜蜜。​方案一：You love me,I love you,MXBC  is sweet.​英语中不存在叠词。​方案二：You loving me,I loving you,MXBC is sweet.​&lt;font color=&quot;red&quot;&gt;独立主格结构&lt;/font&gt;​    </code></pre><h2 id="2-英语句子的标志"><a href="#2-英语句子的标志" class="headerlink" title="2.英语句子的标志"></a>2.英语句子的标志</h2><h3 id="专升本英语考试的最小单位是句子。"><a href="#专升本英语考试的最小单位是句子。" class="headerlink" title="专升本英语考试的最小单位是句子。"></a>专升本英语考试的最小单位是句子。</h3><h3 id="英语句子的标志"><a href="#英语句子的标志" class="headerlink" title="英语句子的标志"></a>英语句子的标志</h3><ol><li>句首单词首字母大写</li><li>句尾是三个标点（句号，问号，感叹号）英语的句号是.</li><li>句中带有时态，语态，情态，主谓一致的谓语动词（3态1致）</li></ol><h3 id="3-英语简单句的类型"><a href="#3-英语简单句的类型" class="headerlink" title="3.英语简单句的类型"></a>3.英语简单句的类型</h3><ol><li>祈使句</li><li>there be</li><li>主谓</li><li>主谓宾</li><li>主系表</li><li>主谓双宾</li><li>主谓宾宾补</li></ol><h2 id="3-句子完整的概念"><a href="#3-句子完整的概念" class="headerlink" title="3.句子完整的概念"></a>3.句子完整的概念</h2><p>1.简单句：有且仅有一个谓动的句子</p><ul><li>主干部分：主谓宾表补</li><li>附属部分（修饰成分）：定语，状语，同位语</li></ul><p>2.并列句：由“并列连词”连接的两个或多个简单句</p><p>3.主从复合句</p><p><strong>补充</strong>：</p><p>not是最常用的否定副词，但是有很多单词可以来代替它</p><p>hardly 几乎不&#x2F;never 绝不&#x2F;rarely 几乎不&#x2F;little 几乎不</p><p>not…but… 可以变成hardly…but…;never…but…;rarely…but rather…不是…而是</p><p><a id="bllc">常考并列连词</a></p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>表示并列关系的并列连词</td><td>and<br />和</td><td>both……and……<br />两者都</td></tr><tr><td></td><td></td><td>not only(just,merely,solely)……but(also)(too)(as well)<br />不仅……而且……</td></tr><tr><td></td><td></td><td>not…but…&#x2F;not…but only…&#x2F;not…but rather…&#x2F;hardly…but just…<br />不是…而是…</td></tr><tr><td></td><td></td><td>neither…nor…&#x2F;not…nor… 既不…也不…</td></tr><tr><td>表示选择关系的并列连词</td><td>or<br />或者</td><td>either…or..或者…或者…,or else 或者</td></tr><tr><td>表示对比关系的并列连词</td><td>while&#x2F;whereas<br />而</td><td>*作为并列连词，不放在句首</td></tr><tr><td>表示转折关系的并列连词</td><td>but 但是&#x2F;yet 然而，但是&#x2F;only（但是，可是）</td><td>and yet 然而，但是</td></tr><tr><td>表示原因关系的并列连词</td><td>for</td><td>*只能在句中，且在逗号后</td></tr><tr><td>表示结果关系的并列连词</td><td>so</td><td></td></tr></tbody></table><p><a>常考从句引导词</a></p><table><thead><tr><th>最强搭配</th><th>that <span />引导词的从句类型最多，而且用法最多，使用频率最高<br />看到that想从句</th></tr></thead><tbody><tr><td>wh-代词类</td><td>what（表示名词），who（表示人），which（表示物，有时候会是“介词+which”），whose+n（表示谁的什么）</td></tr><tr><td>wh-副词类</td><td>when（和时间有关），where（和地点有关），why（和原因有关），how（和“怎样””多么“有关）</td></tr><tr><td>wh-连词类</td><td>whether（一般和or not搭配使用，表示”是否“）</td></tr><tr><td>其他常考引导词</td><td>1. while&#x2F;as 意思和用法都非常多<br />2.although（虽然，尽管），though（尽管）（也可以做副词用）<br />3.because（因为）<br />4.before（和”前“有关），after（和”后“有关）<br />5.since（意思很多，主要是”自从“）<br />6.until（主要考点是not……until……直到……才……）<br />7.if（如果）<br />8.once（一旦）<br />9.unless（除非）<br />10.than（比）</td></tr></tbody></table><p><a id="vi">动词的五种形式</a></p><table><thead><tr><th>类型</th><th>原形</th><th>三单</th><th>现在分词</th><th>过去式</th><th>过去分词</th></tr></thead><tbody><tr><td>中规中矩型</td><td>ask</td><td>asks</td><td>asking</td><td>asked</td><td>asked</td></tr><tr><td></td><td>look</td><td>looks</td><td>looking</td><td>looked</td><td>looked</td></tr><tr><td>y结尾变化型</td><td>try</td><td>tries</td><td>trying</td><td>tried</td><td>tried</td></tr><tr><td>y结尾不变型</td><td>play</td><td>plays</td><td>playing</td><td>played</td><td>played</td></tr><tr><td>双写型</td><td>stop</td><td>stops</td><td>stopping</td><td>stopped</td><td>stopped</td></tr><tr><td></td><td>begin</td><td>begins</td><td>beginning</td><td>began</td><td>begun</td></tr><tr><td></td><td>control</td><td>controls</td><td>controlling</td><td>controlled</td><td>controlled</td></tr><tr><td>不双写型</td><td>open</td><td>opens</td><td>opening</td><td>opened</td><td>opened</td></tr><tr><td></td><td>ifx</td><td>fixes</td><td>fixing</td><td>fixed</td><td>dixed</td></tr><tr><td>可双可不双型</td><td>travel</td><td>travels</td><td>travelling</td><td>travelled</td><td>travelled</td></tr><tr><td>+es型</td><td>watch</td><td>watches</td><td>watching</td><td>watched</td><td>watched</td></tr><tr><td></td><td>go</td><td>goes</td><td>going</td><td>went</td><td>gone</td></tr><tr><td>去e型</td><td>live</td><td>lives</td><td>living</td><td>lived</td><td>lived</td></tr><tr><td>-c结尾型</td><td>picnic</td><td>picnics</td><td>picnicking</td><td>picnicked</td><td>picnicked</td></tr><tr><td>一身反骨型</td><td>have</td><td>has</td><td>having</td><td>had</td><td>had</td></tr><tr><td></td><td>be</td><td>(am)is are</td><td>being</td><td>was&#x2F;were</td><td>been</td></tr></tbody></table><h2 id="选词填空的做题步骤："><a href="#选词填空的做题步骤：" class="headerlink" title="选词填空的做题步骤："></a>选词填空的做题步骤：</h2><ol><li><p>先看选项（15&#x2F;12&#x2F;10），重点看词尾</p></li><li><p>看横线所在句，先标点（分区），再谓动，看是几个谓语动词，如果只有一个，那就是简单句，如果有多个，那就要考虑并列句（并列连词）或主从复合句（引导词）</p><p>考点练习：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">A.helpful B.than C.attraction D.that E.who F.in<br>G.respected H.win I.because J.giving K.without L.equally<br></code></pre></td></tr></table></figure><p>Why are we not treated sometimes as expected?<font color="red">It’s  <u>   空</u> we do</font> the same to others who have expectations from us.</p></li></ol><p>​需要引导词或并列连词，看给出单词，没有并列连词，因此是引导词，than&#x2F;that&#x2F;who&#x2F;because,此时一定先找考点”心中有丘壑，眼中有考点“——前why，后because</p><h1 id="2024-6-24"><a href="#2024-6-24" class="headerlink" title="2024-6-24"></a>2024-6-24</h1><h2 id="P19-谓动的标志"><a href="#P19-谓动的标志" class="headerlink" title="P19 谓动的标志"></a>P19 谓动的标志</h2><ol><li><p>必要性：在词汇量不够大的情况下，能够识别最典型的谓动</p><ol><li><p>am is are was were</p></li><li><p>do does did</p></li><li><p>has have had</p></li><li><p>情态动词（+动词原形）</p></li><li><p>动词过去式</p></li></ol></li></ol><p>Precious metals gradually <strong>took</strong> over <strong>because</strong> they <strong>were</strong> portable,durable,recognizable,and divisible into larger and smaller of value.</p><p>补充：从句从什么开始，到什么结束</p><p>​从引导词开始到标点结束或者引导词后面第二个谓动之前结束。</p><p>补充：当多个逗号同时出现在附近的位置，且后面不远处就有并列连词，尤其是and，这些逗号，都是代替and</p><h3 id="谓语动词的要素3态1一致"><a href="#谓语动词的要素3态1一致" class="headerlink" title="谓语动词的要素3态1一致"></a>谓语动词的要素3态1一致</h3><h3 id=""><a href="#" class="headerlink" title=""></a><img src="/./../images/%E4%B8%93%E5%8D%87%E6%9C%AC%E8%8B%B1%E8%AF%AD/image-20240624174621887.png" alt="image-20240624174621887"></h3><p>​forecast 预测，预告cancer 癌症 rate 率ans：C indicates</p><h3 id="做题步骤："><a href="#做题步骤：" class="headerlink" title="做题步骤："></a>做题步骤：</h3><ol><li><p>先看标点，找到逗号前后看，but是并列连词，说明前后是并列，而横线在后面，所以but前面的部分可以先不看。</p></li><li><p>把but后面的内容当成一个整体，再切分，看到两个挨得很近的逗号，中间为插入语，<br><font color="red">,but the newest finding,</font>先不看</p></li><li><p>看到that想从句，看到have谓动标志，因此that…have…是从句，横线不在从句中</p></li><li><p>看主句缺什么？缺谓动4要素：时态，语态，情态，主谓一致，在选词填空中，一般判断出来缺谓动，只需要考虑时态和主谓一致</p></li><li><p>补充：英语的时态有16种，一般可以简单的分为2种（过去和现在）过去就是所有名称中带着过去的；其他都归于现在</p><p>has&#x2F;have&#x2F;done都是现在完成时，他们对应的就应该是现在的时态：一般现在时，现在进行时</p><p>过去完成时 had done，对应过去的时态——一般过去时，过去进行时</p><h3 id="考点：4大金刚"><a href="#考点：4大金刚" class="headerlink" title="考点：4大金刚"></a>考点：4大金刚</h3><p><strong>study是研究，study&#x2F;research</strong></p><p><strong>调查survey（investigation）</strong><br><strong>实验   experiment(trial)</strong></p><p><strong>finding 发现（conclusion）</strong></p><p>indicate 表明</p><p>hit…level 达到…水平&#x2F;程度</p></li></ol><p><img src="/./../images/%E4%B8%93%E5%8D%87%E6%9C%AC%E8%8B%B1%E8%AF%AD/image-20240624181648187.png" alt="image-20240624181648187"></p><p>补充：句首的并列连词，作用是连接本句和上一句，因此，对本句后面的内容，就没有影响了。</p><p>补充：like如果在逗号前或后，尤其是在插入语中，like是介词，“像…,比如说…”;多个逗号同时出现在附近，后面有and</p><p>考点：并列考点</p><p>看到and找并列，从前往后，一一对应，前面有什么，后面也要在词性，词形，<br> <img src="/./../images/%E4%B8%93%E5%8D%87%E6%9C%AC%E8%8B%B1%E8%AF%AD/image-20240624183502979.png" alt="image-20240624183502979"></p><p>​fufillment满足感achievement成就感</p><p>看到and找并列从后往前</p><p>beside 除此之外however 然而，前后是转折</p><p><img src="/./../images/%E4%B8%93%E5%8D%87%E6%9C%AC%E8%8B%B1%E8%AF%AD/image-20240624184003758.png" alt="image-20240624184003758"></p><p>​逗号后面有两个谓动，说明至少需要一个并列连词或引导词（并&#x2F;引）</p><p>broad 宽广的</p><p>in the briadest sense 从最广义来说</p><p>in…sense 从…意义上来说</p><p><img src="/./../images/%E4%B8%93%E5%8D%87%E6%9C%AC%E8%8B%B1%E8%AF%AD/image-20240624184629562.png" alt="image-20240624184629562"></p><p>moderate adj.适中的</p><p>assure sb 让某人放心</p><p><img src="/./../images/%E4%B8%93%E5%8D%87%E6%9C%AC%E8%8B%B1%E8%AF%AD/image-20240624185804644.png" alt="image-20240624185804644"></p><p><img src="/./../images/%E4%B8%93%E5%8D%87%E6%9C%AC%E8%8B%B1%E8%AF%AD/image-20240624190608921.png" alt="image-20240624190608921"><img src="/./../images/%E4%B8%93%E5%8D%87%E6%9C%AC%E8%8B%B1%E8%AF%AD/image-20240624200105726.png" alt="image-20240624200105726"></p><p><img src="/./../images/%E4%B8%93%E5%8D%87%E6%9C%AC%E8%8B%B1%E8%AF%AD/image-20240624195933726-1719230375233-1.png" alt="image-20240624195933726"></p><p>还要注意：有很多副词是由其形容词+ly变化而来，但是意思发生了改变</p><p><img src="/./../images/%E4%B8%93%E5%8D%87%E6%9C%AC%E8%8B%B1%E8%AF%AD/image-20240624200527992.png" alt="image-20240624200527992"></p><h2 id="P160各种词性后缀"><a href="#P160各种词性后缀" class="headerlink" title="P160各种词性后缀"></a>P160各种词性后缀</h2><h3 id="常考不带ly的副词"><a href="#常考不带ly的副词" class="headerlink" title="常考不带ly的副词"></a>常考不带ly的副词</h3><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>very 非常</td><td>much 非常</td><td>well 非常</td><td>quite 非常</td><td>pretty 非常，特别</td><td>rather 非常</td></tr><tr><td>often 经常</td><td>hard 勤奋地</td><td>already 已经</td><td>almost 几乎</td><td>still 仍然；但，不过</td><td>then 接着，另一个</td></tr><tr><td>fast 快地</td><td>perhaps 可能</td><td>enough 足够的</td><td>just 仅仅</td><td>once 一次</td><td>little 很少的</td></tr><tr><td>even 甚至</td><td>alone 独自</td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="带ly但实际是形容词"><a href="#带ly但实际是形容词" class="headerlink" title="带ly但实际是形容词"></a>带ly但实际是形容词</h3><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>Friendly 友好的</td><td>lovely 可爱的</td><td>Lively 活泼的</td><td>likely 可能的</td><td>lonely 孤独的</td><td>elderly 年纪较大的</td></tr><tr><td>costly 贵的</td><td>Weekly 每周的</td><td>Monthly 每月的</td><td>quarterly 季度的</td><td>daily 每天的</td><td>deadly 致命的</td></tr><tr><td>silly 傻的</td><td>fatherly 父亲般的</td><td>motherly 母亲般的</td><td>brotherly 兄弟般的</td><td>orderly 有秩序的</td><td>ugly 丑的</td></tr><tr><td>kindly 善良的</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2024-6-18&quot;&gt;&lt;a href=&quot;#2024-6-18&quot; class=&quot;headerlink&quot; title=&quot;2024-6-18&quot;&gt;&lt;/a&gt;2024-6-18&lt;/h1&gt;&lt;h2 id=&quot;1-中英文句子的对比&quot;&gt;&lt;a href=&quot;#1-中英文句子的对比&quot; cla</summary>
      
    
    
    
    <category term="专升本" scheme="http://zdx-1.github.io/categories/%E4%B8%93%E5%8D%87%E6%9C%AC/"/>
    
    
    <category term="专升本英语" scheme="http://zdx-1.github.io/tags/%E4%B8%93%E5%8D%87%E6%9C%AC%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>四级英语备考</title>
    <link href="http://zdx-1.github.io/2024/06/11/%E5%9B%9B%E7%BA%A7%E8%8B%B1%E8%AF%AD%E5%A4%87%E8%80%83/"/>
    <id>http://zdx-1.github.io/2024/06/11/%E5%9B%9B%E7%BA%A7%E8%8B%B1%E8%AF%AD%E5%A4%87%E8%80%83/</id>
    <published>2024-06-11T07:55:05.000Z</published>
    <updated>2024-06-14T12:14:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、听力部分（248-5-249分）"><a href="#一、听力部分（248-5-249分）" class="headerlink" title="一、听力部分（248.5~&#x3D;249分）"></a>一、听力部分（248.5~&#x3D;249分）</h1><h2 id="题型构成"><a href="#题型构成" class="headerlink" title="题型构成"></a>题型构成</h2><p>听力最低得分142</p><p>四六级是加权分</p><p><img src="/./../images/%E5%9B%9B%E7%BA%A7%E8%8B%B1%E8%AF%AD%E5%A4%87%E8%80%83/image-20240611155738950.png" alt="image-20240611155738950"></p><h2 id="听力应对策略"><a href="#听力应对策略" class="headerlink" title="听力应对策略"></a>听力应对策略</h2><p><img src="/./../images/%E5%9B%9B%E7%BA%A7%E8%8B%B1%E8%AF%AD%E5%A4%87%E8%80%83/image-20240611155954749.png" alt="image-20240611155954749"></p><h3 id="听之前Pre-listening"><a href="#听之前Pre-listening" class="headerlink" title="听之前Pre-listening"></a>听之前Pre-listening</h3><p><strong>看选项</strong></p><h4 id="听力选项中，大写的专有名词不是定位词（听力中一定会出现）"><a href="#听力选项中，大写的专有名词不是定位词（听力中一定会出现）" class="headerlink" title="听力选项中，大写的专有名词不是定位词（听力中一定会出现）"></a>听力选项中，<font color="red">大写的专有名词不是定位词</font>（听力中一定会出现）</h4><p>听力定位词指的是：我听到就可以选的单词，也就是区别于其他选项</p><p>通常定位词是：名词，较长的单词，动词，形容词</p><p>如果不认识，如何识别名词：</p><ul><li><p>of前后</p></li><li><p>连字符的后面（前面是两个用连字符连起来单词，后面那个）</p></li><li><p>‘s所有格后面</p></li><li><p>形容词性物主代词（代词所有格 my our your）</p></li><li><p>冠词 a&#x2F;an&#x2F;the</p></li><li><p>介词后</p></li></ul>  <font color="blue">  关于数字的补充：数字不能作为主要的定位词，但是可以作为选项完整信息来辅助选择</font><p>  <font color="blue">关于定位词的补充：定位词通常是作为一个整体（短语）而不是单独的某个单词，尤其是他们之间有修饰关系的时候<br>  </font></p><h3 id="比对选项，找出共同点和不同点：通过选项，判断可能的问题"><a href="#比对选项，找出共同点和不同点：通过选项，判断可能的问题" class="headerlink" title="比对选项，找出共同点和不同点：通过选项，判断可能的问题"></a>比对选项，找出共同点和不同点：通过选项，判断可能的问题</h3><p>没有时间 可以省略 适合听力150分往上的使用</p><h3 id="听中During-listening"><a href="#听中During-listening" class="headerlink" title="听中During-listening"></a>听中During-listening</h3><h3 id="听后After-listening"><a href="#听后After-listening" class="headerlink" title="听后After-listening"></a>听后After-listening</h3><h2 id="听力原则详解"><a href="#听力原则详解" class="headerlink" title="听力原则详解"></a>听力原则详解</h2><h2 id="1、位置原则——命题原则：做题原则"><a href="#1、位置原则——命题原则：做题原则" class="headerlink" title="1、位置原则——命题原则：做题原则"></a>1、位置原则——命题原则：做题原则</h2><h3 id="首题——答案在开篇前3句中（要练习听力中句子停顿的感觉）"><a href="#首题——答案在开篇前3句中（要练习听力中句子停顿的感觉）" class="headerlink" title="首题——答案在开篇前3句中（要练习听力中句子停顿的感觉）"></a>首题——答案在开篇前3句中（要练习听力中句子停顿的感觉）</h3><p><strong>出现的越早越是答案</strong></p><p>例外非常少</p><h3 id="中间题——（很多时候不是听不懂，而是跟不上）一定要利用信号词"><a href="#中间题——（很多时候不是听不懂，而是跟不上）一定要利用信号词" class="headerlink" title="中间题——（很多时候不是听不懂，而是跟不上）一定要利用信号词"></a>中间题——（很多时候不是听不懂，而是跟不上）一定要利用<strong>信号词</strong></h3><p><strong>信号词</strong></p><p><strong>听力不能翻译</strong>，一旦翻译时间一定跟不上</p><h3 id="尾题——通常出现在快要结束的地方（关键词：questions）"><a href="#尾题——通常出现在快要结束的地方（关键词：questions）" class="headerlink" title="尾题——通常出现在快要结束的地方（关键词：questions）"></a>尾题——通常出现在快要结束的地方（关键词：questions）</h3><ul><li>explosion</li><li>汉语拼音就是根据国际音标而来<ul><li>韵母aoeiu</li><li>元音aeiou</li><li>生母b &#x2F;b&#x2F;</li></ul></li></ul><h2 id="2、信号词原则（10种听力信号词）"><a href="#2、信号词原则（10种听力信号词）" class="headerlink" title="2、信号词原则（10种听力信号词）"></a>2、信号词原则（10种听力信号词）</h2><h3 id="转折词："><a href="#转折词：" class="headerlink" title="转折词："></a>转折词：</h3><ol><li>but,yet （失去爆破——读的快t的音消失了）</li><li>however,while,although,though 虽然，尽管 srds</li><li>now,unexpectedly 出人意料的是 unfortunately 不幸的是</li></ol><h3 id="并列词"><a href="#并列词" class="headerlink" title="并列词"></a>并列词</h3><p>and,or,also,while而not only…but also…,not…but…,either..or…，likewise，similarly同样的</p><p>重点：如果选项中出现并列（and，or），一定会听到并列前后的内容（也就是说，并列前后是重点）</p><h3 id="递进词"><a href="#递进词" class="headerlink" title="递进词"></a>递进词</h3><p>then 另外，接着，another 另一个，in addition，furthermore，besides 另外</p><h3 id="顺序词"><a href="#顺序词" class="headerlink" title="顺序词"></a>顺序词</h3><p>on one hand,on the other hand,first of all,to start,……finally</p><h3 id="强调词"><a href="#强调词" class="headerlink" title="强调词"></a>强调词</h3><p>do,does,did 强调句——重读，<strong>marjor，marjority，main，chief，key，primary</strong> 主要的（the major reason 主要原因）only，in fact ，the first</p><h3 id="最高级-听力不要翻译"><a href="#最高级-听力不要翻译" class="headerlink" title="最高级(听力不要翻译)"></a>最高级(<strong>听力不要翻译</strong>)</h3><p>the most,the best,the …est</p><h3 id="因果词"><a href="#因果词" class="headerlink" title="因果词"></a>因果词</h3><p>because,so,so that therefore ,reason,casuse,explain,explanation,due to,because of ,as a result of</p><h4 id="注意会表示因果关系的词"><a href="#注意会表示因果关系的词" class="headerlink" title="注意会表示因果关系的词"></a>注意会表示因果关系的词</h4><ol><li><p>lead to,result in,account for,contribute to,bring about</p></li><li><p>givr birth to,derive from,result from,generate from,originate from</p></li></ol><h3 id="观点结论词"><a href="#观点结论词" class="headerlink" title="观点结论词"></a>观点结论词</h3><p>think,believe,hold,suggest,claim,argue,note,add,conclude,turn out</p><h3 id="举例处"><a href="#举例处" class="headerlink" title="举例处"></a>举例处</h3><p>for example,for instance,like,such as,include</p><h3 id="特殊句型"><a href="#特殊句型" class="headerlink" title="特殊句型"></a>特殊句型</h3><p>带it的句型 it is……that强调句，it做形式主语或形式宾语；带wh-的从句</p><h2 id="重读停顿原则"><a href="#重读停顿原则" class="headerlink" title="重读停顿原则"></a>重读停顿原则</h2><h2 id="重合度高原则"><a href="#重合度高原则" class="headerlink" title="重合度高原则"></a>重合度高原则</h2><h2 id="信号词练习"><a href="#信号词练习" class="headerlink" title="信号词练习"></a>信号词练习</h2><p><img src="/./../images/%E5%9B%9B%E7%BA%A7%E8%8B%B1%E8%AF%AD%E5%A4%87%E8%80%83/image-20240611173713616.png" alt="image-20240611173713616"></p><p>19.位置原则+信号词原则+原词重合度+重读停顿</p><ul><li>a.<strong>Everything</strong> was <strong>natural</strong> and <strong>fenuine</strong> then.</li><li>b.<strong>People</strong> had <strong>plenty of land</strong> to cultivate then.</li><li>c.It markedd <strong>the beginning of something</strong> new.</li><li>d.It was when <strong>her ancertors</strong> came to America.</li></ul><p>20.信号词+重合度+重读停顿</p><p>a.They were konwn to be <strong>creative</strong>.</p><p>b.They had <strong>all kinds of entertainment</strong>.</p><p>c.They enjoyed living <strong>a life of ease</strong>.</p><p>d.They believed in <strong>working</strong> for <strong>goals</strong>.</p><p>21.位置原则+信号词原则+原词重合度+重读停顿</p><p>a.Chatting with <strong>her ancestors.</strong></p><p>b.Furnishing <strong>her country house</strong>.</p><p>c.Doing <strong>needlework</strong> by <strong>the fire</strong>.</p><p>d.Polishing all <strong>the silver work</strong>.</p><h2 id="短文和长对话练习"><a href="#短文和长对话练习" class="headerlink" title="短文和长对话练习"></a>短文和长对话练习</h2><h2 id="长对话练习"><a href="#长对话练习" class="headerlink" title="长对话练习"></a>长对话练习</h2><p><strong>位置原则：第一题 对话的前三个回合（注意对话前面常出现的寒暄）</strong></p><p><strong>性别特征：通过选项，判断可能和男性和女性相关的话题</strong></p><p>对话中有很多语气词，要特别注意：</p><ul><li>well</li><li>you know</li><li>oh</li><li>now</li><li>I’d like to</li><li>how about to&#x2F;what about donig sth&#x2F;sth;做某事怎么样 提建议</li><li>let me see 让我想一想</li><li>why not do sth 为什么不？提建议</li><li>don’t you你难道不……</li><li>why don’t you 你为什么不……？</li><li>would you like to…提要求……您能不能?</li><li>sorry,I’d love to but…</li><li>listen</li><li>look 引起别人注意</li></ul><h1 id="二、阅读部分"><a href="#二、阅读部分" class="headerlink" title="二、阅读部分"></a>二、阅读部分</h1><p><img src="/./../images/%E5%9B%9B%E7%BA%A7%E8%8B%B1%E8%AF%AD%E5%A4%87%E8%80%83/image-20240611181859741.png" alt="image-20240611181859741"></p><p><strong>目标1</strong>425&#x2F;426 710*60%（100——60）</p><p><strong>听力</strong>前15个对10个&#x3D;71 后10个对5个&#x3D;71 &#x3D;&gt;142&#x3D;150</p><p><strong>阅读</strong> A0.5——3.55分<font color="red">分值小 特别难</font></p><p>​B1——7.1分分值适中——先做（10——15mins）</p><p>​C2——14.2分 分值较高 难度较高——第二（20——25mins）</p><h2 id="阅读做题顺序-BCA（可以挪用翻译的5-10分钟）"><a href="#阅读做题顺序-BCA（可以挪用翻译的5-10分钟）" class="headerlink" title="阅读做题顺序 BCA（可以挪用翻译的5~10分钟）"></a>阅读做题顺序 <strong>BCA</strong>（可以挪用翻译的5~10分钟）</h2><p><img src="/./../images/%E5%9B%9B%E7%BA%A7%E8%8B%B1%E8%AF%AD%E5%A4%87%E8%80%83/image-20240611184817885.png" alt="image-20240611184817885"></p><p><strong>最后得分在460分左右——还有30分钟剩余</strong></p><h1 id="翻译写作"><a href="#翻译写作" class="headerlink" title="翻译写作"></a>翻译写作</h1><h2 id="答题顺序"><a href="#答题顺序" class="headerlink" title="答题顺序"></a>答题顺序</h2><p><img src="/./../images/%E5%9B%9B%E7%BA%A7%E8%8B%B1%E8%AF%AD%E5%A4%87%E8%80%83/image-20240611200030569.png" alt="image-20240611200030569"></p><p><font color="red">审题：题目读三遍、否则不动笔</font></p><h1 id="审题三要素"><a href="#审题三要素" class="headerlink" title="审题三要素"></a>审题三要素</h1><ol><li><p>体裁<font color="red">essay&#x2F;letter&#x2F;news report&#x2F;proposal&#x2F;report&#x2F;advertisement</font></p></li><li><p>话题+内容要求</p></li><li><p>字数<font color="red">四级150左右；六级180左右</font></p><p><font color="red">数一行多少词*行数</font></p></li></ol><h3 id="范例：23年6月"><a href="#范例：23年6月" class="headerlink" title="范例：23年6月"></a>范例：23年6月</h3><p><strong>Drirctions</strong>:Suppose the student union of your university is originzing an online discussion on college students doing community service.Your are to write an essay on its benfits and the service you can provide to the community.You will have 30 minutes for this task and should write at least 120 words but no more than 180 words. </p><p>   <font color="red">体裁：essay话题：college students doing community service内容要求：benfuts+the service you can provide</font></p><h3 id="范例2：23年12月"><a href="#范例2：23年12月" class="headerlink" title="范例2：23年12月"></a>范例2：23年12月</h3><p><strong>Driections</strong>:Suppose your university is inviting submissions from students for its xoming edition on a campus event that has impressed them most.You will have 30 minutes for this task and should write at least 120 words but no more than 180 words.</p><p><font color="red">体裁：essay&#x2F;letter都可以话题：acampus event内容要求：impressed……most……</font></p><h3 id="范例3：22年6月"><a href="#范例3：22年6月" class="headerlink" title="范例3：22年6月"></a>范例3：22年6月</h3><p><strong>Driections</strong>：Suppose you are writing a proposal to your schoole library for improving its services.You are to write about its current problems and possible solutions to these problems.You will 30 minutes to write the proposal.You should write at least 120 words but no more than 180 words.</p><p><font color="red">体裁：letter&#x2F;essay话题：library service内容要求：current problems+solutions</font></p><p><strong>四六级作文不需要写题目</strong></p><p><font color="red">写对了不扣分，写错了扣分，不写也不扣分</font></p><h3 id="救命作文"><a href="#救命作文" class="headerlink" title="救命作文"></a>救命作文</h3><h4 id="内容层面的灵活：一例多用"><a href="#内容层面的灵活：一例多用" class="headerlink" title="内容层面的灵活：一例多用"></a>内容层面的灵活：一例多用</h4><ul><li><p>以TOEFL写作为例：（环境）</p></li><li><p>在你家周围建一个工厂，你是否同意？</p></li><li><p>你认为科学家对人类的贡献大还是艺术家对人类的贡献大？</p></li><li><p>你的职业梦想是什么？</p></li><li><p>如果让你发明一样机器，你会选择什么？</p></li><li><p>如果你有一笔钱，你会用它来做什么？</p></li></ul><h4 id="English-Learning"><a href="#English-Learning" class="headerlink" title="English Learning"></a>English Learning</h4><p>In the <a href="adj,%E5%BD%93%E4%BB%8A=current=present-day">contemporary</a> world,[it is of great significance for](it is very important for …to…) yougsters to learn English well.English learning,thus, has <a href="%E5%BE%97%E5%88%B0">gained</a> great popularity.[Based on a survey](According to an investigation,),a majority of international organizations or firms <a href="say/admit">acknowledge</a> that they <a href="v.%E5%81%8F%E7%88%B1">prefer</a> <a href="v.%E6%8B%9B%E5%8B%9F">recruting</a> <a href="n.,%E5%91%98%E5%B7%A5">employees</a> who can speak English fluently.</p><p>However,[a host of](many&#x3D;a great many&#x3D;a sea of&#x3D;a large number of……various&#x3D;diverse&#x3D;all kinds of&#x3D;&#x3D;A case in point is that) English learners may have a variety difficulties or troubles in learning.For instance,a large number of students find it difficult to <a href="v.%E8%AE%B0">memorize</a> new words.<a href="Often">Frequently</a>,<a href="%E5%B0%BD%E7%AE%A1">it is also difficult for</a> them to understand rules of English grammar.In addtiion,though some are good at reading or writing,they fail to <a href="%E8%87%AA%E6%88%91%E8%A1%A8%E8%BE%BE">express themselves</a> freely in oral English.</p><p>[巧妇难为无米之炊。](Without rice,even a smart wife will find it difficult tocook)find it+adj.+to do表感受</p><p> Then,how to [get a good command](学好&#x3D;master v.) if this language?[I deem that](I suppose&#x2F;reckon&#x2F;hold that认为) practice makes perfect.Only pratice can help me master grammatical knowledge and remember new words.Of course,it is also through practice that I can speak and write fluently,and there is no other way.If I try my utmost to practive English every day,the future of my English learning will be promising and hopeful.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apl">In the contemporary world,it is of great significance for yougsters to learn English well.English  learning,thus,has gaind great popularity.Baserd on a survey,a majority of international organizations of firms acknowledge that they prefer recruting employees who can speak English fluently.<br>However,a host of English learners may have a variety difficulties or troules in learning.For instance,a large number of students find it difficult to memorize new words.Frequently,it is also difficult for them to understand rules of English grammar.In addition,though some age good at reading or writing,they fail to express themselves freely in oral English.<br>Then,how to get a good command if this language?I deem that practice makes perfect.Only practice can help me master grammatical knowledge and remember new words.Of course,it is also through practice that I can speak and write fluently,and there is no other way.If I try my utmost to practive English every day,the future of my English learning will be promising and hopeful.<br></code></pre></td></tr></table></figure><p><img src="/./../images/%E5%9B%9B%E7%BA%A7%E8%8B%B1%E8%AF%AD%E5%A4%87%E8%80%83/image-20240614193203008.png" alt="image-20240614193203008"></p><p><img src="/./../images/%E5%9B%9B%E7%BA%A7%E8%8B%B1%E8%AF%AD%E5%A4%87%E8%80%83/image-20240614193222574.png" alt="image-20240614193222574"></p><h1 id="翻译预测"><a href="#翻译预测" class="headerlink" title="翻译预测"></a>翻译预测</h1><p>现代建设成就 中国传统文化</p><p><img src="/./../images/%E5%9B%9B%E7%BA%A7%E8%8B%B1%E8%AF%AD%E5%A4%87%E8%80%83/image-20240614195251551.png" alt="image-20240614195251551"></p><p><img src="/./../images/%E5%9B%9B%E7%BA%A7%E8%8B%B1%E8%AF%AD%E5%A4%87%E8%80%83/image-20240614195531788.png" alt="image-20240614195531788"></p><h1 id="写作"><a href="#写作" class="headerlink" title="写作"></a><img src="/./../images/%E5%9B%9B%E7%BA%A7%E8%8B%B1%E8%AF%AD%E5%A4%87%E8%80%83/image-20240614195551015.png" alt="image-20240614195551015">写作</h1><p><img src="/./../images/%E5%9B%9B%E7%BA%A7%E8%8B%B1%E8%AF%AD%E5%A4%87%E8%80%83/image-20240614195904749.png" alt="image-20240614195904749"></p><p>浪费</p><p>Addition to online games will waste hours,lavish days and even squander years.</p><p>帮助</p><p>We should help others.</p><p>We should offer material support,financial aid,mental comfort and spirtual backup to those in the need of help.</p><p>成功</p><p>The confidence will help us accumlate wealth,establish career,fit into society and even attain social status.</p><p><img src="/./../images/%E5%9B%9B%E7%BA%A7%E8%8B%B1%E8%AF%AD%E5%A4%87%E8%80%83/image-20240614201020725.png" alt="image-20240614201020725"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、听力部分（248-5-249分）&quot;&gt;&lt;a href=&quot;#一、听力部分（248-5-249分）&quot; class=&quot;headerlink&quot; title=&quot;一、听力部分（248.5~&amp;#x3D;249分）&quot;&gt;&lt;/a&gt;一、听力部分（248.5~&amp;#x3D;249分）&lt;/</summary>
      
    
    
    
    
    <category term="英语四级" scheme="http://zdx-1.github.io/tags/%E8%8B%B1%E8%AF%AD%E5%9B%9B%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>背诵</title>
    <link href="http://zdx-1.github.io/2024/05/31/%E8%83%8C%E8%AF%B5/"/>
    <id>http://zdx-1.github.io/2024/05/31/%E8%83%8C%E8%AF%B5/</id>
    <published>2024-05-31T12:45:26.000Z</published>
    <updated>2024-05-31T12:46:20.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-string">&quot;&quot;&quot; 综合知识考点 &quot;&quot;&quot;</span><br><br><span class="hljs-string">&quot;&quot;&quot; 线性DP &quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">破损的楼梯</span>():<br>    <span class="hljs-comment"># https://www.lanqiao.cn/problems/3367/learning</span><br>    N = <span class="hljs-built_in">int</span>(<span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>)<br>    mod = <span class="hljs-built_in">int</span>(<span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>)<br>    n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>())<br>    a = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>    vis = [<span class="hljs-number">0</span>] * N<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>        vis[i] = <span class="hljs-number">1</span><br>    dp = [<span class="hljs-number">0</span>] * N<br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br>    dp[<span class="hljs-number">1</span>] = (<span class="hljs-number">1</span>- vis[<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> vis[i]:<br>            <span class="hljs-keyword">continue</span><br>        dp[i] = (dp[i - <span class="hljs-number">1</span>] + dp[i - <span class="hljs-number">2</span>]) % mod<br>    <span class="hljs-built_in">print</span>(dp[n])<br><br><br><span class="hljs-string">&quot;&quot;&quot; 二维DP &quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">数字三角形</span>():<br>    <span class="hljs-comment"># https://www.lanqiao.cn/problems/1536/learning</span><br>    <span class="hljs-keyword">import</span> sys<br>    <span class="hljs-built_in">input</span> = sys.stdin.readline<br>    N = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>    dp = [<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N)]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, N):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> j == <span class="hljs-number">0</span>:<br>                dp[i][j] += dp[i - <span class="hljs-number">1</span>][j]<br>            <span class="hljs-keyword">elif</span> j == i:<br>                dp[i][j] += dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">else</span>:<br>                dp[i][j] += <span class="hljs-built_in">max</span>(dp[i - <span class="hljs-number">1</span>][j], dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(dp[-<span class="hljs-number">1</span>]))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">摆花</span>():<br>    <span class="hljs-comment"># https://www.lanqiao.cn/problems/389/learning</span><br>    MOD = <span class="hljs-built_in">int</span>(<span class="hljs-number">1e6</span> + <span class="hljs-number">7</span>)<br>    n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    a = [<span class="hljs-number">0</span>] + <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>    dp = [[<span class="hljs-number">0</span>] * (m + <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>):<br>        dp[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">min</span>(a[i], j) + <span class="hljs-number">1</span>):<br>                dp[i][j] += dp[i - <span class="hljs-number">1</span>][j - k]<br>                dp[i][j] %= MOD<br>    <span class="hljs-built_in">print</span>(dp[n][m])<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">选数异或</span>():<br>    <span class="hljs-comment"># https://www.lanqiao.cn/problems/3711/learning</span><br>    n, x = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    a = [<span class="hljs-number">0</span>] + <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>    MOD = <span class="hljs-number">998244353</span><br>    dp = [[<span class="hljs-number">0</span>] * <span class="hljs-number">64</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)]<br>    dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>            dp[i][j] = (dp[i - <span class="hljs-number">1</span>][j] + dp[i - <span class="hljs-number">1</span>][j ^ a[i]]) % MOD<br>    <span class="hljs-built_in">print</span>(dp[n][x])<br><br><br><span class="hljs-string">&quot;&quot;&quot; LIS——最长上升子序列 &quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">蓝桥勇士</span>():<br>    <span class="hljs-comment"># https://www.lanqiao.cn/problems/2049/learning</span><br>    n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>    a = [<span class="hljs-number">0</span>] + <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>    dp = [<span class="hljs-number">1</span>] * (n + <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> a[i] &lt; a[j]:<br>                dp[j] = <span class="hljs-built_in">max</span>(dp[j], dp[i] + <span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(dp))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">合唱队形</span>():<br>    <span class="hljs-comment"># https://www.lanqiao.cn/problems/742/learning</span><br>    n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>    a = [<span class="hljs-number">0</span>] + <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>    dp1 = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>)<br>    dp2 = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>        dp1[i] = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, i):<br>            <span class="hljs-keyword">if</span> a[i] &gt; a[j]:<br>                dp1[i] = <span class="hljs-built_in">max</span>(dp1[i], dp1[j] + <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>        dp2[i] = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> a[i] &gt; a[j]:<br>                dp2[i] = <span class="hljs-built_in">max</span>(dp2[i], dp2[j] + <span class="hljs-number">1</span>)<br>    ans = <span class="hljs-built_in">max</span>((dp1[i] + dp2[i] + <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>))<br>    <span class="hljs-built_in">print</span>(n - ans)<br><br><br><span class="hljs-string">&quot;&quot;&quot; LCS——最长公共子序列 &quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">最长公共子序列</span>():<br>    <span class="hljs-comment"># https://www.lanqiao.cn/problems/1189/learning</span><br>    <span class="hljs-keyword">import</span> sys<br>    <span class="hljs-built_in">input</span> = sys.stdin.readline<br>    n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    a = [<span class="hljs-number">0</span>] + <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>    b = [<span class="hljs-number">0</span>] + <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>    dp = [[<span class="hljs-number">0</span>] * (m + <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>)]<br>    now = <span class="hljs-number">0</span><br>    old = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>        now, old = old, now<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>):<br>            dp[now][j] = <span class="hljs-built_in">max</span>(dp[now][j - <span class="hljs-number">1</span>], dp[old][j])<br>            <span class="hljs-keyword">if</span> a[i] == b[i]:<br>                dp[now][j] = <span class="hljs-built_in">max</span>(dp[now][j], dp[old][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(dp[now][m])<br><br><br><span class="hljs-string">&quot;&quot;&quot; 01背包 &quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">小明的背包1</span>():<br>    <span class="hljs-comment"># https://www.lanqiao.cn/problems/1174/learning</span><br>    n, v = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    dp = [[<span class="hljs-number">0</span>] * (v + <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)]<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>        wi, vi = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, v + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> j &gt;= wi:<br>                dp[i][j] = <span class="hljs-built_in">max</span>(dp[i - <span class="hljs-number">1</span>][j], dp[i - <span class="hljs-number">1</span>][j - wi] + vi)<br>            <span class="hljs-keyword">else</span>:<br>                dp[i][j] = dp[i - <span class="hljs-number">1</span>][j]<br><br>    <span class="hljs-built_in">print</span>(dp[n][v])<br><br><br><span class="hljs-string">&quot;&quot;&quot; 完全背包 &quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">小明的背包2</span>():<br>    <span class="hljs-comment"># https://www.lanqiao.cn/problems/1175/learning</span><br>    n, v = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    dp = [[<span class="hljs-number">0</span>] * (v + <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>        wi, vi = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, v + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> (j &gt;= wi):<br>                dp[i][j] = <span class="hljs-built_in">max</span>(dp[i - <span class="hljs-number">1</span>][j], dp[i][j - wi] + vi)<br>            <span class="hljs-keyword">else</span>:<br>                dp[i][j] = dp[i - <span class="hljs-number">1</span>][j]<br>    <span class="hljs-built_in">print</span>(dp[n][v])<br><br><br><span class="hljs-string">&quot;&quot;&quot; 多重背包 &quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">小明的背包3</span>():<br>    <span class="hljs-comment"># https://www.lanqiao.cn/problems/4059/learning</span><br>    n, v = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    dp = [[<span class="hljs-number">0</span>] * (v + <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>        wi, vi, si = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, v + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">min</span>(si, j // wi) + <span class="hljs-number">1</span>):<br>                dp[i][j] = <span class="hljs-built_in">max</span>(dp[i][j], dp[i - <span class="hljs-number">1</span>][j - k * wi] + k * vi)<br><br>    <span class="hljs-built_in">print</span>(dp[n][v])<br><br><br><span class="hljs-string">&quot;&quot;&quot; 二维费用背包&amp;分组背包 &quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">小蓝的神秘行囊</span>():<br>    <span class="hljs-comment"># https://www.lanqiao.cn/problems/3937/learning</span><br>    n, v, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    dp = [[<span class="hljs-number">0</span>] * (m + <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(v + <span class="hljs-number">1</span>)]<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>        vi, mi, wi = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(v, vi - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m, mi - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>                dp[j][k] = <span class="hljs-built_in">max</span>(dp[j][k], dp[j - vi][k - mi] + wi)<br><br>    <span class="hljs-built_in">print</span>(dp[v][m])<br><br><br><span class="hljs-string">&quot;&quot;&quot; KMP &quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">斤斤计较的小Z</span>():<br>    <span class="hljs-comment"># https://www.lanqiao.cn/problems/2047/learning</span><br>    Next = [<span class="hljs-number">0</span>] * <span class="hljs-number">1000010</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_next</span>(<span class="hljs-params">T</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(T)):<br>            j = Next[i]<br>            <span class="hljs-keyword">while</span> j &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> T[i] != T[j]:<br>                j = Next[j]<br>            <span class="hljs-keyword">if</span> T[i] == T[j]:<br>                Next[i + <span class="hljs-number">1</span>] = j + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                Next[i + <span class="hljs-number">1</span>] = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">KMP</span>(<span class="hljs-params">s, t</span>):<br>        get_next(t)<br>        ans = <span class="hljs-number">0</span><br>        j = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>            <span class="hljs-keyword">while</span> j &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> s[i] != t[j]:<br>                j = Next[j]<br>            <span class="hljs-keyword">if</span> s[i] == t[j]:<br>                j += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> j == <span class="hljs-built_in">len</span>(t):<br>                ans += <span class="hljs-number">1</span><br>                j = Next[j]<br>        <span class="hljs-keyword">return</span> ans<br><br>    t = <span class="hljs-built_in">input</span>()<br>    s = <span class="hljs-built_in">input</span>()<br>    <span class="hljs-built_in">print</span>(KMP(s, t))<br><br><br><span class="hljs-string">&quot;&quot;&quot; Hash &quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">斤斤计较的小Z</span>():<br>    <span class="hljs-comment"># https://www.lanqiao.cn/problems/2047/learning</span><br>    t = <span class="hljs-built_in">input</span>()<br>    s = <span class="hljs-built_in">input</span>()<br>    m, n = <span class="hljs-built_in">len</span>(t), <span class="hljs-built_in">len</span>(s)<br>    B = <span class="hljs-number">26</span><br>    mod = <span class="hljs-number">1000000007</span><br>    <span class="hljs-built_in">hash</span> = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">hash</span>[i] = <span class="hljs-built_in">hash</span>[i - <span class="hljs-number">1</span>] * B + <span class="hljs-built_in">ord</span>(s[i - <span class="hljs-number">1</span>]) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>)<br>        <span class="hljs-built_in">hash</span>[i] %= mod<br><br>    numT = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> t:<br>        numT = numT * B + <span class="hljs-built_in">ord</span>(c) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>)<br>        numT %= mod<br><br>    p = (B ** m) % mod<br>    ans = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>        r = l + m - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> r &gt; n:<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">hash</span>[r] - <span class="hljs-built_in">hash</span>[l - <span class="hljs-number">1</span>] * p % mod + mod) % mod == numT:<br>            ans += <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(ans)<br><br><br><span class="hljs-string">&quot;&quot;&quot; 归并排序 &quot;&quot;&quot;</span><br><br><span class="hljs-string">&quot;&quot;&quot; 快速排序 &quot;&quot;&quot;</span><br><br><span class="hljs-string">&quot;&quot;&quot; Floyd——多源最短路 &quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">蓝桥公园</span>():<br>    <span class="hljs-keyword">import</span> sys<br>    <span class="hljs-built_in">input</span> = sys.stdin.readline<br>    n, m, q = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    inf = <span class="hljs-built_in">int</span>(<span class="hljs-number">1e18</span>)<br>    dp = [[inf] * (n + <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>        dp[i][i] = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>):<br>        u, v, w = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>        dp[u][v] = dp[v][u] = <span class="hljs-built_in">min</span>(dp[u][v], w)<br>    <span class="hljs-comment">#Floyd 模板</span><br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>                dp[i][j] = <span class="hljs-built_in">min</span>(dp[i][j], dp[i][k] + dp[k][j])<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> dp[i][j] == inf:<br>                dp[i][j] = -<span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(q):<br>        s, e = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>        <span class="hljs-built_in">print</span>(dp[s][e])<br><br><br><span class="hljs-string">&quot;&quot;&quot; Dijkstra——单源最短路 &quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">蓝桥王国</span>():<br>    <span class="hljs-comment"># https://www.lanqiao.cn/problems/1122/learning</span><br>    <span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> PriorityQueue  <span class="hljs-comment"># 导入优先队列</span><br>    <span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br>    INF = <span class="hljs-number">1e18</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dijkstra</span>(<span class="hljs-params">s</span>):<br>        <span class="hljs-comment"># 返回从s出发到所有点的最短路</span><br>        <span class="hljs-comment"># d[i]表示从s到i的最短路</span><br>        d = [INF] * (n + <span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># vis[i]表示是否出队列（注：与传统BFS不同）</span><br>        vis = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>)<br>        q = PriorityQueue()<br><br>        <span class="hljs-comment"># 1.将起点入队列，更新距离</span><br>        d[s] = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 将距离放在前面，才能对距离使用优先队列</span><br>        q.put((d[s], s))  <span class="hljs-comment"># 入队用put()</span><br>        <span class="hljs-comment"># 当队列非空</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> q.empty():  <span class="hljs-comment"># 或者写为： while len(q.queue) != 0:</span><br>            dis, u = q.get()<br>            <span class="hljs-comment"># 每个点只有第一次出队列是有用的</span><br>            <span class="hljs-keyword">if</span> vis[u]: <span class="hljs-keyword">continue</span><br>            vis[u] = <span class="hljs-number">1</span>  <span class="hljs-comment"># 出队列打标记</span><br>            <span class="hljs-comment"># 对于从u出发，到达v，权重为w的边</span><br>            <span class="hljs-keyword">for</span> v, w <span class="hljs-keyword">in</span> G[u]:<br>                <span class="hljs-keyword">if</span> d[v] &gt; d[u] + w:<br>                    d[v] = d[u] + w<br>                    q.put((d[v], v))<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> d[i] == INF:<br>                d[i] = -<span class="hljs-number">1</span><br>        <span class="hljs-comment"># d.pop(0)</span><br>        <span class="hljs-keyword">return</span> d[<span class="hljs-number">1</span>::]  <span class="hljs-comment"># 从1到最后</span><br><br>    <span class="hljs-comment"># 皇宫编号为1</span><br>    <span class="hljs-comment"># 输入</span><br>    n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    G = [[] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)]  <span class="hljs-comment"># 图的存储：邻接表。此题N为10^5，不能用邻接矩阵存图</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>        u, v, w = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>        G[u].append((v, w))<br>    <span class="hljs-built_in">print</span>(*dijkstra(<span class="hljs-number">1</span>))  <span class="hljs-comment"># 列表前面加星号作用是将列表解开（unpacke）成多个独立的参数，传入函数。</span><br><br><br><span class="hljs-string">&quot;&quot;&quot; Kruskal——最小生成树 &quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">繁忙的都市</span>():<br>    <span class="hljs-comment"># https://www.lanqiao.cn/problems/889/learning</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">kruskal</span>():<br>        <span class="hljs-comment"># 初始化</span><br>        n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>        Map = []<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>            u, v, w = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>            Map.append([w, u, v])  <span class="hljs-comment"># 注意第一个参数是边权</span><br>        Map.sort()<br><br>        <span class="hljs-comment"># 并查集</span><br>        p = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>))<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">root</span>(<span class="hljs-params">x</span>):<br>            <span class="hljs-keyword">if</span> x != p[x]:<br>                p[x] = root(p[x])<br>            <span class="hljs-keyword">return</span> p[x]<br><br>        <span class="hljs-comment"># 非连环时更新</span><br>        _<span class="hljs-built_in">sum</span>, _<span class="hljs-built_in">max</span> = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> w, u, v <span class="hljs-keyword">in</span> Map:<br>            root_u = root(u)<br>            root_v = root(v)<br>            <span class="hljs-keyword">if</span> root_u != root_v:<br>                p[root_u] = root_v<br>                _<span class="hljs-built_in">sum</span> += <span class="hljs-number">1</span><br>                _<span class="hljs-built_in">max</span> = <span class="hljs-built_in">max</span>(_<span class="hljs-built_in">max</span>, w)<br>        <span class="hljs-keyword">return</span> _<span class="hljs-built_in">sum</span>, _<span class="hljs-built_in">max</span><br><br>    <span class="hljs-built_in">print</span>(*kruskal())<br><br><br><span class="hljs-string">&quot;&quot;&quot; Prim——最小生成树 &quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">繁忙的都市2</span>():<br>    <span class="hljs-comment"># https://www.lanqiao.cn/problems/889/learning</span><br>    n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    e = []<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>        u, v, w = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>        e.append((w, u, v))<br>    <span class="hljs-comment"># 边按照权重进行排序</span><br>    e.sort()<br>    <span class="hljs-comment"># 需要一个并查集</span><br>    p = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findroot</span>(<span class="hljs-params">x</span>):<br>        <span class="hljs-keyword">if</span> x == p[x]:<br>            <span class="hljs-keyword">return</span> x<br>        <span class="hljs-keyword">else</span>:<br>            p[x] = findroot(p[x])<br>            <span class="hljs-keyword">return</span> p[x]<br><br>    ans = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 进行遍历所有的边，进行合并：</span><br>    <span class="hljs-keyword">for</span> w, u, v <span class="hljs-keyword">in</span> e:<br>        <span class="hljs-comment"># 只要u和v不在同一集合内就可以进行合并：</span><br>        rootu = findroot(u)<br>        rootv = findroot(v)<br>        <span class="hljs-keyword">if</span> rootu != rootv:<br>            p[rootu] = rootv<br>            ans = <span class="hljs-built_in">max</span>(ans, w)<br>    <span class="hljs-built_in">print</span>(n - <span class="hljs-number">1</span>, ans)<br><br><br><span class="hljs-string">&quot;&quot;&quot; LCA——最近共同祖先 &quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">最近公共祖先LCA查询</span>():<br>    <span class="hljs-comment"># https://www.lanqiao.cn/problems/4385/learning</span><br>    <span class="hljs-comment">#设置deep数组表示深度。</span><br>    <span class="hljs-comment">#front数组，表示节点u,前2**i层的爹是谁？？？</span><br>    n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>    tree=[[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br>    fornt=[[<span class="hljs-number">0</span>]*(<span class="hljs-number">21</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<span class="hljs-comment">#如果你是0你就是孤儿。</span><br>    deep=[<span class="hljs-number">0</span>]*(n+<span class="hljs-number">1</span>)<span class="hljs-comment">#0节点没有层数。</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>):<br>        u,v=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>        tree[u].append(v)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">er,die</span>):<br>        <span class="hljs-keyword">if</span> die==<span class="hljs-number">0</span>:<br>            deep[er]=<span class="hljs-number">1</span><span class="hljs-comment">#这是第一层,同时，第一层也没有爹啊，也不需要更新如何层数相关节点。</span><br><br>        <span class="hljs-keyword">else</span>:<br>            deep[er]=deep[die]+<span class="hljs-number">1</span><span class="hljs-comment">#更新层数。</span><br>            fornt[er][<span class="hljs-number">0</span>]=die<span class="hljs-comment">#上一层的点，就是die。</span><br>            <span class="hljs-keyword">for</span> cc <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">21</span>):<br>                <span class="hljs-keyword">if</span> fornt[fornt[er][cc-<span class="hljs-number">1</span>]][cc-<span class="hljs-number">1</span>]!=<span class="hljs-number">0</span>:<br><br>                    fornt[er][cc]=fornt[fornt[er][cc-<span class="hljs-number">1</span>]][cc-<span class="hljs-number">1</span>]<br>                    <span class="hljs-comment">#倍增法。2**i层之上的点=</span><br>                    <span class="hljs-comment">#2**(cc-1)上面的点的上面2**(cc-1)的点。就，无限套娃。</span><br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tree[er]:<br>            dfs(i,er)<span class="hljs-comment">#儿子变成新的爹。</span><br>    dfs(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)<span class="hljs-comment">#儿子是根，爹不存在。</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">find</span>(<span class="hljs-params">x,y</span>):<br>        <span class="hljs-comment">#第一步，拉升。将x拉到和y一个水平。一开始走2**20步，太大，就走2**19步，然后走一半，再走一半</span><br>        <span class="hljs-comment">#就像那个乌龟与跑步哥一样。二进制原理使得这个步数遍历后一定是一个高度。</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> deep[fornt[x][i]]&gt;=deep[y] <span class="hljs-keyword">and</span> fornt[x][i]!=<span class="hljs-number">0</span>:<br>                x=fornt[x][i]<span class="hljs-comment">#自动判断能走不能走，能走则走一大步。x提升到别的节点。</span><br><br>        <span class="hljs-comment">#此时提升必定一样了。</span><br>        <span class="hljs-keyword">if</span> x==y:<br>            <span class="hljs-keyword">return</span> x<span class="hljs-comment">#原来你就是我爹！</span><br><br>        <span class="hljs-keyword">else</span>:<span class="hljs-comment">#不是？我们再度提升吧！神明！</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>                <span class="hljs-keyword">if</span> fornt[x][i]!=fornt[y][i] <span class="hljs-keyword">and</span> fornt[x][i]!=<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> fornt[y][i]!=<span class="hljs-number">0</span>:<span class="hljs-comment">#相等反而不能决定什么，因为可能不是最近的公共祖先</span><br>                    x=fornt[x][i]<br>                    y=fornt[y][i]<br>            <span class="hljs-keyword">return</span> fornt[y][<span class="hljs-number">0</span>]<span class="hljs-comment">#最后，y上面的就是自己的公共祖先。</span><br>    q=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(q):<br>        x,y=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>        <span class="hljs-keyword">if</span> deep[x]&lt;deep[y]:<span class="hljs-comment">#我们设x是深节点。</span><br>            x,y=y,x<br>        <span class="hljs-built_in">print</span>(find(x,y))<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="刷题" scheme="http://zdx-1.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="蓝桥国赛" scheme="http://zdx-1.github.io/categories/%E5%88%B7%E9%A2%98/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B/"/>
    
    
    <category term="蓝桥杯" scheme="http://zdx-1.github.io/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥常规考点总结</title>
    <link href="http://zdx-1.github.io/2024/05/30/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://zdx-1.github.io/2024/05/30/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/</id>
    <published>2024-05-30T05:35:00.000Z</published>
    <updated>2024-05-31T10:01:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h2 id="基础DP"><a href="#基础DP" class="headerlink" title="基础DP"></a>基础DP</h2><h3 id="线性DP"><a href="#线性DP" class="headerlink" title="线性DP"></a>线性DP</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526132127462.png" alt="image-20240526132127462"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526132140926.png" alt="image-20240526132140926"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526132149001.png" alt="image-20240526132149001"></p><h4 id="动态规划分析步骤"><a href="#动态规划分析步骤" class="headerlink" title="动态规划分析步骤"></a>动态规划分析步骤</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526132222766.png" alt="image-20240526132222766"></p><h4 id="模板题——破损的楼梯"><a href="#模板题——破损的楼梯" class="headerlink" title="模板题——破损的楼梯"></a>模板题——<a href="https://www.lanqiao.cn/problems/3367/learning">破损的楼梯</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">3367 破损的楼梯</span><br><span class="hljs-string">https://www.lanqiao.cn/problems/3367/learning</span><br><span class="hljs-string"></span><br><span class="hljs-string">这是一个典型的线性DP问题，dp[i]表示到达第i阶楼梯的方法数</span><br><span class="hljs-string">状态转移方程：dp[i]=dp[i-1]+dp[i-2]</span><br><span class="hljs-string">状态压缩：dp[i]只与dp[i-1]和dp[i-2]有关，所以可以压缩</span><br><span class="hljs-string">时间复杂度：O(n)</span><br><span class="hljs-string">空间复杂度：O(n)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>N = <span class="hljs-built_in">int</span>(<span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>)<br>mod = <span class="hljs-built_in">int</span>(<span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>)<br>n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>a = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>vis = [<span class="hljs-number">0</span>] * N<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a: vis[i] = <span class="hljs-number">1</span><br>dp = [<span class="hljs-number">0</span>] * N<br>dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br>dp[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span> - vis[<span class="hljs-number">1</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n + <span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> vis[i]:<br>        <span class="hljs-keyword">continue</span><br>    dp[i] = (dp[i - <span class="hljs-number">1</span>] + dp[i - <span class="hljs-number">2</span>]) % mod<br><span class="hljs-built_in">print</span>(dp[n])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">n,m=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>a=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>dp=[<span class="hljs-number">0</span>]*(n+<span class="hljs-number">1</span>)<br>tp=[<span class="hljs-number">0</span>]*(n+<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>  tp[i]=<span class="hljs-number">1</span><br>dp[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span><br>dp[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>-tp[<span class="hljs-number">1</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,n+<span class="hljs-number">1</span>):<br>  <span class="hljs-keyword">if</span> tp[i]==<span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">continue</span><br>  dp[i]=dp[i-<span class="hljs-number">1</span>]+dp[i-<span class="hljs-number">2</span>]<br>mod=<span class="hljs-number">10</span>**<span class="hljs-number">9</span>+<span class="hljs-number">7</span><br><span class="hljs-built_in">print</span>(dp[i]%mod)<br></code></pre></td></tr></table></figure><h3 id="二维DP"><a href="#二维DP" class="headerlink" title="二维DP"></a>二维DP</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526132351934.png" alt="image-20240526132351934"></p><h4 id="分析步骤"><a href="#分析步骤" class="headerlink" title="分析步骤"></a>分析步骤</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526132407561.png" alt="image-20240526132407561"></p><h4 id="模板题——数字三角形"><a href="#模板题——数字三角形" class="headerlink" title="模板题——数字三角形"></a>模板题——<a href="https://www.lanqiao.cn/problems/1536/learning">数字三角形</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-comment"># 请在此输入您的代码</span><br>N = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>dp = [<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, N):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> j == <span class="hljs-number">0</span>:<br>            dp[i][j] += dp[i - <span class="hljs-number">1</span>][j]<br>        <span class="hljs-keyword">elif</span> j == i:<br>            dp[i][j] += dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">else</span>:<br>            dp[i][j] += <span class="hljs-built_in">max</span>(dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>], dp[i - <span class="hljs-number">1</span>][j])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(dp[N - <span class="hljs-number">1</span>]))<br></code></pre></td></tr></table></figure><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526132533080.png" alt="image-20240526132533080"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526132546231.png" alt="image-20240526132546231"></p><h4 id="模板题——摆花"><a href="#模板题——摆花" class="headerlink" title="模板题——摆花"></a>模板题——<a href="https://www.lanqiao.cn/problems/389/learning">摆花</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n种花凑 m盆 每种&lt;a[i]</span><br><span class="hljs-string">1.分解子问题</span><br><span class="hljs-string">前i种花，一共j盆，答案是dp[n][m]</span><br><span class="hljs-string">2.状态转移</span><br><span class="hljs-string">前i种花有j盆方案数  如何由前i-1种有j盆得出.</span><br><span class="hljs-string">以下每一种选择是一种方案</span><br><span class="hljs-string">第i种花可以选0盆,前i-1种花有j盆：dp[i][j] = dp[i-1][j]</span><br><span class="hljs-string">第i种花可以选1盆,前i-1种花有j-1盆：：dp[i][j] = dp[i-1][j-1]</span><br><span class="hljs-string">...</span><br><span class="hljs-string">第i种花可以选a[i]盆,前i-1种花有j-a[i]盆：：dp[i][j] = dp[i-1][j-a[i]]</span><br><span class="hljs-string">3.边界条件，每种花都不选</span><br><span class="hljs-string">前i种花 0盆 是 一种方案 dp[i][0] = 1</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>MOD = <span class="hljs-number">10</span> ** <span class="hljs-number">6</span> + <span class="hljs-number">7</span><br>n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>a = [<span class="hljs-number">0</span>] + <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>dp = [[<span class="hljs-number">0</span>] * (m + <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>):<br>    dp[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br><span class="hljs-comment"># 状态转移,当下做出的选择，利用之前dp,求dp[i][j]</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,m+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">min</span>(a[i],j)+<span class="hljs-number">1</span>):<br>            dp[i][j]+=dp[i-<span class="hljs-number">1</span>][j-k]<br>            dp[i][j]%=MOD<br><span class="hljs-built_in">print</span>(dp[n][m])<br></code></pre></td></tr></table></figure><h4 id="模板题——选数异或"><a href="#模板题——选数异或" class="headerlink" title="模板题——选数异或"></a>模板题——<a href="https://www.lanqiao.cn/problems/3711/learning">选数异或</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs py">n,x = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>a = [<span class="hljs-number">0</span>] + <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>Mod = <span class="hljs-number">998244353</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"> dp[i][j]前i个正整数有j个子序列异或成 j 的方案；答案dp[n][x]</span><br><span class="hljs-string"> dp[i][j] = 选第i个数字 + 不选第i个数字</span><br><span class="hljs-string">          = dp[i - 1][j ^ a[i]] + dp[i - 1][j]   </span><br><span class="hljs-string">          (因为如果选了第i个数字，那么a[i] ^ 前数 = j, 所以：前数 = j ^ a[i])</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>dp = [[<span class="hljs-number">0</span>] * (<span class="hljs-number">64</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)]<br><span class="hljs-comment"># 初始化为 0</span><br>dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>        dp[i][j] = (dp[i-<span class="hljs-number">1</span>][j] + dp[i-<span class="hljs-number">1</span>][j ^ a[i]]) % Mod<br><span class="hljs-built_in">print</span>(dp[n][x])<br></code></pre></td></tr></table></figure><h3 id="LIS"><a href="#LIS" class="headerlink" title="LIS"></a>LIS</h3><h4 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526132915221.png" alt="image-20240526132915221"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526132923043.png" alt="image-20240526132923043"></p><h4 id="模板题——蓝桥勇士"><a href="#模板题——蓝桥勇士" class="headerlink" title="模板题——蓝桥勇士"></a>模板题——<a href="https://www.lanqiao.cn/problems/2049/learning">蓝桥勇士</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py">n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>a=[<span class="hljs-number">0</span>]+<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>dp=[<span class="hljs-number">1</span>]*(n+<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n):<br>  <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> a[i]&lt;a[j]:<br>      dp[j]=<span class="hljs-built_in">max</span>(dp[j],dp[i]+<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(dp))<br></code></pre></td></tr></table></figure><h4 id="模板题——合唱队形"><a href="#模板题——合唱队形" class="headerlink" title="模板题——合唱队形"></a>模板题——<a href="https://www.lanqiao.cn/problems/742/learning">合唱队形</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs py">n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>a = [<span class="hljs-number">0</span>] + <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>dp1 = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>)  <span class="hljs-comment"># dp1[i]表示以i结尾的最长上升子序列长度</span><br>dp2 = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>)  <span class="hljs-comment"># dp2[i]表示以i出发的最长下降子序列长度</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>    dp1[i] = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, i):<br>        <span class="hljs-keyword">if</span> a[i] &gt; a[j]:<br>            dp1[i] = <span class="hljs-built_in">max</span>(dp1[i], dp1[j] + <span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>    dp2[i] = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> a[i] &gt; a[j]:<br>            dp2[i] = <span class="hljs-built_in">max</span>(dp2[i], dp2[j] + <span class="hljs-number">1</span>)<br><br>ans = <span class="hljs-built_in">max</span>((dp1[i] + dp2[i] - <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(n-ans)<br></code></pre></td></tr></table></figure><h3 id="LCS"><a href="#LCS" class="headerlink" title="LCS"></a>LCS</h3><h4 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526133212404.png" alt="image-20240526133212404"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526133222560.png" alt="image-20240526133222560"></p><h4 id="模板题——最长公共子序列"><a href="#模板题——最长公共子序列" class="headerlink" title="模板题——最长公共子序列"></a>模板题——<a href="https://www.lanqiao.cn/problems/1189/learning">最长公共子序列</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-comment"># 这段代码实现的是计算两个序列（a 和 b）的最长公共子序列（Longest Common Subsequence, LCS）的长度。LCS 是一种在计算两个序列相似度时常用的度量方法。这个问题通常通过动态规划来解决。现在，我将逐步解释这段代码的各个部分：</span><br><br><span class="hljs-comment"># 输入处理</span><br>n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>a = [<span class="hljs-number">0</span>] + <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>b = [<span class="hljs-number">0</span>] + <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br><span class="hljs-comment"># 首先，通过 input().split() 获取两个整数 n 和 m，分别表示序列 a 和 b 的长度。</span><br><span class="hljs-comment"># 接着，读取这两个序列，并在序列前面各自加上一个 0 作为哨兵值。这样做是为了让序列的索引从 1 开始，方便后续操作。</span><br><span class="hljs-comment"># 初始化动态规划数组</span><br>dp = [[<span class="hljs-number">0</span>] * (m + <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>)]  <span class="hljs-comment"># 注意这里是 m，不是 n</span><br>now = <span class="hljs-number">0</span>; old = <span class="hljs-number">1</span><br><span class="hljs-comment"># 初始化一个二维动态规划数组 dp，但这里只用到了两行（range(2)），目的是节省空间。因为在计算当前状态时，只需要用到前一行（即上一状态）的数据。m + 1 是因为考虑到从 0 开始到 m 的所有可能位置。</span><br><span class="hljs-comment"># now 和 old 变量用来在这两行之间切换，表示当前行和上一行。</span><br><span class="hljs-comment"># 动态规划过程</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>    now, old = old, now<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>):<br>        dp[now][j] = <span class="hljs-built_in">max</span>(dp[now][j - <span class="hljs-number">1</span>], dp[old][j])<br>        <span class="hljs-keyword">if</span> a[i] == b[j]: <br>            dp[now][j] = <span class="hljs-built_in">max</span>(dp[now][j], dp[old][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>)<br><span class="hljs-comment"># 这部分是动态规划的核心。</span><br><span class="hljs-comment"># 外层循环遍历序列 a，内层循环遍历序列 b。</span><br><span class="hljs-comment"># dp[now][j] = max(dp[now][j - 1], dp[old][j])：当前状态是基于之前状态的最大值，这表示如果当前字符不匹配，LCS 长度不变。</span><br><span class="hljs-comment"># 如果当前位置的字符相等（a[i] == b[j]），则检查上一个状态的值并加一，即 dp[now][j] = max(dp[now][j], dp[old][j - 1] + 1)。这反映了找到了一个公共元素，因此当前的最长公共子序列长度增加了 1。</span><br><span class="hljs-comment"># 输出结果</span><br><span class="hljs-built_in">print</span>(dp[now][m])<br><span class="hljs-comment"># 最后，打印出最长公共子序列的长度，即在遍历完两个序列后，dp 数组最后一个元素（dp[now][m]）的值。</span><br><span class="hljs-comment"># 通过这种方式，代码高效地计算了两个序列的最长公共子序列的长度，同时通过只使用两行的动态规划数组大大减少了空间复杂度。</span><br></code></pre></td></tr></table></figure><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526133424736.png" alt="image-20240526133424736"></p><h2 id="背包DP"><a href="#背包DP" class="headerlink" title="背包DP"></a>背包DP</h2><h3 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526133609206.png" alt="image-20240526133609206"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526133623292.png" alt="image-20240526133623292"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526133631379.png" alt="image-20240526133631379"></p><h4 id="模板题——小明的背包1"><a href="#模板题——小明的背包1" class="headerlink" title="模板题——小明的背包1"></a>模板题——<a href="https://www.lanqiao.cn/problems/1174/learning">小明的背包1</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#dp[i][j]    前i件物品，总体积不超过j 的最大价值</span><br><br>n,v=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>dp=[[<span class="hljs-number">0</span>]*(v+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>    wi,vi=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,v+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> j&gt;=wi:<br>            dp[i][j]=<span class="hljs-built_in">max</span>(dp[i-<span class="hljs-number">1</span>][j],dp[i-<span class="hljs-number">1</span>][j-wi]+vi)<br>        <span class="hljs-keyword">else</span>:<br>            dp[i][j]=dp[i-<span class="hljs-number">1</span>][j]<br>            <br><span class="hljs-built_in">print</span>(dp[n][v])<br></code></pre></td></tr></table></figure><h5 id="滚动数组优化"><a href="#滚动数组优化" class="headerlink" title="滚动数组优化"></a>滚动数组优化</h5><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526133913024.png" alt="image-20240526133913024"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526133922038.png" alt="image-20240526133922038"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526133928502.png" alt="image-20240526133928502"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py">n,V=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>dp=[<span class="hljs-number">0</span>]*(V+<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>  w,v=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>  <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(V,w-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>    dp[j]=<span class="hljs-built_in">max</span>(dp[j],dp[j-w]+v)<br><span class="hljs-built_in">print</span>(dp[V])<br></code></pre></td></tr></table></figure><h3 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526134436937.png" alt="image-20240526134436937"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526134445527.png" alt="image-20240526134445527"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526134453737.png" alt="image-20240526134453737"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526134501798.png" alt="image-20240526134501798"></p><h4 id="模板题——小明的背包2"><a href="#模板题——小明的背包2" class="headerlink" title="模板题——小明的背包2"></a>模板题——<a href="https://www.lanqiao.cn/problems/1175/learning">小明的背包2</a></h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526134640485.png" alt="image-20240526134640485"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># dp[i][j]=max(dp[i-1][j],dp[i][j-wi]+vi)  不取或在先前基础上取第i种（所以可以取多次）</span><br><br>n,v=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>dp=[[<span class="hljs-number">0</span>]*(v+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br><span class="hljs-keyword">for</span>  i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>    wi,vi=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,v+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> (j&gt;=wi):<br>            dp[i][j]=<span class="hljs-built_in">max</span>(dp[i-<span class="hljs-number">1</span>][j],dp[i][j-wi]+vi)<br>        <span class="hljs-keyword">else</span>:<br>            dp[i][j]=dp[i-<span class="hljs-number">1</span>][j]<br><span class="hljs-built_in">print</span>(dp[n][v])<br></code></pre></td></tr></table></figure><h5 id="滚动数组优化-1"><a href="#滚动数组优化-1" class="headerlink" title="滚动数组优化"></a>滚动数组优化</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br>N, V = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>items = []<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N):<br>    w, v = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    items.append((w, v))<br>dp = [<span class="hljs-number">0</span>] * (V + <span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, V + <span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> w, v <span class="hljs-keyword">in</span> items:<br>        <span class="hljs-keyword">if</span> i &gt;= w:<br>            dp[i] = <span class="hljs-built_in">max</span>(dp[i], dp[i - w] + v)<br><span class="hljs-built_in">print</span>(dp[V])<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">读取输入的商场物品数量N和小明的背包容量V，以及每种物品的体积和价值。</span><br><span class="hljs-string">初始化一个长度为V+1的动态规划数组dp，dp[i]表示背包容量为i时所能获得的最大价值。</span><br><span class="hljs-string">使用动态规划求解，外层循环遍历背包容量从1到V，内层循环遍历每种物品，更新dp[i]的值为dp[i-w]+v和当前dp[i]的较大值。</span><br><span class="hljs-string">输出dp[V]即为小明所能获得的最大价值。</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526134702358.png" alt="image-20240526134702358"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526134710379.png" alt="image-20240526134710379"></p><h4 id="模板题——小明的背包3"><a href="#模板题——小明的背包3" class="headerlink" title="模板题——小明的背包3"></a>模板题——<a href="https://www.lanqiao.cn/problems/1176/learning">小明的背包3</a></h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526134904431.png" alt="image-20240526134904431"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526134915203.png" alt="image-20240526134915203"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526134922223.png" alt="image-20240526134922223"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526134930677.png" alt="image-20240526134930677"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#dp[i][j] =max(dp[i][j],dp[i-1][j-k*wi]+k*vi)  k属于(0，si)</span><br><br>n,v=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>dp=[[<span class="hljs-number">0</span>]*(v+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>    wi,vi,si=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,v+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">min</span>(si,j//wi)+<span class="hljs-number">1</span>):<br><br>            dp[i][j]=<span class="hljs-built_in">max</span>(dp[i][j],dp[i-<span class="hljs-number">1</span>][j-k*wi]+k*vi)<br><br><span class="hljs-built_in">print</span>(dp[n][v])<br></code></pre></td></tr></table></figure><h5 id="滚动数组优化-2"><a href="#滚动数组优化-2" class="headerlink" title="滚动数组优化"></a>滚动数组优化</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py">N,V=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>w,v,s=[[<span class="hljs-number">0</span>]*(N+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>dp=[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(V+<span class="hljs-number">1</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,N+<span class="hljs-number">1</span>):<br>  w[i],v[i],s[i]=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,N+<span class="hljs-number">1</span>):<br>  <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(s[i]):<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(V,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>):<br>      <span class="hljs-keyword">if</span> w[i]&lt;=k:<br>        dp[k]=<span class="hljs-built_in">max</span>(dp[k-w[i]]+v[i],dp[k])<br><span class="hljs-built_in">print</span>(dp[-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><h3 id="二维费用背包-分组背包"><a href="#二维费用背包-分组背包" class="headerlink" title="二维费用背包&amp;分组背包"></a>二维费用背包&amp;分组背包</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526135531593.png" alt="image-20240526135531593"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526135538566.png" alt="image-20240526135538566"></p><h4 id="模板题——小蓝的神秘行囊"><a href="#模板题——小蓝的神秘行囊" class="headerlink" title="模板题——小蓝的神秘行囊"></a>模板题——<a href="https://www.lanqiao.cn/problems/3937/learning">小蓝的神秘行囊</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> sys<br><br>n, v, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, sys.stdin.readline().split())<br>dp = [[<span class="hljs-number">0</span>]*(v + <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m + <span class="hljs-number">1</span>)]<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    volume, mass, value = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, sys.stdin.readline().split())<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(v, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> i &gt;= mass <span class="hljs-keyword">and</span> j &gt;= volume:<br>                dp[i][j] = <span class="hljs-built_in">max</span>(dp[i][j], dp[i-mass][j-volume] + value)<br><span class="hljs-built_in">print</span>(dp[m][v])<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py">n,v,m=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>dp=[[<span class="hljs-number">0</span>]*(m+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(v+<span class="hljs-number">1</span>)]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>    vi,mi,wi=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(v,vi-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m,mi-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>            dp[j][k] =<span class="hljs-built_in">max</span>(dp[j][k],dp[j-vi][k-mi]+wi)<br>           <br><span class="hljs-built_in">print</span>(dp[v][m])<br></code></pre></td></tr></table></figure><h2 id="树形DP"><a href="#树形DP" class="headerlink" title="树形DP"></a>树形DP</h2><h2 id="状压DP"><a href="#状压DP" class="headerlink" title="状压DP"></a>状压DP</h2><h2 id="数位DP"><a href="#数位DP" class="headerlink" title="数位DP"></a>数位DP</h2><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><h3 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526100046139.png" alt="image-20240526100046139"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526100057701.png" alt="image-20240526100057701"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526100110562.png" alt="image-20240526100110562"></p><h3 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526100136410.png" alt="image-20240526100136410"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526100148837.png" alt="image-20240526100148837"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526100157890.png" alt="image-20240526100157890"></p><p> <img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526100211778.png" alt="image-20240526100211778"><br> <img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526100221657.png" alt="image-20240526100221657"></p><h4 id="模板题——斤斤计较的小Z"><a href="#模板题——斤斤计较的小Z" class="headerlink" title="模板题——斤斤计较的小Z"></a>模板题——<a href="https://www.lanqiao.cn/problems/2047/learning">斤斤计较的小Z</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs py">Next = [<span class="hljs-number">0</span>] * <span class="hljs-number">1000010</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_next</span>(<span class="hljs-params">T</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(T)):<br>        j = Next[i]<br>        <span class="hljs-keyword">while</span> j &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> T[i] != T[j]:<br>            j = Next[j]<br>        <span class="hljs-keyword">if</span> T[i] == T[j]:<br>            Next[i + <span class="hljs-number">1</span>] = j + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            Next[i + <span class="hljs-number">1</span>] = <span class="hljs-number">0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">KMP</span>(<span class="hljs-params">s,t</span>):<br>    get_next(t)<br>    ans = <span class="hljs-number">0</span><br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>        <span class="hljs-keyword">while</span> j &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> s[i] != t[j]:<br>            j =  Next[j]<br>        <span class="hljs-keyword">if</span> s[i] == t[j]:<br>            j += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> j == <span class="hljs-built_in">len</span>(t):<br>            ans += <span class="hljs-number">1</span><br>            j =  Next[j]<br>    <span class="hljs-keyword">return</span> ans<br>t = <span class="hljs-built_in">input</span>()<br>s = <span class="hljs-built_in">input</span>()<br><span class="hljs-built_in">print</span>(KMP(s,t))<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">print</span>((<span class="hljs-keyword">lambda</span> s: <span class="hljs-built_in">input</span>().count(s))(<span class="hljs-built_in">input</span>()))<br></code></pre></td></tr></table></figure><h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><h3 id="字符串哈希"><a href="#字符串哈希" class="headerlink" title="字符串哈希"></a>字符串哈希</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526100452881.png" alt="image-20240526100452881"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526100509262.png" alt="image-20240526100509262"></p><h4 id="模板题——斤斤计较的小Z-1"><a href="#模板题——斤斤计较的小Z-1" class="headerlink" title="模板题——斤斤计较的小Z"></a>模板题——<a href="https://www.lanqiao.cn/problems/2047/learning">斤斤计较的小Z</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs py">t = <span class="hljs-built_in">input</span>()<br>s = <span class="hljs-built_in">input</span>()<br>m,n = <span class="hljs-built_in">len</span>(t), <span class="hljs-built_in">len</span>(s)<br>B = <span class="hljs-number">26</span><br>mod = <span class="hljs-number">1000000007</span><br><span class="hljs-built_in">hash</span> = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n + <span class="hljs-number">1</span>):<br>    <span class="hljs-built_in">hash</span>[i] = <span class="hljs-built_in">hash</span>[i - <span class="hljs-number">1</span>] * B + <span class="hljs-built_in">ord</span>(s[i - <span class="hljs-number">1</span>]) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>)<br>    <span class="hljs-built_in">hash</span>[i] %= mod<br><br>numT = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> t:<br>    numT = numT * B + <span class="hljs-built_in">ord</span>(c) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>)<br>    numT %= mod<br>    <br>p = (B ** m) % mod<br>ans = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n +<span class="hljs-number">1</span>):<br>    r = l + m - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> r &gt; n:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">hash</span>[r] - <span class="hljs-built_in">hash</span>[l - <span class="hljs-number">1</span>] * p % mod + mod) % mod == numT:<br>        ans += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h1 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h1><h2 id="二项式定理"><a href="#二项式定理" class="headerlink" title="二项式定理"></a>二项式定理</h2><h2 id="容斥原理"><a href="#容斥原理" class="headerlink" title="容斥原理"></a>容斥原理</h2><h2 id="排列组合"><a href="#排列组合" class="headerlink" title="排列组合"></a>排列组合</h2><h2 id="模意义下的逆元"><a href="#模意义下的逆元" class="headerlink" title="模意义下的逆元"></a>模意义下的逆元</h2><h2 id="矩阵运算"><a href="#矩阵运算" class="headerlink" title="矩阵运算"></a>矩阵运算</h2><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="ST表"><a href="#ST表" class="headerlink" title="ST表"></a>ST表</h2><h5 id="RMQ问题"><a href="#RMQ问题" class="headerlink" title="RMQ问题"></a>RMQ问题</h5><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240524183506581.png" alt="image-20240524183506581"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240524183726055.png" alt="image-20240524183726055"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240524183742068.png" alt="image-20240524183742068"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240524183753258.png" alt="image-20240524183753258"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240524183803151.png" alt="image-20240524183803151"></p><h2 id="平衡树"><a href="#平衡树" class="headerlink" title="平衡树"></a>平衡树</h2><h3 id="平衡树-Splay"><a href="#平衡树-Splay" class="headerlink" title="平衡树-Splay"></a>平衡树-Splay</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526122034271.png" alt="image-20240526122034271"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526122046309.png" alt="image-20240526122046309"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526122055269.png" alt="image-20240526122055269"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526122104347.png" alt="image-20240526122104347"></p><h3 id="平衡树-FHQ-Treap"><a href="#平衡树-FHQ-Treap" class="headerlink" title="平衡树-FHQ_Treap"></a>平衡树-FHQ_Treap</h3><h4 id="无旋Treap"><a href="#无旋Treap" class="headerlink" title="无旋Treap"></a>无旋Treap</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115339167.png" alt="image-20240526115339167"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115350766.png" alt="image-20240526115350766"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115359404.png" alt="image-20240526115359404"></p><h4 id="无旋Treap的结构"><a href="#无旋Treap的结构" class="headerlink" title="无旋Treap的结构"></a>无旋Treap的结构</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115559180.png" alt="image-20240526115559180"></p><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115614042.png" alt="image-20240526115614042"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115623744.png" alt="image-20240526115623744"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115634558.png" alt="image-20240526115634558"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115644061.png" alt="image-20240526115644061"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115650541.png" alt="image-20240526115650541"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115656903.png" alt="image-20240526115656903"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115703005.png" alt="image-20240526115703005"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115710056.png" alt="image-20240526115710056"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115715945.png" alt="image-20240526115715945"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115721051.png" alt="image-20240526115721051"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115727235.png" alt="image-20240526115727235"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115734944.png" alt="image-20240526115734944"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115740418.png" alt="image-20240526115740418"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115746149.png" alt="image-20240526115746149"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115751158.png" alt="image-20240526115751158"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115755059.png" alt="image-20240526115755059"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115800730.png" alt="image-20240526115800730"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115804490.png" alt="image-20240526115804490"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115808715.png" alt="image-20240526115808715"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115813454.png" alt="image-20240526115813454"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115817884.png" alt="image-20240526115817884"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115823342.png" alt="image-20240526115823342"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115830400.png" alt="image-20240526115830400"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115835300.png" alt="image-20240526115835300"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115839426.png" alt="image-20240526115839426"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115847061.png" alt="image-20240526115847061"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115851600.png" alt="image-20240526115851600"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115858903.png" alt="image-20240526115858903"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115904405.png" alt="image-20240526115904405"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115910595.png" alt="image-20240526115910595"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115916421.png" alt="image-20240526115916421"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115922564.png" alt="image-20240526115922564"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115926736.png" alt="image-20240526115926736"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115931678.png" alt="image-20240526115931678"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115936852.png" alt="image-20240526115936852"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115942072.png" alt="image-20240526115942072"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115948947.png" alt="image-20240526115948947"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115954070.png" alt="image-20240526115954070"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526115959511.png" alt="image-20240526115959511"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526120003232.png" alt="image-20240526120003232"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526120022163.png" alt="image-20240526120022163"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526120026713.png" alt="image-20240526120026713"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526120031817.png" alt="image-20240526120031817"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526120036416.png" alt="image-20240526120036416"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526120040832.png" alt="image-20240526120040832"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526120053497.png" alt="image-20240526120053497"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526120100194.png" alt="image-20240526120100194"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526120104721.png" alt="image-20240526120104721"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526120109696.png" alt="image-20240526120109696"></p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">NODE</span> &#123;</span><br>    <span class="hljs-type">int</span> val;<br>    <span class="hljs-type">int</span> cnt;<br>    <span class="hljs-type">int</span> rev;<br>    <span class="hljs-type">int</span> prio;<br>    <span class="hljs-type">int</span> size;<br>    <span class="hljs-type">int</span> ch[<span class="hljs-number">2</span>];<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">FHQTREAP</span> &#123;</span><br>    <span class="hljs-type">int</span> root;<br>    <span class="hljs-type">int</span> size;<br>    NODE node[MAXN];<br>&#125;<br><br><span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; <span class="hljs-title function_">split_by_val</span><span class="hljs-params">(<span class="hljs-type">int</span> t, <span class="hljs-type">int</span> val)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!t) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>    &#125;<br>    check_rev(t);<br>    <span class="hljs-keyword">if</span> (node[t].val &lt;= val) &#123;<br>        <span class="hljs-keyword">auto</span> tmp = split_by_val(node[t].ch[<span class="hljs-number">1</span>], val);<br>        node[t].ch[<span class="hljs-number">1</span>] = tmp.first;<br>        update_size(t);<br>        <span class="hljs-keyword">return</span> &#123;t, tmp.second&#125;;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">auto</span> tmp = split_by_val(node[t].ch[<span class="hljs-number">0</span>], val);<br>        node[t].ch[<span class="hljs-number">0</span>] = tmp.second;<br>        update_size(t);<br>        <span class="hljs-keyword">return</span> &#123;tmp.first, t&#125;;<br>    &#125;<br>&#125;<br><br>tuple&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; <span class="hljs-title function_">split_by_rank</span><span class="hljs-params">(<span class="hljs-type">int</span> t, <span class="hljs-type">int</span> k)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!t) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>    &#125;<br>    check_rev(t);<br>    <span class="hljs-type">int</span> lt, mt, rt;<br>    <span class="hljs-keyword">if</span> (k &lt;= node[node[t].ch[<span class="hljs-number">0</span>]].size()) &#123;<br>        tie(lt, mt, rt) = split_by_rank(node[t].ch[<span class="hljs-number">0</span>], k);<br>        node[t].ch[<span class="hljs-number">0</span>] = rt;<br>        update_size(t);<br>        <span class="hljs-keyword">return</span> &#123;lt, mt, t&#125;;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (k &gt; node[node[t]].ch[<span class="hljs-number">0</span>].size() + node[t].cnt) &#123;<br>        tie(lt, mt, rt) = split_by_rank(node[t].ch[<span class="hljs-number">1</span>], k - node[node[t].ch[<span class="hljs-number">0</span>]].size() - node[t].cnt);<br>        node[t].ch[<span class="hljs-number">1</span>] = lt;<br>        update_size(t);<br>        <span class="hljs-keyword">return</span> &#123;t, mt, rt&#125;;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        lt = node[t].ch[<span class="hljs-number">0</span>];<br>        rt = node[t].ch[<span class="hljs-number">1</span>];<br>        check_rev(lt);<br>        check_rev(rt);<br>        node[t].ch[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        upda[t].ch[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>        update_size(t);<br>        <span class="hljs-keyword">return</span> &#123;lt, t, rt&#125;;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> lt, <span class="hljs-type">int</span> rt)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!lt) &#123;<br>        <span class="hljs-keyword">return</span> rt;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!rt) &#123;<br>        <span class="hljs-keyword">return</span> lt;<br>    &#125;<br>    check_rev(lt);<br>    check_rev(rt);<br>    <span class="hljs-keyword">if</span> (node[lt].prio &lt; node[rt].prio) &#123;<br>        node[lt].ch[<span class="hljs-number">1</span>] = merge(node[lt].ch[<span class="hljs-number">1</span>], rt);<br>        update_size(lt);<br>        <span class="hljs-keyword">return</span> lt;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        node[rt].ch[<span class="hljs-number">0</span>] = merge(lt, node[rt].ch[<span class="hljs-number">0</span>]);<br>        update_size(rt);<br>        <span class="hljs-keyword">return</span> rt;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>    <span class="hljs-type">int</span> lt, mt, rt;<br>    tie(lt, rt) = split_by_val(root, val);<br>    tie(lt, mt) = split_by_val(lt, val - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (!mt) &#123;<br>        mt = new_node(val);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        node[mt].cnt ++;<br>        update_size(mt);<br>    &#125;<br>    root = merge(merge(lt, mt), rt);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">del</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>    <span class="hljs-type">int</span> lt, mt, rt;<br>    tie(lt, rt) = split_by_val(root, val);<br>    tie(lt, mt) = split_by_val(lt, val - <span class="hljs-number">1</span>);<br>    unode[mt].cnt --;<br>    update_size(mt);<br>    <span class="hljs-keyword">if</span> (node[mt].cnt == <span class="hljs-number">0</span>) &#123;<br>        clear(mt);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        lt = merge(lt, mt);<br>    &#125;<br>    root = merge(lt, rt);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">reverse</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> &#123;<br>    <span class="hljs-type">int</span> t1, t2, t3, t4, t5;<br>    tie(t1, t2, t3) = split_by_rank(root, l - <span class="hljs-number">1</span>);<br>    tie(t3, t4, t5) = split_by_ranl(t3, r - l + <span class="hljs-number">2</span>);<br>    node[t3].rev = <span class="hljs-number">1</span>;<br>    root = merge(merge(merge(merge(t1, t2), t3), t4), t5);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">check_rev</span><span class="hljs-params">(<span class="hljs-type">int</span> t)</span> &#123;<br>    <span class="hljs-keyword">if</span> (node[t].rev) &#123;<br>        swap(node[t].ch[<span class="hljs-number">0</span>], node[t].ch[<span class="hljs-number">1</span>]);<br>        node[node[t].ch[<span class="hljs-number">0</span>]].rev ^= <span class="hljs-number">1</span>;<br>        node[node[t].ch[<span class="hljs-number">1</span>]].rev ^= <span class="hljs-number">1</span>;<br>        node[t].rev = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">rank</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>    <span class="hljs-keyword">auto</span> tmp = split_by_val(root, val - <span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> k = node[tmp.first].size + <span class="hljs-number">1</span>;<br>    root = merge(tmp.first, tmp.second);<br>    <span class="hljs-keyword">return</span> k;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">kth</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;t, <span class="hljs-type">int</span> k)</span> &#123;<br>    <span class="hljs-type">int</span> lt, mt, rt;<br>    tie(lt, mt, rt) = split_by_rank(t, k);<br>    <span class="hljs-type">int</span> val = node[mt].val;<br>    t = merge(merge(lt, mt), rt);<br>    <span class="hljs-keyword">return</span> val;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">pre</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>    <span class="hljs-keyword">auto</span> tmp = split_by_cal(root, val - <span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> k = kth(tmp.first, node[tmp.first].size);<br>    root = merge(tmp.first, tmp.second);<br>    <span class="hljs-keyword">return</span> k;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">nxt</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>    <span class="hljs-keyword">auto</span> tmp = split_by_val(root, val);<br>    <span class="hljs-type">int</span> k = kth(tmp.second, <span class="hljs-number">1</span>);<br>    root = merge(tmp.first, tmp.second);<br>    <span class="hljs-keyword">return</span> k;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><h3 id="基础并查集"><a href="#基础并查集" class="headerlink" title="基础并查集"></a>基础并查集</h3><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240524194242229.png" alt="image-20240524194242229"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240524194253527.png" alt="image-20240524194253527"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240524194301781.png" alt="image-20240524194301781"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240524194309669.png" alt="image-20240524194309669"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240524194317881.png" alt="image-20240524194317881"></p><h5 id="模板题——蓝桥幼儿园"><a href="#模板题——蓝桥幼儿园" class="headerlink" title="模板题——蓝桥幼儿园"></a>模板题——<a href="https://www.lanqiao.cn/problems/1135/learning">蓝桥幼儿园</a></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># def Findroot(x):</span><br><span class="hljs-comment">#     while x!=p[x]:</span><br><span class="hljs-comment">#         x=p[x]</span><br><span class="hljs-comment">#     return x</span><br><span class="hljs-string">&#x27;&#x27;&#x27;使用路径压缩&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Findroot</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">if</span> x==p[x]:<span class="hljs-keyword">return</span> x<br>    <span class="hljs-comment">#路径压缩</span><br>    p[x]=Findroot(p[x])<br>    <span class="hljs-keyword">return</span> p[x]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Merge</span>(<span class="hljs-params">x,y</span>):<br>    rootx,rooty=Findroot(x),Findroot(y)<br>    p[rootx]=rooty<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Query</span>(<span class="hljs-params">x,y</span>):<br>    rootx,rooty=Findroot(x),Findroot(y)<br>    <span class="hljs-keyword">return</span> rootx==rooty<br>n,m=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>p=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>))<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    op,x,y=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    <span class="hljs-keyword">if</span> op ==<span class="hljs-number">1</span>:<br>        Merge(x,y)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> Query(x,y):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;YES&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;NO&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="路径压缩"><a href="#路径压缩" class="headerlink" title="路径压缩"></a>路径压缩</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240524195007281.png" alt="image-20240524195007281"></p><h5 id="模板题——星球大战"><a href="#模板题——星球大战" class="headerlink" title="模板题——星球大战"></a>模板题——<a href="https://www.lanqiao.cn/problems/828/learning/">星球大战</a></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br>M = <span class="hljs-number">200010</span>; N = <span class="hljs-number">2</span> * M<br>n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>father = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">10</span>)                 <span class="hljs-comment">#并查集板块</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init</span>():<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">10</span>):<br>        father[i] = i<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_father</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">if</span> x != father[x]: father[x] = find_father(father[x])<br>    <span class="hljs-keyword">return</span> father[x]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">unite</span>(<span class="hljs-params">x, y</span>):<br>    father[find_father(x)] = find_father(y)<br>come = [<span class="hljs-number">0</span>] * N; to = [<span class="hljs-number">0</span>] * N;   <span class="hljs-comment">#存储每个边</span><br>g = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N)]      <span class="hljs-comment">#邻接表</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    a, b = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    g[a].append(b); g[b].append(a)<br>    come[i] = a; to[i] = b <br>broken = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">10</span>)                     <span class="hljs-comment">#记录每个点是否被修坏</span><br>destroy = []<br>k = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):<br>    b = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>    broken[b] = <span class="hljs-number">1</span><br>    destroy.append(b)<br>init()<br>res = n - k             <span class="hljs-comment">#先计算所有剩下星球的连通块数，(最后一轮的结果)</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    l = come[i]; r = to[i]<br>    fl, fr = find_father(l), find_father(r)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> broken[l] <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> broken[r] <span class="hljs-keyword">and</span> fl != fr:<br>        res -= <span class="hljs-number">1</span><br>        <span class="hljs-comment">#unite(l, r)</span><br>        father[fl] = fr<br>ans = [res]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(destroy) - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):       <span class="hljs-comment">#顺序破坏，相当于倒序修建</span><br>    c = destroy[i]<br>    broken[c] = <span class="hljs-number">0</span><br>    res += <span class="hljs-number">1</span>                                    <span class="hljs-comment">#修好一个星球，连通块会多一个</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> g[c]:<br>        fc, fp = find_father(c), find_father(j)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> broken[j] <span class="hljs-keyword">and</span> fc != fp:<br>            res -= <span class="hljs-number">1</span><br>            father[fc] = fp<br>    ans.append(res)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ans) - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):           <span class="hljs-comment">#倒序输出结果</span><br>    <span class="hljs-built_in">print</span>(ans[i])<br></code></pre></td></tr></table></figure><h3 id="可撤销并查集"><a href="#可撤销并查集" class="headerlink" title="可撤销并查集"></a>可撤销并查集</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240524203431727.png" alt="image-20240524203431727"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240524203449967.png" alt="image-20240524203449967"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240524203621861.png" alt="image-20240524203621861"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240524203634004.png" alt="image-20240524203634004"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240524203643547.png" alt="image-20240524203643547"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240524203712193.png" alt="image-20240524203712193"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240524203728659.png" alt="image-20240524203728659"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240524203741431.png" alt="image-20240524203741431"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240524203752845.png" alt="image-20240524203752845"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240524203808480.png" alt="image-20240524203808480"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240524203837465.png" alt="image-20240524203837465"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240524203855506.png" alt="image-20240524203855506"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240524203906020.png" alt="image-20240524203906020"></p><h4 id="可撤销并查集定义"><a href="#可撤销并查集定义" class="headerlink" title="可撤销并查集定义"></a>可撤销并查集定义</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240524203916807.png" alt="image-20240524203916807"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240524203959912.png" alt="image-20240524203959912"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240524204009818.png" alt="image-20240524204009818"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240524204018333.png" alt="image-20240524204018333"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240524204035190.png" alt="image-20240524204035190"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240524204043804.png" alt="image-20240524204043804"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240524204055615.png" alt="image-20240524204055615"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240524204106056.png" alt="image-20240524204106056"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240524204120154.png" alt="image-20240524204120154"></p><h4 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240524204147436.png" alt="image-20240524204147436"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240524204158246.png" alt="image-20240524204158246"></p><h3 id="带权并查集"><a href="#带权并查集" class="headerlink" title="带权并查集"></a>带权并查集</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526102401075.png" alt="image-20240526102401075"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526102412755.png" alt="image-20240526102412755"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526102423880.png" alt="image-20240526102423880"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526102443080.png" alt="image-20240526102443080"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526102451528.png" alt="image-20240526102451528"></p><h2 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h2><h4 id="lowbit操作"><a href="#lowbit操作" class="headerlink" title="lowbit操作"></a>lowbit操作</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526113101030.png" alt="image-20240526113101030"></p><h4 id="树状数组-1"><a href="#树状数组-1" class="headerlink" title="树状数组"></a>树状数组</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526113114986.png" alt="image-20240526113114986"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526113123838.png" alt="image-20240526113123838"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526113132131.png" alt="image-20240526113132131"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526113141135.png" alt="image-20240526113141135"></p><h4 id="模板题——单点修改，区间查询"><a href="#模板题——单点修改，区间查询" class="headerlink" title="模板题——单点修改，区间查询"></a>模板题——<a href="https://www.lanqiao.cn/problems/2340/learning/">单点修改，区间查询</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs py">N = <span class="hljs-number">100100</span><br><span class="hljs-comment">#初始化树状数组 为0</span><br>f = [<span class="hljs-number">0</span>] * N<br><br><span class="hljs-comment">#求下标为x的最小区间长度</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lowbit</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x &amp; (-x)<br><br><span class="hljs-comment">#树状数组更新函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upd</span>(<span class="hljs-params">pos,v</span>):<span class="hljs-comment">#pos：下标 v：值</span><br>    <span class="hljs-comment">#在下标为pos的区间加上v 并且在每个有包含pos的大区间加上v</span><br>    <span class="hljs-comment">#包含当前区间的大区间：在pos的位置上加lowbit(pos)便能得到大区间</span><br>    <span class="hljs-keyword">while</span> pos &lt;= n:<br>        f[pos] += v<br>        pos += lowbit(pos)<br><br><span class="hljs-comment">#得到1-pos位置的前缀和</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">pos</span>):<br>    res = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> pos &gt; <span class="hljs-number">0</span>:<span class="hljs-comment">#加上组成pos每一个区间的和</span><br>        res += f[pos]<br>        pos -= lowbit(pos)<br>    <span class="hljs-keyword">return</span> res<br><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>data = <span class="hljs-built_in">input</span>().split()<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,n):<br>    x = <span class="hljs-built_in">int</span>(data[i])<br>    <span class="hljs-comment">#树状数组初始化都为0，需要将原数组每个值通过upd方法将每个值加入树状数组</span><br>    upd(i+<span class="hljs-number">1</span>,x)<br><br>m = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    opt,a,b = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    <span class="hljs-keyword">if</span> opt == <span class="hljs-number">1</span>:<br>        upd(a,b)<span class="hljs-comment">#更新</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment">#区间[a,b] = [1,b] - [1,a-1]</span><br>        <span class="hljs-built_in">print</span>(get(b) - get(a-<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br>N = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>n = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>m = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>  s,a,b = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>  <span class="hljs-keyword">if</span> s == <span class="hljs-number">1</span>:<br>    n[a-<span class="hljs-number">1</span>] += b<br>  <span class="hljs-keyword">if</span> s == <span class="hljs-number">2</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>(n[a-<span class="hljs-number">1</span>:b]))<br></code></pre></td></tr></table></figure><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526113358856.png" alt="image-20240526113358856"></p><h4 id="树状数组-2"><a href="#树状数组-2" class="headerlink" title="树状数组"></a>树状数组</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526113430755.png" alt="image-20240526113430755"></p><h4 id="模板题——殷老师排队"><a href="#模板题——殷老师排队" class="headerlink" title="模板题——殷老师排队"></a>模板题——<a href="https://www.lanqiao.cn/problems/3620/learning/">殷老师排队</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lowbit</span>(<span class="hljs-params">x</span>):<br>  <span class="hljs-keyword">return</span> x &amp; (-x)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">x</span>):<br>  ans = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">while</span> x:<br>    ans += tree[x]<br>    x -= lowbit(x)<br>  <span class="hljs-keyword">return</span> ans <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x,y</span>):<br>  <span class="hljs-keyword">while</span> x &lt;= n:<br>    tree[x] += y<br>    x += lowbit(x)<br><br>n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>a =[<span class="hljs-number">0</span>] + <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>tree = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>  add(i,a[i])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>  lt = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>  <span class="hljs-keyword">if</span> lt[<span class="hljs-number">0</span>] == <span class="hljs-number">1</span>:<br>    x, y = lt[<span class="hljs-number">1</span>], lt[<span class="hljs-number">2</span>]<br>    add(x,y - a[x])<br>    a[x] = y<br>  <span class="hljs-keyword">else</span>:<br>    x = lt[<span class="hljs-number">1</span>]<br>    ans = (<span class="hljs-number">2</span> * x - n - <span class="hljs-number">2</span>) * a[x] + query(n) - <span class="hljs-number">2</span>*query(x-<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h3 id="二维树状数组"><a href="#二维树状数组" class="headerlink" title="二维树状数组"></a>二维树状数组</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526113722203.png" alt="image-20240526113722203"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526113730769.png" alt="image-20240526113730769"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526113742110.png" alt="image-20240526113742110"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526113748208.png" alt="image-20240526113748208"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526113754750.png" alt="image-20240526113754750"></p><h4 id="模板题——"><a href="#模板题——" class="headerlink" title="模板题——"></a>模板题——</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526113904670.png" alt="image-20240526113904670"></p><h3 id="树状数组上二分"><a href="#树状数组上二分" class="headerlink" title="树状数组上二分"></a>树状数组上二分</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526113950824.png" alt="image-20240526113950824"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526113958446.png" alt="image-20240526113958446"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526114007562.png" alt="image-20240526114007562"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526114020291.png" alt="image-20240526114020291"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526114102890.png" alt="image-20240526114102890"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526114113384.png" alt="image-20240526114113384"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526114124229.png" alt="image-20240526114124229"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526114131782.png" alt="image-20240526114131782"></p><h4 id="模板题——-1"><a href="#模板题——-1" class="headerlink" title="模板题——"></a>模板题——</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python">maxn = <span class="hljs-number">110000</span><br>ans = [<span class="hljs-number">0</span>] * maxn<br>tree = [<span class="hljs-number">0</span>] * maxn<br>a = [<span class="hljs-number">0</span>] * maxn<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lowbit</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x &amp; -x<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">pos, x</span>):<br>    <span class="hljs-keyword">while</span> pos &lt; maxn:<br>        tree[pos] += x<br>        pos += lowbit(pos)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">pos</span>):<br>    res = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> pos &gt; <span class="hljs-number">0</span>:<br>        res += tree[pos]<br>        pos -= lowbit(pos)<br>    <span class="hljs-keyword">return</span> res<br><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>nums = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().strip().split()))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>    a[i] = nums[i - <span class="hljs-number">1</span>]<br>    add(i, <span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>    l, r = <span class="hljs-number">1</span>, n<br>    <span class="hljs-keyword">while</span> l &lt;= r:<br>        mid = (l + r) // <span class="hljs-number">2</span><br>        <span class="hljs-keyword">if</span> query(mid) &lt; a[i] + <span class="hljs-number">1</span>:<br>            l = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            r = mid - <span class="hljs-number">1</span><br>    ans[i] = r<br>    add(r, -<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>    <span class="hljs-built_in">print</span>(ans[i], end=<span class="hljs-string">&#x27; &#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><h3 id="线段树-动态开点"><a href="#线段树-动态开点" class="headerlink" title="线段树-动态开点"></a>线段树-动态开点</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526121216936.png" alt="image-20240526121216936"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526121240169.png" alt="image-20240526121240169"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526121250475.png" alt="image-20240526121250475"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526121357462.png" alt="image-20240526121357462"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526121408234.png" alt="image-20240526121408234"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526121446955.png" alt="image-20240526121446955"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526121517887.png" alt="image-20240526121517887"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526121505465.png" alt="image-20240526121505465"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526121533131.png" alt="image-20240526121533131"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526121542078.png" alt="image-20240526121542078"></p><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526121653108.png" alt="image-20240526121653108"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Tree</span> &#123;</span><br>    <span class="hljs-type">int</span> l, r, n, ls, rs;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;t, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> pos, <span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!t) &#123;<br>        t = ++ cnt;<br>        tree[t].l = l;<br>        tree[t].r = r;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (l == r) &#123;<br>        tree[t].n = n;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (pos &lt;= mid) &#123;<br>        update(tree[t].ls, l, mid, pos, n);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        update(tree[t].rs, mid + <span class="hljs-number">1</span>, r, pos, n);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">getnum</span><span class="hljs-params">(<span class="hljs-type">int</span> t, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!t) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (tree[t].l == l &amp;&amp; tree[t].r == r) &#123;<br>        <span class="hljs-keyword">return</span> tree[t].n;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (tree[t].l + tree[t].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (r &lt;= mid) &#123;<br>        <span class="hljs-keyword">return</span> getnum(tree[t].ls, l, r);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (l &gt; mid) &#123;<br>        <span class="hljs-keyword">return</span> getnum(tree[t].rs, l, r);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> getnum(tree[t].ls, l, mid) + getnum(tree[t].rs, mid + <span class="hljs-number">1</span>, r);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="线段树-标记永久化"><a href="#线段树-标记永久化" class="headerlink" title="线段树-标记永久化"></a>线段树-标记永久化</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526121717724.png" alt="image-20240526121717724"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526121729855.png" alt="image-20240526121729855"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526121746997.png" alt="image-20240526121746997"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526121821681.png" alt="image-20240526121821681"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526121831175.png" alt="image-20240526121831175"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526121847400.png" alt="image-20240526121847400"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526121855524.png" alt="image-20240526121855524"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526121904894.png" alt="image-20240526121904894"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526121912575.png" alt="image-20240526121912575"></p><h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">build</span><span class="hljs-params">(<span class="hljs-type">int</span> t, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> *v)</span> &#123;<br>    _l[t] = l;<br>    _r[t] = r;<br>    <span class="hljs-keyword">if</span> (l == r) &#123;<br>        _v[t] = v[l];<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    build(t &lt;&lt; <span class="hljs-number">1</span>, l, mid, v);<br>    build(t &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r, v);<br>    _v[t] = _v[t &lt;&lt; <span class="hljs-number">1</span>] + _v[t &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">int</span> t, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> k)</span> &#123;<br>    _v[t] += k * (r - l + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (_l[t] == l &amp;&amp; _r[t] == r) &#123;<br>        _laz[t] += k;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (_l[t] + _r[t]) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (r &lt;= mid) &#123;<br>        update(t &lt;&lt; <span class="hljs-number">1</span>, l, r, k);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (l &gt; mid) &#123;<br>        update(t &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r, k);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        update(t &lt;&lt; <span class="hljs-number">1</span>, l, mid, k);<br>        update(t &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r, k);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">getv</span><span class="hljs-params">(<span class="hljs-type">int</span> t, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> sum)</span> &#123;<br>    <span class="hljs-keyword">if</span> (_l[t] == l &amp;&amp; _r[t] == r) &#123;<br>        <span class="hljs-keyword">return</span> _v[t] + sum * (_r[t] - _l[t] + <span class="hljs-number">1</span>);;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (_l[t] + _r[t]) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (r &lt;= mid) &#123;<br>        <span class="hljs-keyword">return</span> getv(t &lt;&lt; <span class="hljs-number">1</span>, l, r, sum + _laz[t]);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (l &gt; mid) &#123;<br>        <span class="hljs-keyword">return</span> getv(t &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r, sum + _laz[t]);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> getv(t &lt;&lt; <span class="hljs-number">1</span>, l, mid, sum + _laz[t])<br>            + getv(t &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r, sum + _laz[t]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="线段树维护矩阵"><a href="#线段树维护矩阵" class="headerlink" title="线段树维护矩阵"></a>线段树维护矩阵</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526124453903.png" alt="image-20240526124453903"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526124459467.png" alt="image-20240526124459467"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526124505523.png" alt="image-20240526124505523"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526124509905.png" alt="image-20240526124509905"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526124524019.png" alt="image-20240526124524019"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526124529840.png" alt="image-20240526124529840"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526124537171.png" alt="image-20240526124537171"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526124545230.png" alt="image-20240526124545230"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> t, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    _l[t] = l;<br>    _r[t] = r;<br>    _v[t] = _E;<br>    <span class="hljs-keyword">if</span> (l == r) &#123;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(t &lt;&lt; <span class="hljs-number">1</span>, l, mid);<br>    <span class="hljs-built_in">build</span>(t &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> t, <span class="hljs-type">int</span> pos, MATRIX &amp;v)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (_l[t] = _r[t]) &#123;<br>        _v[t] = v;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (_l[t] + _r[t]) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (pos &lt;= mid) &#123;<br>        <span class="hljs-built_in">update</span>(t &lt;&lt; <span class="hljs-number">1</span>, pos, v);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">update</span>(t &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, pos, v);<br>    &#125;<br>    _v[t] = _v[t &lt;&lt; <span class="hljs-number">1</span>] * _v[t &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-function">MATRIX <span class="hljs-title">getv</span><span class="hljs-params">(<span class="hljs-type">int</span> t, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (_l[t] == l &amp;&amp; _r[t] == r) &#123;<br>        <span class="hljs-keyword">return</span> _v[t];<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (_l[t] + _r[t]) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (r &lt;= mid) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">getv</span>(t &lt;&lt; <span class="hljs-number">1</span>, l, r);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (l &gt; mid) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">getv</span>(t &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">getv</span>(t &lt;&lt; <span class="hljs-number">1</span>, l, mid) * <span class="hljs-built_in">getv</span>(t &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="线段树维护哈希"><a href="#线段树维护哈希" class="headerlink" title="线段树维护哈希"></a>线段树维护哈希</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526124653609.png" alt="image-20240526124653609"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526124700848.png" alt="image-20240526124700848"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526124710439.png" alt="image-20240526124710439"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526124717847.png" alt="image-20240526124717847"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526124726230.png" alt="image-20240526124726230"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526124754241.png" alt="image-20240526124754241"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs py">bs1= []<br>bs2= []<br>mod1 = <span class="hljs-number">998244353</span><br>mod2 = <span class="hljs-number">19260817</span><br>bas = <span class="hljs-number">233</span><br>s = []<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">asdf</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, h1, h2, length</span>):<br>        self.h1 = h1<br>        self.h2 = h2<br>        self.length = length<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__add__</span>(<span class="hljs-params">self, c</span>):<br>        <span class="hljs-keyword">return</span> asdf((self.h1 * bs1[c.length] + c.h1) % mod1, (self.h2 * bs2[c.length] + c.h2) % mod2, self.length + c.length)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__eq__</span>(<span class="hljs-params">self, c</span>):<br>        <span class="hljs-keyword">return</span> self.h1 == c.h1 <span class="hljs-keyword">and</span> self.h2 == c.h2 <span class="hljs-keyword">and</span> self.length == c.length<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build</span>(<span class="hljs-params">l, r, rt</span>):<br>    <span class="hljs-keyword">if</span> l == r:<br>        s[rt] = asdf(<span class="hljs-built_in">ord</span>(a[l]), <span class="hljs-built_in">ord</span>(a[l]), <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> s[rt]<br>    s[rt] = build(l, (l + r) // <span class="hljs-number">2</span>, rt * <span class="hljs-number">2</span>) + build((l + r) // <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, r, rt * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> s[rt]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">l, r, rt, x, y</span>):<br>    <span class="hljs-keyword">if</span> x &lt;= l <span class="hljs-keyword">and</span> r &lt;= y:<br>        <span class="hljs-keyword">return</span> s[rt]<br>    <span class="hljs-keyword">if</span> y &lt;= (l + r) // <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> query(l, (l + r) // <span class="hljs-number">2</span>, rt * <span class="hljs-number">2</span>, x, y)<br>    <span class="hljs-keyword">if</span> x &gt; (l + r) // <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> query((l + r) // <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, r, rt * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, x, y)<br>    <span class="hljs-keyword">return</span> query(l, (l + r) // <span class="hljs-number">2</span>, rt * <span class="hljs-number">2</span>, x, y) + query((l + r) // <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, r, rt * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, x, y)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">modify</span>(<span class="hljs-params">l, r, rt, ad, ch</span>):<br>    <span class="hljs-keyword">if</span> l == r:<br>        s[rt] = asdf(<span class="hljs-built_in">ord</span>(ch), <span class="hljs-built_in">ord</span>(ch), <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> s[rt]<br>    <span class="hljs-keyword">if</span> ad &lt;= (l + r) // <span class="hljs-number">2</span>:<br>        s[rt] = modify(l, (l + r) // <span class="hljs-number">2</span>, rt * <span class="hljs-number">2</span>, ad, ch) + s[rt * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">else</span>:<br>        s[rt] = s[rt * <span class="hljs-number">2</span>] + modify((l + r) // <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, r, rt * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, ad, ch)<br>    <span class="hljs-keyword">return</span> s[rt]<br><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>a = <span class="hljs-built_in">input</span>()<br>a = <span class="hljs-string">&quot;!&quot;</span> + a<br>bs1.append(<span class="hljs-number">1</span>)<br>bs2.append(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    bs1.append(bs1[i]*bas%mod1)<br>    bs2.append(bs2[i]*bas%mod2)<br>s = [<span class="hljs-literal">None</span>] * (<span class="hljs-number">4</span> * (n+<span class="hljs-number">5</span>))<br>build(<span class="hljs-number">1</span>, n, <span class="hljs-number">1</span>)<br><br>q = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(q):<br>    ls=<span class="hljs-built_in">input</span>().split()<br>    opt = ls[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">if</span> opt == <span class="hljs-string">&#x27;1&#x27;</span>:<br>        ad = <span class="hljs-built_in">int</span>(ls[<span class="hljs-number">1</span>])<br>        ch = ls[<span class="hljs-number">2</span>]<br>        modify(<span class="hljs-number">1</span>, n, <span class="hljs-number">1</span>, <span class="hljs-built_in">int</span>(ad), ch)<br>    <span class="hljs-keyword">else</span>:<br>        l1 = <span class="hljs-built_in">int</span>(ls[<span class="hljs-number">1</span>])<br>        r1 = <span class="hljs-built_in">int</span>(ls[<span class="hljs-number">2</span>])<br>        l2 = <span class="hljs-built_in">int</span>(ls[<span class="hljs-number">3</span>])<br>        r2 = <span class="hljs-built_in">int</span>(ls[<span class="hljs-number">4</span>])<br>        x = query(<span class="hljs-number">1</span>, n, <span class="hljs-number">1</span>, l1, r1)<br>        y = query(<span class="hljs-number">1</span>, n, <span class="hljs-number">1</span>, l2, r2)<br>        <span class="hljs-keyword">if</span> x == y:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;YES&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;NO&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="可持久化线段树"><a href="#可持久化线段树" class="headerlink" title="可持久化线段树"></a>可持久化线段树</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526122146448.png" alt="image-20240526122146448"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526122158524.png" alt="image-20240526122158524"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526122211004.png" alt="image-20240526122211004"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526122219620.png" alt="image-20240526122219620"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526122228761.png" alt="image-20240526122228761"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526122248198.png" alt="image-20240526122248198"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526122258158.png" alt="image-20240526122258158"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526122329330.png" alt="image-20240526122329330"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526122339224.png" alt="image-20240526122339224"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526122353739.png" alt="image-20240526122353739"></p><h4 id="可持久化线段树-1"><a href="#可持久化线段树-1" class="headerlink" title="可持久化线段树"></a>可持久化线段树</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">NODE</span> &#123;</span><br>    <span class="hljs-type">int</span> v, ls, rs;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SEGTREE</span> &#123;</span><br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> root[MAXN &lt;&lt; <span class="hljs-number">5</span>];<br>    NODE node[MAXN &lt;&lt; <span class="hljs-number">5</span>];<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">SEGTREE::update</span><span class="hljs-params">(<span class="hljs-type">int</span> <span class="hljs-type">_t</span>, <span class="hljs-type">int</span> &amp;t, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> pos, <span class="hljs-type">int</span> k)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!t) &#123;<br>        t = ++cnt;<br>        node[t].v = node[<span class="hljs-type">_t</span>].v;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (l == r) &#123;<br>        node[t].v += k;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (pos &lt;= mid) &#123;<br>        node[t].rs = node[<span class="hljs-type">_t</span>].rs;<br>        update(node[<span class="hljs-type">_t</span>].ls, node[t].ls, l, mid, pos, k);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        node[t].ls = node[<span class="hljs-type">_t</span>].ls;<br>        update(node[<span class="hljs-type">_t</span>]).rs, node[t].rs, mid + <span class="hljs-number">1</span>, r, pos, k);<br>    &#125;<br>    node[t].v = node[node[t].ls].v + node[node[t].rs].v;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">SEGTREE::getV</span><span class="hljs-params">(<span class="hljs-type">int</span> t, <span class="hljs-type">int</span> _l, <span class="hljs-type">int</span> _r, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!t) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (l == _l &amp;&amp; r == _r) &#123;<br>        <span class="hljs-keyword">return</span> node[t].v;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (_l + _r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (r &lt;= mid) &#123;<br>        <span class="hljs-keyword">return</span> getV(node[t].ls, _l, mid, l, r);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (l &gt; mid) &#123;<br>        <span class="hljs-keyword">return</span> getV(node[t].rs, mid + <span class="hljs-number">1</span>, _r, l, r);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> getV(node[t].ls, _l, mid, l, mid)<br>            + getV(node[t].rs, mid + <span class="hljs-number">1</span>, _r, mid + <span class="hljs-number">1</span>, r);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="模板题——区间第k小"><a href="#模板题——区间第k小" class="headerlink" title="模板题——区间第k小"></a>模板题——<a href="https://www.lanqiao.cn/problems/1132/learning/">区间第k小</a></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> lc(x) tr[x].l</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rc(x) tr[x].r</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">2e5</span>+<span class="hljs-number">6</span>;<br><span class="hljs-type">int</span> n,m,a[N],b[N];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br> <span class="hljs-type">int</span> l,r,s;<span class="hljs-comment">//左右儿子，该节点在值域中的个数</span><br>&#125;tr[N*<span class="hljs-number">20</span>];<br><span class="hljs-type">int</span> idx,root[N];<br><span class="hljs-type">void</span> <span class="hljs-title function_">build</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;x,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span><br>&#123;<br>    x=++idx;<br>    <span class="hljs-keyword">if</span>(l==r)<span class="hljs-keyword">return</span> ;<br>    <span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    build(lc(x),l,mid);<br>    build(rc(x),mid+<span class="hljs-number">1</span>,r);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> &amp;y,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> v)</span><br>&#123;<br>    y=++idx;<br>    tr[y]=tr[x];<br>    tr[y].s++;<br>    <span class="hljs-keyword">if</span>(l==r)<span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(v&lt;=mid)<br>        update(lc(x),lc(y),l,mid,v);<br>    <span class="hljs-keyword">else</span><br>        update(rc(x),rc(y),mid+<span class="hljs-number">1</span>,r,v);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> k)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(l==r)<span class="hljs-keyword">return</span> l;<br>    <span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> s=tr[lc(y)].s-tr[lc(x)].s;<br>    <span class="hljs-keyword">if</span>(k&lt;=s)<br>        <span class="hljs-keyword">return</span> query(lc(x),lc(y),l,mid,k);<br>    <span class="hljs-keyword">else</span> <br>        <span class="hljs-keyword">return</span> query(rc(x),rc(y),mid+<span class="hljs-number">1</span>,r,k-s);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    ios::sync_with_stdio(<span class="hljs-number">0</span>),<span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>),<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>        b[i]=a[i];<br>    &#125;<br>    sort(b+<span class="hljs-number">1</span>,b+<span class="hljs-number">1</span>+n);<br>    <span class="hljs-type">int</span> bn=unique(b+<span class="hljs-number">1</span>,b+<span class="hljs-number">1</span>+n)-b<span class="hljs-number">-1</span>;<br>    build(root[<span class="hljs-number">0</span>],<span class="hljs-number">1</span>,bn);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> id=lower_bound(b+<span class="hljs-number">1</span>,b+<span class="hljs-number">1</span>+bn,a[i])-b;<br>        update(root[i<span class="hljs-number">-1</span>],root[i],<span class="hljs-number">1</span>,bn,id);<br>    &#125;<br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        <span class="hljs-type">int</span> l,r,k;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;l&gt;&gt;r&gt;&gt;k;<br>        <span class="hljs-type">int</span> id=query(root[l<span class="hljs-number">-1</span>],root[r],<span class="hljs-number">1</span>,bn,k);<br>        <span class="hljs-built_in">cout</span>&lt;&lt;b[id]&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h1><h2 id="单源最短路"><a href="#单源最短路" class="headerlink" title="单源最短路"></a>单源最短路</h2><h3 id="Floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a>Floyd</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526130244161.png" alt="image-20240526130244161"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526130253653.png" alt="image-20240526130253653"></p><h4 id="模板题——-蓝桥公园"><a href="#模板题——-蓝桥公园" class="headerlink" title="模板题—— 蓝桥公园"></a>模板题——<a href="https://www.lanqiao.cn/problems/1121/learning"> 蓝桥公园</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> sys<br><span class="hljs-built_in">input</span>=sys.stdin.readline<br>n,m,q=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>inf=<span class="hljs-built_in">int</span>(<span class="hljs-number">1e18</span>)<br>dp=[[inf]*(n+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>  dp[i][i]=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,m+<span class="hljs-number">1</span>):<br>  u,v,w=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>  dp[u][v]=dp[v][u]=<span class="hljs-built_in">min</span>(dp[u][v],w)<br><span class="hljs-comment">#Floyd 模板</span><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>      dp[i][j]=<span class="hljs-built_in">min</span>(dp[i][j],dp[i][k]+dp[k][j])<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>      <span class="hljs-keyword">if</span> dp[i][j]==inf:<br>        dp[i][j]=-<span class="hljs-number">1</span><br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(q):<br>  s,e=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>  <span class="hljs-built_in">print</span>(dp[s][e])<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># Floyd 算法  多个起点--多个终点  多源最短路算法（多对多）</span><br><span class="hljs-comment"># 最简单的最短路径算法</span><br><span class="hljs-comment"># 存图:最简单的矩阵存图</span><br><span class="hljs-comment"># 效率不高，不能用于大图</span><br><br><span class="hljs-comment"># 动态规划：求图上两点i,j之间的最短距离，按‘从小图到全图’的步骤，在逐步扩大图的过程中计算和更新最短路</span><br><span class="hljs-comment"># 定义状态：dp[k][i][j]: i,j,k是点的编号，范围1--n</span><br><span class="hljs-comment"># 状态dp[k][i][j]表示在包含1--k点的子图上，点对i,j之间的最短路</span><br><span class="hljs-comment"># 状态转移方程 从子图1-k-1 扩展到子图 1-k</span><br><span class="hljs-comment"># dp[k][i][j]=min(dp[k-1][i][j],dp[k-1][i][k]+dp[k-1][k][j])</span><br><span class="hljs-comment"># 初始值：i,j直连 就是他们的边长； 若不直连，赋值为无穷大 / 0x3f3f3f3f3f3f3f3f</span><br><span class="hljs-comment"># 滚动数组优化：dp[i][j]=min(dp[i][j],dp[i][k]+dp[k][j])</span><br><span class="hljs-comment">#                           不经过k     经过k</span><br><span class="hljs-comment"># for k in range(1,n+1):</span><br><span class="hljs-comment"># for i in range(1,n+1):</span><br><span class="hljs-comment"># for j in range(1,n+1):</span><br><span class="hljs-comment"># dp[i][j]=min(dp[i][j],dp[i][k]+dp[k][j])</span><br><span class="hljs-comment"># 只能用于n&lt;300 的小规模图</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">floyd</span>():<br>    <span class="hljs-keyword">global</span> dp<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>                dp[i][j]=<span class="hljs-built_in">min</span>(dp[i][j],dp[i][k]+dp[k][j])<br><span class="hljs-comment"># 蓝桥公园</span><br><span class="hljs-comment"># n个点 m条边 q次查询</span><br>n,m,q=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>INF = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span><br>dp=[[INF <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">50</span>)] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">50</span>)]<br><span class="hljs-comment"># 记录路径</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,m+<span class="hljs-number">1</span>):<br>    u,v,w=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    dp[u][v]=dp[v][u]=<span class="hljs-built_in">min</span>(dp[u][v],w)<br>floyd()<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(q):<br>    start,end=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    <span class="hljs-comment"># 无法到达</span><br>    <span class="hljs-keyword">if</span> dp[start][end]==INF:<br>        <span class="hljs-built_in">print</span>(-<span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># 起点终点相同</span><br>    <span class="hljs-keyword">elif</span> start==end:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(dp[start][end])<br><br><span class="hljs-comment"># 1-12</span><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-comment"># 请在此输入您的代码</span><br>N, M, Q = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>weight = [[<span class="hljs-number">0</span> <span class="hljs-keyword">if</span> i == j <span class="hljs-keyword">else</span> sys.maxsize <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N + <span class="hljs-number">1</span>) ] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N + <span class="hljs-number">1</span>)]  <span class="hljs-comment"># 领接矩阵</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(M):<br>    u, v, w = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    weight[u][v] = <span class="hljs-built_in">min</span>(weight[u][v], w)<br>    weight[v][u] = weight[u][v]<br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, N + <span class="hljs-number">1</span>):  <span class="hljs-comment"># N次递推</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, N + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, N + <span class="hljs-number">1</span>):  <span class="hljs-comment"># 更新最小值</span><br>                weight[i][j] = <span class="hljs-built_in">min</span>(weight[i][j], weight[i][k] + weight[k][j])<br>                weight[j][i] = weight[i][j]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(Q):<br>    st, ed = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    t = weight[st][ed]<br>    <span class="hljs-keyword">if</span> t == sys.maxsize:<br>        <span class="hljs-built_in">print</span>(-<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(t)<br></code></pre></td></tr></table></figure><h4 id="模板题——城市间的交易"><a href="#模板题——城市间的交易" class="headerlink" title="模板题——城市间的交易"></a>模板题——<a href="https://www.lanqiao.cn/problems/8336/learning/">城市间的交易</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-comment"># 请在此输入您的代码</span><br><span class="hljs-comment"># 8336 城市间的交易</span><br>INF =<span class="hljs-number">1e18</span><br>n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br><span class="hljs-comment"># 产量、成本和售价</span><br>a, p, s = [<span class="hljs-number">0</span>] * (n+<span class="hljs-number">1</span>), [<span class="hljs-number">0</span>] * (n+<span class="hljs-number">1</span>), [<span class="hljs-number">0</span>] * (n+<span class="hljs-number">1</span>)<br>f = [[INF] * (n+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br>g = [[<span class="hljs-number">0</span>] * (n+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>):<br>    a[i], p[i], s[i] = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br><span class="hljs-comment"># 邻接矩阵初始化</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, m+<span class="hljs-number">1</span>):<br>    u, v, w = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    f[u][v] = f[v][u] = <span class="hljs-built_in">min</span>(f[u][v], w)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>):<br>    f[i][i] = <span class="hljs-number">0</span><br><br><span class="hljs-comment"># Floyd</span><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>):<br>            f[i][j] = <span class="hljs-built_in">min</span>(f[i][j], f[i][k]+f[k][j])<br><span class="hljs-comment"># g[i][j]表示城市i的物品运输到城市j可得到的利润 = 城市j的售价 - 城市i的成本 - 从i到j的运输成本</span><br>ans = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>):<br>    <span class="hljs-comment"># 求每个城市的利润</span><br>    cnt = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>):<br>        g[i][j] = s[j] - p[i] - f[i][j]<br>        cnt = <span class="hljs-built_in">max</span>(cnt, g[i][j])<br>    ans += a[i] * cnt<br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br>n,m=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>res=[]<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>  a,p,s=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>  res.append((a,p,s))<br>inf=<span class="hljs-built_in">int</span>(<span class="hljs-number">1e10</span>)<br>path=[[inf]*(n+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>  u,v,w=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>  path[u][v]=path[v][u]=<span class="hljs-built_in">min</span>(w,path[u][v])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>+n):<br>  path[i][i]=<span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>      path[i][j]=<span class="hljs-built_in">min</span>(path[i][j],path[i][k]+path[k][j])<br>re=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>  result=<span class="hljs-number">0</span><br>  <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> path[i][j]!=inf:<br>       result=<span class="hljs-built_in">max</span>(result,res[j-<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]*res[i-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]-res[i-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]*res[i-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]-path[i][j]*res[i-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>])<br>  re+=result<br><span class="hljs-built_in">print</span>(re)<br></code></pre></td></tr></table></figure><h2 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h2><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526131011122.png" alt="image-20240526131011122"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526131022596.png" alt="image-20240526131022596"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526131034522.png" alt="image-20240526131034522"></p><h4 id="模板题——蓝桥王国"><a href="#模板题——蓝桥王国" class="headerlink" title="模板题——蓝桥王国"></a>模板题——<a href="https://www.lanqiao.cn/problems/1122/learning">蓝桥王国</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-comment"># 请在此输入您的代码</span><br><span class="hljs-comment"># 1122_蓝桥王国_Dijkstra算法</span><br><span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> PriorityQueue  <span class="hljs-comment"># 导入优先队列</span><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br><br>INF = <span class="hljs-number">1e18</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dijkstra</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-comment"># 返回从s出发到所有点的最短路</span><br>    <span class="hljs-comment"># d[i]表示从s到i的最短路</span><br>    d = [INF] * (n + <span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># vis[i]表示是否出队列（注：与传统BFS不同）</span><br>    vis = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>)<br>    q = PriorityQueue()<br><br>    <span class="hljs-comment"># 1.将起点入队列，更新距离</span><br>    d[s] = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 将距离放在前面，才能对距离使用优先队列</span><br>    q.put((d[s], s))  <span class="hljs-comment"># 入队用put()</span><br>    <span class="hljs-comment"># 当队列非空</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> q.empty():  <span class="hljs-comment"># 或者写为： while len(q.queue) != 0:</span><br>        dis, u = q.get()<br>        <span class="hljs-comment"># 每个点只有第一次出队列是有用的</span><br>        <span class="hljs-keyword">if</span> vis[u]: <span class="hljs-keyword">continue</span><br>        vis[u] = <span class="hljs-number">1</span>  <span class="hljs-comment"># 出队列打标记</span><br>        <span class="hljs-comment"># 对于从u出发，到达v，权重为w的边</span><br>        <span class="hljs-keyword">for</span> v, w <span class="hljs-keyword">in</span> G[u]:<br>            <span class="hljs-keyword">if</span> d[v] &gt; d[u] + w:<br>                d[v] = d[u] + w<br>                q.put((d[v], v))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> d[i] == INF:<br>            d[i] = -<span class="hljs-number">1</span><br>    <span class="hljs-comment"># d.pop(0)</span><br>    <span class="hljs-keyword">return</span> d[<span class="hljs-number">1</span>::] <span class="hljs-comment"># 从1到最后</span><br><br><br><span class="hljs-comment"># 皇宫编号为1</span><br><span class="hljs-comment"># 输入</span><br>n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>G = [[] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)]  <span class="hljs-comment"># 图的存储：邻接表。此题N为10^5，不能用邻接矩阵存图</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    u, v, w = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    G[u].append((v, w))<br><span class="hljs-built_in">print</span>(*dijkstra(<span class="hljs-number">1</span>)) <span class="hljs-comment"># 列表前面加星号作用是将列表解开（unpacke）成多个独立的参数，传入函数。</span><br></code></pre></td></tr></table></figure><h4 id="模板题——混境之地3"><a href="#模板题——混境之地3" class="headerlink" title="模板题——混境之地3"></a>模板题——<a href="https://www.lanqiao.cn/problems/3818/learning">混境之地3</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-comment"># 3818 混境之地  Dijkstra</span><br><span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> PriorityQueue<br><span class="hljs-comment"># 数据较大时可以进行如下优化</span><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-built_in">input</span> = sys.stdin.readline<br>INF = <span class="hljs-number">1e18</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">c</span>):<br>    <span class="hljs-keyword">if</span> c == <span class="hljs-string">&#x27;.&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">else</span>:<br>        s = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>            <span class="hljs-keyword">if</span> c == s[i]:<br>                <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span><br>        <span class="hljs-comment"># return ord(c) - ord(&#x27;A&#x27;) + 1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dijkstra</span>():<br>    d = [[INF] * m <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>    vis = [[<span class="hljs-number">0</span>] * m <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>    q = PriorityQueue()  <span class="hljs-comment"># 创建优先队列</span><br>    <span class="hljs-comment"># 1.将起点塞入队列</span><br>    d[x1][y1] = <span class="hljs-number">0</span><br>    q.put((d[x1][y1], x1, y1))<br>    <span class="hljs-comment"># 2.当队列非空</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> q.empty():<br>        dis, x, y = q.get()<br>        <span class="hljs-keyword">if</span> x == x2 <span class="hljs-keyword">and</span> y == y2:<br>            <span class="hljs-keyword">return</span> dis<br>        <span class="hljs-comment"># 每个点只有第一次出队列是有用的</span><br>        <span class="hljs-keyword">if</span> vis[x][y]:<br>            <span class="hljs-keyword">continue</span><br>        vis[x][y] = <span class="hljs-number">1</span>  <span class="hljs-comment"># 出队列打标记</span><br>        <span class="hljs-keyword">for</span> d elta_x, delta_y <span class="hljs-keyword">in</span> [[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], [-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>]]:<br>            xx, yy = x + delta_x, y + delta_y<br>            <span class="hljs-comment"># 判断未越界、未标记、非障碍物</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-number">0</span> &lt;= xx &lt; n <span class="hljs-keyword">and</span> <span class="hljs-number">0</span> &lt;= yy &lt; m <span class="hljs-keyword">and</span> vis[xx][yy] == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> Map[xx][yy] != <span class="hljs-string">&quot;#&quot;</span>:<br>                <span class="hljs-keyword">if</span> d[xx][yy] &gt; d[x][y] + get(Map[xx][yy]):  <span class="hljs-comment"># 写一个get函数获取权重</span><br>                    d[xx][yy] = d[x][y] + get(Map[xx][yy])<br>                    q.put((d[xx][yy], xx, yy))<br>    <span class="hljs-keyword">return</span> INF<br><span class="hljs-comment"># 输入</span><br>n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())  <span class="hljs-comment"># 地图大小</span><br>x1, y1, x2, y2 = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())  <span class="hljs-comment"># 起始点坐标</span><br>x1, y1, x2, y2 = x1 - <span class="hljs-number">1</span>, y1 - <span class="hljs-number">1</span>, x2 - <span class="hljs-number">1</span>, y2 - <span class="hljs-number">1</span><br><span class="hljs-comment"># 地图</span><br>Map = [<span class="hljs-built_in">input</span>() <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>e = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())  <span class="hljs-comment"># 剩余能量</span><br><span class="hljs-comment"># 如果能量支撑到达终点，返回Yes，否则，返回No.</span><br><span class="hljs-keyword">if</span> e &gt;= dijkstra():  <span class="hljs-comment"># 不传参，使用全局变量</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Yes&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;No&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h2><h3 id="Kruskal"><a href="#Kruskal" class="headerlink" title="Kruskal"></a>Kruskal</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526131621641.png" alt="image-20240526131621641"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526131631028.png" alt="image-20240526131631028"></p><h4 id="模板题——繁忙的都市"><a href="#模板题——繁忙的都市" class="headerlink" title="模板题——繁忙的都市"></a>模板题——<a href="https://www.lanqiao.cn/problems/889/learning">繁忙的都市</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">kruskal</span>():<br>    <span class="hljs-comment"># 初始化</span><br>    n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    Map = []<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>        u, v, w = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>        Map.append([w, u, v])  <span class="hljs-comment"># 注意第一个参数是边权</span><br>    Map.sort()<br><br>    <span class="hljs-comment"># 并查集</span><br>    p = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">root</span>(<span class="hljs-params">x</span>):<br>        <span class="hljs-keyword">if</span> x != p[x]:<br>            p[x] = root(p[x])<br>        <span class="hljs-keyword">return</span> p[x]<br><br>    <span class="hljs-comment"># 非连环时更新</span><br>    _<span class="hljs-built_in">sum</span>, _<span class="hljs-built_in">max</span> = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> w, u, v <span class="hljs-keyword">in</span> Map:<br>        root_u = root(u)<br>        root_v = root(v)<br>        <span class="hljs-keyword">if</span> root_u != root_v:<br>            p[root_u] = root_v<br>            _<span class="hljs-built_in">sum</span> += <span class="hljs-number">1</span><br>            _<span class="hljs-built_in">max</span> = <span class="hljs-built_in">max</span>(_<span class="hljs-built_in">max</span>, w)<br>    <span class="hljs-keyword">return</span> _<span class="hljs-built_in">sum</span>, _<span class="hljs-built_in">max</span><br><span class="hljs-built_in">print</span>(*kruskal())<br></code></pre></td></tr></table></figure><h3 id="Prim"><a href="#Prim" class="headerlink" title="Prim"></a>Prim</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526131818064.png" alt="image-20240526131818064"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526131825567.png" alt="image-20240526131825567"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526131840546.png" alt="image-20240526131840546"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526131848626.png" alt="image-20240526131848626"></p><h4 id="模板题——繁忙的都市-1"><a href="#模板题——繁忙的都市-1" class="headerlink" title="模板题——繁忙的都市"></a>模板题——<a href="https://www.lanqiao.cn/problems/889/learning">繁忙的都市</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br>n,m=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>e=[]<br><span class="hljs-keyword">for</span>  _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>  u,v,w=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>  e.append((w,u,v))<br><span class="hljs-comment">#边按照权重进行排序</span><br>e.sort()<br><span class="hljs-comment">#需要一个并查集</span><br>p=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">findroot</span>(<span class="hljs-params">x</span>):<br>  <span class="hljs-keyword">if</span> x==p[x]:<span class="hljs-keyword">return</span> x<br>  <span class="hljs-keyword">else</span>:<br>    p[x]=findroot(p[x])<br>    <span class="hljs-keyword">return</span> p[x]<br>ans=<span class="hljs-number">0</span><br><span class="hljs-comment">#进行遍历所有的边，进行合并：</span><br><span class="hljs-keyword">for</span> w,u,v <span class="hljs-keyword">in</span> e:<br>  <span class="hljs-comment">#只要u和v不在同一集合内就可以进行合并：</span><br>  rootu=findroot(u)<br>  rootv=findroot(v)<br>  <span class="hljs-keyword">if</span> rootu!=rootv:<br>    p[rootu]=rootv<br>    ans=<span class="hljs-built_in">max</span>(ans,w)<br><span class="hljs-built_in">print</span>(n-<span class="hljs-number">1</span>,ans)<br></code></pre></td></tr></table></figure><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526132045604.png" alt="image-20240526132045604"></p><h2 id="最近共同祖先"><a href="#最近共同祖先" class="headerlink" title="最近共同祖先"></a>最近共同祖先</h2><h4 id="最近公共祖先"><a href="#最近公共祖先" class="headerlink" title="最近公共祖先"></a>最近公共祖先</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526105959804.png" alt="image-20240526105959804"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526110010233.png" alt="image-20240526110010233"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526110018355.png" alt="image-20240526110018355"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526110031858.png" alt="image-20240526110031858"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526110040710.png" alt="image-20240526110040710"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%B8%B8%E8%A7%84%E8%80%83%E7%82%B9%E6%80%BB%E7%BB%93/image-20240526110052606.png" alt="image-20240526110052606"></p><h4 id="模板题——最近公共祖先LCA查询"><a href="#模板题——最近公共祖先LCA查询" class="headerlink" title="模板题——最近公共祖先LCA查询"></a>模板题——<a href="https://www.lanqiao.cn/problems/4385/learning">最近公共祖先LCA查询</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-comment">#设置deep数组表示深度。</span><br><span class="hljs-comment">#front数组，表示节点u,前2**i层的爹是谁？？？</span><br>n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>tree=[[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br>fornt=[[<span class="hljs-number">0</span>]*(<span class="hljs-number">21</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<span class="hljs-comment">#如果你是0你就是孤儿。</span><br>deep=[<span class="hljs-number">0</span>]*(n+<span class="hljs-number">1</span>)<span class="hljs-comment">#0节点没有层数。</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>):<br>  u,v=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>  tree[u].append(v)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">er,die</span>):<br>  <span class="hljs-keyword">if</span> die==<span class="hljs-number">0</span>:<br>    deep[er]=<span class="hljs-number">1</span><span class="hljs-comment">#这是第一层,同时，第一层也没有爹啊，也不需要更新如何层数相关节点。</span><br><br>  <span class="hljs-keyword">else</span>:<br>    deep[er]=deep[die]+<span class="hljs-number">1</span><span class="hljs-comment">#更新层数。</span><br>    fornt[er][<span class="hljs-number">0</span>]=die<span class="hljs-comment">#上一层的点，就是die。</span><br>    <span class="hljs-keyword">for</span> cc <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">21</span>):<br>      <span class="hljs-keyword">if</span> fornt[fornt[er][cc-<span class="hljs-number">1</span>]][cc-<span class="hljs-number">1</span>]!=<span class="hljs-number">0</span>:<br><br>        fornt[er][cc]=fornt[fornt[er][cc-<span class="hljs-number">1</span>]][cc-<span class="hljs-number">1</span>]<br>        <span class="hljs-comment">#倍增法。2**i层之上的点=</span><br>        <span class="hljs-comment">#2**(cc-1)上面的点的上面2**(cc-1)的点。就，无限套娃。</span><br>  <br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tree[er]:<br>    dfs(i,er)<span class="hljs-comment">#儿子变成新的爹。</span><br>dfs(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)<span class="hljs-comment">#儿子是根，爹不存在。</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find</span>(<span class="hljs-params">x,y</span>):<br>  <span class="hljs-comment">#第一步，拉升。将x拉到和y一个水平。一开始走2**20步，太大，就走2**19步，然后走一半，再走一半</span><br>  <span class="hljs-comment">#就像那个乌龟与跑步哥一样。二进制原理使得这个步数遍历后一定是一个高度。</span><br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> deep[fornt[x][i]]&gt;=deep[y] <span class="hljs-keyword">and</span> fornt[x][i]!=<span class="hljs-number">0</span>:<br>      x=fornt[x][i]<span class="hljs-comment">#自动判断能走不能走，能走则走一大步。x提升到别的节点。</span><br><br>  <span class="hljs-comment">#此时提升必定一样了。</span><br>  <span class="hljs-keyword">if</span> x==y:<br>    <span class="hljs-keyword">return</span> x<span class="hljs-comment">#原来你就是我爹！</span><br>  <br>  <span class="hljs-keyword">else</span>:<span class="hljs-comment">#不是？我们再度提升吧！神明！</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>      <span class="hljs-keyword">if</span> fornt[x][i]!=fornt[y][i] <span class="hljs-keyword">and</span> fornt[x][i]!=<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> fornt[y][i]!=<span class="hljs-number">0</span>:<span class="hljs-comment">#相等反而不能决定什么，因为可能不是最近的公共祖先</span><br>        x=fornt[x][i]<br>        y=fornt[y][i]<br>    <span class="hljs-keyword">return</span> fornt[y][<span class="hljs-number">0</span>]<span class="hljs-comment">#最后，y上面的就是自己的公共祖先。</span><br>q=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(q):<br>  x,y=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>  <span class="hljs-keyword">if</span> deep[x]&lt;deep[y]:<span class="hljs-comment">#我们设x是深节点。</span><br>    x,y=y,x<br>  <span class="hljs-built_in">print</span>(find(x,y))<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;动态规划&quot;&gt;&lt;a href=&quot;#动态规划&quot; class=&quot;headerlink&quot; title=&quot;动态规划&quot;&gt;&lt;/a&gt;动态规划&lt;/h1&gt;&lt;h2 id=&quot;基础DP&quot;&gt;&lt;a href=&quot;#基础DP&quot; class=&quot;headerlink&quot; title=&quot;基础DP&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="刷题" scheme="http://zdx-1.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="蓝桥国赛" scheme="http://zdx-1.github.io/categories/%E5%88%B7%E9%A2%98/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B/"/>
    
    
    <category term="蓝桥杯" scheme="http://zdx-1.github.io/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯国赛试题解析</title>
    <link href="http://zdx-1.github.io/2024/05/26/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9B%BD%E8%B5%9B%E8%AF%95%E9%A2%98%E8%A7%A3%E6%9E%90/"/>
    <id>http://zdx-1.github.io/2024/05/26/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9B%BD%E8%B5%9B%E8%AF%95%E9%A2%98%E8%A7%A3%E6%9E%90/</id>
    <published>2024-05-26T11:02:40.000Z</published>
    <updated>2024-05-30T04:21:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第十四届Python大学C组"><a href="#第十四届Python大学C组" class="headerlink" title="第十四届Python大学C组"></a>第十四届Python大学C组</h1><h2 id="跑步计划"><a href="#跑步计划" class="headerlink" title="跑步计划"></a><a href="https://www.lanqiao.cn/problems/17113/learning">跑步计划</a></h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>小蓝计划在某天的日期中出现 $1$ 时跑 $5$ 千米，否则只跑 $1$ 千米。注意日期中出现 $1$ 不仅指年月日也指星期。</p><p>请问按照小蓝的计划，$2023$ 年小蓝总共会跑步锻炼多少千米?例如，$5$ 月 $1$ 日、$1$ 月 $13$ 日、$11$ 月 $5$ 日、$4$ 月 $3$ 日 (星期一) 小蓝会跑 $5$ 千米，而 $5$ 月 $23$ 日小蓝会跑 $1$ 千米 (示例日期均为 $2023$ 年)</p><h3 id="答案提交"><a href="#答案提交" class="headerlink" title="答案提交"></a>答案提交</h3><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h3 id="运行限制"><a href="#运行限制" class="headerlink" title="运行限制"></a>运行限制</h3><table><thead><tr><th>语言</th><th>最大运行时间</th><th>最大运行内存</th></tr></thead><tbody><tr><td>C++</td><td>1s</td><td>256M</td></tr><tr><td>C</td><td>1s</td><td>256M</td></tr><tr><td>Java</td><td>2s</td><td>256M</td></tr><tr><td>Python3</td><td>3s</td><td>256M</td></tr><tr><td>PyPy3</td><td>3s</td><td>256M</td></tr><tr><td>Go</td><td>3s</td><td>256M</td></tr><tr><td>JavaScript</td><td>3s</td><td>256M</td></tr></tbody></table><p>总通过次数: 714  |  总提交次数: 778  |  通过率: 91.8%</p><p>难度: 中等   标签: 2023, 国赛, 日期问题</p><p>版权声明</p><p>部分题目由用户贡献，若您是著作权持有人，请与我们联系。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime<br>bt = datetime.date(<span class="hljs-number">2023</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>c = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">366</span>):<br>    bt += datetime.timedelta(days=<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">in</span> bt.isoformat() <span class="hljs-keyword">or</span> bt.isoweekday() == <span class="hljs-number">1</span>:<br>        c += <span class="hljs-number">5</span><br>    <span class="hljs-keyword">else</span>:<br>        c += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(c)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">sun = <span class="hljs-number">0</span><br><span class="hljs-keyword">import</span> datetime<br>a = datetime.date(<span class="hljs-number">2023</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">366</span>):<br>  <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">in</span> a.strftime(<span class="hljs-string">&quot;%m%d%w&quot;</span>) :sun+=<span class="hljs-number">4</span><br>  sun+=<span class="hljs-number">1</span><br>  a += datetime.timedelta(days = <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(sun)<br></code></pre></td></tr></table></figure><h2 id="混乘数字"><a href="#混乘数字" class="headerlink" title="混乘数字"></a><a href="https://www.lanqiao.cn/problems/17121/learning">混乘数字</a></h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>混乘数字的定义如下: 对于一个正整数 $n$，如果存在正整数 $a, b$，使得 $n &#x3D; a \times b$，而且 $a$ 和 $b$ 的十进制数位中每个数字出现的次数之和与 $n$ 中对应数字出现次数相同，则称 $n$ 为混乘数字。</p><p>例如，对于正整数 $n &#x3D; 126$，存在 $a &#x3D; 6$, $b &#x3D; 21$ 满足条件，因此 $126$ 是一个混乘数字。</p><p>又如，对于正整数 $n &#x3D; 180225$，存在 $a &#x3D; 225$, $b &#x3D; 801$ 满足条件，因此 $180225$ 是一个混乘数字。</p><p>请你帮助计算出，$1 \sim 1000000$ (含)之间一共有多少个数字是混乘数字。</p><h3 id="答案提交-1"><a href="#答案提交-1" class="headerlink" title="答案提交"></a>答案提交</h3><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h3 id="运行限制-1"><a href="#运行限制-1" class="headerlink" title="运行限制"></a>运行限制</h3><table><thead><tr><th>语言</th><th>最大运行时间</th><th>最大运行内存</th></tr></thead><tbody><tr><td>C++</td><td>1s</td><td>256M</td></tr><tr><td>C</td><td>1s</td><td>256M</td></tr><tr><td>Java</td><td>2s</td><td>256M</td></tr><tr><td>Python3</td><td>5s</td><td>256M</td></tr><tr><td>PyPy3</td><td>5s</td><td>256M</td></tr><tr><td>Go</td><td>5s</td><td>256M</td></tr><tr><td>JavaScript</td><td>5s</td><td>256M</td></tr></tbody></table><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict<br><span class="hljs-comment"># 混乘数字：</span><br><span class="hljs-comment"># 条件1：a * b == n</span><br><span class="hljs-comment"># 条件2：a、b一定是n的因子</span><br><span class="hljs-comment"># 条件3：且a、b中各个数字出现次数 == n中各个数字出现次数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">isHunc</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;返回True代表是混乘数字&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 1. 求n中每个数字出现次数</span><br>    nums = defaultdict(<span class="hljs-built_in">int</span>)<br>    <span class="hljs-keyword">for</span> kwd <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>(<span class="hljs-built_in">str</span>(n)):<br>        nums[kwd] += <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 2. 开启暴力美学</span><br>    <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">int</span>(math.sqrt(n)) + <span class="hljs-number">1</span>):    <span class="hljs-comment"># 两个因子相乘，绝对有一个因子&lt;= 开平方后的值</span><br>        <span class="hljs-comment"># 判断是否符合条件1、2</span><br>        <span class="hljs-keyword">if</span> n % a == <span class="hljs-number">0</span>:<br>            b = n // a<br>            <span class="hljs-comment"># 判断是否符合条件3</span><br>            <span class="hljs-keyword">if</span> cnt_dy(a, b, nums):<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cnt_dy</span>(<span class="hljs-params">a, b, nums</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;符合条件3 返回 True&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># nums是可变对象，形参改变实参也会改变，我们需要将他的值复制，这样才不对原始数据造成更改</span><br>    now = nums.copy()<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(a):<br>        now[k] -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> now[k] &lt; <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(b):<br>        now[k] -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> now[k] &lt; <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-comment"># 判断字典中是否还有值</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">sum</span>(now.values()) != <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>ans = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">125</span>, <span class="hljs-number">1000001</span>):<br>     <span class="hljs-keyword">if</span> isHunc(i):<br>         ans += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> math<br>count=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1000001</span>):<br>  <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-built_in">int</span>(math.sqrt(i))+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> i % j == <span class="hljs-number">0</span>:<br>      <span class="hljs-keyword">if</span> <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">str</span>(i)) == <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">str</span>(j)+<span class="hljs-built_in">str</span>(i//j)):<br>        count += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">break</span><br>  <span class="hljs-keyword">if</span> i % <span class="hljs-number">100000</span> == <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(i,count)<br><span class="hljs-built_in">print</span>(count)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">590</span>)<br></code></pre></td></tr></table></figure><h2 id="整数变换"><a href="#整数变换" class="headerlink" title="整数变换"></a><a href="https://www.lanqiao.cn/problems/17151/learning">整数变换</a></h2><h3 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h3><p>小蓝有一个整数 $n$。每分钟，小蓝的数都会发生变化，变为上一分钟的数减去上一分钟的数的各个数位和。</p><p>例如，如果小蓝开始时的数为 $23$，则下一分钟变为 $23 − (2 + 3) &#x3D; 18$，再下一分钟变为 $18 − (1 + 8) &#x3D; 9$，再下一分钟变为 $9 − 9 &#x3D; 0$，共经过了 $3$ 分钟变为 $0$。</p><p>给定一个正整数，请问这个数多少分钟后变为 $0$。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入一行包含一个整数 $n$。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出一个整数，表示答案。</p><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">23<br></code></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3<br></code></pre></td></tr></table></figure><h3 id="评测用例规模与约定"><a href="#评测用例规模与约定" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h3><p>对于 $30%$ 的评测用例，$1 ≤ n ≤ 1000$;</p><p>对于 $60%$ 的评测用例，$1 ≤ n ≤ 10^6$;</p><p>对于所有评测用例，$1 ≤ n ≤ 10^9$。</p><h3 id="运行限制-2"><a href="#运行限制-2" class="headerlink" title="运行限制"></a>运行限制</h3><table><thead><tr><th>语言</th><th>最大运行时间</th><th>最大运行内存</th></tr></thead><tbody><tr><td>C++</td><td>1s</td><td>256M</td></tr><tr><td>C</td><td>1s</td><td>256M</td></tr><tr><td>Java</td><td>2s</td><td>256M</td></tr><tr><td>Python3</td><td>3s</td><td>256M</td></tr><tr><td>PyPy3</td><td>3s</td><td>256M</td></tr><tr><td>Go</td><td>3s</td><td>256M</td></tr><tr><td>JavaScript</td><td>3s</td><td>256M</td></tr></tbody></table><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>这道题目需要使用pypy3，否则会超时</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py">n = <span class="hljs-built_in">input</span>()<br>int_n = <span class="hljs-built_in">int</span>(n)<br>ans = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> int_n &gt; <span class="hljs-number">0</span>:<br>    s = <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">list</span>(<span class="hljs-built_in">str</span>(int_n))))<br>    int_n -= s<br>    ans += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a><a href="https://www.lanqiao.cn/problems/17115/learning">定时任务</a></h2><h3 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h3><p>Cron 表达式在定时任务中经常被使用，在这里我们用了一种简化后的版本 SimpleCron 表达式：SimpleCron 表达式是一个具有时间含义的字符串，字符串以 $4$ 个空格隔开，分为 $5$ 个域，格式为 $X X X X X$，其中 $X$ 是一个域的占位符。$5$ 个域从左至右依次为秒 $(0 - 59)$、分钟 $(0 - 59)$、小时 $(0 - 23)$、日期 $(1 - 31)$、月份 $(1 - 12)$，其中括号内为他们各自的取值范围。同时域内取值也可以使用一些特殊字符（每个域内只能使用一种特殊字符）:</p><ol><li>特殊字符 $*$ （ASCII 码为 $42$）表示所有可能的值。例如：在分钟域内表示每一分钟；在日期域内表示月内的每一天。</li><li>特殊字符 $,$ （ASCII 码为 $44$）表示列出枚举值。例如：在秒域内，$3,20$ 表示分别在 $3$ 秒和 $20$ 秒执行一次任务。</li><li>特殊字符 $-$ （ASCII 码为 $45$）表示范围，可以视为连续的若干个枚举值。例如：$1-5$ 等价于 $1,2,3,4,5$。</li></ol><p>例如，$4 2 1,3,15 1-31 *$ 表示的含义是每个月份中的每一天中的 $01:02:04$、$03:02:04$、$15:02:04$ 这三个时刻各执行一次，在 $2023$ 年一共会执行 $1095$ 次。</p><p>现在给出你一个合法的 SimpleCron 表达式，其中用到的所有数字均没有前导零。请问在 $2023$ 一整年当中，使用了这个表达式的定时任务总计会执行多少次?</p><h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入一行，包含一个 SimpleCron 字符串。</p><h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出一行，包含一个整数表示答案。</p><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h3><p><span>4 </span><span>2</span> <span>1</span>,<span>3</span>,<span>15</span> <span>1</span>-<span>31</span> *</p><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h3><p><span>1095</span></p><h3 id="评测用例规模与约定-1"><a href="#评测用例规模与约定-1" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h3><p>对于所有评测用例，$0 ≤$ 秒域的取值 $≤ 59$，$0 ≤$ 分钟域的取值 $≤ 59$，$0 ≤$ 小时域的取值 $≤ 23$，$1 ≤$ 日期域的取值 $≤ 31$，$1 ≤$ 月份域的取值 $≤ 12$。</p><h3 id="运行限制-3"><a href="#运行限制-3" class="headerlink" title="运行限制"></a>运行限制</h3><table><thead><tr><th>语言</th><th>最大运行时间</th><th>最大运行内存</th></tr></thead><tbody><tr><td>C++</td><td>1s</td><td>256M</td></tr><tr><td>C</td><td>1s</td><td>256M</td></tr><tr><td>Java</td><td>2s</td><td>256M</td></tr><tr><td>Python3</td><td>3s</td><td>256M</td></tr><tr><td>PyPy3</td><td>3s</td><td>256M</td></tr><tr><td>Go</td><td>3s</td><td>256M</td></tr><tr><td>JavaScript</td><td>3s</td><td>256M</td></tr></tbody></table><p>总通过次数: 181  |  总提交次数: 251  |  通过率: 72.1%</p><p>难度: 中等   标签: 2023, 国赛, 日期问题</p><p>版权声明</p><p>部分题目由用户贡献，若您是著作权持有人，请与我们联系。</p><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> datetime<br><br>time = <span class="hljs-built_in">input</span>().split()<br>a = [[<span class="hljs-number">0</span>, <span class="hljs-number">59</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">59</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">23</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">31</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">12</span>]]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>): <span class="hljs-comment"># 先得到对应时间点，哪些时间有任务</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;*&#x27;</span> <span class="hljs-keyword">in</span> time[i]:<br>        time[i] = <span class="hljs-built_in">range</span>(a[i][<span class="hljs-number">0</span>], a[i][<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;-&#x27;</span> <span class="hljs-keyword">in</span> time[i]:<br>        l, r = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, time[i].split(<span class="hljs-string">&#x27;-&#x27;</span>))<br>        time[i] = <span class="hljs-built_in">range</span>(l, r + <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;,&#x27;</span> <span class="hljs-keyword">in</span> time[i]:<br>        time[i] = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, time[i].split(<span class="hljs-string">&#x27;,&#x27;</span>)))<br>    <span class="hljs-keyword">else</span>:<br>        time[i] = [<span class="hljs-built_in">int</span>(time[i])]<br><br>s, f, h, d, m = time<br><br>days = <span class="hljs-built_in">len</span>(s) * <span class="hljs-built_in">len</span>(f) * <span class="hljs-built_in">len</span>(h) <span class="hljs-comment">#一天的任务次数可以直接求得</span><br><br>start = datetime.date(<span class="hljs-number">2023</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>end = datetime.date(<span class="hljs-number">2024</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>t = datetime.timedelta(days=<span class="hljs-number">1</span>)<br><br>cnt = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> start &lt; end: <span class="hljs-comment">#按天遍历</span><br>    _, M, D = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">str</span>(start).split(<span class="hljs-string">&#x27;-&#x27;</span>))<br><br>    <span class="hljs-keyword">if</span> M <span class="hljs-keyword">in</span> m <span class="hljs-keyword">and</span> D <span class="hljs-keyword">in</span> d:<span class="hljs-comment">#满足累加每天的任务</span><br>        cnt += days<br>    start += t<br><br><span class="hljs-built_in">print</span>(cnt)<br></code></pre></td></tr></table></figure><h2 id="2023"><a href="#2023" class="headerlink" title="2023"></a><a href="https://www.lanqiao.cn/problems/17116/learning">2023</a></h2><h3 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h3><p>给定 $n$, $m$，请求出所有 $n$ 位十进制整数中有多少个数中恰好出现了 $m$ 个 $2023$。</p><p>例如 $00202312023$ 是一个 $11$ 位的出现了 $2$ 个 $2023$ 的十进制整数。由于结果可能很大，请输出答案对 $998244353$ 取模的结果。</p><h3 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入一行包含两个整数 $n$, $m$，用一个空格分隔。</p><h3 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出一行包含一个整数表示答案。</p><h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h3><p><span>5 </span><span>1</span></p><h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">20<br></code></pre></td></tr></table></figure><h3 id="评测用例规模与约定-2"><a href="#评测用例规模与约定-2" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h3><p>对于 $40%$ 的评测用例，$n ≤ 10^5$，$m ≤ 10$；</p><p>对于所有评测用例，$4 ≤ n ≤ 10^5$，$0 ≤ 4m ≤ n$。</p><h3 id="运行限制-4"><a href="#运行限制-4" class="headerlink" title="运行限制"></a>运行限制</h3><table><thead><tr><th>语言</th><th>最大运行时间</th><th>最大运行内存</th></tr></thead><tbody><tr><td>C++</td><td>1s</td><td>256M</td></tr><tr><td>C</td><td>1s</td><td>256M</td></tr><tr><td>Java</td><td>2s</td><td>256M</td></tr><tr><td>Python3</td><td>3s</td><td>256M</td></tr><tr><td>PyPy3</td><td>3s</td><td>256M</td></tr><tr><td>Go</td><td>3s</td><td>256M</td></tr><tr><td>JavaScript</td><td>3s</td><td>256M</td></tr></tbody></table><p>总通过次数: 34  |  总提交次数: 232  |  通过率: 14.7%</p><p>难度: 中等   标签: 2023, 国赛, 排列组合, 二项式定理</p><p>版权声明</p><p>部分题目由用户贡献，若您是著作权持有人，请与我们联系。</p><h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">quickpow</span>(<span class="hljs-params">a, n, mod</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    快速幂算法，计算 a 的 n 次幂对 mod 取模的结果</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    ans = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> n:<br>        <span class="hljs-keyword">if</span> n &amp; <span class="hljs-number">1</span>:<br>            ans = ans * a % mod<br>        a = a * a % mod<br>        n &gt;&gt;= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> ans<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">C</span>(<span class="hljs-params">m, n, fact, inv, mod</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    计算组合数 C(m, n) % mod 的值</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> fact[n] * inv[m] % mod * inv[n - m] % mod<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fact_init</span>(<span class="hljs-params">mod</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    初始化阶乘数组和逆元数组</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    fact = [<span class="hljs-number">0</span>] * (<span class="hljs-number">100001</span>)<br>    inv = [<span class="hljs-number">0</span>] * (<span class="hljs-number">100001</span>)<br>    fact[<span class="hljs-number">0</span>] = inv[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100001</span>):<br>        fact[i] = fact[i - <span class="hljs-number">1</span>] * i % mod<br>        inv[i] = inv[i - <span class="hljs-number">1</span>] * quickpow(i, mod - <span class="hljs-number">2</span>, mod) % mod<br>    <span class="hljs-keyword">return</span> fact, inv<br><br><br>n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>k = n // <span class="hljs-number">4</span><br>ans = <span class="hljs-number">0</span><br>mod = <span class="hljs-number">998244353</span><br>fact, inv = fact_init(mod)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m, k + <span class="hljs-number">1</span>):<br>    ans += (-<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> (i - m) % <span class="hljs-number">2</span> <span class="hljs-keyword">else</span> <span class="hljs-number">1</span>) * C(m, i, fact, inv, mod) * C(i, n - <span class="hljs-number">3</span> * i, fact, inv, mod) * quickpow(<span class="hljs-number">10</span>, n - <span class="hljs-number">4</span> * i, mod)<br>    ans %= mod<br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9B%BD%E8%B5%9B%E8%AF%95%E9%A2%98%E8%A7%A3%E6%9E%90/uid2479109-20240516-1715843529436.png" alt="二项式反演"></p><h2 id="最大算式"><a href="#最大算式" class="headerlink" title="最大算式"></a><a href="https://www.lanqiao.cn/problems/17129/learning">最大算式</a></h2><h3 id="问题描述-5"><a href="#问题描述-5" class="headerlink" title="问题描述"></a>问题描述</h3><p>给定 $n$ 个非负整数 $A_i$ ，你可以在不改变这些数顺序的前提下任意在他们之间插入 $+,*,(,)$ 四种符号 。</p><p>请问在得到的算式合法的前提下，算式的结果最大可以是多少?</p><p>由于结果很大，你只需要输出答案对 $10^9+7$ 取模的结果即可。</p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入的第一行包含一个整数 $n$ 。</p><p>第二行包含 $n$ 个整数，分别表示 $A_1, A_2, \cdots, A_n$ ，相邻两个整数之间使用一个空格分隔。</p><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出一行包含一个整数表示答案。</p><h3 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">7 1 2 1 1 1 2 1<br></code></pre></td></tr></table></figure><h3 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">27<br></code></pre></td></tr></table></figure><h3 id="样例说明"><a href="#样例说明" class="headerlink" title="样例说明"></a>样例说明</h3><p>$(1+2)\times(1+1+1)\times(2+1)&#x3D;27$ .</p><h3 id="评测用例规模"><a href="#评测用例规模" class="headerlink" title="评测用例规模"></a>评测用例规模</h3><p>对于 $40%$ 的评测用例， $n \leq 5000$ ；</p><p>对于所有评测用例， $1 \leq n \leq 10^5$ ， $0 \leq A_i \leq 10^9$ 。</p><h3 id="运行限制-5"><a href="#运行限制-5" class="headerlink" title="运行限制"></a>运行限制</h3><table><thead><tr><th>语言</th><th>最大运行时间</th><th>最大运行内存</th></tr></thead><tbody><tr><td>C++</td><td>1s</td><td>256M</td></tr><tr><td>C</td><td>1s</td><td>256M</td></tr><tr><td>Java</td><td>2s</td><td>256M</td></tr><tr><td>Python3</td><td>3s</td><td>256M</td></tr><tr><td>PyPy3</td><td>3s</td><td>256M</td></tr><tr><td>Go</td><td>3s</td><td>256M</td></tr><tr><td>JavaScript</td><td>3s</td><td>256M</td></tr></tbody></table><p>总通过次数: 22  |  总提交次数: 38  |  通过率: 57.9%</p><p>难度: 中等   标签: 2023, 贪心, 国赛, 数学</p><p>版权声明</p><p>部分题目由用户贡献，若您是著作权持有人，请与我们联系。</p><h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">if</span> m[i]==<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">if</span> s[-<span class="hljs-number">1</span>]==<span class="hljs-number">2</span>:<br>            s[-<span class="hljs-number">1</span>]+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> s[-<span class="hljs-number">1</span>]&gt;m[i+<span class="hljs-number">1</span>] <span class="hljs-keyword">and</span> m[i+<span class="hljs-number">1</span>]!=<span class="hljs-number">0</span>:<br>            m[i+<span class="hljs-number">1</span>]+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            s[-<span class="hljs-number">1</span>]+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        s.append(m[i])<br>n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>m=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>s=[]<br><span class="hljs-keyword">if</span> m[<span class="hljs-number">0</span>]==<span class="hljs-number">1</span>:<br>    m[<span class="hljs-number">1</span>]+=<span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>    s.append(m[<span class="hljs-number">0</span>])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n-<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> m[i]!=<span class="hljs-number">0</span>:<br>        find(i)<br><span class="hljs-keyword">if</span> m[-<span class="hljs-number">1</span>]==<span class="hljs-number">1</span>:<br>    s[-<span class="hljs-number">1</span>]+=<span class="hljs-number">1</span><br><span class="hljs-keyword">elif</span> m[-<span class="hljs-number">1</span>]!=<span class="hljs-number">0</span>:<br>    s.append(m[-<span class="hljs-number">1</span>])<br>k=<span class="hljs-number">1</span><br>num=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> s:<br>    k=k*j<br>num+=k<br><span class="hljs-built_in">print</span>(num%<span class="hljs-number">1000000007</span>)<br></code></pre></td></tr></table></figure><h2 id="躲炮弹"><a href="#躲炮弹" class="headerlink" title="躲炮弹"></a><a href="https://www.lanqiao.cn/problems/17123/learning/">躲炮弹</a></h2><h3 id="问题描述-6"><a href="#问题描述-6" class="headerlink" title="问题描述"></a>问题描述</h3><p>小蓝正在玩一个躲炮弹的游戏。游戏中有一个人物和一个炮塔，它们的初始距离为 $n$。</p><p>炮塔可能选择在区间 $[L, R]$ 上的任意一个整数 $x$，然后发射的炮弹会飞向小蓝操控的人物。但炮弹只会在飞出 $x$ 的倍数的距离($x, 2x, 3x, \ldots$)时落地，然后弹回到空中。如果小蓝操控的人物恰好站在了炮弹落地的位置，那么游戏就会结束。</p><p>小蓝只能在炮弹发射前移动他的人物，每移动一步，可以使得人物和炮塔的距离增加 $1$ 或者减少 $1$。他想知道最少要移动多少步才能保证自己的人物一定能躲过炮弹。</p><h3 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入一行包含三个整数 $n, L, R$，相邻的整数之间使用一个空格分隔。</p><h3 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出一行包含一个整数，表示小蓝操纵的人物最少需要移动的步数。</p><h3 id="样例输入-4"><a href="#样例输入-4" class="headerlink" title="样例输入"></a>样例输入</h3><p><span>10 </span><span>2</span> <span>13</span></p><h3 id="样例输出-4"><a href="#样例输出-4" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">7<br></code></pre></td></tr></table></figure><h3 id="评测用例规模与约定-3"><a href="#评测用例规模与约定-3" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h3><p>对于 $40%$ 的评测用例，$n, L, R \leq 10^6$；</p><p>对于所有评测用例，$1 \leq n, L, R \leq 10^9$，$2 \leq L \leq R$。</p><h3 id="运行限制-6"><a href="#运行限制-6" class="headerlink" title="运行限制"></a>运行限制</h3><table><thead><tr><th>语言</th><th>最大运行时间</th><th>最大运行内存</th></tr></thead><tbody><tr><td>C++</td><td>1s</td><td>256M</td></tr><tr><td>C</td><td>1s</td><td>256M</td></tr><tr><td>Java</td><td>2s</td><td>256M</td></tr><tr><td>Python3</td><td>3s</td><td>256M</td></tr><tr><td>PyPy3</td><td>3s</td><td>256M</td></tr><tr><td>Go</td><td>3s</td><td>256M</td></tr><tr><td>JavaScript</td><td>3s</td><td>256M</td></tr></tbody></table><p>总通过次数: 38  |  总提交次数: 94  |  通过率: 40.4%</p><p>难度: 中等   标签: 2023, 国赛, 质因子分解</p><p>版权声明</p><p>部分题目由用户贡献，若您是著作权持有人，请与我们联系。</p><h3 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python">n, L, R = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">case 1: ans在n的右边 或者就是n</span><br><span class="hljs-string">case 2: n大于R ans在n-1到R+1之间</span><br><span class="hljs-string">case 3: ans在l-1这个位置</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># 找出当前数的所有质因数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pr_</span>(<span class="hljs-params">xx</span>):<br>    pr = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-built_in">int</span>(xx ** <span class="hljs-number">0.5</span>) + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">while</span> xx % i == <span class="hljs-number">0</span>:<br>            pr.append(i)<br>            xx //= i<br>    <span class="hljs-keyword">if</span> xx &gt; <span class="hljs-number">1</span>: pr.append(xx)<br>    <span class="hljs-keyword">return</span> pr<br><span class="hljs-comment"># 如果当前x是质数或者x除以x的质因子的值小于low 则当前位置是安全位置</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">judge</span>(<span class="hljs-params">x, low</span>):<br>    nums = pr_(x)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(nums) == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> x<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> nums:<br>            <span class="hljs-comment"># 安全位置一定满足这一个条件 但是满足条件的不一定是安全位置</span><br>            <span class="hljs-comment"># 但我们可以保证最近的一个安全位置的前面一定不存在错误位置</span><br>            <span class="hljs-keyword">if</span> x // j &lt; low:<br>                <span class="hljs-keyword">return</span> x<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>ans = <span class="hljs-number">0</span><br><span class="hljs-comment"># case 1</span><br>res = <span class="hljs-built_in">max</span>(R + <span class="hljs-number">1</span>, n)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    new_seat = judge(res, L)<br>    <span class="hljs-keyword">if</span> new_seat != -<span class="hljs-number">1</span>:<br>        ans = res - n<br>        <span class="hljs-keyword">break</span><br>    res += <span class="hljs-number">1</span><br><span class="hljs-comment"># case 2</span><br>res = n - <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> res &gt; R:<br>    new_seat = judge(res, L)<br>    <span class="hljs-keyword">if</span> new_seat != -<span class="hljs-number">1</span>:<br>        ans = <span class="hljs-built_in">min</span>(n - res, ans)<br>        <span class="hljs-keyword">break</span><br>    res -= <span class="hljs-number">1</span><br><span class="hljs-comment"># case 3 and 1, 2</span><br><span class="hljs-comment"># 如果n在L的特别左边是会返回负数的 所以要特判</span><br><span class="hljs-keyword">if</span> n &lt; L:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;0&#x27;</span>)<br><span class="hljs-keyword">elif</span> n == L:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;1&#x27;</span>)<br><span class="hljs-keyword">else</span>:  <br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">min</span>(n - L + <span class="hljs-number">1</span>, ans))<br></code></pre></td></tr></table></figure><h2 id="走方格"><a href="#走方格" class="headerlink" title="走方格"></a><a href="https://www.lanqiao.cn/problems/17118/learning/">走方格</a></h2><h3 id="问题描述-7"><a href="#问题描述-7" class="headerlink" title="问题描述"></a>问题描述</h3><p>给定一个 $N$ 行 $N$ 列的方格，第 $i$ 行第 $j$ 列的方格坐标为 $(i, j)$，高度为 $H_{i, j}$。小蓝从左上角坐标 $(0, 0)$ 出发，目的地是右下角坐标 $(N - 1, N - 1)$。</p><p>当小蓝位于第 $r$ 行第 $c$ 列时，他有如下的移动方式:</p><ol><li>若 $r + 1 &lt; N$，可以移动到 $(r + 1, c)$，花费 $1$ 秒;</li><li>若 $c + 1 &lt; N$，可以移动到 $(r, c + 1)$，花费 $1$ 秒;</li><li>对于任意整数 $L$，若 $H_{r,c} &gt; H_{r,c+1} &gt; \dots &gt; H_{r,c+L}$，可以移动到 $(r, c + L)$，花费 $1$ 秒;</li><li>对于任意整数 $L$，若 $H_{r,c} &gt; H_{r,c-1} &gt; \dots &gt; H_{r,c-L}$，可以移动到 $(r, c - L)$，花费 $1$ 秒。</li></ol><p>现在给出方格，请问小蓝从 $(0, 0)$ 移动到 $(N - 1, N - 1)$ 最少需要多少秒?</p><h3 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入的第一行包含一个整数 $N$ 表示方格大小。</p><p>接下来 $N$ 行，每行包含 $N$ 个整数，表示每个方格上的数字。</p><h3 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出一个整数表示答案。</p><h3 id="样例输入-5"><a href="#样例输入-5" class="headerlink" title="样例输入"></a>样例输入</h3><p><span>4</span><br><span>0 </span><span>1</span> <span>9</span> <span>3</span><br><span>2 </span><span>9</span> <span>3</span> <span>7</span><br><span>8 </span><span>4</span> <span>8</span> <span>9</span><br><span>9 </span><span>8</span> <span>0</span> <span>7</span></p><h3 id="样例输出-5"><a href="#样例输出-5" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">5<br></code></pre></td></tr></table></figure><h3 id="样例说明-1"><a href="#样例说明-1" class="headerlink" title="样例说明"></a>样例说明</h3><p>移动顺序为: $(0,0) \rightarrow (1,0) \rightarrow (2,0) \rightarrow (3,0) \rightarrow (3,2) \rightarrow (3,3)$，其中坐标 $(3,0)$、$(3,1)$、$(3,2)$ 处的数字分别为 $9 &gt; 8 &gt; 0$，所以可以花费 $1$ 秒从 $(3,0)$ 移动到 $(3, 2)$。</p><h3 id="评测用例规模与约定-4"><a href="#评测用例规模与约定-4" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h3><p>对于 $20%$ 的评测用例，$1 \leq N \leq 10$；</p><p>对于 $50%$ 的评测用例，$1 \leq N \leq 100$；</p><p>对于所有评测用例，$1 \leq N \leq 1000$，$0 \leq H_{i,j} \leq 100$。</p><h3 id="运行限制-7"><a href="#运行限制-7" class="headerlink" title="运行限制"></a>运行限制</h3><table><thead><tr><th>语言</th><th>最大运行时间</th><th>最大运行内存</th></tr></thead><tbody><tr><td>C++</td><td>1s</td><td>256M</td></tr><tr><td>C</td><td>1s</td><td>256M</td></tr><tr><td>Java</td><td>3s</td><td>256M</td></tr><tr><td>Python3</td><td>5s</td><td>256M</td></tr><tr><td>PyPy3</td><td>5s</td><td>256M</td></tr><tr><td>Go</td><td>5s</td><td>256M</td></tr><tr><td>JavaScript</td><td>5s</td><td>256M</td></tr></tbody></table><h3 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># 请在此输入您的代码</span><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>nums = [[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n) ]<br>f = [[inf <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>  nums[i] = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br><span class="hljs-comment">#可以倒着走</span><br>f[n-<span class="hljs-number">1</span>][n] = -<span class="hljs-number">1</span><br>f[n][n-<span class="hljs-number">1</span>] = -<span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>  <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>    <span class="hljs-comment">#先更新自己</span><br>    f[i][j] = <span class="hljs-built_in">min</span>(f[i][j],f[i+<span class="hljs-number">1</span>][j]+<span class="hljs-number">1</span>,f[i][j+<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment">#然后更新捷径，要连续大于两个的才算捷径</span><br>    <span class="hljs-comment">#看横向有无捷径,跳过你左边的,i不变</span><br>    <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(j,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>      <span class="hljs-keyword">if</span> l-<span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> nums[i][l-<span class="hljs-number">1</span>] &gt; nums[i][l]:<br>        f[i][l-<span class="hljs-number">1</span>] = <span class="hljs-built_in">min</span>(f[i][l-<span class="hljs-number">1</span>],f[i][j] +<span class="hljs-number">1</span>)<br>      <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-comment">#看纵向有无捷径，j不变</span><br>    <span class="hljs-comment"># for r in range(i,-1,-1):</span><br>    <span class="hljs-comment">#   if r-1 &gt;= 0 and nums[r-1][j] &gt; nums[r][j]:</span><br>    <span class="hljs-comment">#     f[r-1][j] = min(f[r-1][j],f[i][j] +1)</span><br>    <span class="hljs-comment">#   else:</span><br>    <span class="hljs-comment">#     break</span><br><br><span class="hljs-built_in">print</span>(f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br>n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>mp=[<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>inf=<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br>dp=[[<span class="hljs-number">0</span>]*n <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)] <span class="hljs-comment">#到x,y花费的最少步数</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    dp[i][<span class="hljs-number">0</span>]=i <span class="hljs-comment">#第i行第一个数为i</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n):<br>        dp[i][j]=inf<br>        <span class="hljs-keyword">if</span> i&gt;<span class="hljs-number">0</span>:<br>            dp[i][j]=<span class="hljs-built_in">min</span>(dp[i][j],dp[i-<span class="hljs-number">1</span>][j]+<span class="hljs-number">1</span>) <span class="hljs-comment">#从上往下走一格</span><br>            <br>        k=j<br>        <span class="hljs-keyword">while</span> mp[i][k]&lt;mp[i][k-<span class="hljs-number">1</span>] <span class="hljs-keyword">and</span> k&gt;=<span class="hljs-number">1</span>:<br>            dp[i][j]=<span class="hljs-built_in">min</span>(dp[i][j],dp[i][k-<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>) <span class="hljs-comment">#从左往右走，且判断是否满足题目第三个条件</span><br>            k-=<span class="hljs-number">1</span><br>            <br>        dp[i][j]=<span class="hljs-built_in">min</span>(dp[i][j],dp[i][j-<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>) <span class="hljs-comment">#从左往右走一格</span><br><br><span class="hljs-built_in">print</span>(dp[-<span class="hljs-number">1</span>][-<span class="hljs-number">1</span>])<br><br><span class="hljs-comment">#题目第四个条件会增加步数，不能减少，会多走一步</span><br></code></pre></td></tr></table></figure><h2 id="等腰三角形"><a href="#等腰三角形" class="headerlink" title="等腰三角形"></a><a href="https://www.lanqiao.cn/problems/17131/learning/">等腰三角形</a></h2><h3 id="问题描述-8"><a href="#问题描述-8" class="headerlink" title="问题描述"></a>问题描述</h3><p>给定一个包含 $n$ 个数的序列 $A_i$ ，每次操作可以选择其中任意一个数将其 $+1$ 或 $-1$ 。</p><p>我们要让这个序列满足能够从中任选三个数，这三个数对应长度的三条边总能组成一个等腰三角形。问最少需要多少次操作才能让序列满足条件。</p><h3 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入的第一行包含一个整数 $n$ 。</p><p>第二行包含 $n$ 个整数，分别表示 $A_1, A_2, \cdots, A_n$ ，相邻两个整数之间使用一个空格分隔。</p><h3 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出一行包含一个整数，表示最少的操作次数。</p><h3 id="样例输入-6"><a href="#样例输入-6" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">5 3 3 5 7 7<br></code></pre></td></tr></table></figure><h3 id="样例输出-6"><a href="#样例输出-6" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">3<br></code></pre></td></tr></table></figure><h3 id="样例说明-2"><a href="#样例说明-2" class="headerlink" title="样例说明"></a>样例说明</h3><p>将原序列修改为 $4,4,4,7,7$ 即可。</p><h3 id="评测用例规模-1"><a href="#评测用例规模-1" class="headerlink" title="评测用例规模"></a>评测用例规模</h3><p>对于 $40%$ 的评测用例， $n \leq 5000$ ， $A_i \leq 5000$ ；</p><p>对于 $70%$ 的评测用例， $n \leq 2\times 10^5$ ， $A_i \leq 10^6$ ；</p><p>对于所有评测用例， $1 \leq n \leq 2\times 10^5$ ， $1 \leq A_i \leq 10^9$ 。w</p><h3 id="运行限制-8"><a href="#运行限制-8" class="headerlink" title="运行限制"></a>运行限制</h3><table><thead><tr><th>语言</th><th>最大运行时间</th><th>最大运行内存</th></tr></thead><tbody><tr><td>C++</td><td>1s</td><td>256M</td></tr><tr><td>C</td><td>1s</td><td>256M</td></tr><tr><td>Java</td><td>2s</td><td>256M</td></tr><tr><td>Python3</td><td>3s</td><td>256M</td></tr><tr><td>PyPy3</td><td>3s</td><td>256M</td></tr><tr><td>Go</td><td>3s</td><td>256M</td></tr><tr><td>JavaScript</td><td>3s</td><td>256M</td></tr></tbody></table><p>总通过次数: 7  |  总提交次数: 69  |  通过率: 10.1%</p><p>难度: 中等   标签: 2023, 国赛, 数学, 分类讨论</p><p>版权声明</p><p>部分题目由用户贡献，若您是著作权持有人，请与我们联系。</p><h2 id="单词分类"><a href="#单词分类" class="headerlink" title="单词分类"></a><a href="https://www.lanqiao.cn/problems/17126/learning/">单词分类</a></h2><h3 id="问题描述-9"><a href="#问题描述-9" class="headerlink" title="问题描述"></a>问题描述</h3><p>在遥远的 $\text{LQ}$ 国，只存在三种字符：$\text{l、q }$和 $\text{b}$ (ASCII 码分别为 $108、113、98$)，所有的单词都由这三种字符组合而来。小蓝为了更加快速的记忆单词，决定将词典上所有的单词按照单词前缀将其分为 $K$ 类，具体的要求是:</p><ol><li>选出 $K$ 个不同的单词前缀作为 $K$ 类；</li><li>对于字典上的每个单词，只能属于 $K$ 类中的某一个类，不能同时属于多个类；</li><li>对于 $K$ 类中的每个类，至少包含有一个单词。</li></ol><p>现在已知字典上一共有 $N$ 个单词，小蓝想要知道将这 $N$ 个单词按照上述要求分为 $K$ 类，一共有多少种不同的方案。两个方案不同指的是两个方案各自选出的 $K$ 个单词前缀不完全相同。答案可能过大，所以你需要将答案对 $1000000007$ (即 $10^9 + 7$)取模后输出。</p><h3 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入的第一行包含两个整数 $N$ 和 $K$；</p><p>接下来 $N$ 行，每行包含一个单词，由 $\text{l、q、b}$ 三种字符组成。</p><h3 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出一个整数表示答案。答案可能很大，请输出答案对 $1000000007$ 取模的值。</p><h3 id="样例输入-7"><a href="#样例输入-7" class="headerlink" title="样例输入"></a>样例输入</h3><p><span>4</span> <span>2</span><br><span>lqb</span><br><span>lql</span><br><span>qqq</span><br><span>qql</span></p><h3 id="样例输出-7"><a href="#样例输出-7" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">4<br></code></pre></td></tr></table></figure><h3 id="样例说明-3"><a href="#样例说明-3" class="headerlink" title="样例说明"></a>样例说明</h3><p>方案 1：$\text{l&#x3D;lqb,lql、q&#x3D;qqq,qql}$; 方案 2：$\text{lq&#x3D;lqb,lql、q&#x3D;qqq,qql}$; 方案 3：$\text{l&#x3D;lqb,lql、qq&#x3D;qqq,qql}$; 方案 4：$\text{lq&#x3D;lqb,lql、qq&#x3D;qqq,qql}$。</p><p>以方案 1 为例，他表示选出的两类对应的前缀分别是 $\text{l}$ 和 $text{q}$，属于前缀 $\text{l}$ 的单词有 $\text{lqb、lql}$，属于前缀 $\text{q}$ 的单词有 $\text{qqq、qql}$，方案 1 将四个单词按照前缀分成了两类，且每类至少包含一个单词，每个单词仅属于一类，所以方案 1 满足题意。</p><h3 id="评测用例规模与约定-5"><a href="#评测用例规模与约定-5" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h3><p>对于 $30%$ 的评测用例，$1 \leq N \leq 10$，$1 \leq K \leq 5$；</p><p>对于 $50%$ 的评测用例，$1 \leq N \leq 50$，$1 \leq K \leq 10$；</p><p>对于所有评测用例，$1 \leq N \leq 200$，$1 \leq K \leq 100$，$1 \leq$ 单词长度 $\leq 10$。</p><h3 id="运行限制-9"><a href="#运行限制-9" class="headerlink" title="运行限制"></a>运行限制</h3><table><thead><tr><th>语言</th><th>最大运行时间</th><th>最大运行内存</th></tr></thead><tbody><tr><td>C++</td><td>1s</td><td>256M</td></tr><tr><td>C</td><td>1s</td><td>256M</td></tr><tr><td>Java</td><td>2s</td><td>256M</td></tr><tr><td>Python3</td><td>3s</td><td>256M</td></tr><tr><td>PyPy3</td><td>3s</td><td>256M</td></tr><tr><td>Go</td><td>3s</td><td>256M</td></tr><tr><td>JavaScript</td><td>3s</td><td>256M</td></tr></tbody></table><p>总通过次数: 9  |  总提交次数: 28  |  通过率: 32.1%</p><p>难度: 中等   标签: 2023, 字典树, 国赛, 动态规划</p><p>版权声明</p><p>部分题目由用户贡献，若您是著作权持有人，请与我们联系。</p><h1 id="第十四届Python大学B组"><a href="#第十四届Python大学B组" class="headerlink" title="第十四届Python大学B组"></a>第十四届Python大学B组</h1><h2 id="弹珠堆放"><a href="#弹珠堆放" class="headerlink" title="弹珠堆放"></a><a href="https://www.lanqiao.cn/problems/17142/learning/">弹珠堆放</a></h2><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9B%BD%E8%B5%9B%E8%AF%95%E9%A2%98%E8%A7%A3%E6%9E%90/icon-menu-official.a857849-1716821316470-29.png"></p><p>题解</p><p>(89)</p><h3 id="问题描述-10"><a href="#问题描述-10" class="headerlink" title="问题描述"></a>问题描述</h3><p>小蓝有 20230610 颗磁力弹珠，他对金字塔形状尤其感兴趣，如下图所示：</p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9B%BD%E8%B5%9B%E8%AF%95%E9%A2%98%E8%A7%A3%E6%9E%90/uid1882407-20231023-1698049339195.png" alt="图片描述"></p><p>高度为 $1$ 的金字塔需要 $1$ 颗弹珠；</p><p>高度为 $2$ 的金字塔需要 $4$ 颗弹珠；</p><p>高度为 $3$ 的金字塔需要 $10$ 颗弹珠；</p><p>高度为 $4$ 的金字塔需要 $20$ 颗弹珠。</p><p>小蓝想要知道用他手里的弹珠可以摆出的最高的金字塔的高度是多少？</p><h3 id="答案提交-2"><a href="#答案提交-2" class="headerlink" title="答案提交"></a>答案提交</h3><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h3 id="运行限制-10"><a href="#运行限制-10" class="headerlink" title="运行限制"></a>运行限制</h3><table><thead><tr><th>语言</th><th>最大运行时间</th><th>最大运行内存</th></tr></thead><tbody><tr><td>C++</td><td>1s</td><td>256M</td></tr><tr><td>C</td><td>1s</td><td>256M</td></tr><tr><td>Java</td><td>2s</td><td>256M</td></tr><tr><td>Python3</td><td>3s</td><td>256M</td></tr><tr><td>PyPy3</td><td>3s</td><td>256M</td></tr><tr><td>Go</td><td>3s</td><td>256M</td></tr><tr><td>JavaScript</td><td>3s</td><td>256M</td></tr></tbody></table><p>总通过次数: 723  |  总提交次数: 767  |  通过率: 94.3%</p><p>难度: 中等   标签: 2023, 前缀和, 国赛</p><p>版权声明</p><p>部分题目由用户贡献，若您是著作权持有人，请与我们联系。</p><h3 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br>n=<span class="hljs-number">20230610</span><br>dp=[<span class="hljs-number">1</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">500</span>):<br>    num=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,i+<span class="hljs-number">1</span>):<br>      num+=j<br>    dp.append(num+dp[i-<span class="hljs-number">2</span>])<br><br><span class="hljs-keyword">for</span> i,j <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(dp):<br>  <span class="hljs-keyword">if</span> n&gt;dp[i]:<br>    <span class="hljs-keyword">continue</span><br>  <span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(i)<br>    <span class="hljs-keyword">break</span><br> <span class="hljs-built_in">print</span>(<span class="hljs-number">494</span>)<br></code></pre></td></tr></table></figure><h2 id="划分"><a href="#划分" class="headerlink" title="划分"></a><a href="https://www.lanqiao.cn/problems/17143/learning/">划分</a></h2><h3 id="问题描述-11"><a href="#问题描述-11" class="headerlink" title="问题描述"></a>问题描述</h3><p>给定 $40$ 个数，请将其任意划分成两组，每组至少一个元素。每组的权值为组内所有元素的和。划分的权值为两组权值的乘积。请问对于以下 $40$ 个数，划分的权值最大为多少。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">5160 9191 6410 4657 7492 1531 8854 1253 4520 9231 1266 4801 3484 4323 5070 1789 2744 5959 9426 4433 4404 5291 2470 8533 7608 2935 8922 5273 8364 8819 7374 8077 5336 8495 5602 6553 3548 5267 9150 3309<br></code></pre></td></tr></table></figure><p>在试题包中有一个名为 \verb|nums.txt| 的文本文件，文件中的数与题面上的数相同。</p><h3 id="答案提交-3"><a href="#答案提交-3" class="headerlink" title="答案提交"></a>答案提交</h3><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h3 id="运行限制-11"><a href="#运行限制-11" class="headerlink" title="运行限制"></a>运行限制</h3><table><thead><tr><th>语言</th><th>最大运行时间</th><th>最大运行内存</th></tr></thead><tbody><tr><td>C++</td><td>1s</td><td>256M</td></tr><tr><td>C</td><td>1s</td><td>256M</td></tr><tr><td>Java</td><td>2s</td><td>256M</td></tr><tr><td>Python3</td><td>3s</td><td>256M</td></tr><tr><td>PyPy3</td><td>3s</td><td>256M</td></tr><tr><td>Go</td><td>3s</td><td>256M</td></tr><tr><td>JavaScript</td><td>3s</td><td>256M</td></tr></tbody></table><p>总通过次数: 186  |  总提交次数: 248  |  通过率: 75%</p><p>难度: 中等   标签: 2023, 国赛, 动态规划, 背包问题</p><p>版权声明</p><p>部分题目由用户贡献，若您是著作权持有人，请与我们联系。</p><h3 id="解题思路-9"><a href="#解题思路-9" class="headerlink" title="解题思路"></a>解题思路</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#根据题意可知分成两个集合的权值差要最小</span><br><span class="hljs-comment">#可以看成背包问题，背包大小为所有元素和的一半，最后看背包装了多少</span><br>ss = <span class="hljs-string">&quot;&quot;&quot;5160 9191 6410 4657 7492 1531 8854 1253 4520 9231 1266 4801 3484 4323 5070 1789 2744 5959 9426 4433 4404 5291 2470 8533 7608 2935 8922 5273 8364 8819 7374 8077 5336 8495 5602 6553 3548 5267 9150 3309&quot;&quot;&quot;</span><br>nums = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, ss.split(<span class="hljs-string">&quot; &quot;</span>)))<br>bag = <span class="hljs-built_in">sum</span>(nums) // <span class="hljs-number">2</span><br>n = <span class="hljs-number">40</span><br>dp = [[<span class="hljs-number">0</span>] * (bag + <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>    cur = nums[i - <span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, bag + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> j - cur &gt;= <span class="hljs-number">0</span>:<br>            dp[i][j] = <span class="hljs-built_in">max</span>(dp[i - <span class="hljs-number">1</span>][j - cur] + cur, dp[i - <span class="hljs-number">1</span>][j])<br><br>a = <span class="hljs-built_in">max</span>(dp[<span class="hljs-number">40</span>])<br>b = <span class="hljs-built_in">sum</span>(nums) - a<br><span class="hljs-built_in">print</span>(a * b)<br></code></pre></td></tr></table></figure><h2 id="偶串"><a href="#偶串" class="headerlink" title="偶串"></a><a href="https://www.lanqiao.cn/problems/17144/learning/">偶串</a></h2><h3 id="问题描述-12"><a href="#问题描述-12" class="headerlink" title="问题描述"></a>问题描述</h3><p>小蓝特别喜欢偶数，当他看到字符串时，他总数要检查一下是不是每种字符都是出现偶数次。给定一个字符串，请帮助小蓝检查一下该字符串是否满足要求。</p><h3 id="输入描述-2"><a href="#输入描述-2" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入一行包含一个字符串，由小写英文字母组成。</p><h3 id="输出描述-2"><a href="#输出描述-2" class="headerlink" title="输出描述"></a>输出描述</h3><p>如果字符串中的每种字符都是出现偶数次，输出大写英文单词 $\verb|YES|$ ，否则输出大写英文单词 $\verb|NO|$ 。</p><h3 id="样例输入-8"><a href="#样例输入-8" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">banana<br></code></pre></td></tr></table></figure><h3 id="样例输出-8"><a href="#样例输出-8" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">NO<br></code></pre></td></tr></table></figure><h3 id="样例输入-9"><a href="#样例输入-9" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">bbnana<br></code></pre></td></tr></table></figure><h3 id="样例输出-9"><a href="#样例输出-9" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">YES<br></code></pre></td></tr></table></figure><h3 id="评测用例规模-2"><a href="#评测用例规模-2" class="headerlink" title="评测用例规模"></a>评测用例规模</h3><p>对于 $50%$ 的评测用例， $1\le$ 字符串长度 $\le 1000$；</p><p>对于所有评测用例，$1\le$ 字符串长度 $\le 10^6$ 。</p><h3 id="运行限制-12"><a href="#运行限制-12" class="headerlink" title="运行限制"></a>运行限制</h3><table><thead><tr><th>语言</th><th>最大运行时间</th><th>最大运行内存</th></tr></thead><tbody><tr><td>C++</td><td>1s</td><td>256M</td></tr><tr><td>C</td><td>1s</td><td>256M</td></tr><tr><td>Java</td><td>2s</td><td>256M</td></tr><tr><td>Python3</td><td>3s</td><td>256M</td></tr><tr><td>PyPy3</td><td>3s</td><td>256M</td></tr><tr><td>Go</td><td>3s</td><td>256M</td></tr><tr><td>JavaScript</td><td>3s</td><td>256M</td></tr></tbody></table><p>总通过次数: 386  |  总提交次数: 429  |  通过率: 90%</p><p>难度: 中等   标签: 2023, 国赛, 语法</p><p>版权声明</p><p>部分题目由用户贡献，若您是著作权持有人，请与我们联系。</p><h3 id="解题思路-10"><a href="#解题思路-10" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="常规思路"><a href="#常规思路" class="headerlink" title="常规思路"></a>常规思路</h4><p>直接模拟直接求</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Counter<br><br>s = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">input</span>())<br>d = Counter(s)<br>mark = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> d.items():<br>    <span class="hljs-keyword">if</span> v % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>:<br>        mark = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;YES&quot;</span> <span class="hljs-keyword">if</span> mark == <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;NO&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="使用异或"><a href="#使用异或" class="headerlink" title="使用异或"></a>使用异或</h4><p>根据异或的性质我们可以知道：任意两个相同的数异或的值为0，故偶数个相同的数异或的值也是0</p><p>所以最后我们走一遍循环，最后异或值只要为0那说明所有数字出现的次数为偶数次，反之则存在一个数字出现了奇数次</p><p>最后由于异或只能在数字之间，所以我们用字符的ascii码(ord)来代表这个字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">ans = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">input</span>():<br>    ans ^= <span class="hljs-built_in">ord</span>(i)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;NO&quot;</span> <span class="hljs-keyword">if</span> ans <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;YES&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="交易账本"><a href="#交易账本" class="headerlink" title="交易账本"></a><a href="https://www.lanqiao.cn/problems/17145/learning/">交易账本</a></h2><h3 id="问题描述-13"><a href="#问题描述-13" class="headerlink" title="问题描述"></a>问题描述</h3><p>小蓝最近研发了一种新的记账方式，并邀请了一些用户参加测试。交易账本可以看作是交易记录的集合，每条交易记录都有着一个独一无二的交易编号 $txId$ （编号大小反映了交易记录产生的时间顺序， $txId$ 小的交易记录先发生于 $txId$ 大的交易记录），每条交易记录包含一个或多个输入信息以及一个或多个输出信息。</p><p>其中输入来自于已经发生过的某比交易的某个输出，可以理解为这笔钱从某比交易输出后继续输入到了当前这比交易中，输入信息主要包含以下数据：$fromTxId$、$fromTxOutNumber$ ，这表示当前输入来自于交易编号为 $fromTxId$ 的第 $fromTxOutNumber$ $(fromTxOutNumber&#x3D;0,1,2,\cdots )$ 个输出；输出信息主要包含以下数据：$account$、$val$ ，表示将 $val$ 数目的钱转移到了账户编号为 $account$ 的账户上。注意，当 $fromTxId$ 和 $fromTxOutNumber$ 都为 $-1$ 时，表明这是一笔特殊交易，由系统账户直接产生输出，特殊交易只含有一个输入和一个输出，可以认为系统账户拥有无限多数目的钱，特殊交易一定可以成功。</p><p>一个合法的账本应满足以下条件：1）对于每笔交易记录，所有的输入中涉及到的钱的总数目应和所有输出中钱的总数目相等；2）交易中的一个输出要么不使用，要使用的话输出中的钱应该全部分配给下一个输入，而不能分配给多个输入（特殊交易除外）；3）交易按照顺序进行，不可以在某比交易中引用还未发生的交易。</p><p>现在已知一共有 $N$ 个不同的账户，初始时所有账户钱数目都为 $0$ ，账本上总计有 $M$ 条交易记录（按照交易完成的顺序进行记录），请你来判断下账本上的记录是否是合法的。</p><h3 id="输入描述-3"><a href="#输入描述-3" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入的第一行包含一个整数 $T$ ，表示有 $T$ 组输入数据。</p><p>对于每组输入数据：</p><p>第一行包含两个整数 $N,M$ ，用一个空格分隔，分别表示账户的数目和账本的交易记录数目，其中账户编号为 $0,1,2,\cdots,N-1$ ，交易记录编号为 $0,1,2,\cdots ,M-1$ 。</p><p>接下来 $M$ 行，每行包含一条交易记录的信息，交易记录编号依次为 $0, 1, 2, \cdots, M-1$ 。第一个整数 $inCount$ 表示输入的个数，接下来包含 $inCount$ 个输入信息，每个输入信息包含 $fromTxId$ 和 $fromTxOutNumber$ 两个整数；接下来包含一个整数 $outCount$ 表示输出的个数，然后接着包含 $outCount$ 个输出信息，每个输出信息包含 $account$ 和 $val$ 两个整数。</p><h3 id="输出描述-3"><a href="#输出描述-3" class="headerlink" title="输出描述"></a>输出描述</h3><p>对于每组输入数据输出一行，如果账本记录合法则输出英文单词 $\verb|YES|$ ，否则输出英文单词 $\verb|NO|$。</p><h3 id="样例输入-10"><a href="#样例输入-10" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs text">4<br>3 3<br>1 -1 -1 1 0 100<br>1 0 0 2 1 50 2 50<br>2 1 0 1 1 1 2 100<br>3 3<br>1 -1 -1 1 0 100<br>1 0 0 2 1 50 2 50<br>2 1 0 1 1 1 2 150<br>3 3<br>1 -1 -1 1 0 100<br>1 0 0 2 1 50 2 50<br>3 0 0 1 0 1 1 1 2 200<br>3 3<br>1 -1 -1 1 0 100<br>2 0 0 2 0 2 1 100 2 100<br>1 -1 -1 1 2 100<br></code></pre></td></tr></table></figure><h3 id="样例输出-10"><a href="#样例输出-10" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">YES NO NO NO<br></code></pre></td></tr></table></figure><h3 id="样例说明-4"><a href="#样例说明-4" class="headerlink" title="样例说明"></a>样例说明</h3><p>对于第一个数据：第一条交易 $(txId&#x3D;0)$ 为特殊交易，给账户 $0$ 转入了 $100$；第二条交易 $(txId&#x3D;1)$ 将上一条交易的唯一一个输出作为当前交易的输入，有两个输出，分别给账户 $1$ 和 $2$ 转入了 $50$ ；最后一条交易 $(txId&#x3D;2)$ 将上一条交易的两个输出作为当前交易的输入，给账户 $2$ 转入了 $100$ 。</p><p>对于第二个数据，第三条交易中输入与输出总额不相等。</p><p>对于第三个数据，第一条交易中的输出被使用了超过一次。</p><p>对于第四个数据，第二条交易中引用了还未发生的交易的输出。</p><h3 id="评测用例规模-3"><a href="#评测用例规模-3" class="headerlink" title="评测用例规模"></a>评测用例规模</h3><p>对于所有评测用例， $1\le T\le 10$ ， $1\le N\le 100$ ， $1\le M\le 1000$ ， $1\le inCount, outCount\le 100$ ， $1\le$ 交易中涉及到钱的数目$\le 10000$ ， $0\le account\le N-1$ ， $0\le fromTxId\le M-1$ 。</p><h3 id="运行限制-13"><a href="#运行限制-13" class="headerlink" title="运行限制"></a>运行限制</h3><table><thead><tr><th>语言</th><th>最大运行时间</th><th>最大运行内存</th></tr></thead><tbody><tr><td>C++</td><td>1s</td><td>256M</td></tr><tr><td>C</td><td>1s</td><td>256M</td></tr><tr><td>Java</td><td>2s</td><td>256M</td></tr><tr><td>Python3</td><td>3s</td><td>256M</td></tr><tr><td>PyPy3</td><td>3s</td><td>256M</td></tr><tr><td>Go</td><td>3s</td><td>256M</td></tr><tr><td>JavaScript</td><td>3s</td><td>256M</td></tr></tbody></table><h3 id="解题思路-11"><a href="#解题思路-11" class="headerlink" title="解题思路"></a>解题思路</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os<br>read=sys.stdin.readline<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">judge</span>():<br>    n,m=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br><span class="hljs-comment">#    print(f&#x27;n=&#123;n&#125;,&#123;m&#125;&#x27;)</span><br>    vis=[[<span class="hljs-number">0</span>]*m <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m)]<br>    flag=<span class="hljs-literal">True</span><br>    <span class="hljs-keyword">for</span> idx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>        record=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,read().split()))<br>        money=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>*record[<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>,<span class="hljs-number">2</span>):<br>            <span class="hljs-keyword">if</span> record[i]==-<span class="hljs-number">1</span>:<br>                money=<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">if</span> vis[record[i]][record[i+<span class="hljs-number">1</span>]]==<span class="hljs-number">0</span>:<br>                    flag=<span class="hljs-literal">False</span><br>                <span class="hljs-keyword">else</span>:<br>                    money+=vis[record[i]][record[i+<span class="hljs-number">1</span>]]<br>                    vis[record[i]][record[i+<span class="hljs-number">1</span>]]=<span class="hljs-number">0</span><br>        out=<span class="hljs-number">2</span>*record[<span class="hljs-number">0</span>]+<span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(out+<span class="hljs-number">2</span>,<span class="hljs-built_in">len</span>(record),<span class="hljs-number">2</span>):<br>            j=(i-out)//<span class="hljs-number">2</span>-<span class="hljs-number">1</span><br><span class="hljs-comment">#            print(f&#x27;out=&#123;out&#125;,i=&#123;i&#125;,j=&#123;j&#125;&#x27;)</span><br>            vis[idx][j]=record[i]<br>            <span class="hljs-keyword">if</span> money!=<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>):<br>                money-=record[i]<br>        <span class="hljs-keyword">if</span> money!=<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>) <span class="hljs-keyword">and</span> money!=<span class="hljs-number">0</span>:<br>            flag=<span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;YES&#x27;</span> <span class="hljs-keyword">if</span> flag==<span class="hljs-literal">True</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;NO&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    t=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t):<br>        <span class="hljs-built_in">print</span>(judge())<br>    <span class="hljs-keyword">return</span><br><br>main()<br></code></pre></td></tr></table></figure><h2 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a><a href="https://www.lanqiao.cn/problems/17146/learning/">背包问题</a></h2><h3 id="问题描述-14"><a href="#问题描述-14" class="headerlink" title="问题描述"></a>问题描述</h3><p>小蓝是一位狂热的积木爱好者，家里堆满了自己用积木组装的建筑模型。最近，有两款新出的积木组件上市，小蓝自然不会错过，他带上了自己的三个背包来到了积木商城，打算将尽可能多的积木组件带回家，每个背包都有一个固定的空间大小。小蓝只会购买这两种新出的积木组件 $A$ 和 $B$ ， $A$ 和 $B$ 各自会占用背包的一部分空间，但对于同一种类型的积木占用的空间是相同的。小蓝想知道自己最多能带走多少数量的积木组件。</p><p>可以认为小蓝有足够的货币，只要背包可以装下的积木他都有能力购买。商场内的积木数量也是有限制的。</p><h3 id="输入描述-4"><a href="#输入描述-4" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入的第一行包含一个整数 $T$ ，表示有 $T$ 组独立的询问。</p><p>每一组询问由三行组成。</p><p>每组询问的第一行包含三个整数 $B_1, B_2, B_3$ ，相邻的整数之间使用一个空格分隔，表示三个背包的空间大小。</p><p>每组询问的第二行包含两个整数 $cnt_A, cnt_B$ ，用一个空格分隔，分别表示商场内积木组件 $A$ 和 $B$ 的总量。</p><p>每组询问的第三行包含两个整数 $V_A, V_B$ ，用一个空格分隔，分别表示每个积木组件 $A$ 和 $B$ 所占用的空间大小。</p><h3 id="输出描述-4"><a href="#输出描述-4" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出 $T$ 行，每行包含一个整数表示答案。</p><h3 id="样例输入-11"><a href="#样例输入-11" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">3 2 2 3 1 2 1 2 3 8 3 3 4 4 2 6 8 7 10 10 5 1<br></code></pre></td></tr></table></figure><h3 id="样例输出-11"><a href="#样例输出-11" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">3 5 12<br></code></pre></td></tr></table></figure><h3 id="样例说明-5"><a href="#样例说明-5" class="headerlink" title="样例说明"></a>样例说明</h3><p>对于第一组询问，第一个背包装一个 B 积木，无剩余空间；第二个背包装一个 B 积木，无剩余空间；第三个背包装一个 A 积木，剩余 2 空间，但积木已经没有了；最终答案是 $3$ ，可以带走所有的积木。</p><p>对于第二组询问，第一个背包和第三个背包各自装一个 B 组件，第二个背包装两个 B 组件和一个 A 组件，答案是 $5$ 。</p><p>对于第三组询问，第一个背包：1A+1B；第二个背包：8B；第三个背包：1A+1B。答案是 $12$ 。</p><h3 id="评测用例规模-4"><a href="#评测用例规模-4" class="headerlink" title="评测用例规模"></a>评测用例规模</h3><p>对于 $30%$ 的评测用例， $1\le cnt_A,cnt_B\le 100$ ；</p><p>对于所有评测用例， $1\le T\le 100$ ， $1\le B_1,B_2,B_3\le 10^9$ ， $1\le V_A,V_B\le 10^9$ ， $1\le cnt_A,cnt_B\le 1,000$ 。</p><h3 id="运行限制-14"><a href="#运行限制-14" class="headerlink" title="运行限制"></a>运行限制</h3><table><thead><tr><th>语言</th><th>最大运行时间</th><th>最大运行内存</th></tr></thead><tbody><tr><td>C++</td><td>1s</td><td>256M</td></tr><tr><td>C</td><td>1s</td><td>256M</td></tr><tr><td>Java</td><td>2s</td><td>256M</td></tr><tr><td>Python3</td><td>3s</td><td>256M</td></tr><tr><td>PyPy3</td><td>3s</td><td>256M</td></tr><tr><td>Go</td><td>3s</td><td>256M</td></tr><tr><td>JavaScript</td><td>3s</td><td>256M</td></tr></tbody></table><h3 id="解题思路-12"><a href="#解题思路-12" class="headerlink" title="解题思路"></a>解题思路</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve</span>():<br>    a = LII()  <span class="hljs-comment"># 3个背包</span><br>    A, B = MII()  <span class="hljs-comment"># 1e3</span><br>    va, vb = MII()<br>    <span class="hljs-keyword">if</span> va &gt; vb:<br>        va, vb = vb, va<br>        A, B = B, A<br>    res = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">min</span>(A, a[<span class="hljs-number">0</span>] // va) + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">min</span>(A - i, a[<span class="hljs-number">1</span>] // va) + <span class="hljs-number">1</span>):<br>            cnta, cntb = A, B<br>            mx1 = <span class="hljs-built_in">min</span>((a[<span class="hljs-number">0</span>] - i * va) // vb, cntb)  <span class="hljs-comment"># 更新B的剩余数量</span><br>            cntb -= mx1<br>            mx2 = <span class="hljs-built_in">min</span>((a[<span class="hljs-number">1</span>] - j * va) // vb, cntb)<br>            cntb -= mx2<br>            t = i + j + mx1 + mx2   <span class="hljs-comment"># B1和B2的数量和</span><br>            leftA = cnta - i - j<br>            mi = <span class="hljs-built_in">min</span>(leftA, a[<span class="hljs-number">2</span>] // va)  <span class="hljs-comment"># B3最多能装多少个A</span><br>            left_v = a[<span class="hljs-number">2</span>] - mi * va<br>            t += mi + <span class="hljs-built_in">min</span>(left_v // vb, cntb)  <span class="hljs-comment"># 剩下的装B</span><br>            res = <span class="hljs-built_in">max</span>(res, t)<br>    <span class="hljs-built_in">print</span>(res)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 1多组数据，0单组数据</span><br>    t = <span class="hljs-number">1</span> <br>    <span class="hljs-keyword">if</span> t:<br>        t = II()<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t):<br>            solve()<br>    <span class="hljs-keyword">else</span>:<br>        solve()<br></code></pre></td></tr></table></figure><h2 id="翻转"><a href="#翻转" class="headerlink" title="翻转"></a><a href="https://www.lanqiao.cn/problems/18427/learning/">翻转</a></h2><h3 id="问题描述-15"><a href="#问题描述-15" class="headerlink" title="问题描述"></a>问题描述</h3><p>小蓝制作了 $n$ 个工件，每个工件用一个由小写英文字母组成的，长度为 $2$ 的字符串表示，第 $i$ 个工件表示为 $s_i$ 。小蓝想把 $n$ 个工件拼接到一起，方便转移到另一个地方完成下一道工序，而拼接后的工件用字符串 $S&#x3D;s_1+s_2+…+s_n$ 表示，其中 $+$ 表示一种奇特的拼接方式：对于 $c&#x3D;a+b$ 来说，如果 $a$ 的第二个字符和 $b$ 的第一个字符相同，则拼接后的结果 $c$ 长度为 $3$ 而不是 $4$ ，中间相同的字符可以省略一个，比如 $xy+yz&#x3D;xyz$ 而 $xy+zy&#x3D;xyzy$ 。小蓝为了让拼接后的字符串 $S$ 的长度尽量小，可以将若干个工件进行左右翻转之后再进行拼接，请问拼接后的字符串 $S$ 的最小长度是多少？</p><p>请注意所有工件必须按出现顺序依次拼接，可以翻转任意工件。</p><h3 id="输入描述-5"><a href="#输入描述-5" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入的第一行包含一个正整数 $n$ 。</p><p>接下来 $n$ 行，每行包含一个长度为 $2$ 字符串，依次表示 $s_1, s_2, \cdots, s_n$ 。</p><h3 id="输出描述-5"><a href="#输出描述-5" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出一行，包含一个整数表示答案。</p><h3 id="样例输入-12"><a href="#样例输入-12" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">3 ab cb zz<br></code></pre></td></tr></table></figure><h3 id="样例输出-12"><a href="#样例输出-12" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">5<br></code></pre></td></tr></table></figure><h3 id="样例说明-6"><a href="#样例说明-6" class="headerlink" title="样例说明"></a>样例说明</h3><p>将 $s_2$ 翻转后，拼接结果为 $abczz$ ，长度为 $5$ 。</p><h3 id="评测用例规模-5"><a href="#评测用例规模-5" class="headerlink" title="评测用例规模"></a>评测用例规模</h3><p>对于 $20%$ 的评测用例， $n\le20$；</p><p>对于所有评测用例，$1\le n \le 10^5$ 。</p><h3 id="运行限制-15"><a href="#运行限制-15" class="headerlink" title="运行限制"></a>运行限制</h3><table><thead><tr><th>语言</th><th>最大运行时间</th><th>最大运行内存</th></tr></thead><tbody><tr><td>C++</td><td>1s</td><td>256M</td></tr><tr><td>C</td><td>1s</td><td>256M</td></tr><tr><td>Java</td><td>2s</td><td>256M</td></tr><tr><td>Python3</td><td>3s</td><td>256M</td></tr><tr><td>PyPy3</td><td>3s</td><td>256M</td></tr><tr><td>Go</td><td>3s</td><td>256M</td></tr><tr><td>JavaScript</td><td>3s</td><td>256M</td></tr></tbody></table><p>总通过次数: 204  |  总提交次数: 253  |  通过率: 80.6%</p><p>难度: 中等   标签: 2023, 国赛, 动态规划</p><p>版权声明</p><p>部分题目由用户贡献，若您是著作权持有人，请与我们联系。</p><h3 id="解题思路-13"><a href="#解题思路-13" class="headerlink" title="解题思路"></a>解题思路</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-comment"># 请在此输入您的代码</span><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>s = [<span class="hljs-built_in">input</span>() <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>dp1 = [<span class="hljs-number">2</span>] * n <span class="hljs-comment"># dp1[i] 第i个字符串不翻转的最小长度</span><br>dp2 = [<span class="hljs-number">2</span>] * n <span class="hljs-comment"># dp2[i] 第i个字符串翻转的最小长度</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n): <span class="hljs-comment"># 枚举每一个字符串</span><br>    <span class="hljs-comment"># 1.dp1[i]从dp1[i-1]或dp2[i-1]转移</span><br>    k1 = dp1[i-<span class="hljs-number">1</span>] + <span class="hljs-number">2</span> - (s[i-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] == s[i][<span class="hljs-number">0</span>])<br>    k2 = dp2[i-<span class="hljs-number">1</span>] + <span class="hljs-number">2</span> - (s[i-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] == s[i][<span class="hljs-number">0</span>])<br>    dp1[i] = <span class="hljs-built_in">min</span>(k1, k2)<br>    <span class="hljs-comment"># 2.dp1[i]从dp1[i-1]或dp2[i-1]转移</span><br>    k3 = dp1[i-<span class="hljs-number">1</span>] + <span class="hljs-number">2</span> - (s[i-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] == s[i][<span class="hljs-number">1</span>])<br>    k4 = dp2[i-<span class="hljs-number">1</span>] + <span class="hljs-number">2</span> - (s[i-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] == s[i][<span class="hljs-number">1</span>])<br>    dp2[i] = <span class="hljs-built_in">min</span>(k3, k4)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">min</span>(dp1[n-<span class="hljs-number">1</span>], dp2[n-<span class="hljs-number">1</span>]))<br></code></pre></td></tr></table></figure><h2 id="最大阶梯"><a href="#最大阶梯" class="headerlink" title="最大阶梯"></a><a href="https://www.lanqiao.cn/problems/17147/learning/">最大阶梯</a></h2><h3 id="问题描述-16"><a href="#问题描述-16" class="headerlink" title="问题描述"></a>问题描述</h3><p>小蓝特别喜爱阶梯图案，阶梯图案可以看做是由若干个大小和颜色都相同的方格组成的，对于大小为 $N$ 的阶梯图案，包含了 $N$ 个连续的列，其中第 $i$ 列恰好有 $i$（$1\le i\le N$）个方格，将这 $N$ 列的底部对齐后便组成了一个阶梯图案，将其按照 $90$ 度旋转若干次后仍是阶梯图案，下图展示了几个不同大小的阶梯图案：</p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9B%BD%E8%B5%9B%E8%AF%95%E9%A2%98%E8%A7%A3%E6%9E%90/uid1882407-20231023-1698049869582.png" alt="图片描述"></p><p>小蓝有一块大小为 $H\times H$ 的布匹，由 $H\times H$ 个大小相同的方格区域组成，每一个方格都有自己的颜色。小蓝可以沿着方格的边缘对布匹进行裁剪，他想要知道自己能得到的最大的同色阶梯图案的大小是多少？</p><h3 id="输入描述-6"><a href="#输入描述-6" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入的第一行包含一个整数 $H$ 表示布匹大小。</p><p>接下来输入 $H$ 行，每行包含 $H$ 个整数，相邻的整数之间使用一个空格分隔，表示每个方格的颜色。</p><h3 id="输出描述-6"><a href="#输出描述-6" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出一行包含一个整数表示答案。</p><h3 id="样例输入-13"><a href="#样例输入-13" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">5 0 2 1 1 0 0 0 2 2 0 0 0 1 1 1 0 0 1 1 1 2 1 1 0 2<br></code></pre></td></tr></table></figure><h3 id="样例输出-13"><a href="#样例输出-13" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">3<br></code></pre></td></tr></table></figure><h3 id="样例说明-7"><a href="#样例说明-7" class="headerlink" title="样例说明"></a>样例说明</h3><p>如下图所示，最大的同色阶梯图案用红色边框标出。</p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9B%BD%E8%B5%9B%E8%AF%95%E9%A2%98%E8%A7%A3%E6%9E%90/uid1882407-20231023-1698049888211.png" alt="图片描述"></p><h3 id="评测用例规模-6"><a href="#评测用例规模-6" class="headerlink" title="评测用例规模"></a>评测用例规模</h3><p>对于 $30%$ 的评测用例， $1\le H\le 10$；</p><p>对于 $60%$ 的评测用例， $1\le H\le 100$；</p><p>对于所有评测用例， $1\le H\le 1000$ ， $0\le$ 方格颜色$\le 10$ 。</p><h3 id="运行限制-16"><a href="#运行限制-16" class="headerlink" title="运行限制"></a>运行限制</h3><table><thead><tr><th>语言</th><th>最大运行时间</th><th>最大运行内存</th></tr></thead><tbody><tr><td>C++</td><td>1s</td><td>256M</td></tr><tr><td>C</td><td>1s</td><td>256M</td></tr><tr><td>Java</td><td>5s</td><td>256M</td></tr><tr><td>Python3</td><td>5s</td><td>256M</td></tr><tr><td>PyPy3</td><td>5s</td><td>256M</td></tr><tr><td>Go</td><td>5s</td><td>256M</td></tr><tr><td>JavaScript</td><td>5s</td><td>256M</td></tr></tbody></table><p>总通过次数: 96  |  总提交次数: 158  |  通过率: 60.8%</p><p>难度: 中等   标签: 2023, 国赛, 动态规划</p><p>版权声明</p><p>部分题目由用户贡献，若您是著作权持有人，请与我们联系。</p><h3 id="解题思路-14"><a href="#解题思路-14" class="headerlink" title="解题思路"></a>解题思路</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><br><span class="hljs-comment"># 既然是动态规划，就要找转移来源，发现 dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1</span><br><span class="hljs-comment"># 图形可以旋转 90 度，对应的图形就有 4 种</span><br><span class="hljs-comment"># 有两种解决思路: 1. 将原始图形进行旋转，用 同一个 方法 解决</span><br><span class="hljs-comment">#                2. 原始图不动，写 四 种寻找方法 解决</span><br><span class="hljs-comment"># 时间复杂度都是 O(n ^ 2)</span><br><br><br>h = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>matrix = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(h)]<br>matrix_fan = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(h)]<br>matrix_col = [[<span class="hljs-number">0</span>] * h <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(h)]<br>matrix_col_fan = [[<span class="hljs-number">0</span>] * h <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(h)]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(h):<br>  l = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>  matrix[i].extend(l)<br>  matrix_fan[h-i-<span class="hljs-number">1</span>].extend(l[::-<span class="hljs-number">1</span>])<br>  <span class="hljs-keyword">for</span> j, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(l):<br>    matrix_col[h-j-<span class="hljs-number">1</span>][i] = v<br>    matrix_col_fan[j][h-i-<span class="hljs-number">1</span>] = v<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">l: <span class="hljs-built_in">list</span></span>):<br>  ans = <span class="hljs-number">1</span><br>  dp = [[<span class="hljs-number">1</span>] * h <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(h)]<br><br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, h):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, h):<br>      <span class="hljs-keyword">if</span> l[i][j] == l[i-<span class="hljs-number">1</span>][j] == l[i][j-<span class="hljs-number">1</span>]:<br>        dp[i][j] = <span class="hljs-built_in">min</span>(dp[i-<span class="hljs-number">1</span>][j], dp[i][j-<span class="hljs-number">1</span>]) + <span class="hljs-number">1</span><br>        ans = <span class="hljs-built_in">max</span>(ans, dp[i][j])<br>  <br>  <span class="hljs-keyword">return</span> ans<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(check(matrix), check(matrix_fan), check(matrix_col), check(matrix_col_fan)))<br></code></pre></td></tr></table></figure><h2 id="最长回文前后缀"><a href="#最长回文前后缀" class="headerlink" title="最长回文前后缀"></a><a href="https://www.lanqiao.cn/problems/17148/learning/">最长回文前后缀</a></h2><h2 id="贸易航线"><a href="#贸易航线" class="headerlink" title=" 贸易航线"></a><a href="https://www.lanqiao.cn/problems/17149/learning/"> 贸易航线</a></h2><h2 id="困局"><a href="#困局" class="headerlink" title="困局"></a><a href="https://www.lanqiao.cn/problems/17150/learning/">困局</a></h2><h1 id="第十四届Python大学A组"><a href="#第十四届Python大学A组" class="headerlink" title="第十四届Python大学A组"></a>第十四届Python大学A组</h1><h2 id="跑步计划-1"><a href="#跑步计划-1" class="headerlink" title="跑步计划"></a><a href="https://www.lanqiao.cn/problems/17113/learning/">跑步计划</a></h2><h2 id="残缺的数字"><a href="#残缺的数字" class="headerlink" title="残缺的数字"></a><a href="https://www.lanqiao.cn/problems/17114/learning/">残缺的数字</a></h2><h2 id="整数变换-1"><a href="#整数变换-1" class="headerlink" title="整数变换"></a><a href="https://www.lanqiao.cn/problems/17151/learning/">整数变换</a></h2><h2 id="2023-1"><a href="#2023-1" class="headerlink" title="2023"></a><a href="https://www.lanqiao.cn/problems/17116/learning/">2023</a></h2><h2 id="火车运输"><a href="#火车运输" class="headerlink" title="火车运输"></a><a href="https://www.lanqiao.cn/problems/17117/learning/">火车运输</a></h2><h2 id="走方格-1"><a href="#走方格-1" class="headerlink" title="走方格"></a><a href="https://www.lanqiao.cn/problems/17118/learning/">走方格</a></h2><h2 id="等腰三角形-1"><a href="#等腰三角形-1" class="headerlink" title="等腰三角形"></a><a href="https://www.lanqiao.cn/problems/17131/learning/">等腰三角形</a></h2><h2 id="彩色二叉树"><a href="#彩色二叉树" class="headerlink" title="彩色二叉树"></a><a href="https://www.lanqiao.cn/problems/17124/learning/">彩色二叉树</a></h2><h2 id="选段排序"><a href="#选段排序" class="headerlink" title="选段排序"></a><a href="https://www.lanqiao.cn/problems/17120/learning/">选段排序</a></h2><h2 id="最长同类子串"><a href="#最长同类子串" class="headerlink" title="最长同类子串"></a><a href="https://www.lanqiao.cn/problems/17141/learning/">最长同类子串</a></h2><h1 id="第十四届Java大学C组"><a href="#第十四届Java大学C组" class="headerlink" title="第十四届Java大学C组"></a>第十四届Java大学C组</h1><h2 id="跑步计划-2"><a href="#跑步计划-2" class="headerlink" title="跑步计划"></a><a href="https://www.lanqiao.cn/problems/17113/learning/">跑步计划</a></h2><h2 id="混乘数字-1"><a href="#混乘数字-1" class="headerlink" title="混乘数字"></a><a href="https://www.lanqiao.cn/problems/17121/learning/">混乘数字</a></h2><h2 id="整数变换-2"><a href="#整数变换-2" class="headerlink" title="整数变换"></a><a href="https://www.lanqiao.cn/problems/17151/learning/">整数变换</a></h2><h2 id="定时任务-1"><a href="#定时任务-1" class="headerlink" title="定时任务"></a><a href="https://www.lanqiao.cn/problems/17115/learning/">定时任务</a></h2><h2 id="2023-2"><a href="#2023-2" class="headerlink" title="2023"></a><a href="https://www.lanqiao.cn/problems/17116/learning/">2023</a></h2><h2 id="最大算式-1"><a href="#最大算式-1" class="headerlink" title="最大算式"></a><a href="https://www.lanqiao.cn/problems/17130/learning/">最大算式</a></h2><h2 id="火车运输-1"><a href="#火车运输-1" class="headerlink" title="火车运输"></a><a href="https://www.lanqiao.cn/problems/17117/learning/">火车运输</a></h2><h2 id="走方格-2"><a href="#走方格-2" class="headerlink" title="走方格"></a><a href="https://www.lanqiao.cn/problems/17118/learning/">走方格</a></h2><h2 id="彩色二叉树-1"><a href="#彩色二叉树-1" class="headerlink" title="彩色二叉树"></a><a href="https://www.lanqiao.cn/problems/17124/learning/">彩色二叉树</a></h2><h2 id="单词分类-1"><a href="#单词分类-1" class="headerlink" title="单词分类"></a><a href="https://www.lanqiao.cn/problems/17126/learning/">单词分类</a></h2><h1 id="第十四届Java大学B组"><a href="#第十四届Java大学B组" class="headerlink" title="第十四届Java大学B组"></a>第十四届Java大学B组</h1><h2 id="互质"><a href="#互质" class="headerlink" title="互质"></a><a href="https://www.lanqiao.cn/problems/17132/learning/">互质</a></h2><h2 id="逆元"><a href="#逆元" class="headerlink" title="逆元"></a><a href="https://www.lanqiao.cn/problems/17133/learning/">逆元</a></h2><h2 id="玩具"><a href="#玩具" class="headerlink" title="玩具"></a><a href="https://www.lanqiao.cn/problems/17134/learning/">玩具</a></h2><h2 id="不完整的算式"><a href="#不完整的算式" class="headerlink" title="不完整的算式"></a><a href="https://www.lanqiao.cn/problems/17135/learning/">不完整的算式</a></h2><h2 id="星球"><a href="#星球" class="headerlink" title="星球"></a><a href="https://www.lanqiao.cn/problems/17136/learning/">星球</a></h2><h2 id="序列"><a href="#序列" class="headerlink" title="序列"></a><a href="https://www.lanqiao.cn/problems/17137/learning/">序列</a></h2><h2 id="电动车"><a href="#电动车" class="headerlink" title="电动车"></a><a href="https://www.lanqiao.cn/problems/17138/learning/">电动车</a></h2><h2 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a><a href="https://www.lanqiao.cn/problems/6251/learning/">游戏</a></h2><h2 id="非对称二叉树"><a href="#非对称二叉树" class="headerlink" title="非对称二叉树"></a><a href="https://www.lanqiao.cn/problems/17139/learning/">非对称二叉树</a></h2><h2 id="数和游戏"><a href="#数和游戏" class="headerlink" title="数和游戏"></a><a href="https://www.lanqiao.cn/problems/17140/learning/">数和游戏</a></h2><h1 id="第十四届Java大学A组"><a href="#第十四届Java大学A组" class="headerlink" title="第十四届Java大学A组"></a>第十四届Java大学A组</h1><h2 id="X质数"><a href="#X质数" class="headerlink" title="X质数"></a><a href="https://www.lanqiao.cn/problems/17128/learning/">X质数</a></h2><h2 id="残缺的数字-1"><a href="#残缺的数字-1" class="headerlink" title="残缺的数字"></a><a href="https://www.lanqiao.cn/problems/17114/learning/">残缺的数字</a></h2><h2 id="整数变换-3"><a href="#整数变换-3" class="headerlink" title="整数变换"></a><a href="https://www.lanqiao.cn/problems/17151/learning/">整数变换</a></h2><h2 id="最大算式-2"><a href="#最大算式-2" class="headerlink" title="最大算式"></a><a href="https://www.lanqiao.cn/problems/17130/learning/">最大算式</a></h2><h2 id="躲炮弹-1"><a href="#躲炮弹-1" class="headerlink" title="躲炮弹"></a><a href="https://www.lanqiao.cn/problems/17123/learning/">躲炮弹</a></h2><h2 id="等腰三角形-2"><a href="#等腰三角形-2" class="headerlink" title="等腰三角形"></a><a href="https://www.lanqiao.cn/problems/17131/learning/">等腰三角形</a></h2><h2 id="连续数组"><a href="#连续数组" class="headerlink" title="连续数组"></a><a href="https://www.lanqiao.cn/problems/17125/learning/">连续数组</a></h2><h2 id="质数排序"><a href="#质数排序" class="headerlink" title="质数排序"></a><a href="https://www.lanqiao.cn/problems/17119/learning/">质数排序</a></h2><h2 id="单词分类-2"><a href="#单词分类-2" class="headerlink" title="单词分类"></a><a href="https://www.lanqiao.cn/problems/17126/learning/">单词分类</a></h2><h2 id="游戏的得分"><a href="#游戏的得分" class="headerlink" title="游戏的得分"></a><a href="https://www.lanqiao.cn/problems/17127/learning/">游戏的得分</a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第十四届Python大学C组&quot;&gt;&lt;a href=&quot;#第十四届Python大学C组&quot; class=&quot;headerlink&quot; title=&quot;第十四届Python大学C组&quot;&gt;&lt;/a&gt;第十四届Python大学C组&lt;/h1&gt;&lt;h2 id=&quot;跑步计划&quot;&gt;&lt;a href=&quot;#跑</summary>
      
    
    
    
    <category term="刷题" scheme="http://zdx-1.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="蓝桥国赛" scheme="http://zdx-1.github.io/categories/%E5%88%B7%E9%A2%98/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B/"/>
    
    
    <category term="蓝桥杯" scheme="http://zdx-1.github.io/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥国赛知识梳理</title>
    <link href="http://zdx-1.github.io/2024/05/24/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/"/>
    <id>http://zdx-1.github.io/2024/05/24/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/</id>
    <published>2024-05-24T03:25:08.000Z</published>
    <updated>2024-05-29T15:11:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="线性DP"><a href="#线性DP" class="headerlink" title="线性DP"></a>线性DP</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526132127462.png" alt="image-20240526132127462"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526132140926.png" alt="image-20240526132140926"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526132149001.png" alt="image-20240526132149001"></p><h4 id="动态规划分析步骤"><a href="#动态规划分析步骤" class="headerlink" title="动态规划分析步骤"></a>动态规划分析步骤</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526132222766.png" alt="image-20240526132222766"></p><h4 id="模板题——破损的楼梯"><a href="#模板题——破损的楼梯" class="headerlink" title="模板题——破损的楼梯"></a>模板题——<a href="https://www.lanqiao.cn/problems/3367/learning">破损的楼梯</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">3367 破损的楼梯</span><br><span class="hljs-string">https://www.lanqiao.cn/problems/3367/learning</span><br><span class="hljs-string"></span><br><span class="hljs-string">这是一个典型的线性DP问题，dp[i]表示到达第i阶楼梯的方法数</span><br><span class="hljs-string">状态转移方程：dp[i]=dp[i-1]+dp[i-2]</span><br><span class="hljs-string">状态压缩：dp[i]只与dp[i-1]和dp[i-2]有关，所以可以压缩</span><br><span class="hljs-string">时间复杂度：O(n)</span><br><span class="hljs-string">空间复杂度：O(n)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>N = <span class="hljs-built_in">int</span>(<span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>)<br>mod = <span class="hljs-built_in">int</span>(<span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>)<br>n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>a = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>vis = [<span class="hljs-number">0</span>] * N<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a: vis[i] = <span class="hljs-number">1</span><br>dp = [<span class="hljs-number">0</span>] * N<br>dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br>dp[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span> - vis[<span class="hljs-number">1</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n + <span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> vis[i]:<br>        <span class="hljs-keyword">continue</span><br>    dp[i] = (dp[i - <span class="hljs-number">1</span>] + dp[i - <span class="hljs-number">2</span>]) % mod<br><span class="hljs-built_in">print</span>(dp[n])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">n,m=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>a=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>dp=[<span class="hljs-number">0</span>]*(n+<span class="hljs-number">1</span>)<br>tp=[<span class="hljs-number">0</span>]*(n+<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>  tp[i]=<span class="hljs-number">1</span><br>dp[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span><br>dp[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>-tp[<span class="hljs-number">1</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,n+<span class="hljs-number">1</span>):<br>  <span class="hljs-keyword">if</span> tp[i]==<span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">continue</span><br>  dp[i]=dp[i-<span class="hljs-number">1</span>]+dp[i-<span class="hljs-number">2</span>]<br>mod=<span class="hljs-number">10</span>**<span class="hljs-number">9</span>+<span class="hljs-number">7</span><br><span class="hljs-built_in">print</span>(dp[i]%mod)<br></code></pre></td></tr></table></figure><h3 id="二维DP"><a href="#二维DP" class="headerlink" title="二维DP"></a>二维DP</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526132351934.png" alt="image-20240526132351934"></p><h4 id="分析步骤"><a href="#分析步骤" class="headerlink" title="分析步骤"></a>分析步骤</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526132407561.png" alt="image-20240526132407561"></p><h4 id="模板题——数字三角形"><a href="#模板题——数字三角形" class="headerlink" title="模板题——数字三角形"></a>模板题——<a href="https://www.lanqiao.cn/problems/1536/learning">数字三角形</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-comment"># 请在此输入您的代码</span><br>N = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>dp = [<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, N):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> j == <span class="hljs-number">0</span>:<br>            dp[i][j] += dp[i - <span class="hljs-number">1</span>][j]<br>        <span class="hljs-keyword">elif</span> j == i:<br>            dp[i][j] += dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">else</span>:<br>            dp[i][j] += <span class="hljs-built_in">max</span>(dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>], dp[i - <span class="hljs-number">1</span>][j])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(dp[N - <span class="hljs-number">1</span>]))<br></code></pre></td></tr></table></figure><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526132533080.png" alt="image-20240526132533080"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526132546231.png" alt="image-20240526132546231"></p><h4 id="模板题——摆花"><a href="#模板题——摆花" class="headerlink" title="模板题——摆花"></a>模板题——<a href="https://www.lanqiao.cn/problems/389/learning">摆花</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n种花凑 m盆 每种&lt;a[i]</span><br><span class="hljs-string">1.分解子问题</span><br><span class="hljs-string">前i种花，一共j盆，答案是dp[n][m]</span><br><span class="hljs-string">2.状态转移</span><br><span class="hljs-string">前i种花有j盆方案数  如何由前i-1种有j盆得出.</span><br><span class="hljs-string">以下每一种选择是一种方案</span><br><span class="hljs-string">第i种花可以选0盆,前i-1种花有j盆：dp[i][j] = dp[i-1][j]</span><br><span class="hljs-string">第i种花可以选1盆,前i-1种花有j-1盆：：dp[i][j] = dp[i-1][j-1]</span><br><span class="hljs-string">...</span><br><span class="hljs-string">第i种花可以选a[i]盆,前i-1种花有j-a[i]盆：：dp[i][j] = dp[i-1][j-a[i]]</span><br><span class="hljs-string">3.边界条件，每种花都不选</span><br><span class="hljs-string">前i种花 0盆 是 一种方案 dp[i][0] = 1</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>MOD = <span class="hljs-number">10</span> ** <span class="hljs-number">6</span> + <span class="hljs-number">7</span><br>n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>a = [<span class="hljs-number">0</span>] + <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>dp = [[<span class="hljs-number">0</span>] * (m + <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>):<br>    dp[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br><span class="hljs-comment"># 状态转移,当下做出的选择，利用之前dp,求dp[i][j]</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,m+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">min</span>(a[i],j)+<span class="hljs-number">1</span>):<br>            dp[i][j]+=dp[i-<span class="hljs-number">1</span>][j-k]<br>            dp[i][j]%=MOD<br><span class="hljs-built_in">print</span>(dp[n][m])<br></code></pre></td></tr></table></figure><h4 id="模板题——选数异或"><a href="#模板题——选数异或" class="headerlink" title="模板题——选数异或"></a>模板题——<a href="https://www.lanqiao.cn/problems/3711/learning">选数异或</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs py">n,x = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>a = [<span class="hljs-number">0</span>] + <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>Mod = <span class="hljs-number">998244353</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"> dp[i][j]前i个正整数有j个子序列异或成 j 的方案；答案dp[n][x]</span><br><span class="hljs-string"> dp[i][j] = 选第i个数字 + 不选第i个数字</span><br><span class="hljs-string">          = dp[i - 1][j ^ a[i]] + dp[i - 1][j]   </span><br><span class="hljs-string">          (因为如果选了第i个数字，那么a[i] ^ 前数 = j, 所以：前数 = j ^ a[i])</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>dp = [[<span class="hljs-number">0</span>] * (<span class="hljs-number">64</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)]<br><span class="hljs-comment"># 初始化为 0</span><br>dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>        dp[i][j] = (dp[i-<span class="hljs-number">1</span>][j] + dp[i-<span class="hljs-number">1</span>][j ^ a[i]]) % Mod<br><span class="hljs-built_in">print</span>(dp[n][x])<br></code></pre></td></tr></table></figure><h3 id="LIS"><a href="#LIS" class="headerlink" title="LIS"></a>LIS</h3><h4 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526132915221.png" alt="image-20240526132915221"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526132923043.png" alt="image-20240526132923043"></p><h4 id="模板题——蓝桥勇士"><a href="#模板题——蓝桥勇士" class="headerlink" title="模板题——蓝桥勇士"></a>模板题——<a href="https://www.lanqiao.cn/problems/2049/learning">蓝桥勇士</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py">n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>a=[<span class="hljs-number">0</span>]+<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>dp=[<span class="hljs-number">1</span>]*(n+<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n):<br>  <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> a[i]&lt;a[j]:<br>      dp[j]=<span class="hljs-built_in">max</span>(dp[j],dp[i]+<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(dp))<br></code></pre></td></tr></table></figure><h4 id="模板题——合唱队形"><a href="#模板题——合唱队形" class="headerlink" title="模板题——合唱队形"></a>模板题——<a href="https://www.lanqiao.cn/problems/742/learning">合唱队形</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs py">n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>a = [<span class="hljs-number">0</span>] + <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>dp1 = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>)  <span class="hljs-comment"># dp1[i]表示以i结尾的最长上升子序列长度</span><br>dp2 = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>)  <span class="hljs-comment"># dp2[i]表示以i出发的最长下降子序列长度</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>    dp1[i] = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, i):<br>        <span class="hljs-keyword">if</span> a[i] &gt; a[j]:<br>            dp1[i] = <span class="hljs-built_in">max</span>(dp1[i], dp1[j] + <span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>    dp2[i] = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> a[i] &gt; a[j]:<br>            dp2[i] = <span class="hljs-built_in">max</span>(dp2[i], dp2[j] + <span class="hljs-number">1</span>)<br><br>ans = <span class="hljs-built_in">max</span>((dp1[i] + dp2[i] - <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(n-ans)<br></code></pre></td></tr></table></figure><h3 id="LCS"><a href="#LCS" class="headerlink" title="LCS"></a>LCS</h3><h4 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526133212404.png" alt="image-20240526133212404"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526133222560.png" alt="image-20240526133222560"></p><h4 id="模板题——最长公共子序列"><a href="#模板题——最长公共子序列" class="headerlink" title="模板题——最长公共子序列"></a>模板题——<a href="https://www.lanqiao.cn/problems/1189/learning">最长公共子序列</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-comment"># 这段代码实现的是计算两个序列（a 和 b）的最长公共子序列（Longest Common Subsequence, LCS）的长度。LCS 是一种在计算两个序列相似度时常用的度量方法。这个问题通常通过动态规划来解决。现在，我将逐步解释这段代码的各个部分：</span><br><br><span class="hljs-comment"># 输入处理</span><br>n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>a = [<span class="hljs-number">0</span>] + <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>b = [<span class="hljs-number">0</span>] + <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br><span class="hljs-comment"># 首先，通过 input().split() 获取两个整数 n 和 m，分别表示序列 a 和 b 的长度。</span><br><span class="hljs-comment"># 接着，读取这两个序列，并在序列前面各自加上一个 0 作为哨兵值。这样做是为了让序列的索引从 1 开始，方便后续操作。</span><br><span class="hljs-comment"># 初始化动态规划数组</span><br>dp = [[<span class="hljs-number">0</span>] * (m + <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>)]  <span class="hljs-comment"># 注意这里是 m，不是 n</span><br>now = <span class="hljs-number">0</span>; old = <span class="hljs-number">1</span><br><span class="hljs-comment"># 初始化一个二维动态规划数组 dp，但这里只用到了两行（range(2)），目的是节省空间。因为在计算当前状态时，只需要用到前一行（即上一状态）的数据。m + 1 是因为考虑到从 0 开始到 m 的所有可能位置。</span><br><span class="hljs-comment"># now 和 old 变量用来在这两行之间切换，表示当前行和上一行。</span><br><span class="hljs-comment"># 动态规划过程</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>    now, old = old, now<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>):<br>        dp[now][j] = <span class="hljs-built_in">max</span>(dp[now][j - <span class="hljs-number">1</span>], dp[old][j])<br>        <span class="hljs-keyword">if</span> a[i] == b[j]: <br>            dp[now][j] = <span class="hljs-built_in">max</span>(dp[now][j], dp[old][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>)<br><span class="hljs-comment"># 这部分是动态规划的核心。</span><br><span class="hljs-comment"># 外层循环遍历序列 a，内层循环遍历序列 b。</span><br><span class="hljs-comment"># dp[now][j] = max(dp[now][j - 1], dp[old][j])：当前状态是基于之前状态的最大值，这表示如果当前字符不匹配，LCS 长度不变。</span><br><span class="hljs-comment"># 如果当前位置的字符相等（a[i] == b[j]），则检查上一个状态的值并加一，即 dp[now][j] = max(dp[now][j], dp[old][j - 1] + 1)。这反映了找到了一个公共元素，因此当前的最长公共子序列长度增加了 1。</span><br><span class="hljs-comment"># 输出结果</span><br><span class="hljs-built_in">print</span>(dp[now][m])<br><span class="hljs-comment"># 最后，打印出最长公共子序列的长度，即在遍历完两个序列后，dp 数组最后一个元素（dp[now][m]）的值。</span><br><span class="hljs-comment"># 通过这种方式，代码高效地计算了两个序列的最长公共子序列的长度，同时通过只使用两行的动态规划数组大大减少了空间复杂度。</span><br></code></pre></td></tr></table></figure><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526133424736.png" alt="image-20240526133424736"></p><h2 id="背包DP"><a href="#背包DP" class="headerlink" title="背包DP"></a>背包DP</h2><h3 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526133609206.png" alt="image-20240526133609206"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526133623292.png" alt="image-20240526133623292"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526133631379.png" alt="image-20240526133631379"></p><h4 id="模板题——小明的背包1"><a href="#模板题——小明的背包1" class="headerlink" title="模板题——小明的背包1"></a>模板题——<a href="https://www.lanqiao.cn/problems/1174/learning">小明的背包1</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#dp[i][j]    前i件物品，总体积不超过j 的最大价值</span><br><br>n,v=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>dp=[[<span class="hljs-number">0</span>]*(v+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>    wi,vi=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,v+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> j&gt;=wi:<br>            dp[i][j]=<span class="hljs-built_in">max</span>(dp[i-<span class="hljs-number">1</span>][j],dp[i-<span class="hljs-number">1</span>][j-wi]+vi)<br>        <span class="hljs-keyword">else</span>:<br>            dp[i][j]=dp[i-<span class="hljs-number">1</span>][j]<br>            <br><span class="hljs-built_in">print</span>(dp[n][v])<br></code></pre></td></tr></table></figure><h5 id="滚动数组优化"><a href="#滚动数组优化" class="headerlink" title="滚动数组优化"></a>滚动数组优化</h5><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526133913024.png" alt="image-20240526133913024"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526133922038.png" alt="image-20240526133922038"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526133928502.png" alt="image-20240526133928502"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py">n,V=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>dp=[<span class="hljs-number">0</span>]*(V+<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>  w,v=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>  <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(V,w-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>    dp[j]=<span class="hljs-built_in">max</span>(dp[j],dp[j-w]+v)<br><span class="hljs-built_in">print</span>(dp[V])<br></code></pre></td></tr></table></figure><h3 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526134436937.png" alt="image-20240526134436937"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526134445527.png" alt="image-20240526134445527"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526134453737.png" alt="image-20240526134453737"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526134501798.png" alt="image-20240526134501798"></p><h4 id="模板题——小明的背包2"><a href="#模板题——小明的背包2" class="headerlink" title="模板题——小明的背包2"></a>模板题——<a href="https://www.lanqiao.cn/problems/1175/learning">小明的背包2</a></h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526134640485.png" alt="image-20240526134640485"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># dp[i][j]=max(dp[i-1][j],dp[i][j-wi]+vi)  不取或在先前基础上取第i种（所以可以取多次）</span><br><br>n,v=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>dp=[[<span class="hljs-number">0</span>]*(v+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br><span class="hljs-keyword">for</span>  i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>    wi,vi=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,v+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> (j&gt;=wi):<br>            dp[i][j]=<span class="hljs-built_in">max</span>(dp[i-<span class="hljs-number">1</span>][j],dp[i][j-wi]+vi)<br>        <span class="hljs-keyword">else</span>:<br>            dp[i][j]=dp[i-<span class="hljs-number">1</span>][j]<br><span class="hljs-built_in">print</span>(dp[n][v])<br></code></pre></td></tr></table></figure><h5 id="滚动数组优化-1"><a href="#滚动数组优化-1" class="headerlink" title="滚动数组优化"></a>滚动数组优化</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br>N, V = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>items = []<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N):<br>    w, v = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    items.append((w, v))<br>dp = [<span class="hljs-number">0</span>] * (V + <span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, V + <span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> w, v <span class="hljs-keyword">in</span> items:<br>        <span class="hljs-keyword">if</span> i &gt;= w:<br>            dp[i] = <span class="hljs-built_in">max</span>(dp[i], dp[i - w] + v)<br><span class="hljs-built_in">print</span>(dp[V])<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">读取输入的商场物品数量N和小明的背包容量V，以及每种物品的体积和价值。</span><br><span class="hljs-string">初始化一个长度为V+1的动态规划数组dp，dp[i]表示背包容量为i时所能获得的最大价值。</span><br><span class="hljs-string">使用动态规划求解，外层循环遍历背包容量从1到V，内层循环遍历每种物品，更新dp[i]的值为dp[i-w]+v和当前dp[i]的较大值。</span><br><span class="hljs-string">输出dp[V]即为小明所能获得的最大价值。</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526134702358.png" alt="image-20240526134702358"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526134710379.png" alt="image-20240526134710379"></p><h4 id="模板题——小明的背包3"><a href="#模板题——小明的背包3" class="headerlink" title="模板题——小明的背包3"></a>模板题——<a href="https://www.lanqiao.cn/problems/1176/learning">小明的背包3</a></h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526134904431.png" alt="image-20240526134904431"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526134915203.png" alt="image-20240526134915203"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526134922223.png" alt="image-20240526134922223"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526134930677.png" alt="image-20240526134930677"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#dp[i][j] =max(dp[i][j],dp[i-1][j-k*wi]+k*vi)  k属于(0，si)</span><br><br>n,v=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>dp=[[<span class="hljs-number">0</span>]*(v+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>    wi,vi,si=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,v+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">min</span>(si,j//wi)+<span class="hljs-number">1</span>):<br><br>            dp[i][j]=<span class="hljs-built_in">max</span>(dp[i][j],dp[i-<span class="hljs-number">1</span>][j-k*wi]+k*vi)<br><br><span class="hljs-built_in">print</span>(dp[n][v])<br></code></pre></td></tr></table></figure><h5 id="滚动数组优化-2"><a href="#滚动数组优化-2" class="headerlink" title="滚动数组优化"></a>滚动数组优化</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py">N,V=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>w,v,s=[[<span class="hljs-number">0</span>]*(N+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>dp=[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(V+<span class="hljs-number">1</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,N+<span class="hljs-number">1</span>):<br>  w[i],v[i],s[i]=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,N+<span class="hljs-number">1</span>):<br>  <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(s[i]):<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(V,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>):<br>      <span class="hljs-keyword">if</span> w[i]&lt;=k:<br>        dp[k]=<span class="hljs-built_in">max</span>(dp[k-w[i]]+v[i],dp[k])<br><span class="hljs-built_in">print</span>(dp[-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><h3 id="二维费用背包-分组背包"><a href="#二维费用背包-分组背包" class="headerlink" title="二维费用背包&amp;分组背包"></a>二维费用背包&amp;分组背包</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526135531593.png" alt="image-20240526135531593"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526135538566.png" alt="image-20240526135538566"></p><h4 id="模板题——小蓝的神秘行囊"><a href="#模板题——小蓝的神秘行囊" class="headerlink" title="模板题——小蓝的神秘行囊"></a>模板题——<a href="https://www.lanqiao.cn/problems/3937/learning">小蓝的神秘行囊</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> sys<br><br>n, v, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, sys.stdin.readline().split())<br>dp = [[<span class="hljs-number">0</span>]*(v + <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m + <span class="hljs-number">1</span>)]<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    volume, mass, value = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, sys.stdin.readline().split())<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(v, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> i &gt;= mass <span class="hljs-keyword">and</span> j &gt;= volume:<br>                dp[i][j] = <span class="hljs-built_in">max</span>(dp[i][j], dp[i-mass][j-volume] + value)<br><span class="hljs-built_in">print</span>(dp[m][v])<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py">n,v,m=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>dp=[[<span class="hljs-number">0</span>]*(m+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(v+<span class="hljs-number">1</span>)]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>    vi,mi,wi=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(v,vi-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m,mi-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>            dp[j][k] =<span class="hljs-built_in">max</span>(dp[j][k],dp[j-vi][k-mi]+wi)<br>           <br><span class="hljs-built_in">print</span>(dp[v][m])<br></code></pre></td></tr></table></figure><h2 id="树形DP"><a href="#树形DP" class="headerlink" title="树形DP"></a>树形DP</h2><h3 id="自上而下树形DP"><a href="#自上而下树形DP" class="headerlink" title="自上而下树形DP"></a>自上而下树形DP</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict<br><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>val = [<span class="hljs-number">0</span>] + [<span class="hljs-built_in">int</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">input</span>().split()]<br>edges = defaultdict(<span class="hljs-built_in">list</span>)<br>f = [[<span class="hljs-number">0</span>, val[i]] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_edge</span>(<span class="hljs-params">from_node, to_node</span>):<br>    edges[from_node].append(to_node)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">u, fa</span>):<br>    <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> edges[u]:<br>        <span class="hljs-keyword">if</span> v == fa:<br>            <span class="hljs-keyword">continue</span><br>        dfs(v, u)<br>        f[u][<span class="hljs-number">0</span>] += <span class="hljs-built_in">max</span>(f[v][<span class="hljs-number">0</span>], f[v][<span class="hljs-number">1</span>])<br>        f[u][<span class="hljs-number">1</span>] += f[v][<span class="hljs-number">0</span>]<br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">1</span>):<br>    u, v = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    add_edge(u, v)<br>    add_edge(v, u)<br><br>dfs(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(f[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>], f[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]))<br></code></pre></td></tr></table></figure><h3 id="自下而上树形DP"><a href="#自下而上树形DP" class="headerlink" title="自下而上树形DP"></a>自下而上树形DP</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict<br><br>N = <span class="hljs-number">100005</span><br>a = [<span class="hljs-number">0</span>]*N<br>dp = [[<span class="hljs-number">0</span>]*<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N)]<br>e = defaultdict(<span class="hljs-built_in">list</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">u</span>):<br>    <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> e[u]:<br>        dfs(v)<br>        dp[u][<span class="hljs-number">1</span>] += dp[v][<span class="hljs-number">0</span>]<br>        dp[u][<span class="hljs-number">0</span>] += <span class="hljs-built_in">max</span>(dp[v])<br>    dp[u][<span class="hljs-number">1</span>] += a[u]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">global</span> N, a, dp, e<br>    n = <span class="hljs-built_in">int</span>(sys.stdin.readline())<br>    st = <span class="hljs-built_in">set</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>):<br>        a[i] = <span class="hljs-built_in">int</span>(sys.stdin.readline())<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n):<br>        x, y = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, sys.stdin.readline().split())<br>        e[y].append(x)<br>        st.discard(x)<br>    rt = st.pop()<br>    dfs(rt)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(dp[rt]))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h3 id="路径相关树形DP"><a href="#路径相关树形DP" class="headerlink" title="路径相关树形DP"></a>路径相关树形DP</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs py">N = <span class="hljs-number">2005</span><br>e = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N)]<br>w = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N)]<br>dp = [<span class="hljs-number">0</span>]*N<br>n, m, k = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>dep = [<span class="hljs-number">0</span>]*N<br>f = [<span class="hljs-number">0</span>]*N<br>t = []<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">u</span>):<br>    <span class="hljs-keyword">global</span> dp, e, w<br>    <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> e[u]:<br>        dfs(v)<br>        dp[u] += dp[v]<br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> w[u]:<br>        <span class="hljs-built_in">sum</span> = dp[u]<br>        <span class="hljs-keyword">for</span> nw <span class="hljs-keyword">in</span> t[<span class="hljs-string">&#x27;vec&#x27;</span>]:<br>            <span class="hljs-built_in">sum</span> -= dp[nw]<br>            <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> e[nw]:<br>                <span class="hljs-built_in">sum</span> += dp[v]<br>        dp[u] = <span class="hljs-built_in">max</span>(dp[u], <span class="hljs-built_in">sum</span> + t[<span class="hljs-string">&#x27;val&#x27;</span>])<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">global</span> n, m, f, e, dep, dp, w, t<br>    n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n+<span class="hljs-number">1</span>):<br>        f[i] = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>        e[f[i]].append(i)<br>        dep[i] = dep[f[i]] + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, m+<span class="hljs-number">1</span>):<br>        x, y, val = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>        t.clear()<br>        <span class="hljs-keyword">while</span> x != y:<br>            <span class="hljs-keyword">if</span> dep[x] &gt; dep[y]:<br>                t.append(x)<br>                x = f[x]<br>            <span class="hljs-keyword">else</span>:<br>                t.append(y)<br>                y = f[y]<br>        t.append(x)<br>        w[x].append(&#123;<span class="hljs-string">&#x27;vec&#x27;</span>: <span class="hljs-built_in">list</span>(t), <span class="hljs-string">&#x27;val&#x27;</span>: val&#125;)<br>    dfs(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(dp[<span class="hljs-number">1</span>])<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h3 id="换根DP"><a href="#换根DP" class="headerlink" title="换根DP"></a>换根DP</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">u, dep, fa</span>):  <span class="hljs-comment"># 传入当前节点u,深度，父节点</span><br>    <span class="hljs-keyword">global</span> sum_depth<br>    sum_depth += dep  <span class="hljs-comment"># 加上当前节点u的深度</span><br>    <span class="hljs-comment"># 遍历u的所有子节点</span><br>    <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> e[u]:<br>        <span class="hljs-keyword">if</span> v == fa:<br>            <span class="hljs-keyword">continue</span><br>        dfs(v, dep + <span class="hljs-number">1</span>, u)  <span class="hljs-comment"># 遍历到子节点</span><br>        siz[u] += siz[v]  <span class="hljs-comment"># 通过这一步，可以统计u所有子节点数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs2</span>(<span class="hljs-params">u, fa</span>):  <span class="hljs-comment"># 用来跟新其余节点为根的解</span><br>    <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> e[u]:<br>        <span class="hljs-keyword">if</span> v == fa:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-comment"># dp[v] = dp[u] - siz[v] + (n - siz[v])</span><br>        dp[v] = dp[u] - <span class="hljs-number">2</span> * siz[v] + n  <span class="hljs-comment"># 当前节点v的解=左边变化值+右边变化值</span><br>        dfs2(v, u)<br><br><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>dp = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>)  <span class="hljs-comment"># 用来更新不同节点为根时的深度和</span><br>siz = [<span class="hljs-number">1</span>] * (n + <span class="hljs-number">1</span>)  <span class="hljs-comment"># 以i为根节点，其左子树的节点数，初始值为1表示仅包含该节点</span><br><span class="hljs-comment"># 建树</span><br>e = defaultdict(<span class="hljs-built_in">list</span>)<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">1</span>):<br>    u, v = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    e[u].append(v)<br>    e[v].append(u)<br><span class="hljs-comment"># 第一遍dfs,找到以1为根节点的深度和</span><br>sum_depth = <span class="hljs-number">0</span>  <span class="hljs-comment"># 用来记录深度和</span><br>dfs(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br><span class="hljs-comment"># 第二遍dfs，求出其余点作为根的答案</span><br>dp[<span class="hljs-number">1</span>] = sum_depth  <span class="hljs-comment"># 6</span><br>dfs2(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)  <span class="hljs-comment"># dp=[0, 6, 5, 9, 8, 8]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(dp))<br></code></pre></td></tr></table></figure><h2 id="区间DP"><a href="#区间DP" class="headerlink" title="区间DP"></a>区间DP</h2><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526140152840.png" alt="image-20240526140152840"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526140205963.png" alt="image-20240526140205963"></p><h3 id="普通区间DP"><a href="#普通区间DP" class="headerlink" title="普通区间DP"></a>普通区间DP</h3><h4 id="模板题——石子合并"><a href="#模板题——石子合并" class="headerlink" title="模板题——石子合并"></a>模板题——<a href="https://www.lanqiao.cn/problems/1233/learning">石子合并</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs py">n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>a = [<span class="hljs-number">0</span>] + <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>f = [[<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)] * (n+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>):<br>    f[i][i] = <span class="hljs-number">0</span><br>    a[i] += a[i-<span class="hljs-number">1</span>]<br><br><span class="hljs-keyword">for</span> length <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n-length+<span class="hljs-number">2</span>):<br>        j = i + length - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i, j):<br>            f[i][j] = <span class="hljs-built_in">min</span>(f[i][j], f[i][k] + f[k+<span class="hljs-number">1</span>][j] + a[j] - a[i-<span class="hljs-number">1</span>])<br><br><span class="hljs-built_in">print</span>(f[<span class="hljs-number">1</span>][n])<br></code></pre></td></tr></table></figure><h4 id="模板题——涂色"><a href="#模板题——涂色" class="headerlink" title="模板题——涂色"></a>模板题——<a href="https://www.lanqiao.cn/problems/926/learning">涂色</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs py">s = <span class="hljs-built_in">input</span>()<br>n = <span class="hljs-built_in">len</span>(s)<br>f = [[<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)] * n <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    f[i][i] = <span class="hljs-number">1</span><br><br><span class="hljs-keyword">for</span> length <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - length + <span class="hljs-number">1</span>):<br>        j = i + length - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> s[i] == s[j]:<br>            f[i][j] = <span class="hljs-built_in">min</span>(f[i + <span class="hljs-number">1</span>][j], f[i][j - <span class="hljs-number">1</span>])<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i, i + length - <span class="hljs-number">1</span>):<br>                f[i][j] = <span class="hljs-built_in">min</span>(f[i][j], f[i][k] + f[k + <span class="hljs-number">1</span>][j])<br><br><span class="hljs-built_in">print</span>(f[<span class="hljs-number">0</span>][n - <span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><h4 id="模板题——制作回文串"><a href="#模板题——制作回文串" class="headerlink" title="模板题——制作回文串"></a>模板题——<a href="https://www.lanqiao.cn/problems/1547/learning">制作回文串</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs py">m, n = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>s = <span class="hljs-built_in">input</span>()<br>w1 = [<span class="hljs-number">0</span>] * <span class="hljs-number">30</span><br>w2 = [<span class="hljs-number">0</span>] * <span class="hljs-number">30</span><br>f = [[<span class="hljs-number">0</span>] * n <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    ch, weight1, weight2 = <span class="hljs-built_in">input</span>().split()<br>    w1[<span class="hljs-built_in">ord</span>(ch) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)] = <span class="hljs-built_in">int</span>(weight1)<br>    w2[<span class="hljs-built_in">ord</span>(ch) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)] = <span class="hljs-built_in">int</span>(weight2)<br><br><span class="hljs-keyword">for</span> length <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - length + <span class="hljs-number">1</span>):<br>        j = i + length - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> s[i] == s[j]:<br>            <span class="hljs-keyword">if</span> length == <span class="hljs-number">2</span>:<br>                f[i][j] = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">else</span>:<br>                f[i][j] = f[i + <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">else</span>:<br>            f[i][j] = <span class="hljs-built_in">min</span>(<br>                f[i + <span class="hljs-number">1</span>][j] + <span class="hljs-built_in">min</span>(w1[<span class="hljs-built_in">ord</span>(s[i]) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)], w2[<span class="hljs-built_in">ord</span>(s[i]) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)]),<br>                f[i][j - <span class="hljs-number">1</span>] + <span class="hljs-built_in">min</span>(w1[<span class="hljs-built_in">ord</span>(s[j]) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)], w2[<span class="hljs-built_in">ord</span>(s[j]) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)])<br>            )<br><br><span class="hljs-built_in">print</span>(f[<span class="hljs-number">0</span>][n - <span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><h3 id="环形区间DP"><a href="#环形区间DP" class="headerlink" title="环形区间DP"></a>环形区间DP</h3><h4 id="模板题——能量项链"><a href="#模板题——能量项链" class="headerlink" title="模板题——能量项链"></a>模板题——<a href="https://www.lanqiao.cn/problems/557/learning">能量项链</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs py">n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>v = [<span class="hljs-number">0</span>] * (<span class="hljs-number">2</span> * n + <span class="hljs-number">2</span>)<br>a = [<span class="hljs-number">0</span>] + <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>    v[i] = a[i]<br>    v[i + n] = v[i]<br><br>f = [[<span class="hljs-number">0</span>] * (<span class="hljs-number">2</span> * n + <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span> * n + <span class="hljs-number">1</span>)]<br><br><span class="hljs-keyword">for</span> length <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n + <span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span> * n - length + <span class="hljs-number">2</span>):<br>        j = i + length - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i, j):<br>            f[i][j] = <span class="hljs-built_in">max</span>(f[i][j], f[i][k] + f[k + <span class="hljs-number">1</span>][j] + v[i] * v[k + <span class="hljs-number">1</span>] * v[j + <span class="hljs-number">1</span>])<br><br>ans = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>    ans = <span class="hljs-built_in">max</span>(ans, f[i][i + n - <span class="hljs-number">1</span>])<br><br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h2 id="状压DP"><a href="#状压DP" class="headerlink" title="状压DP"></a>状压DP</h2><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526141319988.png" alt="image-20240526141319988"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526141327177-1716704007699-3.png" alt="image-20240526141327177"></p><h4 id="模板题——例1"><a href="#模板题——例1" class="headerlink" title="模板题——例1"></a>模板题——例1</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526141355192.png" alt="image-20240526141355192"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs py">MAXN = <span class="hljs-number">105</span><br>N, M, K = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>a = [<span class="hljs-number">0</span>] * MAXN<br>f = [<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)] * (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">20</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()):<br>        a[i] |= <span class="hljs-number">1</span> &lt;&lt; (j - <span class="hljs-number">1</span>)<br><br>f[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N):<br>    <span class="hljs-keyword">for</span> S <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span> &lt;&lt; M):<br>        <span class="hljs-keyword">if</span> f[S] &gt; MAXN:<br>            <span class="hljs-keyword">continue</span><br>        f[S | a[i]] = <span class="hljs-built_in">min</span>(f[S | a[i]], f[S] + <span class="hljs-number">1</span>)<br><br><span class="hljs-built_in">print</span>(f[(<span class="hljs-number">1</span> &lt;&lt; M) - <span class="hljs-number">1</span>] <span class="hljs-keyword">if</span> f[(<span class="hljs-number">1</span> &lt;&lt; M) - <span class="hljs-number">1</span>] &lt; MAXN <span class="hljs-keyword">else</span> -<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h4 id="模板题——例2"><a href="#模板题——例2" class="headerlink" title="模板题——例2"></a>模板题——例2</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526141422932.png" alt="image-20240526141422932"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> math<br><br>maxn = <span class="hljs-number">2100000</span><br>f = [<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)] * maxn<br>lowbit = [<span class="hljs-number">0</span>] * maxn<br>line = [[<span class="hljs-number">0</span>] * <span class="hljs-number">20</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>)]<br>x = [<span class="hljs-number">0.0</span>] * maxn<br>y = [<span class="hljs-number">0.0</span>] * maxn<br>eps = <span class="hljs-number">1e-8</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">equ</span>(<span class="hljs-params">a1, b1, c1, a2, b2, c2</span>):<br>    y = (a1 * c2 - a2 * c1) / (a1 * b2 - a2 * b1)<br>    x = (c1 - b1 * y) / a1<br>    <span class="hljs-keyword">return</span> x, y<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">18</span>)):<br>    j = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> (i &amp; (<span class="hljs-number">1</span> &lt;&lt; (j - <span class="hljs-number">1</span>))):<br>        j += <span class="hljs-number">1</span><br>    lowbit[i] = j<br><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>    x[i], y[i] = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">float</span>, <span class="hljs-built_in">input</span>().split())<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> math.isclose(x[i], x[j], abs_tol=eps):<br>            <span class="hljs-keyword">continue</span><br>        a, b = equ(x[i] * x[i], x[i], y[i], x[j] * x[j], x[j], y[j])<br>        <span class="hljs-keyword">if</span> math.isclose(a, <span class="hljs-number">0</span>, abs_tol=eps):<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> math.isclose(a * x[k] * x[k] + b * x[k], y[k], abs_tol=eps):<br>                line[i][j] |= (<span class="hljs-number">1</span> &lt;&lt; (k - <span class="hljs-number">1</span>))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, (<span class="hljs-number">1</span> &lt;&lt; n)):<br>    j = lowbit[i]<br>    f[i | (<span class="hljs-number">1</span> &lt;&lt; (j - <span class="hljs-number">1</span>))] = <span class="hljs-built_in">min</span>(f[i | (<span class="hljs-number">1</span> &lt;&lt; (j - <span class="hljs-number">1</span>))], f[i] + <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>        f[i | line[j][k]] = <span class="hljs-built_in">min</span>(f[i | line[j][k]], f[i] + <span class="hljs-number">1</span>)<br><br><span class="hljs-built_in">print</span>(f[(<span class="hljs-number">1</span> &lt;&lt; n) - <span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><h2 id="数位DP"><a href="#数位DP" class="headerlink" title="数位DP"></a>数位DP</h2><h2 id="期望DP"><a href="#期望DP" class="headerlink" title="期望DP"></a>期望DP</h2><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="链表，栈，队列"><a href="#链表，栈，队列" class="headerlink" title="链表，栈，队列"></a>链表，栈，队列</h2><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524154910861.png" alt="image-20240524154910861"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524154926348.png" alt="image-20240524154926348"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524154959997.png" alt="image-20240524154959997"></p><h4 id="模板题——约瑟夫环"><a href="#模板题——约瑟夫环" class="headerlink" title="模板题——约瑟夫环"></a>模板题——<a href="https://www.lanqiao.cn/problems/1111/learning">约瑟夫环</a></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">n,k,m=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>a=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>))<br>i=k-<span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> a:<br>    i=(i+(m-<span class="hljs-number">1</span>))%<span class="hljs-built_in">len</span>(a)<br>    <span class="hljs-built_in">print</span>(a.pop(i))<br></code></pre></td></tr></table></figure><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524155117734.png" alt="image-20240524155117734"></p><h4 id="模板题——小蓝的括号串1"><a href="#模板题——小蓝的括号串1" class="headerlink" title="模板题——小蓝的括号串1"></a>模板题——<a href="https://www.lanqiao.cn/problems/2490/learning">小蓝的括号串1</a></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>s=<span class="hljs-built_in">input</span>()<br>a=[]<br>ok=<span class="hljs-literal">True</span><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s:<br>    <span class="hljs-keyword">if</span> c == <span class="hljs-string">&#x27;(&#x27;</span>:<br>        a.append(c)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(a) == <span class="hljs-number">0</span>:<br>            ok = <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">break</span><br>        a.pop()<br><span class="hljs-keyword">if</span> ok <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(a) == <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Yes&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;No&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524173345373.png" alt="image-20240524173345373"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524173355058.png" alt="image-20240524173355058"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524173423272.png" alt="image-20240524173423272"></p><h4 id="模板题——队列操作"><a href="#模板题——队列操作" class="headerlink" title="模板题——队列操作"></a>模板题——<a href="https://www.lanqiao.cn/problems/1519/learning/">队列操作</a></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">N=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>a=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N):<br>    s=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>    <span class="hljs-keyword">if</span> s[<span class="hljs-number">0</span>]==<span class="hljs-number">1</span>:<br>        a.append(s[<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">elif</span> s[<span class="hljs-number">0</span>]==<span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">if</span> a:<br>            <span class="hljs-built_in">print</span>(a.pop(<span class="hljs-number">0</span>))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;no&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(a))<br></code></pre></td></tr></table></figure><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524175734507.png" alt="image-20240524175734507"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524175709055.png" alt="image-20240524175709055"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524180001397.png" alt="image-20240524180001397"></p><h3 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524182115097.png" alt="image-20240524182115097"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524182127911.png" alt="image-20240524182127911"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524182141588.png" alt="image-20240524182141588"></p><h4 id="模板题——小蓝的神奇复印机"><a href="#模板题——小蓝的神奇复印机" class="headerlink" title="模板题——小蓝的神奇复印机"></a>模板题——<a href="https://www.lanqiao.cn/problems/3749/learning">小蓝的神奇复印机</a></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> PriorityQueue,Queue<br>N,X=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>a=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>q=Queue()<br>pq=PriorityQueue()<br><span class="hljs-keyword">for</span> i,x <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(a):<br>  q.put((i,x))<br>  pq.put(-x)<br>time=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>  i,x=q.get()<br>  <span class="hljs-keyword">if</span> -x==pq.queue[<span class="hljs-number">0</span>]:<br>    pq.get()<br>    time+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> i==X:<br>      <span class="hljs-built_in">print</span>(time)<br>      <span class="hljs-keyword">break</span><br>  <span class="hljs-keyword">else</span>:<br>    q.put((i,x))<br></code></pre></td></tr></table></figure><h2 id="ST表"><a href="#ST表" class="headerlink" title="ST表"></a>ST表</h2><h5 id="RMQ问题"><a href="#RMQ问题" class="headerlink" title="RMQ问题"></a>RMQ问题</h5><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524183506581.png" alt="image-20240524183506581"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524183726055.png" alt="image-20240524183726055"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524183742068.png" alt="image-20240524183742068"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524183753258.png" alt="image-20240524183753258"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524183803151.png" alt="image-20240524183803151"></p><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><h3 id="基础并查集"><a href="#基础并查集" class="headerlink" title="基础并查集"></a>基础并查集</h3><h4 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524194242229.png" alt="image-20240524194242229"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524194253527.png" alt="image-20240524194253527"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524194301781.png" alt="image-20240524194301781"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524194309669.png" alt="image-20240524194309669"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524194317881.png" alt="image-20240524194317881"></p><h5 id="模板题——蓝桥幼儿园"><a href="#模板题——蓝桥幼儿园" class="headerlink" title="模板题——蓝桥幼儿园"></a>模板题——<a href="https://www.lanqiao.cn/problems/1135/learning">蓝桥幼儿园</a></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># def Findroot(x):</span><br><span class="hljs-comment">#     while x!=p[x]:</span><br><span class="hljs-comment">#         x=p[x]</span><br><span class="hljs-comment">#     return x</span><br><span class="hljs-string">&#x27;&#x27;&#x27;使用路径压缩&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Findroot</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">if</span> x==p[x]:<span class="hljs-keyword">return</span> x<br>    <span class="hljs-comment">#路径压缩</span><br>    p[x]=Findroot(p[x])<br>    <span class="hljs-keyword">return</span> p[x]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Merge</span>(<span class="hljs-params">x,y</span>):<br>    rootx,rooty=Findroot(x),Findroot(y)<br>    p[rootx]=rooty<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Query</span>(<span class="hljs-params">x,y</span>):<br>    rootx,rooty=Findroot(x),Findroot(y)<br>    <span class="hljs-keyword">return</span> rootx==rooty<br>n,m=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>p=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>))<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    op,x,y=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    <span class="hljs-keyword">if</span> op ==<span class="hljs-number">1</span>:<br>        Merge(x,y)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> Query(x,y):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;YES&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;NO&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="路径压缩"><a href="#路径压缩" class="headerlink" title="路径压缩"></a>路径压缩</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524195007281.png" alt="image-20240524195007281"></p><h5 id="模板题——星球大战"><a href="#模板题——星球大战" class="headerlink" title="模板题——星球大战"></a>模板题——<a href="https://www.lanqiao.cn/problems/828/learning/">星球大战</a></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br>M = <span class="hljs-number">200010</span>; N = <span class="hljs-number">2</span> * M<br>n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>father = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">10</span>)                 <span class="hljs-comment">#并查集板块</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init</span>():<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">10</span>):<br>        father[i] = i<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_father</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">if</span> x != father[x]: father[x] = find_father(father[x])<br>    <span class="hljs-keyword">return</span> father[x]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">unite</span>(<span class="hljs-params">x, y</span>):<br>    father[find_father(x)] = find_father(y)<br>come = [<span class="hljs-number">0</span>] * N; to = [<span class="hljs-number">0</span>] * N;   <span class="hljs-comment">#存储每个边</span><br>g = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N)]      <span class="hljs-comment">#邻接表</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    a, b = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    g[a].append(b); g[b].append(a)<br>    come[i] = a; to[i] = b <br>broken = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">10</span>)                     <span class="hljs-comment">#记录每个点是否被修坏</span><br>destroy = []<br>k = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):<br>    b = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>    broken[b] = <span class="hljs-number">1</span><br>    destroy.append(b)<br>init()<br>res = n - k             <span class="hljs-comment">#先计算所有剩下星球的连通块数，(最后一轮的结果)</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    l = come[i]; r = to[i]<br>    fl, fr = find_father(l), find_father(r)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> broken[l] <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> broken[r] <span class="hljs-keyword">and</span> fl != fr:<br>        res -= <span class="hljs-number">1</span><br>        <span class="hljs-comment">#unite(l, r)</span><br>        father[fl] = fr<br>ans = [res]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(destroy) - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):       <span class="hljs-comment">#顺序破坏，相当于倒序修建</span><br>    c = destroy[i]<br>    broken[c] = <span class="hljs-number">0</span><br>    res += <span class="hljs-number">1</span>                                    <span class="hljs-comment">#修好一个星球，连通块会多一个</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> g[c]:<br>        fc, fp = find_father(c), find_father(j)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> broken[j] <span class="hljs-keyword">and</span> fc != fp:<br>            res -= <span class="hljs-number">1</span><br>            father[fc] = fp<br>    ans.append(res)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ans) - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):           <span class="hljs-comment">#倒序输出结果</span><br>    <span class="hljs-built_in">print</span>(ans[i])<br></code></pre></td></tr></table></figure><h3 id="可撤销并查集"><a href="#可撤销并查集" class="headerlink" title="可撤销并查集"></a>可撤销并查集</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524203431727.png" alt="image-20240524203431727"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524203449967.png" alt="image-20240524203449967"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524203621861.png" alt="image-20240524203621861"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524203634004.png" alt="image-20240524203634004"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524203643547.png" alt="image-20240524203643547"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524203712193.png" alt="image-20240524203712193"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524203728659.png" alt="image-20240524203728659"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524203741431.png" alt="image-20240524203741431"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524203752845.png" alt="image-20240524203752845"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524203808480.png" alt="image-20240524203808480"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524203837465.png" alt="image-20240524203837465"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524203855506.png" alt="image-20240524203855506"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524203906020.png" alt="image-20240524203906020"></p><h4 id="可撤销并查集定义"><a href="#可撤销并查集定义" class="headerlink" title="可撤销并查集定义"></a>可撤销并查集定义</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524203916807.png" alt="image-20240524203916807"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524203959912.png" alt="image-20240524203959912"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524204009818.png" alt="image-20240524204009818"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524204018333.png" alt="image-20240524204018333"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524204035190.png" alt="image-20240524204035190"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524204043804.png" alt="image-20240524204043804"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524204055615.png" alt="image-20240524204055615"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524204106056.png" alt="image-20240524204106056"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524204120154.png" alt="image-20240524204120154"></p><h4 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524204147436.png" alt="image-20240524204147436"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240524204158246.png" alt="image-20240524204158246"></p><h3 id="带权并查集"><a href="#带权并查集" class="headerlink" title="带权并查集"></a>带权并查集</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526102401075.png" alt="image-20240526102401075"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526102412755.png" alt="image-20240526102412755"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526102423880.png" alt="image-20240526102423880"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526102443080.png" alt="image-20240526102443080"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526102451528.png" alt="image-20240526102451528"></p><h2 id="树上问题"><a href="#树上问题" class="headerlink" title="树上问题"></a>树上问题</h2><h3 id="树的基本概念"><a href="#树的基本概念" class="headerlink" title="树的基本概念"></a>树的基本概念</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526102633616.png" alt="image-20240526102633616"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526102641495.png" alt="image-20240526102641495"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526102651200.png" alt="image-20240526102651200"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526102714548.png" alt="image-20240526102714548"></p><h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526102917869.png" alt="image-20240526102917869"> <br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526102815444.png" alt="image-20240526102815444"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526102945303.png" alt="image-20240526102945303"></p><h4 id="模板题——完全二叉树的权值"><a href="#模板题——完全二叉树的权值" class="headerlink" title="模板题——完全二叉树的权值"></a>模板题——<a href="https://www.lanqiao.cn/problems/183/learning">完全二叉树的权值</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> math<br><br>s = []<br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>x = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br><br>deep = <span class="hljs-built_in">int</span>(math.log(n, <span class="hljs-number">2</span>)) + <span class="hljs-number">1</span>  <span class="hljs-comment"># 完全二叉树求深度公式</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(deep):  <span class="hljs-comment"># 按层数来遍历</span><br>    s.append(<span class="hljs-built_in">sum</span>(x[<span class="hljs-number">2</span> ** i - <span class="hljs-number">1</span>:<span class="hljs-number">2</span> ** i + <span class="hljs-number">2</span> ** i - <span class="hljs-number">1</span>]))  <span class="hljs-comment"># 切片出每层的节点，并计算其权值</span><br><span class="hljs-built_in">print</span>(s.index(<span class="hljs-built_in">max</span>(s)) + <span class="hljs-number">1</span>)  <span class="hljs-comment"># 找出权值最大的层级，并返回其索引</span><br></code></pre></td></tr></table></figure><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526103231454.png" alt="image-20240526103231454"></p><h3 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526103255622.png" alt="image-20240526103255622"></p><h4 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526103305459.png" alt="image-20240526103305459"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526103325159.png" alt="image-20240526103325159"></p><h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526103335871.png" alt="image-20240526103335871"></p><h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526103352924.png" alt="image-20240526103352924"></p><h4 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526103409405.png" alt="image-20240526103409405"></p><h4 id="树的遍历-1"><a href="#树的遍历-1" class="headerlink" title="树的遍历"></a>树的遍历</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526103902993.png" alt="image-20240526103902993"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526103916051.png" alt="image-20240526103916051"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526103926976.png" alt="image-20240526103926976"></p><h4 id="模板题——欧涛爬树"><a href="#模板题——欧涛爬树" class="headerlink" title="模板题——欧涛爬树"></a>模板题——<a href="https://www.lanqiao.cn/problems/3039/learning/">欧涛爬树</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> sys<br>sys.setrecursionlimit(<span class="hljs-number">100000</span>)<br><span class="hljs-built_in">input</span>=sys.stdin.readline<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">u,fa</span>):<span class="hljs-comment">#进行判断是否是叶子节点</span><br>    path.append(s[u])<br>    flag=<span class="hljs-literal">True</span><br>    <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> G[u]:<br>        <span class="hljs-keyword">if</span> v==fa:<span class="hljs-keyword">continue</span><br>        dfs(v,u)<br>        flag=<span class="hljs-literal">False</span><br>    <span class="hljs-keyword">if</span> flag:<br>        S.add(<span class="hljs-string">&#x27;&#x27;</span>.join(path))<br>    path.pop()<br><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>        <span class="hljs-comment">#邻接表进行存放树</span><br>        G=[[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br>        s=<span class="hljs-string">&#x27; &#x27;</span>+<span class="hljs-built_in">input</span>()<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>):<br>            u,v=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>            G[u].append(v)<br>            G[v].append(u)<br>        path=[]<br>        S=<span class="hljs-built_in">set</span>()<br>        dfs(<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(S))<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>():<br>    <span class="hljs-keyword">import</span> sys<br>    <span class="hljs-keyword">return</span> sys.stdin.readline().strip()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">root, fa</span>):<br>    path.append(s[root])<br>    flag = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">for</span> to <span class="hljs-keyword">in</span> vis[root]:<br>        <span class="hljs-keyword">if</span> to == fa:<br>            <span class="hljs-keyword">continue</span><br>        dfs(to, root)<br>        flag = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">if</span> flag:<br>        result.add(<span class="hljs-string">&quot;&quot;</span>.join(path))<br>    path.pop()<br><br><br><span class="hljs-comment"># 多次输入模板</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        n = <span class="hljs-built_in">int</span>(read())<br>        s = read()<br>        vis = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">1</span>):<br>            u, v = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, read().split())<br>            u -= <span class="hljs-number">1</span><br>            v -= <span class="hljs-number">1</span><br>            vis[u].append(v)<br>            vis[v].append(u)<br>        result = <span class="hljs-built_in">set</span>()<br>        path = []<br>        dfs(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(result))<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h3 id="树的直径与重心"><a href="#树的直径与重心" class="headerlink" title="树的直径与重心"></a>树的直径与重心</h3><h4 id="树的直径"><a href="#树的直径" class="headerlink" title="树的直径"></a>树的直径</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526104404857.png" alt="image-20240526104404857"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526104428203.png" alt="image-20240526104428203"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526104454203.png" alt="image-20240526104454203"></p><h4 id="模板题——直径"><a href="#模板题——直径" class="headerlink" title="模板题——直径"></a>模板题——<a href="https://www.lanqiao.cn/problems/1394/learning">直径</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-built_in">input</span> = sys.stdin.readline<br>sys.setrecursionlimit(<span class="hljs-number">100000</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">u, fa, pre=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">global</span> S<br>    <span class="hljs-keyword">if</span> d[u] &gt; d[S]: S = u<br>    <span class="hljs-keyword">for</span> v, w <span class="hljs-keyword">in</span> G[u]:<br>        <span class="hljs-keyword">if</span> v == fa: <span class="hljs-keyword">continue</span><br>        d[v] = d[u] + w<br>        <span class="hljs-keyword">if</span> pre: pre[v] = u<br>        dfs(v, u, pre)<br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>G = [[] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)]<br>d = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>)<br>pre = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">1</span>):<br>    u, v, w = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    G[u].append([v, w])<br>    G[v].append([u, w])<br>S = <span class="hljs-number">1</span><br>dfs(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br>d[S] = <span class="hljs-number">0</span><br>dfs(S, <span class="hljs-number">0</span>, pre)<br>L = [S]<br>L_list = <span class="hljs-built_in">set</span>()<br><span class="hljs-keyword">while</span> S != <span class="hljs-number">0</span>:<br>    L_list.add(S)<br>    S = pre[S]<br><span class="hljs-keyword">for</span> u <span class="hljs-keyword">in</span> L_list:<br>    <span class="hljs-keyword">for</span> i, (v, w) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(G[u]):<br>        <span class="hljs-keyword">if</span> v <span class="hljs-keyword">in</span> L_list:<br>            G[u][i] = [v, w - <span class="hljs-number">1</span>]<br>S = <span class="hljs-number">1</span><br>dfs(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br>d[S] = <span class="hljs-number">0</span><br>dfs(S, <span class="hljs-number">0</span>)<br>L2 = d[S]<br><span class="hljs-built_in">print</span>(L)<br><span class="hljs-built_in">print</span>(L - L2)<br></code></pre></td></tr></table></figure><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526105912364.png" alt="image-20240526105912364"></p><h3 id="LCA"><a href="#LCA" class="headerlink" title="LCA"></a>LCA</h3><h4 id="最近公共祖先"><a href="#最近公共祖先" class="headerlink" title="最近公共祖先"></a>最近公共祖先</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526105959804.png" alt="image-20240526105959804"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526110010233.png" alt="image-20240526110010233"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526110018355.png" alt="image-20240526110018355"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526110031858.png" alt="image-20240526110031858"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526110040710.png" alt="image-20240526110040710"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526110052606.png" alt="image-20240526110052606"></p><h4 id="模板题——最近公共祖先LCA查询"><a href="#模板题——最近公共祖先LCA查询" class="headerlink" title="模板题——最近公共祖先LCA查询"></a>模板题——<a href="https://www.lanqiao.cn/problems/4385/learning">最近公共祖先LCA查询</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-comment">#设置deep数组表示深度。</span><br><span class="hljs-comment">#front数组，表示节点u,前2**i层的爹是谁？？？</span><br>n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>tree=[[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br>fornt=[[<span class="hljs-number">0</span>]*(<span class="hljs-number">21</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<span class="hljs-comment">#如果你是0你就是孤儿。</span><br>deep=[<span class="hljs-number">0</span>]*(n+<span class="hljs-number">1</span>)<span class="hljs-comment">#0节点没有层数。</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>):<br>  u,v=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>  tree[u].append(v)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">er,die</span>):<br>  <span class="hljs-keyword">if</span> die==<span class="hljs-number">0</span>:<br>    deep[er]=<span class="hljs-number">1</span><span class="hljs-comment">#这是第一层,同时，第一层也没有爹啊，也不需要更新如何层数相关节点。</span><br><br>  <span class="hljs-keyword">else</span>:<br>    deep[er]=deep[die]+<span class="hljs-number">1</span><span class="hljs-comment">#更新层数。</span><br>    fornt[er][<span class="hljs-number">0</span>]=die<span class="hljs-comment">#上一层的点，就是die。</span><br>    <span class="hljs-keyword">for</span> cc <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">21</span>):<br>      <span class="hljs-keyword">if</span> fornt[fornt[er][cc-<span class="hljs-number">1</span>]][cc-<span class="hljs-number">1</span>]!=<span class="hljs-number">0</span>:<br><br>        fornt[er][cc]=fornt[fornt[er][cc-<span class="hljs-number">1</span>]][cc-<span class="hljs-number">1</span>]<br>        <span class="hljs-comment">#倍增法。2**i层之上的点=</span><br>        <span class="hljs-comment">#2**(cc-1)上面的点的上面2**(cc-1)的点。就，无限套娃。</span><br>  <br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tree[er]:<br>    dfs(i,er)<span class="hljs-comment">#儿子变成新的爹。</span><br>dfs(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)<span class="hljs-comment">#儿子是根，爹不存在。</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find</span>(<span class="hljs-params">x,y</span>):<br>  <span class="hljs-comment">#第一步，拉升。将x拉到和y一个水平。一开始走2**20步，太大，就走2**19步，然后走一半，再走一半</span><br>  <span class="hljs-comment">#就像那个乌龟与跑步哥一样。二进制原理使得这个步数遍历后一定是一个高度。</span><br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> deep[fornt[x][i]]&gt;=deep[y] <span class="hljs-keyword">and</span> fornt[x][i]!=<span class="hljs-number">0</span>:<br>      x=fornt[x][i]<span class="hljs-comment">#自动判断能走不能走，能走则走一大步。x提升到别的节点。</span><br><br>  <span class="hljs-comment">#此时提升必定一样了。</span><br>  <span class="hljs-keyword">if</span> x==y:<br>    <span class="hljs-keyword">return</span> x<span class="hljs-comment">#原来你就是我爹！</span><br>  <br>  <span class="hljs-keyword">else</span>:<span class="hljs-comment">#不是？我们再度提升吧！神明！</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>      <span class="hljs-keyword">if</span> fornt[x][i]!=fornt[y][i] <span class="hljs-keyword">and</span> fornt[x][i]!=<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> fornt[y][i]!=<span class="hljs-number">0</span>:<span class="hljs-comment">#相等反而不能决定什么，因为可能不是最近的公共祖先</span><br>        x=fornt[x][i]<br>        y=fornt[y][i]<br>    <span class="hljs-keyword">return</span> fornt[y][<span class="hljs-number">0</span>]<span class="hljs-comment">#最后，y上面的就是自己的公共祖先。</span><br>q=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(q):<br>  x,y=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>  <span class="hljs-keyword">if</span> deep[x]&lt;deep[y]:<span class="hljs-comment">#我们设x是深节点。</span><br>    x,y=y,x<br>  <span class="hljs-built_in">print</span>(find(x,y))<br></code></pre></td></tr></table></figure><h3 id="树上差分"><a href="#树上差分" class="headerlink" title="树上差分"></a>树上差分</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526110829760.png" alt="image-20240526110829760"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526110840432.png" alt="image-20240526110840432"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526110850262.png" alt="image-20240526110850262"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526110859590.png" alt="image-20240526110859590"></p><h4 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526110924343.png" alt="image-20240526110924343"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526110933963.png" alt="image-20240526110933963"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526110943437.png" alt="image-20240526110943437"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526110952759.png" alt="image-20240526110952759"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526111012615.png" alt="image-20240526111012615"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526111135950.png" alt="image-20240526111135950"></p><h4 id="模板题——"><a href="#模板题——" class="headerlink" title="模板题——"></a>模板题——</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict<br><br>maxn = <span class="hljs-number">110000</span><br>n, k = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, sys.stdin.readline().split())<br>maxx = <span class="hljs-built_in">int</span>(math.log2(n))<br>edge = defaultdict(<span class="hljs-built_in">list</span>)<br>head = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>)<br>dep = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>)<br>dlt = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>)<br>fa = [[<span class="hljs-number">0</span>] * <span class="hljs-number">20</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)]<br>cnt = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_edge</span>(<span class="hljs-params">a, b, dis</span>):<br>    <span class="hljs-keyword">global</span> cnt<br>    cnt += <span class="hljs-number">1</span><br>    edge[cnt] = [head[a], b, dis]<br>    head[a] = cnt<br>    cnt += <span class="hljs-number">1</span><br>    edge[cnt] = [head[b], a, dis]<br>    head[b] = cnt<br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">1</span>):<br>    a, b, dis = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, sys.stdin.readline().split())<br>    add_edge(a, b, dis)<br><br>dfs(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):<br>    a, b, x = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, sys.stdin.readline().split())<br>    dlt[a] += x<br>    dlt[b] += x<br>    c = lca(a, b)<br>    dlt[c] -= <span class="hljs-number">2</span> * x<br><br>dfs1(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>    <span class="hljs-built_in">print</span>(dlt[i], end=<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure><h3 id="DFS序"><a href="#DFS序" class="headerlink" title="DFS序"></a>DFS序</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526111342883.png" alt="image-20240526111342883"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526111358571.png" alt="image-20240526111358571"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526111411449.png" alt="image-20240526111411449"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526111421595.png" alt="image-20240526111421595"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526111429485.png" alt="image-20240526111429485"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526111439242.png" alt="image-20240526111439242"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526111454557.png" alt="image-20240526111454557"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526111510842.png" alt="image-20240526111510842"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526111525573.png" alt="image-20240526111525573"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526111537764.png" alt="image-20240526111537764"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526111549957.png" alt="image-20240526111549957"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526111604828.png" alt="image-20240526111604828"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526111613985.png" alt="image-20240526111613985"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526111621233.png" alt="image-20240526111621233"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526111628644.png" alt="image-20240526111628644"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526111634702.png" alt="image-20240526111634702"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526111645145.png" alt="image-20240526111645145"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526111654060.png" alt="image-20240526111654060"></p><h4 id="模板题——异或和"><a href="#模板题——异或和" class="headerlink" title="模板题——异或和"></a>模板题——<a href="https://www.lanqiao.cn/problems/3549/learning">异或和</a></h4><h5 id="dfs序和树状数组"><a href="#dfs序和树状数组" class="headerlink" title="dfs序和树状数组"></a>dfs序和树状数组</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python">n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>v = [<span class="hljs-number">0</span>] + <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>g = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)]<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">1</span>):<br>    u, va = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    g[u].append(va)<br>    g[va].append(u)<br><br>tree = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>)<br>a = [[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)] <span class="hljs-comment"># 存dfs序</span><br>cnt = <span class="hljs-number">0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">node, fa</span>):<br>    <span class="hljs-keyword">global</span> cnt<br>    cnt += <span class="hljs-number">1</span><br>    a[node][<span class="hljs-number">0</span>] = cnt<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> g[node]:<br>        <span class="hljs-keyword">if</span> i != fa:<br>            dfs(i, node)<br>    a[node][<span class="hljs-number">1</span>] = cnt<br>dfs(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lowbit</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x &amp; (-x)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">x, d</span>):<br>    <span class="hljs-keyword">while</span> x &lt;= n:<br>        tree[x] ^= d<br>        x += lowbit(x)<br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">x</span>):<br>    ans = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> x:<br>        ans ^= tree[x]<br>        x -= lowbit(x)<br>    <span class="hljs-keyword">return</span> ans<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>    update(a[i][<span class="hljs-number">0</span>], v[i])<br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    o = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>    <span class="hljs-keyword">if</span> o[<span class="hljs-number">0</span>] == <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">print</span>(query(a[o[<span class="hljs-number">1</span>]][<span class="hljs-number">1</span>]) ^ query(a[o[<span class="hljs-number">1</span>]][<span class="hljs-number">0</span>] - <span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">else</span>:<br>        x, y = o[<span class="hljs-number">1</span>], o[<span class="hljs-number">2</span>]<br>        update(a[x][<span class="hljs-number">0</span>], v[x] ^ y)<br>        v[x] = y<br></code></pre></td></tr></table></figure><h5 id="模拟暴力代码"><a href="#模拟暴力代码" class="headerlink" title="模拟暴力代码"></a>模拟暴力代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python">n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>a = [<span class="hljs-number">0</span>] + <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>g = [[] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)]<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">1</span>):<br>    c, d =<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    g[c].append(d)<br>    g[d].append(c)<br><br>dep = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>)<br>dep[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">depth</span>(<span class="hljs-params">node, fa</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> g[node]:<br>        <span class="hljs-keyword">if</span> i != fa:<br>            dep[i] = dep[node] + <span class="hljs-number">1</span><br>            depth(i, node)<br>depth(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">node</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> g[node]:<br>        <span class="hljs-keyword">if</span> dep[i] &gt; dep[node]:<br>            li.append(a[i])<br>            dfs(i)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">global</span> li<br>    li = [a[n]]<br>    dfs(n)<br>    ans = li[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(li)):<br>        ans = ans ^ li[i]<br>    <span class="hljs-built_in">print</span>(ans)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">change</span>(<span class="hljs-params">x, y</span>):<br>    a[x] = y<br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    o = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>    <span class="hljs-keyword">if</span> o[<span class="hljs-number">0</span>] == <span class="hljs-number">2</span>: query(o[<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">else</span>: change(o[<span class="hljs-number">1</span>], o[<span class="hljs-number">2</span>])<br></code></pre></td></tr></table></figure><p>利用邻接表打印树结构，然后根据子树根节点寻找打印子树的元素，存到列表中，最后对列表的所有元素（即子树的所有点）进行异或和运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br>n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())  <span class="hljs-comment"># 读取输入的 n 和 m</span><br>value = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))  <span class="hljs-comment"># 读取输入的值列表</span><br>value.insert(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)  <span class="hljs-comment"># 在值列表的最前面插入 0,根节点为1，索引从1开始</span><br>yihuo = []  <span class="hljs-comment"># 存储异或运算结果的列表</span><br>tree = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)]  <span class="hljs-comment"># 初始化邻接表,表示树结构</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">1</span>):  <span class="hljs-comment"># 读取 n-1 次输入</span><br>    a, b = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    a, b = <span class="hljs-built_in">min</span>(a, b), <span class="hljs-built_in">max</span>(a, b)<br>    tree[a].append(b)  <span class="hljs-comment"># 在 a 结点的邻接表中添加 b 结点，说明b为a的子节点</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):  <span class="hljs-comment"># 读取 m 次操作输入</span><br>    op = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>    <span class="hljs-keyword">if</span> op[<span class="hljs-number">0</span>] == <span class="hljs-number">1</span>:  <span class="hljs-comment"># 如果是操作 1</span><br>        value[op[<span class="hljs-number">1</span>]] = op[<span class="hljs-number">2</span>]  <span class="hljs-comment"># 更新点权</span><br>    <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 如果是操作 2</span><br>        x = op[<span class="hljs-number">1</span>]<span class="hljs-comment">#子树根节点</span><br>        vis = [x]  <span class="hljs-comment"># 把子树存到该列表里</span><br>        qfront = <span class="hljs-number">0</span>  <span class="hljs-comment"># 队列的头指针</span><br>        qend = <span class="hljs-number">1</span>  <span class="hljs-comment"># 队列的尾指针</span><br>        <span class="hljs-keyword">while</span> qfront != qend:  <span class="hljs-comment"># 当队列不为空时</span><br>            <span class="hljs-keyword">if</span> tree[vis[qfront]] != []:  <span class="hljs-comment"># 该节点有子节点</span><br>                vis.extend(tree[vis[qfront]])  <span class="hljs-comment"># 将子节点存到子树中</span><br>                qend += <span class="hljs-built_in">len</span>(tree[vis[qfront]])  <span class="hljs-comment"># 更新队列的尾指针</span><br>            qfront += <span class="hljs-number">1</span>  <span class="hljs-comment"># 更新队列的头指针</span><br>        ans = value[vis[<span class="hljs-number">0</span>]]  <span class="hljs-comment"># 初始化异或运算的结果</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(vis)):  <span class="hljs-comment"># 遍历访问列表中的结点</span><br>            ans ^= value[vis[i]]  <span class="hljs-comment"># 对每个结点的值进行异或运算</span><br>        yihuo.append(ans)  <span class="hljs-comment"># 将异或运算的结果加入到结果列表中</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> yihuo:  <span class="hljs-comment"># 遍历结果列表</span><br>    <span class="hljs-built_in">print</span>(i)  <span class="hljs-comment"># 输出每个异或运算的结果</span><br></code></pre></td></tr></table></figure><h3 id="树链剖分"><a href="#树链剖分" class="headerlink" title="树链剖分"></a>树链剖分</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112353706.png" alt="image-20240526112353706"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112401255.png" alt="image-20240526112401255"></p><h4 id="重链部分"><a href="#重链部分" class="headerlink" title="重链部分"></a>重链部分</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112422998.png" alt="image-20240526112422998"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112438353.png" alt="image-20240526112438353"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112446340.png" alt="image-20240526112446340"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112453669.png" alt="image-20240526112453669"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112501407.png" alt="image-20240526112501407"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112511133-1716693912043-1.png" alt="image-20240526112511133"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112520973.png" alt="image-20240526112520973"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112528251.png" alt="image-20240526112528251"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112534620.png" alt="image-20240526112534620"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112540265.png" alt="image-20240526112540265"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112547668.png" alt="image-20240526112547668"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112554018.png" alt="image-20240526112554018"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112600918.png" alt="image-20240526112600918"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112606842.png" alt="image-20240526112606842"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112612323.png" alt="image-20240526112612323"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112617087.png" alt="image-20240526112617087"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112624067.png" alt="image-20240526112624067"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112632456.png" alt="image-20240526112632456"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112636784.png" alt="image-20240526112636784"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112641641.png" alt="image-20240526112641641"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112646496.png" alt="image-20240526112646496"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112653107.png" alt="image-20240526112653107"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112657735.png" alt="image-20240526112657735"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112703078.png" alt="image-20240526112703078"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112709755.png" alt="image-20240526112709755"></p><h4 id="树链部分的性质"><a href="#树链部分的性质" class="headerlink" title="树链部分的性质"></a>树链部分的性质</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112730804.png" alt="image-20240526112730804"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112737253.png" alt="image-20240526112737253"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112746989.png" alt="image-20240526112746989"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112753152.png" alt="image-20240526112753152"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112759297.png" alt="image-20240526112759297"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112805144.png" alt="image-20240526112805144"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112810692.png" alt="image-20240526112810692"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112816453.png" alt="image-20240526112816453"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112839302.png" alt="image-20240526112839302"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112846421.png" alt="image-20240526112846421"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112851218.png" alt="image-20240526112851218"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112856579.png" alt="image-20240526112856579"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112901873.png" alt="image-20240526112901873"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112907428.png" alt="image-20240526112907428"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112913595.png" alt="image-20240526112913595"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112918708.png" alt="image-20240526112918708"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526112923449.png" alt="image-20240526112923449"></p><h2 id="树形数据结构"><a href="#树形数据结构" class="headerlink" title="树形数据结构"></a>树形数据结构</h2><h3 id="树状数组基础"><a href="#树状数组基础" class="headerlink" title="树状数组基础"></a>树状数组基础</h3><h4 id="lowbit操作"><a href="#lowbit操作" class="headerlink" title="lowbit操作"></a>lowbit操作</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526113101030.png" alt="image-20240526113101030"></p><h4 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526113114986.png" alt="image-20240526113114986"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526113123838.png" alt="image-20240526113123838"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526113132131.png" alt="image-20240526113132131"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526113141135.png" alt="image-20240526113141135"></p><h4 id="模板题——单点修改，区间查询"><a href="#模板题——单点修改，区间查询" class="headerlink" title="模板题——单点修改，区间查询"></a>模板题——<a href="https://www.lanqiao.cn/problems/2340/learning/">单点修改，区间查询</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs py">N = <span class="hljs-number">100100</span><br><span class="hljs-comment">#初始化树状数组 为0</span><br>f = [<span class="hljs-number">0</span>] * N<br><br><span class="hljs-comment">#求下标为x的最小区间长度</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lowbit</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x &amp; (-x)<br><br><span class="hljs-comment">#树状数组更新函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upd</span>(<span class="hljs-params">pos,v</span>):<span class="hljs-comment">#pos：下标 v：值</span><br>    <span class="hljs-comment">#在下标为pos的区间加上v 并且在每个有包含pos的大区间加上v</span><br>    <span class="hljs-comment">#包含当前区间的大区间：在pos的位置上加lowbit(pos)便能得到大区间</span><br>    <span class="hljs-keyword">while</span> pos &lt;= n:<br>        f[pos] += v<br>        pos += lowbit(pos)<br><br><span class="hljs-comment">#得到1-pos位置的前缀和</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">pos</span>):<br>    res = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> pos &gt; <span class="hljs-number">0</span>:<span class="hljs-comment">#加上组成pos每一个区间的和</span><br>        res += f[pos]<br>        pos -= lowbit(pos)<br>    <span class="hljs-keyword">return</span> res<br><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>data = <span class="hljs-built_in">input</span>().split()<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,n):<br>    x = <span class="hljs-built_in">int</span>(data[i])<br>    <span class="hljs-comment">#树状数组初始化都为0，需要将原数组每个值通过upd方法将每个值加入树状数组</span><br>    upd(i+<span class="hljs-number">1</span>,x)<br><br>m = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    opt,a,b = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    <span class="hljs-keyword">if</span> opt == <span class="hljs-number">1</span>:<br>        upd(a,b)<span class="hljs-comment">#更新</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment">#区间[a,b] = [1,b] - [1,a-1]</span><br>        <span class="hljs-built_in">print</span>(get(b) - get(a-<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br>N = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>n = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>m = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>  s,a,b = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>  <span class="hljs-keyword">if</span> s == <span class="hljs-number">1</span>:<br>    n[a-<span class="hljs-number">1</span>] += b<br>  <span class="hljs-keyword">if</span> s == <span class="hljs-number">2</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>(n[a-<span class="hljs-number">1</span>:b]))<br></code></pre></td></tr></table></figure><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526113358856.png" alt="image-20240526113358856"></p><h4 id="树状数组-1"><a href="#树状数组-1" class="headerlink" title="树状数组"></a>树状数组</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526113430755.png" alt="image-20240526113430755"></p><h4 id="模板题——殷老师排队"><a href="#模板题——殷老师排队" class="headerlink" title="模板题——殷老师排队"></a>模板题——<a href="https://www.lanqiao.cn/problems/3620/learning/">殷老师排队</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lowbit</span>(<span class="hljs-params">x</span>):<br>  <span class="hljs-keyword">return</span> x &amp; (-x)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">x</span>):<br>  ans = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">while</span> x:<br>    ans += tree[x]<br>    x -= lowbit(x)<br>  <span class="hljs-keyword">return</span> ans <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x,y</span>):<br>  <span class="hljs-keyword">while</span> x &lt;= n:<br>    tree[x] += y<br>    x += lowbit(x)<br><br>n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>a =[<span class="hljs-number">0</span>] + <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>tree = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>  add(i,a[i])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>  lt = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>  <span class="hljs-keyword">if</span> lt[<span class="hljs-number">0</span>] == <span class="hljs-number">1</span>:<br>    x, y = lt[<span class="hljs-number">1</span>], lt[<span class="hljs-number">2</span>]<br>    add(x,y - a[x])<br>    a[x] = y<br>  <span class="hljs-keyword">else</span>:<br>    x = lt[<span class="hljs-number">1</span>]<br>    ans = (<span class="hljs-number">2</span> * x - n - <span class="hljs-number">2</span>) * a[x] + query(n) - <span class="hljs-number">2</span>*query(x-<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h3 id="二维树状数组"><a href="#二维树状数组" class="headerlink" title="二维树状数组"></a>二维树状数组</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526113722203.png" alt="image-20240526113722203"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526113730769.png" alt="image-20240526113730769"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526113742110.png" alt="image-20240526113742110"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526113748208.png" alt="image-20240526113748208"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526113754750.png" alt="image-20240526113754750"></p><h4 id="模板题——-1"><a href="#模板题——-1" class="headerlink" title="模板题——"></a>模板题——</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526113904670.png" alt="image-20240526113904670"></p><h3 id="树状数组上二分"><a href="#树状数组上二分" class="headerlink" title="树状数组上二分"></a>树状数组上二分</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526113950824.png" alt="image-20240526113950824"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526113958446.png" alt="image-20240526113958446"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526114007562.png" alt="image-20240526114007562"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526114020291.png" alt="image-20240526114020291"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526114102890.png" alt="image-20240526114102890"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526114113384.png" alt="image-20240526114113384"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526114124229.png" alt="image-20240526114124229"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526114131782.png" alt="image-20240526114131782"></p><h4 id="模板题——-2"><a href="#模板题——-2" class="headerlink" title="模板题——"></a>模板题——</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python">maxn = <span class="hljs-number">110000</span><br>ans = [<span class="hljs-number">0</span>] * maxn<br>tree = [<span class="hljs-number">0</span>] * maxn<br>a = [<span class="hljs-number">0</span>] * maxn<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lowbit</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x &amp; -x<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">pos, x</span>):<br>    <span class="hljs-keyword">while</span> pos &lt; maxn:<br>        tree[pos] += x<br>        pos += lowbit(pos)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">pos</span>):<br>    res = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> pos &gt; <span class="hljs-number">0</span>:<br>        res += tree[pos]<br>        pos -= lowbit(pos)<br>    <span class="hljs-keyword">return</span> res<br><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>nums = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().strip().split()))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>    a[i] = nums[i - <span class="hljs-number">1</span>]<br>    add(i, <span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>    l, r = <span class="hljs-number">1</span>, n<br>    <span class="hljs-keyword">while</span> l &lt;= r:<br>        mid = (l + r) // <span class="hljs-number">2</span><br>        <span class="hljs-keyword">if</span> query(mid) &lt; a[i] + <span class="hljs-number">1</span>:<br>            l = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            r = mid - <span class="hljs-number">1</span><br>    ans[i] = r<br>    add(r, -<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>    <span class="hljs-built_in">print</span>(ans[i], end=<span class="hljs-string">&#x27; &#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="线段树-动态开点"><a href="#线段树-动态开点" class="headerlink" title="线段树-动态开点"></a>线段树-动态开点</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526121216936.png" alt="image-20240526121216936"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526121240169.png" alt="image-20240526121240169"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526121250475.png" alt="image-20240526121250475"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526121357462.png" alt="image-20240526121357462"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526121408234.png" alt="image-20240526121408234"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526121446955.png" alt="image-20240526121446955"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526121517887.png" alt="image-20240526121517887"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526121505465.png" alt="image-20240526121505465"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526121533131.png" alt="image-20240526121533131"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526121542078.png" alt="image-20240526121542078"></p><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526121653108.png" alt="image-20240526121653108"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Tree</span> &#123;</span><br>    <span class="hljs-type">int</span> l, r, n, ls, rs;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;t, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> pos, <span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!t) &#123;<br>        t = ++ cnt;<br>        tree[t].l = l;<br>        tree[t].r = r;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (l == r) &#123;<br>        tree[t].n = n;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (pos &lt;= mid) &#123;<br>        update(tree[t].ls, l, mid, pos, n);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        update(tree[t].rs, mid + <span class="hljs-number">1</span>, r, pos, n);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">getnum</span><span class="hljs-params">(<span class="hljs-type">int</span> t, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!t) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (tree[t].l == l &amp;&amp; tree[t].r == r) &#123;<br>        <span class="hljs-keyword">return</span> tree[t].n;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (tree[t].l + tree[t].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (r &lt;= mid) &#123;<br>        <span class="hljs-keyword">return</span> getnum(tree[t].ls, l, r);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (l &gt; mid) &#123;<br>        <span class="hljs-keyword">return</span> getnum(tree[t].rs, l, r);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> getnum(tree[t].ls, l, mid) + getnum(tree[t].rs, mid + <span class="hljs-number">1</span>, r);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="线段树-标记永久化"><a href="#线段树-标记永久化" class="headerlink" title="线段树-标记永久化"></a>线段树-标记永久化</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526121717724.png" alt="image-20240526121717724"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526121729855.png" alt="image-20240526121729855"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526121746997.png" alt="image-20240526121746997"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526121821681.png" alt="image-20240526121821681"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526121831175.png" alt="image-20240526121831175"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526121847400.png" alt="image-20240526121847400"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526121855524.png" alt="image-20240526121855524"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526121904894.png" alt="image-20240526121904894"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526121912575.png" alt="image-20240526121912575"></p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">build</span><span class="hljs-params">(<span class="hljs-type">int</span> t, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> *v)</span> &#123;<br>    _l[t] = l;<br>    _r[t] = r;<br>    <span class="hljs-keyword">if</span> (l == r) &#123;<br>        _v[t] = v[l];<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    build(t &lt;&lt; <span class="hljs-number">1</span>, l, mid, v);<br>    build(t &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r, v);<br>    _v[t] = _v[t &lt;&lt; <span class="hljs-number">1</span>] + _v[t &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">int</span> t, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> k)</span> &#123;<br>    _v[t] += k * (r - l + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (_l[t] == l &amp;&amp; _r[t] == r) &#123;<br>        _laz[t] += k;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (_l[t] + _r[t]) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (r &lt;= mid) &#123;<br>        update(t &lt;&lt; <span class="hljs-number">1</span>, l, r, k);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (l &gt; mid) &#123;<br>        update(t &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r, k);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        update(t &lt;&lt; <span class="hljs-number">1</span>, l, mid, k);<br>        update(t &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r, k);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">getv</span><span class="hljs-params">(<span class="hljs-type">int</span> t, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> sum)</span> &#123;<br>    <span class="hljs-keyword">if</span> (_l[t] == l &amp;&amp; _r[t] == r) &#123;<br>        <span class="hljs-keyword">return</span> _v[t] + sum * (_r[t] - _l[t] + <span class="hljs-number">1</span>);;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (_l[t] + _r[t]) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (r &lt;= mid) &#123;<br>        <span class="hljs-keyword">return</span> getv(t &lt;&lt; <span class="hljs-number">1</span>, l, r, sum + _laz[t]);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (l &gt; mid) &#123;<br>        <span class="hljs-keyword">return</span> getv(t &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r, sum + _laz[t]);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> getv(t &lt;&lt; <span class="hljs-number">1</span>, l, mid, sum + _laz[t])<br>            + getv(t &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r, sum + _laz[t]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="线段树维护矩阵"><a href="#线段树维护矩阵" class="headerlink" title="线段树维护矩阵"></a>线段树维护矩阵</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526124453903.png" alt="image-20240526124453903"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526124459467.png" alt="image-20240526124459467"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526124505523.png" alt="image-20240526124505523"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526124509905.png" alt="image-20240526124509905"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526124524019.png" alt="image-20240526124524019"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526124529840.png" alt="image-20240526124529840"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526124537171.png" alt="image-20240526124537171"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526124545230.png" alt="image-20240526124545230"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> t, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    _l[t] = l;<br>    _r[t] = r;<br>    _v[t] = _E;<br>    <span class="hljs-keyword">if</span> (l == r) &#123;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(t &lt;&lt; <span class="hljs-number">1</span>, l, mid);<br>    <span class="hljs-built_in">build</span>(t &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> t, <span class="hljs-type">int</span> pos, MATRIX &amp;v)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (_l[t] = _r[t]) &#123;<br>        _v[t] = v;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (_l[t] + _r[t]) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (pos &lt;= mid) &#123;<br>        <span class="hljs-built_in">update</span>(t &lt;&lt; <span class="hljs-number">1</span>, pos, v);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">update</span>(t &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, pos, v);<br>    &#125;<br>    _v[t] = _v[t &lt;&lt; <span class="hljs-number">1</span>] * _v[t &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-function">MATRIX <span class="hljs-title">getv</span><span class="hljs-params">(<span class="hljs-type">int</span> t, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (_l[t] == l &amp;&amp; _r[t] == r) &#123;<br>        <span class="hljs-keyword">return</span> _v[t];<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (_l[t] + _r[t]) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (r &lt;= mid) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">getv</span>(t &lt;&lt; <span class="hljs-number">1</span>, l, r);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (l &gt; mid) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">getv</span>(t &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">getv</span>(t &lt;&lt; <span class="hljs-number">1</span>, l, mid) * <span class="hljs-built_in">getv</span>(t &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="线段树维护哈希"><a href="#线段树维护哈希" class="headerlink" title="线段树维护哈希"></a>线段树维护哈希</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526124653609.png" alt="image-20240526124653609"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526124700848.png" alt="image-20240526124700848"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526124710439.png" alt="image-20240526124710439"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526124717847.png" alt="image-20240526124717847"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526124726230.png" alt="image-20240526124726230"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526124754241.png" alt="image-20240526124754241"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs py">bs1= []<br>bs2= []<br>mod1 = <span class="hljs-number">998244353</span><br>mod2 = <span class="hljs-number">19260817</span><br>bas = <span class="hljs-number">233</span><br>s = []<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">asdf</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, h1, h2, length</span>):<br>        self.h1 = h1<br>        self.h2 = h2<br>        self.length = length<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__add__</span>(<span class="hljs-params">self, c</span>):<br>        <span class="hljs-keyword">return</span> asdf((self.h1 * bs1[c.length] + c.h1) % mod1, (self.h2 * bs2[c.length] + c.h2) % mod2, self.length + c.length)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__eq__</span>(<span class="hljs-params">self, c</span>):<br>        <span class="hljs-keyword">return</span> self.h1 == c.h1 <span class="hljs-keyword">and</span> self.h2 == c.h2 <span class="hljs-keyword">and</span> self.length == c.length<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build</span>(<span class="hljs-params">l, r, rt</span>):<br>    <span class="hljs-keyword">if</span> l == r:<br>        s[rt] = asdf(<span class="hljs-built_in">ord</span>(a[l]), <span class="hljs-built_in">ord</span>(a[l]), <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> s[rt]<br>    s[rt] = build(l, (l + r) // <span class="hljs-number">2</span>, rt * <span class="hljs-number">2</span>) + build((l + r) // <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, r, rt * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> s[rt]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">l, r, rt, x, y</span>):<br>    <span class="hljs-keyword">if</span> x &lt;= l <span class="hljs-keyword">and</span> r &lt;= y:<br>        <span class="hljs-keyword">return</span> s[rt]<br>    <span class="hljs-keyword">if</span> y &lt;= (l + r) // <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> query(l, (l + r) // <span class="hljs-number">2</span>, rt * <span class="hljs-number">2</span>, x, y)<br>    <span class="hljs-keyword">if</span> x &gt; (l + r) // <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> query((l + r) // <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, r, rt * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, x, y)<br>    <span class="hljs-keyword">return</span> query(l, (l + r) // <span class="hljs-number">2</span>, rt * <span class="hljs-number">2</span>, x, y) + query((l + r) // <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, r, rt * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, x, y)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">modify</span>(<span class="hljs-params">l, r, rt, ad, ch</span>):<br>    <span class="hljs-keyword">if</span> l == r:<br>        s[rt] = asdf(<span class="hljs-built_in">ord</span>(ch), <span class="hljs-built_in">ord</span>(ch), <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> s[rt]<br>    <span class="hljs-keyword">if</span> ad &lt;= (l + r) // <span class="hljs-number">2</span>:<br>        s[rt] = modify(l, (l + r) // <span class="hljs-number">2</span>, rt * <span class="hljs-number">2</span>, ad, ch) + s[rt * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">else</span>:<br>        s[rt] = s[rt * <span class="hljs-number">2</span>] + modify((l + r) // <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, r, rt * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, ad, ch)<br>    <span class="hljs-keyword">return</span> s[rt]<br><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>a = <span class="hljs-built_in">input</span>()<br>a = <span class="hljs-string">&quot;!&quot;</span> + a<br>bs1.append(<span class="hljs-number">1</span>)<br>bs2.append(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    bs1.append(bs1[i]*bas%mod1)<br>    bs2.append(bs2[i]*bas%mod2)<br>s = [<span class="hljs-literal">None</span>] * (<span class="hljs-number">4</span> * (n+<span class="hljs-number">5</span>))<br>build(<span class="hljs-number">1</span>, n, <span class="hljs-number">1</span>)<br><br>q = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(q):<br>    ls=<span class="hljs-built_in">input</span>().split()<br>    opt = ls[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">if</span> opt == <span class="hljs-string">&#x27;1&#x27;</span>:<br>        ad = <span class="hljs-built_in">int</span>(ls[<span class="hljs-number">1</span>])<br>        ch = ls[<span class="hljs-number">2</span>]<br>        modify(<span class="hljs-number">1</span>, n, <span class="hljs-number">1</span>, <span class="hljs-built_in">int</span>(ad), ch)<br>    <span class="hljs-keyword">else</span>:<br>        l1 = <span class="hljs-built_in">int</span>(ls[<span class="hljs-number">1</span>])<br>        r1 = <span class="hljs-built_in">int</span>(ls[<span class="hljs-number">2</span>])<br>        l2 = <span class="hljs-built_in">int</span>(ls[<span class="hljs-number">3</span>])<br>        r2 = <span class="hljs-built_in">int</span>(ls[<span class="hljs-number">4</span>])<br>        x = query(<span class="hljs-number">1</span>, n, <span class="hljs-number">1</span>, l1, r1)<br>        y = query(<span class="hljs-number">1</span>, n, <span class="hljs-number">1</span>, l2, r2)<br>        <span class="hljs-keyword">if</span> x == y:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;YES&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;NO&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="可持久化线段树"><a href="#可持久化线段树" class="headerlink" title="可持久化线段树"></a>可持久化线段树</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526122146448.png" alt="image-20240526122146448"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526122158524.png" alt="image-20240526122158524"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526122211004.png" alt="image-20240526122211004"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526122219620.png" alt="image-20240526122219620"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526122228761.png" alt="image-20240526122228761"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526122248198.png" alt="image-20240526122248198"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526122258158.png" alt="image-20240526122258158"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526122329330.png" alt="image-20240526122329330"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526122339224.png" alt="image-20240526122339224"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526122353739.png" alt="image-20240526122353739"></p><h4 id="可持久化线段树-1"><a href="#可持久化线段树-1" class="headerlink" title="可持久化线段树"></a>可持久化线段树</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">NODE</span> &#123;</span><br>    <span class="hljs-type">int</span> v, ls, rs;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SEGTREE</span> &#123;</span><br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> root[MAXN &lt;&lt; <span class="hljs-number">5</span>];<br>    NODE node[MAXN &lt;&lt; <span class="hljs-number">5</span>];<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">SEGTREE::update</span><span class="hljs-params">(<span class="hljs-type">int</span> <span class="hljs-type">_t</span>, <span class="hljs-type">int</span> &amp;t, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> pos, <span class="hljs-type">int</span> k)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!t) &#123;<br>        t = ++cnt;<br>        node[t].v = node[<span class="hljs-type">_t</span>].v;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (l == r) &#123;<br>        node[t].v += k;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (pos &lt;= mid) &#123;<br>        node[t].rs = node[<span class="hljs-type">_t</span>].rs;<br>        update(node[<span class="hljs-type">_t</span>].ls, node[t].ls, l, mid, pos, k);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        node[t].ls = node[<span class="hljs-type">_t</span>].ls;<br>        update(node[<span class="hljs-type">_t</span>]).rs, node[t].rs, mid + <span class="hljs-number">1</span>, r, pos, k);<br>    &#125;<br>    node[t].v = node[node[t].ls].v + node[node[t].rs].v;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">SEGTREE::getV</span><span class="hljs-params">(<span class="hljs-type">int</span> t, <span class="hljs-type">int</span> _l, <span class="hljs-type">int</span> _r, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!t) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (l == _l &amp;&amp; r == _r) &#123;<br>        <span class="hljs-keyword">return</span> node[t].v;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (_l + _r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (r &lt;= mid) &#123;<br>        <span class="hljs-keyword">return</span> getV(node[t].ls, _l, mid, l, r);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (l &gt; mid) &#123;<br>        <span class="hljs-keyword">return</span> getV(node[t].rs, mid + <span class="hljs-number">1</span>, _r, l, r);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> getV(node[t].ls, _l, mid, l, mid)<br>            + getV(node[t].rs, mid + <span class="hljs-number">1</span>, _r, mid + <span class="hljs-number">1</span>, r);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="模板题——区间第k小"><a href="#模板题——区间第k小" class="headerlink" title="模板题——区间第k小"></a>模板题——<a href="https://www.lanqiao.cn/problems/1132/learning/">区间第k小</a></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> lc(x) tr[x].l</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rc(x) tr[x].r</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">2e5</span>+<span class="hljs-number">6</span>;<br><span class="hljs-type">int</span> n,m,a[N],b[N];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br> <span class="hljs-type">int</span> l,r,s;<span class="hljs-comment">//左右儿子，该节点在值域中的个数</span><br>&#125;tr[N*<span class="hljs-number">20</span>];<br><span class="hljs-type">int</span> idx,root[N];<br><span class="hljs-type">void</span> <span class="hljs-title function_">build</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;x,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span><br>&#123;<br>    x=++idx;<br>    <span class="hljs-keyword">if</span>(l==r)<span class="hljs-keyword">return</span> ;<br>    <span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    build(lc(x),l,mid);<br>    build(rc(x),mid+<span class="hljs-number">1</span>,r);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> &amp;y,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> v)</span><br>&#123;<br>    y=++idx;<br>    tr[y]=tr[x];<br>    tr[y].s++;<br>    <span class="hljs-keyword">if</span>(l==r)<span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(v&lt;=mid)<br>        update(lc(x),lc(y),l,mid,v);<br>    <span class="hljs-keyword">else</span><br>        update(rc(x),rc(y),mid+<span class="hljs-number">1</span>,r,v);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> k)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(l==r)<span class="hljs-keyword">return</span> l;<br>    <span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> s=tr[lc(y)].s-tr[lc(x)].s;<br>    <span class="hljs-keyword">if</span>(k&lt;=s)<br>        <span class="hljs-keyword">return</span> query(lc(x),lc(y),l,mid,k);<br>    <span class="hljs-keyword">else</span> <br>        <span class="hljs-keyword">return</span> query(rc(x),rc(y),mid+<span class="hljs-number">1</span>,r,k-s);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    ios::sync_with_stdio(<span class="hljs-number">0</span>),<span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>),<span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>        b[i]=a[i];<br>    &#125;<br>    sort(b+<span class="hljs-number">1</span>,b+<span class="hljs-number">1</span>+n);<br>    <span class="hljs-type">int</span> bn=unique(b+<span class="hljs-number">1</span>,b+<span class="hljs-number">1</span>+n)-b<span class="hljs-number">-1</span>;<br>    build(root[<span class="hljs-number">0</span>],<span class="hljs-number">1</span>,bn);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> id=lower_bound(b+<span class="hljs-number">1</span>,b+<span class="hljs-number">1</span>+bn,a[i])-b;<br>        update(root[i<span class="hljs-number">-1</span>],root[i],<span class="hljs-number">1</span>,bn,id);<br>    &#125;<br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        <span class="hljs-type">int</span> l,r,k;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;l&gt;&gt;r&gt;&gt;k;<br>        <span class="hljs-type">int</span> id=query(root[l<span class="hljs-number">-1</span>],root[r],<span class="hljs-number">1</span>,bn,k);<br>        <span class="hljs-built_in">cout</span>&lt;&lt;b[id]&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="扫描线与二维数点"><a href="#扫描线与二维数点" class="headerlink" title="扫描线与二维数点"></a>扫描线与二维数点</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526122721288.png" alt="image-20240526122721288"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526122730203.png" alt="image-20240526122730203"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526122740484.png" alt="image-20240526122740484"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526122748677.png" alt="image-20240526122748677"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526122757899.png" alt="image-20240526122757899"></p><h4 id="二维数点"><a href="#二维数点" class="headerlink" title="二维数点"></a>二维数点</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526122820094.png" alt="image-20240526122820094"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526122808099.png" alt="image-20240526122808099"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526122858486.png" alt="image-20240526122858486"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> maxn 110000</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span>&#123;<br>    <span class="hljs-type">int</span> x,y;<br>&#125;point[maxn];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Rect</span>&#123;<br>    <span class="hljs-type">int</span> p1,p2,q1,q2,id;<br>&#125;rect[maxn];<br><span class="hljs-type">int</span> n,m,ans[maxn];<br><span class="hljs-type">int</span> len[maxn],cnt;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> Point &amp;a,<span class="hljs-type">const</span> Point &amp;b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a.x &lt; b.x;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp1</span><span class="hljs-params">(<span class="hljs-type">const</span> Rect &amp;a,<span class="hljs-type">const</span> Rect &amp;b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a.p1&lt;b.p1;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp2</span><span class="hljs-params">(<span class="hljs-type">const</span> Rect &amp;a,<span class="hljs-type">const</span> Rect &amp;b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a.q1&lt;b.q1;<br>&#125;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>&#123;<br>    <span class="hljs-type">int</span> sum;<br>&#125;tree[maxn&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> rt)</span></span>&#123;<br>    tree[rt].sum=tree[rt&lt;&lt;<span class="hljs-number">1</span>].sum+tree[rt&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].sum;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> rt,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l==r)&#123;<br>        <span class="hljs-keyword">if</span>(l==x)tree[rt].sum+=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(x&lt;=mid)<span class="hljs-built_in">add</span>(rt&lt;&lt;<span class="hljs-number">1</span>,l,mid,x);<br>    <span class="hljs-keyword">if</span>(x&gt;mid)<span class="hljs-built_in">add</span>(rt&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r,x);<br>    <span class="hljs-built_in">pushup</span>(rt);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> rt,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y)&#123;<br>        <span class="hljs-keyword">return</span> tree[rt].sum;<br>    &#125;<br>    <span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(x&lt;=mid)ans+=<span class="hljs-built_in">query</span>(rt&lt;&lt;<span class="hljs-number">1</span>,l,mid,x,y);<br>    <span class="hljs-keyword">if</span>(y&gt;mid)ans+=<span class="hljs-built_in">query</span>(rt&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r,x,y);<br>    <span class="hljs-built_in">pushup</span>(rt);<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;point[i].x,&amp;point[i].y);<br>        len[++cnt]=point[i].x,len[++cnt]=point[i].y;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        <span class="hljs-type">int</span> a,b,c,d;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c,&amp;d);<br>        rect[i]=&#123;a,b,c,d,i&#125;;<br>        len[++cnt]=a;len[++cnt]=b;len[++cnt]=c;len[++cnt]=d;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(len+<span class="hljs-number">1</span>,len+cnt+<span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> tot=<span class="hljs-built_in">unique</span>(len+<span class="hljs-number">1</span>,len+cnt+<span class="hljs-number">1</span>)-len<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        point[i].x=<span class="hljs-built_in">lower_bound</span>(len+<span class="hljs-number">1</span>,len+cnt+<span class="hljs-number">1</span>,point[i].x)-len;<br>        point[i].y=<span class="hljs-built_in">lower_bound</span>(len+<span class="hljs-number">1</span>,len+cnt+<span class="hljs-number">1</span>,point[i].y)-len;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        rect[i].p1=<span class="hljs-built_in">lower_bound</span>(len+<span class="hljs-number">1</span>,len+cnt+<span class="hljs-number">1</span>,rect[i].p1)-len;<br>        rect[i].q1=<span class="hljs-built_in">lower_bound</span>(len+<span class="hljs-number">1</span>,len+cnt+<span class="hljs-number">1</span>,rect[i].q1)-len;<br>        rect[i].p2=<span class="hljs-built_in">lower_bound</span>(len+<span class="hljs-number">1</span>,len+cnt+<span class="hljs-number">1</span>,rect[i].p2)-len;<br>        rect[i].q1=<span class="hljs-built_in">lower_bound</span>(len+<span class="hljs-number">1</span>,len+cnt+<span class="hljs-number">1</span>,rect[i].q2)-len;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(point+<span class="hljs-number">1</span>,point+n+<span class="hljs-number">1</span>,cmp);<br>    <span class="hljs-built_in">sort</span>(rect+<span class="hljs-number">1</span>,rect+m+<span class="hljs-number">1</span>,cmp1);<br>    <span class="hljs-type">int</span> pos=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        <span class="hljs-keyword">while</span>(rect[i].p1&gt;point[pos+<span class="hljs-number">1</span>].x&amp;&amp;pos&lt;=n)&#123;<br>            pos+=<span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">add</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,point[i].y);<br>        &#125;<br>        ans[rect[i].id]-=<span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,rect[i].p2,rect[i].q2);<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(tree,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(tree));<br>    <span class="hljs-built_in">sort</span>(rect+<span class="hljs-number">1</span>,rect+m+<span class="hljs-number">1</span>,cmp);<br>    pos=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        <span class="hljs-keyword">while</span>(rect[i].q1&gt;=point[pos+<span class="hljs-number">1</span>].x&amp;&amp;pos&lt;=n)&#123;<br>            pos+=<span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">add</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,pos[i].y);<br>        &#125;<br>        ans[rect[i].id]+=<span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,rect[i].p2,rect[i].q2);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="平衡树-Splay"><a href="#平衡树-Splay" class="headerlink" title="平衡树-Splay"></a>平衡树-Splay</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526122034271.png" alt="image-20240526122034271"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526122046309.png" alt="image-20240526122046309"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526122055269.png" alt="image-20240526122055269"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526122104347.png" alt="image-20240526122104347"></p><h3 id="平衡树-FHQ-Treap"><a href="#平衡树-FHQ-Treap" class="headerlink" title="平衡树-FHQ_Treap"></a>平衡树-FHQ_Treap</h3><h4 id="无旋Treap"><a href="#无旋Treap" class="headerlink" title="无旋Treap"></a>无旋Treap</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115339167.png" alt="image-20240526115339167"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115350766.png" alt="image-20240526115350766"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115359404.png" alt="image-20240526115359404"></p><h4 id="无旋Treap的结构"><a href="#无旋Treap的结构" class="headerlink" title="无旋Treap的结构"></a>无旋Treap的结构</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115559180.png" alt="image-20240526115559180"></p><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115614042.png" alt="image-20240526115614042"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115623744.png" alt="image-20240526115623744"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115634558.png" alt="image-20240526115634558"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115644061.png" alt="image-20240526115644061"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115650541.png" alt="image-20240526115650541"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115656903.png" alt="image-20240526115656903"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115703005.png" alt="image-20240526115703005"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115710056.png" alt="image-20240526115710056"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115715945.png" alt="image-20240526115715945"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115721051.png" alt="image-20240526115721051"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115727235.png" alt="image-20240526115727235"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115734944.png" alt="image-20240526115734944"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115740418.png" alt="image-20240526115740418"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115746149.png" alt="image-20240526115746149"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115751158.png" alt="image-20240526115751158"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115755059.png" alt="image-20240526115755059"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115800730.png" alt="image-20240526115800730"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115804490.png" alt="image-20240526115804490"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115808715.png" alt="image-20240526115808715"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115813454.png" alt="image-20240526115813454"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115817884.png" alt="image-20240526115817884"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115823342.png" alt="image-20240526115823342"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115830400.png" alt="image-20240526115830400"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115835300.png" alt="image-20240526115835300"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115839426.png" alt="image-20240526115839426"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115847061.png" alt="image-20240526115847061"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115851600.png" alt="image-20240526115851600"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115858903.png" alt="image-20240526115858903"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115904405.png" alt="image-20240526115904405"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115910595.png" alt="image-20240526115910595"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115916421.png" alt="image-20240526115916421"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115922564.png" alt="image-20240526115922564"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115926736.png" alt="image-20240526115926736"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115931678.png" alt="image-20240526115931678"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115936852.png" alt="image-20240526115936852"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115942072.png" alt="image-20240526115942072"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115948947.png" alt="image-20240526115948947"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115954070.png" alt="image-20240526115954070"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526115959511.png" alt="image-20240526115959511"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526120003232.png" alt="image-20240526120003232"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526120022163.png" alt="image-20240526120022163"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526120026713.png" alt="image-20240526120026713"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526120031817.png" alt="image-20240526120031817"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526120036416.png" alt="image-20240526120036416"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526120040832.png" alt="image-20240526120040832"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526120053497.png" alt="image-20240526120053497"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526120100194.png" alt="image-20240526120100194"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526120104721.png" alt="image-20240526120104721"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526120109696.png" alt="image-20240526120109696"></p><h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">NODE</span> &#123;</span><br>    <span class="hljs-type">int</span> val;<br>    <span class="hljs-type">int</span> cnt;<br>    <span class="hljs-type">int</span> rev;<br>    <span class="hljs-type">int</span> prio;<br>    <span class="hljs-type">int</span> size;<br>    <span class="hljs-type">int</span> ch[<span class="hljs-number">2</span>];<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">FHQTREAP</span> &#123;</span><br>    <span class="hljs-type">int</span> root;<br>    <span class="hljs-type">int</span> size;<br>    NODE node[MAXN];<br>&#125;<br><br><span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; <span class="hljs-title function_">split_by_val</span><span class="hljs-params">(<span class="hljs-type">int</span> t, <span class="hljs-type">int</span> val)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!t) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>    &#125;<br>    check_rev(t);<br>    <span class="hljs-keyword">if</span> (node[t].val &lt;= val) &#123;<br>        <span class="hljs-keyword">auto</span> tmp = split_by_val(node[t].ch[<span class="hljs-number">1</span>], val);<br>        node[t].ch[<span class="hljs-number">1</span>] = tmp.first;<br>        update_size(t);<br>        <span class="hljs-keyword">return</span> &#123;t, tmp.second&#125;;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">auto</span> tmp = split_by_val(node[t].ch[<span class="hljs-number">0</span>], val);<br>        node[t].ch[<span class="hljs-number">0</span>] = tmp.second;<br>        update_size(t);<br>        <span class="hljs-keyword">return</span> &#123;tmp.first, t&#125;;<br>    &#125;<br>&#125;<br><br>tuple&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; <span class="hljs-title function_">split_by_rank</span><span class="hljs-params">(<span class="hljs-type">int</span> t, <span class="hljs-type">int</span> k)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!t) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>    &#125;<br>    check_rev(t);<br>    <span class="hljs-type">int</span> lt, mt, rt;<br>    <span class="hljs-keyword">if</span> (k &lt;= node[node[t].ch[<span class="hljs-number">0</span>]].size()) &#123;<br>        tie(lt, mt, rt) = split_by_rank(node[t].ch[<span class="hljs-number">0</span>], k);<br>        node[t].ch[<span class="hljs-number">0</span>] = rt;<br>        update_size(t);<br>        <span class="hljs-keyword">return</span> &#123;lt, mt, t&#125;;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (k &gt; node[node[t]].ch[<span class="hljs-number">0</span>].size() + node[t].cnt) &#123;<br>        tie(lt, mt, rt) = split_by_rank(node[t].ch[<span class="hljs-number">1</span>], k - node[node[t].ch[<span class="hljs-number">0</span>]].size() - node[t].cnt);<br>        node[t].ch[<span class="hljs-number">1</span>] = lt;<br>        update_size(t);<br>        <span class="hljs-keyword">return</span> &#123;t, mt, rt&#125;;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        lt = node[t].ch[<span class="hljs-number">0</span>];<br>        rt = node[t].ch[<span class="hljs-number">1</span>];<br>        check_rev(lt);<br>        check_rev(rt);<br>        node[t].ch[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        upda[t].ch[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>        update_size(t);<br>        <span class="hljs-keyword">return</span> &#123;lt, t, rt&#125;;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> lt, <span class="hljs-type">int</span> rt)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!lt) &#123;<br>        <span class="hljs-keyword">return</span> rt;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!rt) &#123;<br>        <span class="hljs-keyword">return</span> lt;<br>    &#125;<br>    check_rev(lt);<br>    check_rev(rt);<br>    <span class="hljs-keyword">if</span> (node[lt].prio &lt; node[rt].prio) &#123;<br>        node[lt].ch[<span class="hljs-number">1</span>] = merge(node[lt].ch[<span class="hljs-number">1</span>], rt);<br>        update_size(lt);<br>        <span class="hljs-keyword">return</span> lt;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        node[rt].ch[<span class="hljs-number">0</span>] = merge(lt, node[rt].ch[<span class="hljs-number">0</span>]);<br>        update_size(rt);<br>        <span class="hljs-keyword">return</span> rt;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>    <span class="hljs-type">int</span> lt, mt, rt;<br>    tie(lt, rt) = split_by_val(root, val);<br>    tie(lt, mt) = split_by_val(lt, val - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (!mt) &#123;<br>        mt = new_node(val);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        node[mt].cnt ++;<br>        update_size(mt);<br>    &#125;<br>    root = merge(merge(lt, mt), rt);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">del</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>    <span class="hljs-type">int</span> lt, mt, rt;<br>    tie(lt, rt) = split_by_val(root, val);<br>    tie(lt, mt) = split_by_val(lt, val - <span class="hljs-number">1</span>);<br>    unode[mt].cnt --;<br>    update_size(mt);<br>    <span class="hljs-keyword">if</span> (node[mt].cnt == <span class="hljs-number">0</span>) &#123;<br>        clear(mt);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        lt = merge(lt, mt);<br>    &#125;<br>    root = merge(lt, rt);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">reverse</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> &#123;<br>    <span class="hljs-type">int</span> t1, t2, t3, t4, t5;<br>    tie(t1, t2, t3) = split_by_rank(root, l - <span class="hljs-number">1</span>);<br>    tie(t3, t4, t5) = split_by_ranl(t3, r - l + <span class="hljs-number">2</span>);<br>    node[t3].rev = <span class="hljs-number">1</span>;<br>    root = merge(merge(merge(merge(t1, t2), t3), t4), t5);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">check_rev</span><span class="hljs-params">(<span class="hljs-type">int</span> t)</span> &#123;<br>    <span class="hljs-keyword">if</span> (node[t].rev) &#123;<br>        swap(node[t].ch[<span class="hljs-number">0</span>], node[t].ch[<span class="hljs-number">1</span>]);<br>        node[node[t].ch[<span class="hljs-number">0</span>]].rev ^= <span class="hljs-number">1</span>;<br>        node[node[t].ch[<span class="hljs-number">1</span>]].rev ^= <span class="hljs-number">1</span>;<br>        node[t].rev = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">rank</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>    <span class="hljs-keyword">auto</span> tmp = split_by_val(root, val - <span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> k = node[tmp.first].size + <span class="hljs-number">1</span>;<br>    root = merge(tmp.first, tmp.second);<br>    <span class="hljs-keyword">return</span> k;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">kth</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;t, <span class="hljs-type">int</span> k)</span> &#123;<br>    <span class="hljs-type">int</span> lt, mt, rt;<br>    tie(lt, mt, rt) = split_by_rank(t, k);<br>    <span class="hljs-type">int</span> val = node[mt].val;<br>    t = merge(merge(lt, mt), rt);<br>    <span class="hljs-keyword">return</span> val;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">pre</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>    <span class="hljs-keyword">auto</span> tmp = split_by_cal(root, val - <span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> k = kth(tmp.first, node[tmp.first].size);<br>    root = merge(tmp.first, tmp.second);<br>    <span class="hljs-keyword">return</span> k;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">nxt</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>    <span class="hljs-keyword">auto</span> tmp = split_by_val(root, val);<br>    <span class="hljs-type">int</span> k = kth(tmp.second, <span class="hljs-number">1</span>);<br>    root = merge(tmp.first, tmp.second);<br>    <span class="hljs-keyword">return</span> k;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526114259208.png" alt="image-20240526114259208"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526114322817.png" alt="image-20240526114322817"></p><h4 id="模板题——百亿富翁"><a href="#模板题——百亿富翁" class="headerlink" title="模板题——百亿富翁"></a>模板题——<a href="https://www.lanqiao.cn/problems/1142/learning/">百亿富翁</a></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">right_bigger</span>():<br>  ans=[-<span class="hljs-number">1</span>]*n<br>  stack=[]<br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    <span class="hljs-keyword">while</span> stack <span class="hljs-keyword">and</span> h[stack[-<span class="hljs-number">1</span>]]&lt;h[i]:<br>      ans[stack[-<span class="hljs-number">1</span>]]=i+<span class="hljs-number">1</span><br>      stack.pop()<br>    stack.append(i)<br>  <span class="hljs-keyword">return</span> ans<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">left_bigger</span>():<br>  ans=[-<span class="hljs-number">1</span>]*n<br>  stack=[]<br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">while</span> stack <span class="hljs-keyword">and</span> h[stack[-<span class="hljs-number">1</span>]]&lt;h[i]:<br>      ans[stack[-<span class="hljs-number">1</span>]]=i+<span class="hljs-number">1</span><br>      stack.pop()<br>    stack.append(i)<br>  <span class="hljs-keyword">return</span> ans<br><br><span class="hljs-keyword">import</span> sys<br>n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>h=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br><span class="hljs-built_in">print</span>(*left_bigger())<br><span class="hljs-built_in">print</span>(*right_bigger())<br></code></pre></td></tr></table></figure><h2 id="分块"><a href="#分块" class="headerlink" title="分块"></a>分块</h2><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="KMP-字符串哈希"><a href="#KMP-字符串哈希" class="headerlink" title="KMP&amp;字符串哈希"></a>KMP&amp;字符串哈希</h2><h3 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526100046139.png" alt="image-20240526100046139"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526100057701.png" alt="image-20240526100057701"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526100110562.png" alt="image-20240526100110562"></p><h3 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526100136410.png" alt="image-20240526100136410"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526100148837.png" alt="image-20240526100148837"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526100157890.png" alt="image-20240526100157890"></p><p> <img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526100211778.png" alt="image-20240526100211778"><br> <img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526100221657.png" alt="image-20240526100221657"></p><h4 id="模板题——斤斤计较的小Z"><a href="#模板题——斤斤计较的小Z" class="headerlink" title="模板题——斤斤计较的小Z"></a>模板题——<a href="https://www.lanqiao.cn/problems/2047/learning">斤斤计较的小Z</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs py">Next = [<span class="hljs-number">0</span>] * <span class="hljs-number">1000010</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_next</span>(<span class="hljs-params">T</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(T)):<br>        j = Next[i]<br>        <span class="hljs-keyword">while</span> j &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> T[i] != T[j]:<br>            j = Next[j]<br>        <span class="hljs-keyword">if</span> T[i] == T[j]:<br>            Next[i + <span class="hljs-number">1</span>] = j + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            Next[i + <span class="hljs-number">1</span>] = <span class="hljs-number">0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">KMP</span>(<span class="hljs-params">s,t</span>):<br>    get_next(t)<br>    ans = <span class="hljs-number">0</span><br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>        <span class="hljs-keyword">while</span> j &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> s[i] != t[j]:<br>            j =  Next[j]<br>        <span class="hljs-keyword">if</span> s[i] == t[j]:<br>            j += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> j == <span class="hljs-built_in">len</span>(t):<br>            ans += <span class="hljs-number">1</span><br>            j =  Next[j]<br>    <span class="hljs-keyword">return</span> ans<br>t = <span class="hljs-built_in">input</span>()<br>s = <span class="hljs-built_in">input</span>()<br><span class="hljs-built_in">print</span>(KMP(s,t))<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">print</span>((<span class="hljs-keyword">lambda</span> s: <span class="hljs-built_in">input</span>().count(s))(<span class="hljs-built_in">input</span>()))<br></code></pre></td></tr></table></figure><h3 id="字符串哈希"><a href="#字符串哈希" class="headerlink" title="字符串哈希"></a>字符串哈希</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526100452881.png" alt="image-20240526100452881"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526100509262.png" alt="image-20240526100509262"></p><h4 id="模板题——斤斤计较的小Z-1"><a href="#模板题——斤斤计较的小Z-1" class="headerlink" title="模板题——斤斤计较的小Z"></a>模板题——<a href="https://www.lanqiao.cn/problems/2047/learning">斤斤计较的小Z</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs py">t = <span class="hljs-built_in">input</span>()<br>s = <span class="hljs-built_in">input</span>()<br>m,n = <span class="hljs-built_in">len</span>(t), <span class="hljs-built_in">len</span>(s)<br>B = <span class="hljs-number">26</span><br>mod = <span class="hljs-number">1000000007</span><br><span class="hljs-built_in">hash</span> = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n + <span class="hljs-number">1</span>):<br>    <span class="hljs-built_in">hash</span>[i] = <span class="hljs-built_in">hash</span>[i - <span class="hljs-number">1</span>] * B + <span class="hljs-built_in">ord</span>(s[i - <span class="hljs-number">1</span>]) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>)<br>    <span class="hljs-built_in">hash</span>[i] %= mod<br><br>numT = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> t:<br>    numT = numT * B + <span class="hljs-built_in">ord</span>(c) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>)<br>    numT %= mod<br>    <br>p = (B ** m) % mod<br>ans = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n +<span class="hljs-number">1</span>):<br>    r = l + m - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> r &gt; n:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">hash</span>[r] - <span class="hljs-built_in">hash</span>[l - <span class="hljs-number">1</span>] * p % mod + mod) % mod == numT:<br>        ans += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h2 id="Manacher"><a href="#Manacher" class="headerlink" title="Manacher"></a>Manacher</h2><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526101919972.png" alt="image-20240526101919972"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526101929004.png" alt="image-20240526101929004"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526101944468.png" alt="image-20240526101944468"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526101953533.png" alt="image-20240526101953533"></p><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526102101694.png" alt="image-20240526102101694"></p><h2 id="字典树基础"><a href="#字典树基础" class="headerlink" title="字典树基础"></a>字典树基础</h2><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526123731966.png" alt="image-20240526123731966"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526123744464.png" alt="image-20240526123744464"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526123847593.png" alt="image-20240526123847593"></p><h4 id="模板题——前缀判定"><a href="#模板题——前缀判定" class="headerlink" title="模板题——前缀判定"></a>模板题——<a href="https://www.lanqiao.cn/problems/1204/learning">前缀判定</a></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>():<br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>    self.nodes = &#123;&#125;<br>  <br>  <span class="hljs-comment">#插入</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">insert</span>(<span class="hljs-params">self,s</span>):<br>    curr = self<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>      <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> curr.nodes.keys():<br>        curr.nodes[i] = TreeNode()<br>      <span class="hljs-comment">#往下走</span><br>      curr = curr.nodes[i]<br>  <br>  <span class="hljs-comment">#检查是否为前缀</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">pre</span>(<span class="hljs-params">self,s</span>):<br>    curr = self<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>      <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> curr.nodes.keys():<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>      curr = curr.nodes[i]<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><br>n,m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>tree = TreeNode()<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>  s = <span class="hljs-built_in">input</span>()<br>  tree.insert(s)<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>  t = <span class="hljs-built_in">input</span>()<br>  <span class="hljs-keyword">if</span> tree.pre(t):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Y&#x27;</span>)<br>  <span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;N&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="模板题——依依的瓶中信"><a href="#模板题——依依的瓶中信" class="headerlink" title="模板题——依依的瓶中信"></a>模板题——<a href="https://www.lanqiao.cn/problems/3751/learning">依依的瓶中信</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">多个字符串，求公共前缀长度问题，用字典树</span><br><span class="hljs-string">同一个字符串不可与自身比较：构建树的时候打标记，查找的时候清除标记，若标记为0，则说明当前在于自己比较，直接返回。</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>():<br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>    self.nodes = &#123;&#125;          <span class="hljs-comment">#用于存放以当前点为根的子树</span><br>    self.value = <span class="hljs-number">1</span>           <span class="hljs-comment">#每可子树的权值，初始为1</span><br><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">insert</span>(<span class="hljs-params">self,s</span>):<span class="hljs-comment">#建树</span><br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s:<br>      <span class="hljs-keyword">if</span> c <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self.nodes.keys():     <span class="hljs-comment">#若不存在，则添加该子树</span><br>        self.nodes[c] = TreeNode()<br>      <span class="hljs-keyword">else</span>:<br>        self.nodes[c].value +=<span class="hljs-number">1</span>       <span class="hljs-comment">#若存在，则该子树的权值+1，</span><br>      self = self.nodes[c]          <span class="hljs-comment">#进入下一层</span><br><span class="hljs-comment">#&#123;1,a:&#123;2,b:&#123;2,c:&#123;1,&#125;&#125;&#125;,b:&#123;1,c:&#123;1&#125;&#125;&#125;</span><br><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">commen_pre</span>(<span class="hljs-params">self,t</span>):  <span class="hljs-comment">#查找</span><br>    cnt = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> t:           <span class="hljs-comment">#该题不用判断c是否存在，因为每个点都存在</span><br>      <span class="hljs-keyword">if</span> self.nodes[c].value -<span class="hljs-number">1</span> == <span class="hljs-number">0</span>:    <span class="hljs-comment">#如果走到自己独有的节点上时，就返回其与其它子串的公共前缀长</span><br>        <span class="hljs-keyword">return</span> cnt<br>      cnt += <span class="hljs-number">1</span><br>      self = self.nodes[c]   <span class="hljs-comment">#进入下一层</span><br>    <span class="hljs-keyword">return</span> cnt    <span class="hljs-comment">#若自己本身就是某个串的前缀，则返回自己的长度</span><br><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>S =[]<br>tree = TreeNode() <span class="hljs-comment">#实例化根节点</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):  <span class="hljs-comment">#建树</span><br>  s = <span class="hljs-built_in">input</span>()<br>  S.append(s)<br>  tree.insert(s)<br><br><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> S:      <span class="hljs-comment">#查找、统计</span><br>  <span class="hljs-built_in">print</span>(tree.commen_pre(s))<br></code></pre></td></tr></table></figure><h2 id="01tire"><a href="#01tire" class="headerlink" title="01tire"></a>01tire</h2><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526124139861.png" alt="image-20240526124139861"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526124148215.png" alt="image-20240526124148215"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526124153033.png" alt="image-20240526124153033"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526124201442.png" alt="image-20240526124201442"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526124207236.png" alt="image-20240526124207236"><br><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526124211551.png" alt="image-20240526124211551"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs py">maxn = <span class="hljs-number">210000</span><br>ch = [[<span class="hljs-number">0</span>]*<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(maxn)]<br>val = [<span class="hljs-number">0</span>]*maxn<br>n, ans, tot = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">insert</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">global</span> tot<br>    now = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">31</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        pos = ((x &gt;&gt; j) &amp; <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> ch[now][pos] == <span class="hljs-number">0</span>:<br>            tot += <span class="hljs-number">1</span><br>            ch[now][pos] = tot<br>        now = ch[now][pos]<br>    val[now] = x<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">x</span>):<br>    now = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">31</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        pos = ((x &gt;&gt; j) &amp; <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> ch[now][pos ^ <span class="hljs-number">1</span>] != <span class="hljs-number">0</span>:<br>            now = ch[now][pos ^ <span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">else</span>:<br>            now = ch[now][pos]<br>    <span class="hljs-keyword">return</span> val[now]<br><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>):<br>    x = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>    insert(x)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>):<br>    ans = <span class="hljs-built_in">max</span>(ans, query(val[i]))<br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h1 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h1><h2 id="基础-2"><a href="#基础-2" class="headerlink" title="基础"></a>基础</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526124949289.png" alt="image-20240526124949289"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526124958064.png" alt="image-20240526124958064"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526125006396.png" alt="image-20240526125006396"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526125013800.png" alt="image-20240526125013800"></p><h3 id="DFS-BFS"><a href="#DFS-BFS" class="headerlink" title="DFS&amp;BFS"></a>DFS&amp;BFS</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526125134400.png" alt="image-20240526125134400"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526125142643.png" alt="image-20240526125142643"></p><h4 id="DFS模板题——帮派弟位"><a href="#DFS模板题——帮派弟位" class="headerlink" title="DFS模板题——帮派弟位"></a>DFS模板题——<a href="https://www.lanqiao.cn/problems/3891/learning">帮派弟位</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs py">n,m=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>G=[[] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<span class="hljs-comment">#bfs和图的结合</span><br>rudu=[<span class="hljs-number">0</span>]*(n+<span class="hljs-number">1</span>) <span class="hljs-comment">#计数，根结点是没有rudu的</span><br>biaoji=[<span class="hljs-number">0</span>]*(n+<span class="hljs-number">1</span>)<br><span class="hljs-built_in">sum</span>=[[<span class="hljs-number">0</span>,i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)] <span class="hljs-comment">#注意是二元组，记录子数数量，是先按数量排，再按序号排.然后是包括他自己的，所以初始化为1</span><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>):<br>    l,r=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()) <span class="hljs-comment">#表示序号为l的人附属于r</span><br>    G[r].append(l) <span class="hljs-comment">#表示r下面有l 可以看出r和谁相邻</span><br>    rudu[l]+=<span class="hljs-number">1</span> <span class="hljs-comment">#表明l头上是有父亲的</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>): <span class="hljs-comment">#找出谁的rudu为0，即找出谁是根结点</span><br>    <span class="hljs-keyword">if</span> rudu[i]==<span class="hljs-number">0</span>:<br>        root=i<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">u</span>):<br>    biaoji[u]=<span class="hljs-number">1</span> <span class="hljs-comment">#打上标记</span><br>    <span class="hljs-built_in">sum</span>[u][<span class="hljs-number">0</span>]=-<span class="hljs-number">1</span><span class="hljs-comment">#为什么这里设置成-1，而不是1呢，因为题目要求如果手下相同的，序号小的排在前面，设置成-1就可以这样了。！</span><br>    <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> G[u]: <span class="hljs-comment">#遍历和u相邻的每个节点</span><br>        <span class="hljs-keyword">if</span> biaoji[v]==<span class="hljs-number">0</span>: <span class="hljs-comment">#如果没有打上标记</span><br>            dfs(v)<span class="hljs-comment">#遍历和u相邻的节点，就是遍历子节点</span><br>            <span class="hljs-built_in">sum</span>[u][<span class="hljs-number">0</span>]+=<span class="hljs-built_in">sum</span>[v][<span class="hljs-number">0</span>] <span class="hljs-comment">#遍历v子节点的同时，可以把v下的子节点也加上去</span><br><br>dfs(root)<br><span class="hljs-built_in">sum</span>.sort()<br><span class="hljs-keyword">for</span> i,(x,y) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(<span class="hljs-built_in">sum</span>,start=<span class="hljs-number">1</span>):<span class="hljs-comment">#输出小明的排列</span><br>    <span class="hljs-keyword">if</span> y==m:<br>        <span class="hljs-built_in">print</span>(i)<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526125335820.png" alt="image-20240526125335820"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526125344854.png" alt="image-20240526125344854"></p><h4 id="BFS模板题——最少操作数"><a href="#BFS模板题——最少操作数" class="headerlink" title="BFS模板题——最少操作数"></a>BFS模板题——<a href="https://www.lanqiao.cn/problems/1509/learning">最少操作数</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bfs</span>(<span class="hljs-params">s,t</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    :param s: 起点</span><br><span class="hljs-string">    :param t: 终点</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    dis = [-<span class="hljs-number">1</span>]*<span class="hljs-number">100001</span><br>    queue = deque()<br>    <span class="hljs-comment">#1、将起点塞入到队列中，打上标记</span><br>    queue.append(s)<br>    dis[s] = <span class="hljs-number">0</span><br>    <span class="hljs-comment">#2、当队列非空</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(queue) != <span class="hljs-number">0</span>:<br>        <span class="hljs-comment"># 2.1 取出队首元素u</span><br>        u = queue.popleft()<br>        <span class="hljs-comment">#2.2 判断u是否为终点</span><br>        <span class="hljs-keyword">if</span> u == t:<br>            <span class="hljs-keyword">return</span> dis[u]<br>        <span class="hljs-comment">#2.3 将u相连的所有点v，只要v未标记，则入队列</span><br>        <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> [u-<span class="hljs-number">1</span>,u+<span class="hljs-number">1</span>,u*<span class="hljs-number">2</span>]:<br>            <span class="hljs-comment">#特判：未越界、未标记</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-number">0</span>&lt;=v&lt;=<span class="hljs-number">100000</span> <span class="hljs-keyword">and</span> dis[v] == -<span class="hljs-number">1</span>:<br>                queue.append(v)<br>                dis[v] = dis[u] + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br><br>n,k = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br><span class="hljs-built_in">print</span>(bfs(n,k))<br></code></pre></td></tr></table></figure><h4 id="BFS模板题——混境之地4"><a href="#BFS模板题——混境之地4" class="headerlink" title="BFS模板题——混境之地4"></a>BFS模板题——<a href="https://www.lanqiao.cn/problems/3819/learning">混境之地4</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-comment"># 请在此输入您的代码</span><br><span class="hljs-comment">#  3819 混境之地</span><br><span class="hljs-comment"># BFS遍历  经典题目</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque  <span class="hljs-comment"># 使用队列</span><br>INF = <span class="hljs-number">0x3f3f3f3f</span>   <span class="hljs-comment"># 对应的十进制为：1061109567，一般的数据小于10^9，因此可将其作为一个边界</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">BFS</span>(<span class="hljs-params">x, y, dist</span>):<br>    <span class="hljs-comment"># 从(x, y)到每个点的最短时间</span><br>    queue = deque()<br>    vis = [[<span class="hljs-number">0</span>] * m <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>    <span class="hljs-comment"># 1、将起点加入队列</span><br>    queue.append([x, y])<br>    dist[x][y] = <span class="hljs-number">0</span>  <span class="hljs-comment"># 更新距离</span><br>    vis[x][y] = <span class="hljs-number">1</span>  <span class="hljs-comment"># 打标记</span><br>    <span class="hljs-comment"># 2、当队列非空</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(queue) != <span class="hljs-number">0</span>:<br>        x, y = queue.popleft()<br>        <span class="hljs-comment"># 对于每个相邻的点，都进行一次判断</span><br>        <span class="hljs-keyword">for</span> deltax, deltay <span class="hljs-keyword">in</span> [(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">0</span>, <span class="hljs-number">1</span>), (-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>)]:<br>            xx, yy = x + deltax, y + deltay<br>            <span class="hljs-comment"># 未越界、未标记、非障碍物</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-number">0</span> &lt;= xx &lt; n  <span class="hljs-keyword">and</span> <span class="hljs-number">0</span> &lt;= yy &lt; m <span class="hljs-keyword">and</span> g[xx][yy] != <span class="hljs-string">&quot;#&quot;</span> <span class="hljs-keyword">and</span> vis[xx][yy] == <span class="hljs-number">0</span>:<br>                queue.append([xx, yy])<br>                dist[xx][yy] = dist[x][y] + <span class="hljs-number">1</span><br>                vis[xx][yy] = <span class="hljs-number">1</span><br><br><br>n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>A, B, C, D = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>A, B, C, D = A-<span class="hljs-number">1</span>, B-<span class="hljs-number">1</span>, C-<span class="hljs-number">1</span>, D-<span class="hljs-number">1</span><br><span class="hljs-comment"># 输入图</span><br>g = [<span class="hljs-built_in">input</span>() <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>E = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-comment"># dist1[i][j]表示起点到(i, j)的最短时间</span><br>dist1 = [[INF] * m <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]  <span class="hljs-comment"># INF无穷大</span><br><span class="hljs-comment"># dist2[i][j]表示终点到(i, j)的最短时间</span><br>dist2 = [[INF] * m <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br><br>BFS(A, B, dist1)  <span class="hljs-comment"># 起点做一遍</span><br>BFS(C, D, dist2)  <span class="hljs-comment"># 终点做一遍</span><br><span class="hljs-comment"># 判断能否直接走到终点</span><br>res = dist1[C][D]<br><span class="hljs-keyword">if</span> res &lt;= E:<br>    <span class="hljs-built_in">print</span>(res)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-comment"># 枚举所有的圣泉</span><br>    res = INF<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>            <span class="hljs-comment"># 能量E不可小于0，可以等于0</span><br>            <span class="hljs-keyword">if</span> g[i][j] == <span class="hljs-string">&#x27;V&#x27;</span> <span class="hljs-keyword">and</span> dist1[i][j] &lt;= E:  <span class="hljs-comment"># 不需要经过多个圣泉</span><br>                res = <span class="hljs-built_in">min</span>(dist1[i][j] + dist2[i][j], res)<br>    <span class="hljs-comment"># 如果走不到圣泉</span><br>    <span class="hljs-keyword">if</span> res == INF:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;No&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 初始能量为E，总共距离为res，相当于，后面的res-E需要花费两倍时间，因为需要等待能量恢复</span><br>        <span class="hljs-built_in">print</span>((res - E) * <span class="hljs-number">2</span> + E)<br></code></pre></td></tr></table></figure><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526125845566.png" alt="image-20240526125845566"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526125853909.png" alt="image-20240526125853909"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526125908891.png" alt="image-20240526125908891"><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526125916425.png" alt="image-20240526125916425"></p><h4 id="模板题——走多远"><a href="#模板题——走多远" class="headerlink" title="模板题——走多远"></a>模板题——<a href="https://www.lanqiao.cn/problems/1337/learning">走多远</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br><span class="hljs-comment"># INF = 0x3f3f3f3f</span><br><span class="hljs-comment"># 针对有向无环图，在进行拓扑排序时，可以进行状态转移</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">topo</span>():<br>    q = deque()<br>    <span class="hljs-comment"># 1。将入度为0的点加入队列中</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> ru[i] == <span class="hljs-number">0</span>:<br>            q.append(i)<br>    <span class="hljs-comment"># 2. 当队列非空</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(q) != <span class="hljs-number">0</span>:<br>        <span class="hljs-comment"># 2.1 取出队首元素</span><br>        u = q.popleft()<br>        <span class="hljs-comment"># 2.2 对于和u相连的每个点v</span><br>        <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> G[u]:<br>            <span class="hljs-comment"># 从u走到v，说明dp[v]可以从dp[u]+1转移</span><br>            dp[v] = <span class="hljs-built_in">max</span>(dp[v], dp[u] + <span class="hljs-number">1</span>)<br>            <span class="hljs-comment"># 进行动态规划</span><br>            ru[v] -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> ru[v] == <span class="hljs-number">0</span>:<br>                q.append(v)<br><br>n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br><span class="hljs-comment"># 图的存储——邻接表</span><br>G = [[] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br>ru = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    u, v = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    G[u].append(v)<br>    ru[v] += <span class="hljs-number">1</span><br><span class="hljs-comment"># dp[i]表示走到i的最长路/最大值</span><br>dp = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>)<br>topo()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(dp))<br></code></pre></td></tr></table></figure><h4 id="模板题——最小字典序排列"><a href="#模板题——最小字典序排列" class="headerlink" title="模板题——最小字典序排列"></a>模板题——<a href="https://www.lanqiao.cn/problems/3351/learning">最小字典序排列</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-comment"># 3351 最小字典序排列</span><br><span class="hljs-comment"># 拓扑排序+优先队列</span><br><span class="hljs-comment"># 需要字典序最小的拓扑序列，只需要将普通队列转换成优先队列即可</span><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br><span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> PriorityQueue<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">topo</span>():<br>    q = PriorityQueue()<br>    <span class="hljs-comment"># 1。将入度为0的点加入队列中</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> ru[i] == <span class="hljs-number">0</span>:<br>            q.put(i) <span class="hljs-comment"># append改为put</span><br>    <span class="hljs-comment"># 2. 当队列非空</span><br>    ans = []<br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> q.empty(): <span class="hljs-comment"># 判断优先队列q是否非空</span><br>    <span class="hljs-comment"># while len(q.queue) != 0:</span><br>        <span class="hljs-comment"># 2.1 取出队首元素</span><br>        u = q.get()  <span class="hljs-comment"># popleft改为put</span><br>        ans.append(u)<br>        <span class="hljs-comment"># 2.2 对于和u相连的每个点v</span><br>        <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> G[u]:<br>            <span class="hljs-comment"># 进行动态规划</span><br>            ru[v] -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> ru[v] == <span class="hljs-number">0</span>:<br>                q.put(v)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(ans) != n:<br>        <span class="hljs-built_in">print</span>(-<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(*ans, sep = <span class="hljs-string">&#x27; &#x27;</span>)<br><br>n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br><span class="hljs-comment"># 图的存储——邻接表</span><br>G = [[] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br>ru = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    u, v = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    G[u].append(v)<br>    ru[v] += <span class="hljs-number">1</span><br>topo()<br></code></pre></td></tr></table></figure><h2 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h2><h3 id="Floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a>Floyd</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526130244161.png" alt="image-20240526130244161"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526130253653.png" alt="image-20240526130253653"></p><h4 id="模板题——-蓝桥公园"><a href="#模板题——-蓝桥公园" class="headerlink" title="模板题—— 蓝桥公园"></a>模板题——<a href="https://www.lanqiao.cn/problems/1121/learning"> 蓝桥公园</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> sys<br><span class="hljs-built_in">input</span>=sys.stdin.readline<br>n,m,q=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>inf=<span class="hljs-built_in">int</span>(<span class="hljs-number">1e18</span>)<br>dp=[[inf]*(n+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>  dp[i][i]=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,m+<span class="hljs-number">1</span>):<br>  u,v,w=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>  dp[u][v]=dp[v][u]=<span class="hljs-built_in">min</span>(dp[u][v],w)<br><span class="hljs-comment">#Floyd 模板</span><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>      dp[i][j]=<span class="hljs-built_in">min</span>(dp[i][j],dp[i][k]+dp[k][j])<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>      <span class="hljs-keyword">if</span> dp[i][j]==inf:<br>        dp[i][j]=-<span class="hljs-number">1</span><br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(q):<br>  s,e=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>  <span class="hljs-built_in">print</span>(dp[s][e])<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># Floyd 算法  多个起点--多个终点  多源最短路算法（多对多）</span><br><span class="hljs-comment"># 最简单的最短路径算法</span><br><span class="hljs-comment"># 存图:最简单的矩阵存图</span><br><span class="hljs-comment"># 效率不高，不能用于大图</span><br><br><span class="hljs-comment"># 动态规划：求图上两点i,j之间的最短距离，按‘从小图到全图’的步骤，在逐步扩大图的过程中计算和更新最短路</span><br><span class="hljs-comment"># 定义状态：dp[k][i][j]: i,j,k是点的编号，范围1--n</span><br><span class="hljs-comment"># 状态dp[k][i][j]表示在包含1--k点的子图上，点对i,j之间的最短路</span><br><span class="hljs-comment"># 状态转移方程 从子图1-k-1 扩展到子图 1-k</span><br><span class="hljs-comment"># dp[k][i][j]=min(dp[k-1][i][j],dp[k-1][i][k]+dp[k-1][k][j])</span><br><span class="hljs-comment"># 初始值：i,j直连 就是他们的边长； 若不直连，赋值为无穷大 / 0x3f3f3f3f3f3f3f3f</span><br><span class="hljs-comment"># 滚动数组优化：dp[i][j]=min(dp[i][j],dp[i][k]+dp[k][j])</span><br><span class="hljs-comment">#                           不经过k     经过k</span><br><span class="hljs-comment"># for k in range(1,n+1):</span><br><span class="hljs-comment"># for i in range(1,n+1):</span><br><span class="hljs-comment"># for j in range(1,n+1):</span><br><span class="hljs-comment"># dp[i][j]=min(dp[i][j],dp[i][k]+dp[k][j])</span><br><span class="hljs-comment"># 只能用于n&lt;300 的小规模图</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">floyd</span>():<br>    <span class="hljs-keyword">global</span> dp<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>                dp[i][j]=<span class="hljs-built_in">min</span>(dp[i][j],dp[i][k]+dp[k][j])<br><span class="hljs-comment"># 蓝桥公园</span><br><span class="hljs-comment"># n个点 m条边 q次查询</span><br>n,m,q=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>INF = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span><br>dp=[[INF <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">50</span>)] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">50</span>)]<br><span class="hljs-comment"># 记录路径</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,m+<span class="hljs-number">1</span>):<br>    u,v,w=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    dp[u][v]=dp[v][u]=<span class="hljs-built_in">min</span>(dp[u][v],w)<br>floyd()<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(q):<br>    start,end=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    <span class="hljs-comment"># 无法到达</span><br>    <span class="hljs-keyword">if</span> dp[start][end]==INF:<br>        <span class="hljs-built_in">print</span>(-<span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># 起点终点相同</span><br>    <span class="hljs-keyword">elif</span> start==end:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(dp[start][end])<br><br><span class="hljs-comment"># 1-12</span><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-comment"># 请在此输入您的代码</span><br>N, M, Q = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>weight = [[<span class="hljs-number">0</span> <span class="hljs-keyword">if</span> i == j <span class="hljs-keyword">else</span> sys.maxsize <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N + <span class="hljs-number">1</span>) ] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N + <span class="hljs-number">1</span>)]  <span class="hljs-comment"># 领接矩阵</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(M):<br>    u, v, w = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    weight[u][v] = <span class="hljs-built_in">min</span>(weight[u][v], w)<br>    weight[v][u] = weight[u][v]<br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, N + <span class="hljs-number">1</span>):  <span class="hljs-comment"># N次递推</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, N + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, N + <span class="hljs-number">1</span>):  <span class="hljs-comment"># 更新最小值</span><br>                weight[i][j] = <span class="hljs-built_in">min</span>(weight[i][j], weight[i][k] + weight[k][j])<br>                weight[j][i] = weight[i][j]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(Q):<br>    st, ed = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    t = weight[st][ed]<br>    <span class="hljs-keyword">if</span> t == sys.maxsize:<br>        <span class="hljs-built_in">print</span>(-<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(t)<br></code></pre></td></tr></table></figure><h4 id="模板题——城市间的交易"><a href="#模板题——城市间的交易" class="headerlink" title="模板题——城市间的交易"></a>模板题——<a href="https://www.lanqiao.cn/problems/8336/learning/">城市间的交易</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-comment"># 请在此输入您的代码</span><br><span class="hljs-comment"># 8336 城市间的交易</span><br>INF =<span class="hljs-number">1e18</span><br>n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br><span class="hljs-comment"># 产量、成本和售价</span><br>a, p, s = [<span class="hljs-number">0</span>] * (n+<span class="hljs-number">1</span>), [<span class="hljs-number">0</span>] * (n+<span class="hljs-number">1</span>), [<span class="hljs-number">0</span>] * (n+<span class="hljs-number">1</span>)<br>f = [[INF] * (n+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br>g = [[<span class="hljs-number">0</span>] * (n+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>):<br>    a[i], p[i], s[i] = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br><span class="hljs-comment"># 邻接矩阵初始化</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, m+<span class="hljs-number">1</span>):<br>    u, v, w = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    f[u][v] = f[v][u] = <span class="hljs-built_in">min</span>(f[u][v], w)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>):<br>    f[i][i] = <span class="hljs-number">0</span><br><br><span class="hljs-comment"># Floyd</span><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>):<br>            f[i][j] = <span class="hljs-built_in">min</span>(f[i][j], f[i][k]+f[k][j])<br><span class="hljs-comment"># g[i][j]表示城市i的物品运输到城市j可得到的利润 = 城市j的售价 - 城市i的成本 - 从i到j的运输成本</span><br>ans = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>):<br>    <span class="hljs-comment"># 求每个城市的利润</span><br>    cnt = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>):<br>        g[i][j] = s[j] - p[i] - f[i][j]<br>        cnt = <span class="hljs-built_in">max</span>(cnt, g[i][j])<br>    ans += a[i] * cnt<br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br>n,m=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>res=[]<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>  a,p,s=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>  res.append((a,p,s))<br>inf=<span class="hljs-built_in">int</span>(<span class="hljs-number">1e10</span>)<br>path=[[inf]*(n+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>  u,v,w=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>  path[u][v]=path[v][u]=<span class="hljs-built_in">min</span>(w,path[u][v])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>+n):<br>  path[i][i]=<span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>      path[i][j]=<span class="hljs-built_in">min</span>(path[i][j],path[i][k]+path[k][j])<br>re=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>  result=<span class="hljs-number">0</span><br>  <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> path[i][j]!=inf:<br>       result=<span class="hljs-built_in">max</span>(result,res[j-<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]*res[i-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]-res[i-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]*res[i-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]-path[i][j]*res[i-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>])<br>  re+=result<br><span class="hljs-built_in">print</span>(re)<br></code></pre></td></tr></table></figure><h2 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h2><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526131011122.png" alt="image-20240526131011122"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526131022596.png" alt="image-20240526131022596"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526131034522.png" alt="image-20240526131034522"></p><h4 id="模板题——蓝桥王国"><a href="#模板题——蓝桥王国" class="headerlink" title="模板题——蓝桥王国"></a>模板题——<a href="https://www.lanqiao.cn/problems/1122/learning">蓝桥王国</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-comment"># 请在此输入您的代码</span><br><span class="hljs-comment"># 1122_蓝桥王国_Dijkstra算法</span><br><span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> PriorityQueue  <span class="hljs-comment"># 导入优先队列</span><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br><br>INF = <span class="hljs-number">1e18</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dijkstra</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-comment"># 返回从s出发到所有点的最短路</span><br>    <span class="hljs-comment"># d[i]表示从s到i的最短路</span><br>    d = [INF] * (n + <span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># vis[i]表示是否出队列（注：与传统BFS不同）</span><br>    vis = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>)<br>    q = PriorityQueue()<br><br>    <span class="hljs-comment"># 1.将起点入队列，更新距离</span><br>    d[s] = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 将距离放在前面，才能对距离使用优先队列</span><br>    q.put((d[s], s))  <span class="hljs-comment"># 入队用put()</span><br>    <span class="hljs-comment"># 当队列非空</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> q.empty():  <span class="hljs-comment"># 或者写为： while len(q.queue) != 0:</span><br>        dis, u = q.get()<br>        <span class="hljs-comment"># 每个点只有第一次出队列是有用的</span><br>        <span class="hljs-keyword">if</span> vis[u]: <span class="hljs-keyword">continue</span><br>        vis[u] = <span class="hljs-number">1</span>  <span class="hljs-comment"># 出队列打标记</span><br>        <span class="hljs-comment"># 对于从u出发，到达v，权重为w的边</span><br>        <span class="hljs-keyword">for</span> v, w <span class="hljs-keyword">in</span> G[u]:<br>            <span class="hljs-keyword">if</span> d[v] &gt; d[u] + w:<br>                d[v] = d[u] + w<br>                q.put((d[v], v))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> d[i] == INF:<br>            d[i] = -<span class="hljs-number">1</span><br>    <span class="hljs-comment"># d.pop(0)</span><br>    <span class="hljs-keyword">return</span> d[<span class="hljs-number">1</span>::] <span class="hljs-comment"># 从1到最后</span><br><br><br><span class="hljs-comment"># 皇宫编号为1</span><br><span class="hljs-comment"># 输入</span><br>n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>G = [[] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)]  <span class="hljs-comment"># 图的存储：邻接表。此题N为10^5，不能用邻接矩阵存图</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    u, v, w = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    G[u].append((v, w))<br><span class="hljs-built_in">print</span>(*dijkstra(<span class="hljs-number">1</span>)) <span class="hljs-comment"># 列表前面加星号作用是将列表解开（unpacke）成多个独立的参数，传入函数。</span><br></code></pre></td></tr></table></figure><h4 id="模板题——混境之地3"><a href="#模板题——混境之地3" class="headerlink" title="模板题——混境之地3"></a>模板题——<a href="https://www.lanqiao.cn/problems/3818/learning">混境之地3</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-comment"># 3818 混境之地  Dijkstra</span><br><span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> PriorityQueue<br><span class="hljs-comment"># 数据较大时可以进行如下优化</span><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-built_in">input</span> = sys.stdin.readline<br>INF = <span class="hljs-number">1e18</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">c</span>):<br>    <span class="hljs-keyword">if</span> c == <span class="hljs-string">&#x27;.&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">else</span>:<br>        s = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>            <span class="hljs-keyword">if</span> c == s[i]:<br>                <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span><br>        <span class="hljs-comment"># return ord(c) - ord(&#x27;A&#x27;) + 1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dijkstra</span>():<br>    d = [[INF] * m <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>    vis = [[<span class="hljs-number">0</span>] * m <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>    q = PriorityQueue()  <span class="hljs-comment"># 创建优先队列</span><br>    <span class="hljs-comment"># 1.将起点塞入队列</span><br>    d[x1][y1] = <span class="hljs-number">0</span><br>    q.put((d[x1][y1], x1, y1))<br>    <span class="hljs-comment"># 2.当队列非空</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> q.empty():<br>        dis, x, y = q.get()<br>        <span class="hljs-keyword">if</span> x == x2 <span class="hljs-keyword">and</span> y == y2:<br>            <span class="hljs-keyword">return</span> dis<br>        <span class="hljs-comment"># 每个点只有第一次出队列是有用的</span><br>        <span class="hljs-keyword">if</span> vis[x][y]:<br>            <span class="hljs-keyword">continue</span><br>        vis[x][y] = <span class="hljs-number">1</span>  <span class="hljs-comment"># 出队列打标记</span><br>        <span class="hljs-keyword">for</span> d elta_x, delta_y <span class="hljs-keyword">in</span> [[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], [-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>]]:<br>            xx, yy = x + delta_x, y + delta_y<br>            <span class="hljs-comment"># 判断未越界、未标记、非障碍物</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-number">0</span> &lt;= xx &lt; n <span class="hljs-keyword">and</span> <span class="hljs-number">0</span> &lt;= yy &lt; m <span class="hljs-keyword">and</span> vis[xx][yy] == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> Map[xx][yy] != <span class="hljs-string">&quot;#&quot;</span>:<br>                <span class="hljs-keyword">if</span> d[xx][yy] &gt; d[x][y] + get(Map[xx][yy]):  <span class="hljs-comment"># 写一个get函数获取权重</span><br>                    d[xx][yy] = d[x][y] + get(Map[xx][yy])<br>                    q.put((d[xx][yy], xx, yy))<br>    <span class="hljs-keyword">return</span> INF<br><span class="hljs-comment"># 输入</span><br>n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())  <span class="hljs-comment"># 地图大小</span><br>x1, y1, x2, y2 = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())  <span class="hljs-comment"># 起始点坐标</span><br>x1, y1, x2, y2 = x1 - <span class="hljs-number">1</span>, y1 - <span class="hljs-number">1</span>, x2 - <span class="hljs-number">1</span>, y2 - <span class="hljs-number">1</span><br><span class="hljs-comment"># 地图</span><br>Map = [<span class="hljs-built_in">input</span>() <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>e = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())  <span class="hljs-comment"># 剩余能量</span><br><span class="hljs-comment"># 如果能量支撑到达终点，返回Yes，否则，返回No.</span><br><span class="hljs-keyword">if</span> e &gt;= dijkstra():  <span class="hljs-comment"># 不传参，使用全局变量</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Yes&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;No&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="生成树"><a href="#生成树" class="headerlink" title="生成树"></a>生成树</h2><h3 id="Kruskal"><a href="#Kruskal" class="headerlink" title="Kruskal"></a>Kruskal</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526131621641.png" alt="image-20240526131621641"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526131631028.png" alt="image-20240526131631028"></p><h4 id="模板题——繁忙的都市"><a href="#模板题——繁忙的都市" class="headerlink" title="模板题——繁忙的都市"></a>模板题——<a href="https://www.lanqiao.cn/problems/889/learning">繁忙的都市</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">kruskal</span>():<br>    <span class="hljs-comment"># 初始化</span><br>    n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    Map = []<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>        u, v, w = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>        Map.append([w, u, v])  <span class="hljs-comment"># 注意第一个参数是边权</span><br>    Map.sort()<br><br>    <span class="hljs-comment"># 并查集</span><br>    p = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">root</span>(<span class="hljs-params">x</span>):<br>        <span class="hljs-keyword">if</span> x != p[x]:<br>            p[x] = root(p[x])<br>        <span class="hljs-keyword">return</span> p[x]<br><br>    <span class="hljs-comment"># 非连环时更新</span><br>    _<span class="hljs-built_in">sum</span>, _<span class="hljs-built_in">max</span> = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> w, u, v <span class="hljs-keyword">in</span> Map:<br>        root_u = root(u)<br>        root_v = root(v)<br>        <span class="hljs-keyword">if</span> root_u != root_v:<br>            p[root_u] = root_v<br>            _<span class="hljs-built_in">sum</span> += <span class="hljs-number">1</span><br>            _<span class="hljs-built_in">max</span> = <span class="hljs-built_in">max</span>(_<span class="hljs-built_in">max</span>, w)<br>    <span class="hljs-keyword">return</span> _<span class="hljs-built_in">sum</span>, _<span class="hljs-built_in">max</span><br><span class="hljs-built_in">print</span>(*kruskal())<br></code></pre></td></tr></table></figure><h3 id="Prim"><a href="#Prim" class="headerlink" title="Prim"></a>Prim</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526131818064.png" alt="image-20240526131818064"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526131825567.png" alt="image-20240526131825567"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526131840546.png" alt="image-20240526131840546"></p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526131848626.png" alt="image-20240526131848626"></p><h4 id="模板题——繁忙的都市-1"><a href="#模板题——繁忙的都市-1" class="headerlink" title="模板题——繁忙的都市"></a>模板题——<a href="https://www.lanqiao.cn/problems/889/learning">繁忙的都市</a></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br>n,m=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>e=[]<br><span class="hljs-keyword">for</span>  _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>  u,v,w=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>  e.append((w,u,v))<br><span class="hljs-comment">#边按照权重进行排序</span><br>e.sort()<br><span class="hljs-comment">#需要一个并查集</span><br>p=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">findroot</span>(<span class="hljs-params">x</span>):<br>  <span class="hljs-keyword">if</span> x==p[x]:<span class="hljs-keyword">return</span> x<br>  <span class="hljs-keyword">else</span>:<br>    p[x]=findroot(p[x])<br>    <span class="hljs-keyword">return</span> p[x]<br>ans=<span class="hljs-number">0</span><br><span class="hljs-comment">#进行遍历所有的边，进行合并：</span><br><span class="hljs-keyword">for</span> w,u,v <span class="hljs-keyword">in</span> e:<br>  <span class="hljs-comment">#只要u和v不在同一集合内就可以进行合并：</span><br>  rootu=findroot(u)<br>  rootv=findroot(v)<br>  <span class="hljs-keyword">if</span> rootu!=rootv:<br>    p[rootu]=rootv<br>    ans=<span class="hljs-built_in">max</span>(ans,w)<br><span class="hljs-built_in">print</span>(n-<span class="hljs-number">1</span>,ans)<br></code></pre></td></tr></table></figure><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/image-20240526132045604.png" alt="image-20240526132045604"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;动态规划&quot;&gt;&lt;a href=&quot;#动态规划&quot; class=&quot;headerlink&quot; title=&quot;动态规划&quot;&gt;&lt;/a&gt;动态规划&lt;/h1&gt;&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h</summary>
      
    
    
    
    <category term="刷题" scheme="http://zdx-1.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="蓝桥国赛" scheme="http://zdx-1.github.io/categories/%E5%88%B7%E9%A2%98/%E8%93%9D%E6%A1%A5%E5%9B%BD%E8%B5%9B/"/>
    
    
    <category term="蓝桥杯" scheme="http://zdx-1.github.io/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>BookShop说明文档</title>
    <link href="http://zdx-1.github.io/2024/05/22/BookShop%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/"/>
    <id>http://zdx-1.github.io/2024/05/22/BookShop%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/</id>
    <published>2024-05-22T09:08:26.000Z</published>
    <updated>2024-05-22T09:31:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="zdx-BookShop"><a href="#zdx-BookShop" class="headerlink" title="zdx-BookShop"></a>zdx-BookShop</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>ASP.NET应用系统设计与开发实战项目BookShop，完整项目在BookShop目录下</p><h2 id="项目演示"><a href="#项目演示" class="headerlink" title="项目演示"></a>项目演示</h2><h3 id="当当网上书店首页"><a href="#当当网上书店首页" class="headerlink" title="当当网上书店首页"></a>当当网上书店首页</h3><p><img src="/./../images/BookShop%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/image-20240522141242224-1716370269691-1.png" alt="image-20240522141242224"></p><h3 id="当当网图书分类显示"><a href="#当当网图书分类显示" class="headerlink" title="当当网图书分类显示"></a>当当网图书分类显示</h3><h4 id="按照图书分类"><a href="#按照图书分类" class="headerlink" title="按照图书分类"></a>按照图书分类</h4><p><img src="/./../images/BookShop%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/image-20240522145038514.png" alt="image-20240522145038514"></p><h4 id="按照出版品牌商"><a href="#按照出版品牌商" class="headerlink" title="按照出版品牌商"></a>按照出版品牌商</h4><p><img src="/./../images/BookShop%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/image-20240522145159148.png" alt="image-20240522145159148"></p><h3 id="当当网图书详情页"><a href="#当当网图书详情页" class="headerlink" title="当当网图书详情页"></a>当当网图书详情页</h3><p><img src="/./../images/BookShop%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/image-20240517174033577.png" alt="image-20240517174033577"></p><h3 id="当当网新增订单演示"><a href="#当当网新增订单演示" class="headerlink" title="当当网新增订单演示"></a>当当网新增订单演示</h3><p><img src="/./../images/BookShop%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/image-20240522145321335.png" alt="image-20240522145321335"><br><img src="/./../images/BookShop%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/image-20240522145345736-1716370269692-2.png" alt="image-20240522145345736"><br><img src="/./../images/BookShop%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/image-20240522145651681-1716370269692-3.png" alt="image-20240522145651681"><br><img src="/./../images/BookShop%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/image-20240522145707070-1716370269692-4.png" alt="image-20240522145707070"></p><h3 id="当当网用户登录"><a href="#当当网用户登录" class="headerlink" title="当当网用户登录"></a>当当网用户登录</h3><p><img src="/./../images/BookShop%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/image-20240517174110277-1716370269692-5.png" alt="image-20240517174110277"></p><h3 id="当当网个人信息"><a href="#当当网个人信息" class="headerlink" title="当当网个人信息"></a>当当网个人信息</h3><p><img src="/./../images/BookShop%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/image-20240517174213598-1716370269692-6.png" alt="image-20240517174213598"></p><h3 id="当当网购物车"><a href="#当当网购物车" class="headerlink" title="当当网购物车"></a>当当网购物车</h3><p><img src="/./../images/BookShop%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/image-20240517174250589-1716370269692-7.png" alt="image-20240517174250589"></p><h3 id="搜索功能演示"><a href="#搜索功能演示" class="headerlink" title="搜索功能演示"></a>搜索功能演示</h3><p><img src="/./../images/BookShop%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/image-20240517174350714.png" alt="image-20240517174350714"></p><h3 id="后台管理系统用户登录"><a href="#后台管理系统用户登录" class="headerlink" title="后台管理系统用户登录"></a>后台管理系统用户登录</h3><p><img src="/./../images/BookShop%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/image-20240517173310694-1716370269692-21.png" alt="image-20240517173310694"></p><h3 id="管理员用户管理"><a href="#管理员用户管理" class="headerlink" title="管理员用户管理"></a>管理员用户管理</h3><h4 id="用户信息查询"><a href="#用户信息查询" class="headerlink" title="用户信息查询"></a>用户信息查询</h4><p><img src="/./../images/BookShop%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/image-20240517173504064-1716370269692-8.png" alt="image-20240517173504064"></p><p><img src="/./../images/BookShop%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/image-20240517173549044-1716370269692-9.png" alt="image-20240517173549044"></p><h4 id="后端新增用户"><a href="#后端新增用户" class="headerlink" title="后端新增用户"></a>后端新增用户</h4><p><img src="/./../images/BookShop%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/image-20240522150356339-1716370269692-10.png" alt="image-20240522150356339"></p><p><img src="/./../images/BookShop%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/image-20240522150526547-1716370269692-11.png" alt="image-20240522150526547"></p><h3 id="管理员图书分类管理"><a href="#管理员图书分类管理" class="headerlink" title="管理员图书分类管理"></a>管理员图书分类管理</h3><p><img src="/./../images/BookShop%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/image-20240517173639044-1716370269692-12.png" alt="image-20240517173639044"></p><h3 id="管理员出版社管理"><a href="#管理员出版社管理" class="headerlink" title="管理员出版社管理"></a>管理员出版社管理</h3><p><img src="/./../images/BookShop%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/image-20240517173728364-1716370269692-13.png" alt="image-20240517173728364"></p><h3 id="管理员图书管理"><a href="#管理员图书管理" class="headerlink" title="管理员图书管理"></a>管理员图书管理</h3><h4 id="图书分类查询"><a href="#图书分类查询" class="headerlink" title="图书分类查询"></a>图书分类查询</h4><p><img src="/./../images/BookShop%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/image-20240517173804161-1716370269692-14.png" alt="image-20240517173804161"></p><h4 id="添加图书信息"><a href="#添加图书信息" class="headerlink" title="添加图书信息"></a>添加图书信息</h4><p><img src="/./../images/BookShop%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/image-20240522150125276-1716370269692-16.png" alt="image-20240522150125276"></p><h4 id="修改图书信息"><a href="#修改图书信息" class="headerlink" title="修改图书信息"></a>修改图书信息</h4><p><img src="/./../images/BookShop%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/image-20240522145943193-1716370269692-15.png" alt="image-20240522145943193"></p><h3 id="管理员订单管理"><a href="#管理员订单管理" class="headerlink" title="管理员订单管理"></a>管理员订单管理</h3><h4 id="订单管理列表"><a href="#订单管理列表" class="headerlink" title="订单管理列表"></a>订单管理列表</h4><p><img src="/./../images/BookShop%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/image-20240517173834433-1716370269692-17.png" alt="image-20240517173834433"></p><h4 id="订单详细信息"><a href="#订单详细信息" class="headerlink" title="订单详细信息"></a>订单详细信息</h4><p><img src="/./../images/BookShop%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/image-20240522150240729-1716370269692-18.png" alt="image-20240522150240729"></p><h2 id="项目特点"><a href="#项目特点" class="headerlink" title="项目特点"></a>项目特点</h2><h4 id="使用Common类库统一管理DBHelper"><a href="#使用Common类库统一管理DBHelper" class="headerlink" title="使用Common类库统一管理DBHelper"></a>使用Common类库统一管理DBHelper</h4><p>具体内容请参考项目对应代码，此处举例</p><p><img src="/./../images/BookShop%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/image-20240522160917117-1716370269692-19.png" alt="image-20240522160917117"></p><h4 id="采用MD5加密用户密码信息"><a href="#采用MD5加密用户密码信息" class="headerlink" title="采用MD5加密用户密码信息"></a>采用MD5加密用户密码信息</h4><p>可以有效防止数据库泄露用户密码信息泄露的情况</p><p><img src="/./../images/BookShop%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/image-20240522160655322-1716370269692-20.png" alt="image-20240522160655322"></p><p><img src="/./../images/BookShop%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/image-20240522160732222-1716370269692-22.png" alt="image-20240522160732222"></p><p><img src="/./../images/BookShop%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/image-20240522160615465-1716370269692-23.png" alt="image-20240522160615465"></p><h2 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h2><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><ul><li><p>BookShop.WebUI：ASP.NET MVC Web应用程序项目，包含视图、控制器、路由等。</p></li><li><p>BookShop.Common：包含通用工具和辅助类的类库项目，用于数据访问层（DAL）和其他服务。</p></li><li><p>BookShop.DAL：数据访问层（DAL）类库项目，包含数据访问逻辑和接口。</p></li><li><p>BookShop.Model：包含数据模型（如书籍、作者、类别等）的类库项目。</p></li><li><p>BookShop.BLL：业务逻辑层（BLL）类库项目，包含业务规则和服务。</p></li></ul><p><img src="/./../images/BookShop%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/image-20240522160151327-1716370269692-24.png" alt="image-20240522160151327"></p><h3 id="Common类库"><a href="#Common类库" class="headerlink" title="Common类库"></a>Common类库</h3><ul><li>数据库连接字符串管理：在Common类库中，可以定义一个配置管理器类，用于从配置文件（如web.config或appsettings.json）中读取和解析数据库连接字符串。</li><li>数据库提供程序工厂：创建一个数据库提供程序工厂类，该类能够根据配置的连接字符串类型（如SQL Server、MySQL等）创建和返回相应的数据库上下文或连接对象。</li></ul><h3 id="数据访问层（DAL）"><a href="#数据访问层（DAL）" class="headerlink" title="数据访问层（DAL）"></a>数据访问层（DAL）</h3><ul><li>接口定义：在BookShop.Data项目中，为每种数据模型定义接口（如IBookRepository、IAuthorRepository等），这些接口包含CRUD（创建、读取、更新、删除）操作的方法。</li><li>实现类：为每个接口创建实现类（如SqlBookRepository、MySqlBookRepository等），这些类将使用Common类库中的数据库提供程序工厂来建立与数据库的连接并执行操作。</li></ul><h3 id="MySQL数据源处理"><a href="#MySQL数据源处理" class="headerlink" title="MySQL数据源处理"></a>MySQL数据源处理</h3><ul><li><p>在Common里面配置符合MySql的DBHelper</p></li><li><p>MySQL连接字符串：在web.config配置文件中添加MySQL数据库的连接字符串。</p></li><li><p>MySQL提供程序：在Common类库中实现或集成MySQL数据库提供程序（如使用MySQL Connector&#x2F;NET）。</p></li></ul><h3 id="业务逻辑层（BLL）"><a href="#业务逻辑层（BLL）" class="headerlink" title="业务逻辑层（BLL）"></a>业务逻辑层（BLL）</h3><ul><li>服务类：在BookShop.BLL项目中，创建服务类（如BookService、AuthorService等），这些类将调用数据访问层中的接口来执行业务逻辑。服务类应该是无状态的，并且只应包含与业务逻辑相关的代码。</li></ul><h3 id="控制器和视图"><a href="#控制器和视图" class="headerlink" title="控制器和视图"></a>控制器和视图</h3><ul><li>控制器：在BookShop.WebUI项目中，创建MVC控制器，这些控制器将调用业务逻辑层中的服务类来处理请求并返回数据。</li><li>视图：创建MVC视图来显示数据并允许用户与应用程序进行交互。视图应该只包含与显示相关的代码，并且应该通过控制器来与业务逻辑层进行通信。</li></ul><h2 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h2><ol><li>拉取项目</li><li>运行安装BookShop&#x2F;mysql-connection-net文件夹中的文件，并添加引用</li><li>添加mybookshop数据库，运行mysql脚本</li><li>清理并重新生成解决方案</li><li>运行项目</li></ol><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><ol><li><p>本项目使用.net4.5.2，可以向上兼容</p></li><li><p>在项目运行前请安装BookShop&#x2F;mysql-connection-net文件夹中的文件，并添加引用</p></li><li><p>测试账号信息如下：</p><table><thead><tr><th align="center">测试账号</th><th align="center">测试用户类型</th><th align="center">密码</th></tr></thead><tbody><tr><td align="center">admin</td><td align="center">管理员</td><td align="center">123456</td></tr><tr><td align="center">jingjing</td><td align="center">普通用户</td><td align="center">jingjing</td></tr><tr><td align="center">bobo</td><td align="center">VIP用户</td><td align="center">123456</td></tr></tbody></table></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;zdx-BookShop&quot;&gt;&lt;a href=&quot;#zdx-BookShop&quot; class=&quot;headerlink&quot; title=&quot;zdx-BookShop&quot;&gt;&lt;/a&gt;zdx-BookShop&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;</summary>
      
    
    
    
    <category term="ASP.NET学习" scheme="http://zdx-1.github.io/categories/ASP-NET%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="ASP.NET" scheme="http://zdx-1.github.io/tags/ASP-NET/"/>
    
  </entry>
  
  <entry>
    <title>树形动态规划问题解析&amp;树上背包问题研究</title>
    <link href="http://zdx-1.github.io/2024/05/06/%E6%A0%91%E5%BD%A2%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90-%E6%A0%91%E4%B8%8A%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E7%A0%94%E7%A9%B6/"/>
    <id>http://zdx-1.github.io/2024/05/06/%E6%A0%91%E5%BD%A2%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90-%E6%A0%91%E4%B8%8A%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E7%A0%94%E7%A9%B6/</id>
    <published>2024-05-06T03:34:14.000Z</published>
    <updated>2024-05-06T03:34:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-树上DP概述"><a href="#1-树上DP概述" class="headerlink" title="1. 树上DP概述"></a>1. 树上DP概述</h2><p>树形 DP，即在树上进行的 DP。由于树固有的递归性质，树形 DP 一般都是递归进行的。</p><p>大部分的树形 DP 都是线性的，并且由于树本身就是有序的，所以具有十分良好的性质，例如子结构性质等。</p><p>树形 DP 在算法竞赛中考察多样，但是简单的可以分为：</p><ol><li>树上线性 DP。</li><li>换根 DP。</li></ol><p>树上线性 DP 也分为很多种，不同的题有不同的考法，实际上，所有的 DP 都能在树上考，但是蓝桥比赛中，一般就几种考法：</p><ol><li>树上决策，例如选最大值，最小值。</li><li>树上背包。</li><li>换根，换根 dp 是树上的一类特殊性质。</li></ol><p>接下来，我们将通过几个问题来描述这三种问题的解法。</p><h2 id="2-树上决策问题"><a href="#2-树上决策问题" class="headerlink" title="2. 树上决策问题"></a>2. 树上决策问题</h2><p>树上决策问题，往往是子节点向父节点转移时，只取最优的解，这一点与线性 DP 十分相似。</p><p>看一道例题：</p><h3 id="2-1-生命之树-真题"><a href="#2-1-生命之树-真题" class="headerlink" title="2. 1 生命之树-真题"></a>2. 1 <a href="https://www.lanqiao.cn/problems/131/learning/">生命之树-真题</a></h3><p><img src="/./../images/%E6%A0%91%E5%BD%A2%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90-%E6%A0%91%E4%B8%8A%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E7%A0%94%E7%A9%B6/uid1792586-20240418-1713417459185.png" alt="图片描述"></p><p>这题看着挺玄乎，其实并没有那么复杂。</p><p>我们观察题目要求：给定一棵树，选出一个非空集合，使得对于任意两个元素 $a, b$，都存在一个序列 $a, v_1, …v_k, b$ 是这个集合里的元素，并且相邻两个点之间有一条边。</p><p>本来可以一句话说清楚的事情，但是偏偏要给出数学定义，所以要考察大家的归纳整理能力。</p><p>实际上，就是要在树中选出一个连通块即可，并且满足连通块的和值最大。</p><p>为什么呢？</p><p>我们观察一幅图，相信大家能理解了：</p><p><img src="/./../images/%E6%A0%91%E5%BD%A2%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90-%E6%A0%91%E4%B8%8A%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E7%A0%94%E7%A9%B6/uid1792586-20240418-1713419773909.png" alt="图片描述"></p><p>绿色的代表我们选择的点集合。这些点是连通的，所以满足要求。</p><p>如果换成这个样子：</p><p><img src="/./../images/%E6%A0%91%E5%BD%A2%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90-%E6%A0%91%E4%B8%8A%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E7%A0%94%E7%A9%B6/uid1792586-20240418-1713419870334.png" alt="图片描述"></p><p>这样就不满足题目要求了。</p><p>所以大家可以体会出来，题目的要求，其实就是找一个树上的连通块。</p><p>那么我们的问题就变成了在树上找最大的连通块了。</p><p>树形 DP，终究还是 DP，所以需要划分子问题。</p><p>我们常用的方法是，<strong>将子节点为根的子树，看成子问题，然后合并到当前根</strong>。</p><p>将节点从深到浅（子树从小到大）的顺序作为 DP 的阶段，在 DP 的表示中，通常第一维代表节点的编号，后续维度按照问题进行设计。</p><p>首先我们需要解决一个问题，树上的连通块是什么？有什么性质可以利用。</p><p>答案是：树上的联通块也是树，他一定有根。所以我们要是找到这个根，或者枚举这个根，就可以找到答案。</p><p>我们设计的状态如下：</p><p>$dp_i$ 表示，对于节点为 $i$ 的子树，我们找到的以 $i$ 为根的连通块和值最大是 $dp_i$。</p><p>那么我们的转移的意义就是：对于 $i$ 来说，由于 $i$ 一定存在连通块中，所以，我们要找到他的儿子中，哪些是和 $i$ 连着的。</p><p>有一种贪心方案，对于 $i$ 的儿子 $v \in son(i)$ ，如果 $dp_v \ge 0$，我们就将他接入父亲即可。</p><p>所以，我们的转移方程就是： $$ dp_i &#x3D; w_i + \sum _{dp_j \ge 0 &amp; j \in son(i)} dp_j $$ 代码如下：</p><ul><li>C++</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span> #<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span> using namespace std; const int N = 1e5+100; typedef long long ll; vector<span class="hljs-string">&lt;int&gt;</span> G[N]; int w[N]; ll dp[N], ans = -1e18; int n; void dfs(int u, int f) &#123; dp[u] = w[u]; for (int v : G[u]) &#123; <span class="hljs-keyword">if</span> (v == f) continue; dfs(v, u); <span class="hljs-keyword">if</span> (dp[v] &gt; 0) &#123; dp[u] += dp[v]; &#125; &#125; ans = max(ans, dp[u]); &#125; int main() &#123; cin &gt;&gt; n; for (int i = 1; i <span class="hljs-string">&lt;= n; ++i) &#123; cin &gt;</span>&gt; w[i]; &#125; int u, v; for (int i = 1; i <span class="hljs-string">&lt; n; ++i) &#123; cin &gt;</span>&gt; u &gt;&gt; v; G[u].push_back(v); G[v].push_back(u); &#125; dfs(1, 0); cout &lt;&lt; ans &lt;&lt; endl; return 0; &#125;</span><br></code></pre></td></tr></table></figure><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*; <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (<span class="hljs-number">1e5</span> + <span class="hljs-number">100</span>); <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span>[] dp; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] w; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;List&lt;Integer&gt;&gt; G; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> Long.MIN_VALUE; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> n; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> f)</span> &#123; dp[u] = w[u]; <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v : G.get(u)) &#123; <span class="hljs-keyword">if</span> (v == f) <span class="hljs-keyword">continue</span>; dfs(v, u); <span class="hljs-keyword">if</span> (dp[v] &gt; <span class="hljs-number">0</span>) &#123; dp[u] += dp[v]; &#125; &#125; ans = Math.max(ans, dp[u]); &#125; <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123; <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in); n = scanner.nextInt(); w = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N]; G = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(); <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123; G.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;()); &#125; dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">long</span>[N]; <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123; w[i] = scanner.nextInt(); &#125; <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++) &#123; <span class="hljs-type">int</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> scanner.nextInt() - <span class="hljs-number">1</span>; <span class="hljs-comment">// 0-indexed in Java int v = scanner.nextInt() - 1; G.get(u).add(v); G.get(v).add(u); &#125; dfs(0, -1); System.out.println(ans); scanner.close(); &#125; &#125;</span><br></code></pre></td></tr></table></figure><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys sys.setrecursionlimit(<span class="hljs-number">100000</span>) n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>()) aList = [<span class="hljs-number">0</span>] + [<span class="hljs-built_in">int</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">input</span>().split()] tree = [[]<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)] ans = <span class="hljs-number">0</span> dp = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>): m, n =<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()) tree[m].append(n) tree[n].append(m) <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">u,f</span>): <span class="hljs-keyword">global</span> ans dp[u] = aList[u] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tree[u]: <span class="hljs-keyword">if</span> i !=f: dp[i] = dfs(i, u) <span class="hljs-keyword">if</span> dp[i]&gt;<span class="hljs-number">0</span>: dp[u] += dp[i] ans=<span class="hljs-built_in">max</span>(ans, dp[u]) <span class="hljs-keyword">return</span> dp[u] dfs(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>) <span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h2 id="3-树上背包问题"><a href="#3-树上背包问题" class="headerlink" title="3. 树上背包问题"></a>3. 树上背包问题</h2><p>树上背包问题，本质上还是背包，可以看成在树上进行的背包。</p><p>每次转移都是在父亲与儿子之间进行了一次经典背包转移。</p><h3 id="3-1-小明的背包6"><a href="#3-1-小明的背包6" class="headerlink" title="3.1 小明的背包6"></a>3.1 <a href="https://www.lanqiao.cn/problems/131/learning/">小明的背包6</a></h3><p><img src="/./../images/%E6%A0%91%E5%BD%A2%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90-%E6%A0%91%E4%B8%8A%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E7%A0%94%E7%A9%B6/uid1792586-20240418-1713421022535.png" alt="图片描述"></p><p>这个是典型的依赖背包问题。</p><p>并且依赖关系构成了一棵树。</p><p>我们看样例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>6 <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>3 <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>2 <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>2 <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>3 <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>4 <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>3 <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>9<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/./../images/%E6%A0%91%E5%BD%A2%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90-%E6%A0%91%E4%B8%8A%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E7%A0%94%E7%A9%B6/uid1792586-20240418-1713421190949.png" alt="图片描述"></p><p>依赖关系如上图所示：上图的含义是如果只有购买了 $1$ 号物品，才能购买 $2, 3, 4$ 号物品。</p><p>记住，我们的目标是划分子问题，也就是说，只要保证了一个子问题的划分是正确的，那么由于树的优良递归性质，其他的也会是正确的。</p><p>复习一下普通的背包问题，用 $dp_i$ 表示，在使用了 $i$ 空间的情况下的最大价值。</p><p>但是在树问题中，由于第一维度是节点的编号，所以我们用 $dp_{i,j}$ 表示对于 $i$ 子树来说，使用了 $j$ 空间的最大价值。</p><p>当然题目中有要求，必须满足依赖关系，所以，我们需要重新定义： $dp_{i,j}$ 表示对于 $i$ 子树来说，使用了 $j$ 空间且满足依赖关系的最大价值。</p><p>如何满足呢？</p><p>我们只需要保证每一个 $dp_{i,j}$ 都选了 $i$ 节点即可。</p><p>我们可以在背包中预留出节点 $i$ 的空间即可。</p><p>代码如下：</p><ul><li>C ++</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span> #<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span> #<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span> using namespace std; const int N = 1e2+20; vector<span class="hljs-string">&lt;int&gt;</span> G[N]; int n, V; int v[N], w[N]; int dp[N][N]; void dfs(int u) &#123; for (int i = v[u]; i <span class="hljs-string">&lt;= V; ++i) dp[u][i] = w[u]; for (int i : G[u]) &#123; dfs(i); for (int j = V; j &gt;</span>= v[u] + v[i]; --j) &#123; for (int k = v[i]; k <span class="hljs-string">&lt;= j - v[u]; ++k) // 剩余的空间 dp[u][j] = max(dp[u][j - k] + dp[i][k], dp[u][j]); &#125; &#125; &#125; int main() &#123; cin &gt;</span>&gt; n &gt;&gt; V; int s; for (int i = 1; i <span class="hljs-string">&lt;= n; ++i) &#123; cin &gt;</span>&gt; v[i] &gt;&gt; w[i] &gt;&gt; s; G[s].push_back(i); &#125; dfs(0); cout &lt;&lt; dp[0][V] &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>; &#125;</span><br></code></pre></td></tr></table></figure><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList; <span class="hljs-keyword">import</span> java.util.List; <span class="hljs-keyword">import</span> java.util.Scanner; <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> V; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[][] dp; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;List&lt;Integer&gt;&gt; G; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] v; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] w; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> &#123; <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> v[u]; i &lt;= V; ++i) &#123; dp[u][i] = w[u]; &#125; <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> child : G.get(u)) &#123; dfs(child); <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> V; j &gt;= v[u] + v[child]; --j) &#123; <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> v[child]; k &lt;= j - v[u]; ++k) &#123; dp[u][j] = Math.max(dp[u][j - k] + dp[child][k], dp[u][j]); &#125; &#125; &#125; &#125; <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123; <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in); <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> scanner.nextInt(); V = scanner.nextInt(); G = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(); <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= n; ++i) &#123; G.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;()); &#125; v = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>]; w = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>]; dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>][V + <span class="hljs-number">1</span>]; <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123; v[i] = scanner.nextInt(); w[i] = scanner.nextInt(); <span class="hljs-type">int</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> scanner.nextInt(); G.get(s).add(i); &#125; dfs(<span class="hljs-number">0</span>); System.out.println(dp[<span class="hljs-number">0</span>][V]); scanner.close(); &#125; &#125;<br></code></pre></td></tr></table></figure><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>: <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">self, u, dp, G, v, w, V</span>): <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(v[u], V + <span class="hljs-number">1</span>): dp[u][i] = w[u] <span class="hljs-keyword">for</span> child <span class="hljs-keyword">in</span> G[u]: self.dfs(child, dp, G, v, w, V) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(V, v[u] + v[child] - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>): <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(v[child], j - v[u] + <span class="hljs-number">1</span>): dp[u][j] = <span class="hljs-built_in">max</span>(dp[u][j - k] + dp[child][k], dp[u][j]) <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">self</span>): n, V = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()) G = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)] <span class="hljs-comment"># 0-indexed in Python v = [0] * (n + 1) w = [0] * (n + 1) for i in range(1, n + 1): v[i], w[i], s = map(int, input().split()) G[s].append(i) dp = [[0] * (V + 1) for _ in range(n + 1)] self.dfs(0, dp, G, v, w, V) print(dp[0][V]) # Run the main function solution = Solution() solution.main()</span><br></code></pre></td></tr></table></figure><h2 id="4-换根-DP-问题"><a href="#4-换根-DP-问题" class="headerlink" title="4. 换根 DP 问题"></a>4. 换根 DP 问题</h2><p>换根 DP，面对的问题通常是“不定根”问题，也就是说，对于一棵树，他的根不一定是 $1$ 号点，可能是任意某个点。</p><p>或者在某些问题中，我们需要尝试计算以每个点为根的情况，最后维护出最大值。</p><p>我们先看一副图，来理解所谓的“换根”。</p><p><img src="/./../images/%E6%A0%91%E5%BD%A2%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90-%E6%A0%91%E4%B8%8A%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E7%A0%94%E7%A9%B6/uid1792586-20240418-1713424406656.png" alt="图片描述"></p><p>我们将原来以 $1$ 为根换成了以 $2$ 为根。那么树的形态也就发生了变化。</p><p>如果每次都是选择一个点作为根进行处理，那么总的时间复杂度为 $O(n^2)$，但是如果我们能发现性质，我们可以将复杂度降为 $O(n)$。</p><p>即换一次根的复杂度为 $O(1)$，下面，我们将讲述这种方法。</p><p>在一般的问题中，我们常常是利用dfs来不断的将根转换为根的子节点。</p><p>我们会发现一些事情：</p><p><img src="/./../images/%E6%A0%91%E5%BD%A2%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90-%E6%A0%91%E4%B8%8A%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E7%A0%94%E7%A9%B6/uid1792586-20240418-1713424716921.png" alt="图片描述"></p><p>我们一次转换的过程，其实有很大一部分并没有发生变化，体现在 DP 转移中，就是这些点的 DP 值也不会发生改变。</p><p>实际上改变的只有改变身份的两个点，其他的点都不会发生变化。</p><p>在换根的问题中，一般的步骤如下：</p><ol><li>以 $1$ 为根进行一遍扫描，并且处理出必要的信息，例如深度、DP 值等。</li><li>开始以 $1$ 进行换根，并且向下递归，在递归之前，需要将自己变成子节点的身份。</li><li>进入新的根后，按照根的身份，重新进行转移。并且维护答案。</li></ol><h3 id="4-1-卖树"><a href="#4-1-卖树" class="headerlink" title="4.1 卖树"></a>4.1 <a href="https://www.lanqiao.cn/problems/3029/learning/">卖树</a></h3><p><img src="/./../images/%E6%A0%91%E5%BD%A2%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90-%E6%A0%91%E4%B8%8A%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E7%A0%94%E7%A9%B6/uid1792586-20240418-1713424080194.png" alt="图片描述"></p><p>本题需要计算以每个点为根的情况下，产生的盈利。</p><p>如果我们确定了一个点为根，我们很容易算出答案，如果确定了根，问题就变成了求最大深度，这个问题只需要一遍DFS就可以完成。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> f, <span class="hljs-type">int</span> dt)</span> </span>&#123; <span class="hljs-comment">// 求出以1为根的原始信息 dep[u] = dt; Mdp[u] = 0; // Mdp即为当前点为根的最大深度 for (int v : G[u]) &#123; if (v == f) continue; dfs(v, u, dt + 1); Mdp[u] = max(Mdp[v] + 1, Mdp[u]); &#125; &#125;</span><br></code></pre></td></tr></table></figure><p>因为节点数量太多，我们无法承受 $O(n^2)$ 的复杂度，所以我们需要进行换根，</p><p>基本思想如上述一致：</p><ol><li>我们需要先算出以 $1$ 为根的信息，包括以每个节点为子树的最大深度，从 $1$ 转移到 $i$ 节点的代价。</li><li>我们从 $1$ 号点开始换根，每次只将根的身份换给儿子，然后进入递归，进入之前，我们需要将当前点的身份改为子节点。</li><li>进行新的根，由于原来的转移已经失效，所以需要重新转移。并且维护答案，然后重复2步骤。</li></ol><ul><li>C++</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span> #<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span> using namespace std; const int N = 1e5+10; vector<span class="hljs-string">&lt;int&gt;</span> G[N]; int n, k, c; int dep[N], Mdp[N]; typedef long long ll; ll ans = 0; void dfs(int u, int f, int dt) &#123; <span class="hljs-comment">// 求出以1为根的原始信息 dep[u] = dt; Mdp[u] = 0; for (int v : G[u]) &#123; if (v == f) continue; dfs(v, u, dt + 1); Mdp[u] = max(Mdp[v] + 1, Mdp[u]); &#125; &#125; void dfs2(int u, int f) &#123; // 开始换根 /** * 重新转移 */ int tmpf = 0, Mx1 = 0, Mx2 = 0; for (int v : G[u]) &#123; tmpf = max(tmpf, Mdp[v] + 1); &#125; // 维护答案 ans = max(1ll * tmpf * k - 1ll * dep[u] * c, ans); // 根变儿子步骤 int pre = Mdp[u]; for (int v : G[u]) &#123; if (Mdp[v] + 1 &gt; Mx1) &#123; Mx2 = Mx1; Mx1 = Mdp[v] + 1; &#125; else if (Mdp[v] + 1 &gt; Mx2) &#123; Mx2 = Mdp[v] + 1; &#125; &#125; for (int v : G[u]) &#123; if (v == f) continue; // 由于根要变成儿子，所以要改变原来的转移值 if (Mdp[v] + 1 == Mx1) Mdp[u] = Mx2; else Mdp[u] = Mx1; dfs2(v, u); &#125; // 还原原始的值。 Mdp[u] = pre; &#125; void sol() &#123; for (int i = 1; i &lt;= n; ++i) G[i].clear(); ans = 0; cin &gt;&gt; n &gt;&gt; k &gt;&gt; c; int u, v; for (int i = 1; i &lt; n; ++i) &#123; cin &gt;&gt; u &gt;&gt; v; G[u].push_back(v); G[v].push_back(u); &#125; dfs(1, 0, 0); dfs2(1, 0); cout &lt;&lt; ans &lt;&lt; &#x27;\n&#x27;; &#125; int main() &#123; ios::sync_with_stdio(0); int T; cin &gt;&gt; T; while (T --) &#123; sol(); &#125; return 0; &#125;</span></span><br></code></pre></td></tr></table></figure><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict <span class="hljs-keyword">import</span> sys sys.setrecursionlimit(<span class="hljs-number">100000</span>) N = <span class="hljs-number">100010</span> G = defaultdict(<span class="hljs-built_in">list</span>) n, k, c = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span> dep = [<span class="hljs-number">0</span>] * N Mdp = [<span class="hljs-number">0</span>] * N ans = <span class="hljs-number">0</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">u, f, dt</span>): <span class="hljs-comment"># 求出以1为根的原始信息 global dep, Mdp dep[u] = dt Mdp[u] = 0 for v in G[u]: if v == f: continue dfs(v, u, dt + 1) Mdp[u] = max(Mdp[v] + 1, Mdp[u]) def dfs2(u, f): # 开始换根 global ans, dep, Mdp tmpf = 0 Mx1 = 0 Mx2 = 0 # 重新转移 for v in G[u]: tmpf = max(tmpf, Mdp[v] + 1) # 维护答案 ans = max(ans, tmpf * k - dep[u] * c) # 根变儿子步骤 pre = Mdp[u] for v in G[u]: if Mdp[v] + 1 &gt; Mx1: Mx2 = Mx1 Mx1 = Mdp[v] + 1 elif Mdp[v] + 1 &gt; Mx2: Mx2 = Mdp[v] + 1 for v in G[u]: if v == f: continue # 由于根要变成儿子，所以要改变原来的转移值 if Mdp[v] + 1 == Mx1: Mdp[u] = Mx2 else: Mdp[u] = Mx1 dfs2(v, u) # 还原原始的值。 Mdp[u] = pre def sol(): global n, k, c, ans, G, dep, Mdp n, k, c = map(int, input().split()) G.clear() ans = 0 for _ in range(n - 1): u, v = map(int, input().split()) G[u].append(v) G[v].append(u) dfs(1, 0, 0) dfs2(1, 0) print(ans) T = int(input()) for _ in range(T): sol()</span><br></code></pre></td></tr></table></figure><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*; <span class="hljs-keyword">import</span> java.io.*; <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123; <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">100010</span>; <span class="hljs-keyword">static</span> List&lt;Integer&gt;[] G; <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> n, k, c; <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] dep, Mdp; <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> ans; <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> f, <span class="hljs-type">int</span> dt)</span> &#123; <span class="hljs-comment">// 求出以1为根的原始信息 Mdp[u] = 0; for (int v : G[u]) &#123; if (v == f) continue; dfs(v, u, dt + 1); Mdp[u] = Math.max(Mdp[v] + 1, Mdp[u]); &#125; &#125; static void dfs2(int u, int f) &#123; // 开始换根 int tmpf = 0, Mx1 = 0, Mx2 = 0; /** * 重新转移 */ for (int v : G[u]) &#123; tmpf = Math.max(tmpf, Mdp[v] + 1); &#125; // 维护答案 ans = Math.max(ans, (long) tmpf * k - (long) dep[u] * c); // 根变儿子步骤 int pre = Mdp[u]; for (int v : G[u]) &#123; if (Mdp[v] + 1 &gt; Mx1) &#123; Mx2 = Mx1; Mx1 = Mdp[v] + 1; &#125; else if (Mdp[v] + 1 &gt; Mx2) &#123; Mx2 = Mdp[v] + 1; &#125; &#125; for (int v : G[u]) &#123; if (v == f) continue; // 由于根要变成儿子，所以要改变原来的转移值 if (Mdp[v] + 1 == Mx1) &#123; Mdp[u] = Mx2; &#125; else &#123; Mdp[u] = Mx1; &#125; dfs2(v, u); &#125; // 还原原始的值。 Mdp[u] = pre; &#125; static void sol(Scanner scanner) &#123; for (int i = 1; i &lt;= n; i++) G[i].clear(); ans = 0; n = scanner.nextInt(); k = scanner.nextInt(); c = scanner.nextInt(); int u, v; for (int i = 1; i &lt; n; i++) &#123; u = scanner.nextInt(); v = scanner.nextInt(); G[u].add(v); G[v].add(u); &#125; dfs(1, 0, 0); dfs2(1, 0); System.out.println(ans); &#125; public static void main(String[] args) &#123; G = new ArrayList[N]; for (int i = 0; i &lt; N; i++) &#123; G[i] = new ArrayList&lt;&gt;(); &#125; dep = new int[N]; Mdp = new int[N]; Scanner scanner = new Scanner(System.in); int T = scanner.nextInt(); while (T-- &gt; 0) &#123; sol(scanner); &#125; &#125; &#125;</span><br></code></pre></td></tr></table></figure><h2 id="5-作业"><a href="#5-作业" class="headerlink" title="5. 作业"></a>5. 作业</h2><table><thead><tr><th>题目</th><th>链接</th></tr></thead><tbody><tr><td>取气球（算法赛）</td><td><a href="https://www.lanqiao.cn/problems/17024/learning/">https://www.lanqiao.cn/problems/17024/learning/</a></td></tr><tr><td>左孩子右兄弟（21 年省赛）</td><td><a href="https://www.lanqiao.cn/problems/1451/learning/">https://www.lanqiao.cn/problems/1451/learning/</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-树上DP概述&quot;&gt;&lt;a href=&quot;#1-树上DP概述&quot; class=&quot;headerlink&quot; title=&quot;1. 树上DP概述&quot;&gt;&lt;/a&gt;1. 树上DP概述&lt;/h2&gt;&lt;p&gt;树形 DP，即在树上进行的 DP。由于树固有的递归性质，树形 DP 一般都是递归进行的。</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>状态压缩动态规划的典型题型深入分析</title>
    <link href="http://zdx-1.github.io/2024/05/06/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%9A%84%E5%85%B8%E5%9E%8B%E9%A2%98%E5%9E%8B%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90/"/>
    <id>http://zdx-1.github.io/2024/05/06/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%9A%84%E5%85%B8%E5%9E%8B%E9%A2%98%E5%9E%8B%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90/</id>
    <published>2024-05-06T03:31:45.000Z</published>
    <updated>2024-05-06T03:35:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-树上DP概述"><a href="#1-树上DP概述" class="headerlink" title="1. 树上DP概述"></a>1. 树上DP概述</h2><p>树形 DP，即在树上进行的 DP。由于树固有的递归性质，树形 DP 一般都是递归进行的。</p><p>大部分的树形 DP 都是线性的，并且由于树本身就是有序的，所以具有十分良好的性质，例如子结构性质等。</p><p>树形 DP 在算法竞赛中考察多样，但是简单的可以分为：</p><ol><li>树上线性 DP。</li><li>换根 DP。</li></ol><p>树上线性 DP 也分为很多种，不同的题有不同的考法，实际上，所有的 DP 都能在树上考，但是蓝桥比赛中，一般就几种考法：</p><ol><li>树上决策，例如选最大值，最小值。</li><li>树上背包。</li><li>换根，换根 dp 是树上的一类特殊性质。</li></ol><p>接下来，我们将通过几个问题来描述这三种问题的解法。</p><h2 id="2-树上决策问题"><a href="#2-树上决策问题" class="headerlink" title="2. 树上决策问题"></a>2. 树上决策问题</h2><p>树上决策问题，往往是子节点向父节点转移时，只取最优的解，这一点与线性 DP 十分相似。</p><p>看一道例题：</p><h3 id="2-1-生命之树-真题"><a href="#2-1-生命之树-真题" class="headerlink" title="2. 1 生命之树-真题"></a>2. 1 <a href="https://www.lanqiao.cn/problems/131/learning/">生命之树-真题</a></h3><p><img src="https://dn-simplecloud.shiyanlou.com/questions/uid1792586-20240418-1713417459185" alt="图片描述"></p><p>这题看着挺玄乎，其实并没有那么复杂。</p><p>我们观察题目要求：给定一棵树，选出一个非空集合，使得对于任意两个元素 $a, b$，都存在一个序列 $a, v_1, …v_k, b$ 是这个集合里的元素，并且相邻两个点之间有一条边。</p><p>本来可以一句话说清楚的事情，但是偏偏要给出数学定义，所以要考察大家的归纳整理能力。</p><p>实际上，就是要在树中选出一个连通块即可，并且满足连通块的和值最大。</p><p>为什么呢？</p><p>我们观察一幅图，相信大家能理解了：</p><p><img src="https://dn-simplecloud.shiyanlou.com/questions/uid1792586-20240418-1713419773909" alt="图片描述"></p><p>绿色的代表我们选择的点集合。这些点是连通的，所以满足要求。</p><p>如果换成这个样子：</p><p><img src="https://dn-simplecloud.shiyanlou.com/questions/uid1792586-20240418-1713419870334" alt="图片描述"></p><p>这样就不满足题目要求了。</p><p>所以大家可以体会出来，题目的要求，其实就是找一个树上的连通块。</p><p>那么我们的问题就变成了在树上找最大的连通块了。</p><p>树形 DP，终究还是 DP，所以需要划分子问题。</p><p>我们常用的方法是，<strong>将子节点为根的子树，看成子问题，然后合并到当前根</strong>。</p><p>将节点从深到浅（子树从小到大）的顺序作为 DP 的阶段，在 DP 的表示中，通常第一维代表节点的编号，后续维度按照问题进行设计。</p><p>首先我们需要解决一个问题，树上的连通块是什么？有什么性质可以利用。</p><p>答案是：树上的联通块也是树，他一定有根。所以我们要是找到这个根，或者枚举这个根，就可以找到答案。</p><p>我们设计的状态如下：</p><p>$dp_i$ 表示，对于节点为 $i$ 的子树，我们找到的以 $i$ 为根的连通块和值最大是 $dp_i$。</p><p>那么我们的转移的意义就是：对于 $i$ 来说，由于 $i$ 一定存在连通块中，所以，我们要找到他的儿子中，哪些是和 $i$ 连着的。</p><p>有一种贪心方案，对于 $i$ 的儿子 $v \in son(i)$ ，如果 $dp_v \ge 0$，我们就将他接入父亲即可。</p><p>所以，我们的转移方程就是： $$ dp_i &#x3D; w_i + \sum _{dp_j \ge 0 &amp; j \in son(i)} dp_j $$ 代码如下：</p><ul><li>C++</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span> #<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span> using namespace std; const int N = 1e5+100; typedef long long ll; vector<span class="hljs-string">&lt;int&gt;</span> G[N]; int w[N]; ll dp[N], ans = -1e18; int n; void dfs(int u, int f) &#123; dp[u] = w[u]; for (int v : G[u]) &#123; <span class="hljs-keyword">if</span> (v == f) continue; dfs(v, u); <span class="hljs-keyword">if</span> (dp[v] &gt; 0) &#123; dp[u] += dp[v]; &#125; &#125; ans = max(ans, dp[u]); &#125; int main() &#123; cin &gt;&gt; n; for (int i = 1; i <span class="hljs-string">&lt;= n; ++i) &#123; cin &gt;</span>&gt; w[i]; &#125; int u, v; for (int i = 1; i <span class="hljs-string">&lt; n; ++i) &#123; cin &gt;</span>&gt; u &gt;&gt; v; G[u].push_back(v); G[v].push_back(u); &#125; dfs(1, 0); cout &lt;&lt; ans &lt;&lt; endl; return 0; &#125;</span><br></code></pre></td></tr></table></figure><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*; <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (<span class="hljs-number">1e5</span> + <span class="hljs-number">100</span>); <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span>[] dp; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] w; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;List&lt;Integer&gt;&gt; G; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> Long.MIN_VALUE; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> n; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> f)</span> &#123; dp[u] = w[u]; <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v : G.get(u)) &#123; <span class="hljs-keyword">if</span> (v == f) <span class="hljs-keyword">continue</span>; dfs(v, u); <span class="hljs-keyword">if</span> (dp[v] &gt; <span class="hljs-number">0</span>) &#123; dp[u] += dp[v]; &#125; &#125; ans = Math.max(ans, dp[u]); &#125; <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123; <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in); n = scanner.nextInt(); w = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N]; G = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(); <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123; G.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;()); &#125; dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">long</span>[N]; <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123; w[i] = scanner.nextInt(); &#125; <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++) &#123; <span class="hljs-type">int</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> scanner.nextInt() - <span class="hljs-number">1</span>; <span class="hljs-comment">// 0-indexed in Java int v = scanner.nextInt() - 1; G.get(u).add(v); G.get(v).add(u); &#125; dfs(0, -1); System.out.println(ans); scanner.close(); &#125; &#125;</span><br></code></pre></td></tr></table></figure><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys sys.setrecursionlimit(<span class="hljs-number">100000</span>) n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>()) aList = [<span class="hljs-number">0</span>] + [<span class="hljs-built_in">int</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">input</span>().split()] tree = [[]<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)] ans = <span class="hljs-number">0</span> dp = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>): m, n =<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()) tree[m].append(n) tree[n].append(m) <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">u,f</span>): <span class="hljs-keyword">global</span> ans dp[u] = aList[u] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tree[u]: <span class="hljs-keyword">if</span> i !=f: dp[i] = dfs(i, u) <span class="hljs-keyword">if</span> dp[i]&gt;<span class="hljs-number">0</span>: dp[u] += dp[i] ans=<span class="hljs-built_in">max</span>(ans, dp[u]) <span class="hljs-keyword">return</span> dp[u] dfs(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>) <span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h2 id="3-树上背包问题"><a href="#3-树上背包问题" class="headerlink" title="3. 树上背包问题"></a>3. 树上背包问题</h2><p>树上背包问题，本质上还是背包，可以看成在树上进行的背包。</p><p>每次转移都是在父亲与儿子之间进行了一次经典背包转移。</p><h3 id="3-1-小明的背包6"><a href="#3-1-小明的背包6" class="headerlink" title="3.1 小明的背包6"></a>3.1 <a href="https://www.lanqiao.cn/problems/131/learning/">小明的背包6</a></h3><p><img src="https://dn-simplecloud.shiyanlou.com/questions/uid1792586-20240418-1713421022535" alt="图片描述"></p><p>这个是典型的依赖背包问题。</p><p>并且依赖关系构成了一棵树。</p><p>我们看样例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>6 <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>3 <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>2 <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>2 <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>3 <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>4 <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>3 <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>9<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://dn-simplecloud.shiyanlou.com/questions/uid1792586-20240418-1713421190949" alt="图片描述"></p><p>依赖关系如上图所示：上图的含义是如果只有购买了 $1$ 号物品，才能购买 $2, 3, 4$ 号物品。</p><p>记住，我们的目标是划分子问题，也就是说，只要保证了一个子问题的划分是正确的，那么由于树的优良递归性质，其他的也会是正确的。</p><p>复习一下普通的背包问题，用 $dp_i$ 表示，在使用了 $i$ 空间的情况下的最大价值。</p><p>但是在树问题中，由于第一维度是节点的编号，所以我们用 $dp_{i,j}$ 表示对于 $i$ 子树来说，使用了 $j$ 空间的最大价值。</p><p>当然题目中有要求，必须满足依赖关系，所以，我们需要重新定义： $dp_{i,j}$ 表示对于 $i$ 子树来说，使用了 $j$ 空间且满足依赖关系的最大价值。</p><p>如何满足呢？</p><p>我们只需要保证每一个 $dp_{i,j}$ 都选了 $i$ 节点即可。</p><p>我们可以在背包中预留出节点 $i$ 的空间即可。</p><p>代码如下：</p><ul><li>C ++</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span> #<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span> #<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span> using namespace std; const int N = 1e2+20; vector<span class="hljs-string">&lt;int&gt;</span> G[N]; int n, V; int v[N], w[N]; int dp[N][N]; void dfs(int u) &#123; for (int i = v[u]; i <span class="hljs-string">&lt;= V; ++i) dp[u][i] = w[u]; for (int i : G[u]) &#123; dfs(i); for (int j = V; j &gt;</span>= v[u] + v[i]; --j) &#123; for (int k = v[i]; k <span class="hljs-string">&lt;= j - v[u]; ++k) // 剩余的空间 dp[u][j] = max(dp[u][j - k] + dp[i][k], dp[u][j]); &#125; &#125; &#125; int main() &#123; cin &gt;</span>&gt; n &gt;&gt; V; int s; for (int i = 1; i <span class="hljs-string">&lt;= n; ++i) &#123; cin &gt;</span>&gt; v[i] &gt;&gt; w[i] &gt;&gt; s; G[s].push_back(i); &#125; dfs(0); cout &lt;&lt; dp[0][V] &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>; &#125;</span><br></code></pre></td></tr></table></figure><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList; <span class="hljs-keyword">import</span> java.util.List; <span class="hljs-keyword">import</span> java.util.Scanner; <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> V; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[][] dp; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;List&lt;Integer&gt;&gt; G; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] v; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] w; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> &#123; <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> v[u]; i &lt;= V; ++i) &#123; dp[u][i] = w[u]; &#125; <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> child : G.get(u)) &#123; dfs(child); <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> V; j &gt;= v[u] + v[child]; --j) &#123; <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> v[child]; k &lt;= j - v[u]; ++k) &#123; dp[u][j] = Math.max(dp[u][j - k] + dp[child][k], dp[u][j]); &#125; &#125; &#125; &#125; <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123; <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in); <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> scanner.nextInt(); V = scanner.nextInt(); G = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(); <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= n; ++i) &#123; G.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;()); &#125; v = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>]; w = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>]; dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>][V + <span class="hljs-number">1</span>]; <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123; v[i] = scanner.nextInt(); w[i] = scanner.nextInt(); <span class="hljs-type">int</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> scanner.nextInt(); G.get(s).add(i); &#125; dfs(<span class="hljs-number">0</span>); System.out.println(dp[<span class="hljs-number">0</span>][V]); scanner.close(); &#125; &#125;<br></code></pre></td></tr></table></figure><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>: <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">self, u, dp, G, v, w, V</span>): <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(v[u], V + <span class="hljs-number">1</span>): dp[u][i] = w[u] <span class="hljs-keyword">for</span> child <span class="hljs-keyword">in</span> G[u]: self.dfs(child, dp, G, v, w, V) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(V, v[u] + v[child] - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>): <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(v[child], j - v[u] + <span class="hljs-number">1</span>): dp[u][j] = <span class="hljs-built_in">max</span>(dp[u][j - k] + dp[child][k], dp[u][j]) <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">self</span>): n, V = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()) G = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)] <span class="hljs-comment"># 0-indexed in Python v = [0] * (n + 1) w = [0] * (n + 1) for i in range(1, n + 1): v[i], w[i], s = map(int, input().split()) G[s].append(i) dp = [[0] * (V + 1) for _ in range(n + 1)] self.dfs(0, dp, G, v, w, V) print(dp[0][V]) # Run the main function solution = Solution() solution.main()</span><br></code></pre></td></tr></table></figure><h2 id="4-换根-DP-问题"><a href="#4-换根-DP-问题" class="headerlink" title="4. 换根 DP 问题"></a>4. 换根 DP 问题</h2><p>换根 DP，面对的问题通常是“不定根”问题，也就是说，对于一棵树，他的根不一定是 $1$ 号点，可能是任意某个点。</p><p>或者在某些问题中，我们需要尝试计算以每个点为根的情况，最后维护出最大值。</p><p>我们先看一副图，来理解所谓的“换根”。</p><p><img src="https://dn-simplecloud.shiyanlou.com/questions/uid1792586-20240418-1713424406656" alt="图片描述"></p><p>我们将原来以 $1$ 为根换成了以 $2$ 为根。那么树的形态也就发生了变化。</p><p>如果每次都是选择一个点作为根进行处理，那么总的时间复杂度为 $O(n^2)$，但是如果我们能发现性质，我们可以将复杂度降为 $O(n)$。</p><p>即换一次根的复杂度为 $O(1)$，下面，我们将讲述这种方法。</p><p>在一般的问题中，我们常常是利用dfs来不断的将根转换为根的子节点。</p><p>我们会发现一些事情：</p><p><img src="https://dn-simplecloud.shiyanlou.com/questions/uid1792586-20240418-1713424716921" alt="图片描述"></p><p>我们一次转换的过程，其实有很大一部分并没有发生变化，体现在 DP 转移中，就是这些点的 DP 值也不会发生改变。</p><p>实际上改变的只有改变身份的两个点，其他的点都不会发生变化。</p><p>在换根的问题中，一般的步骤如下：</p><ol><li>以 $1$ 为根进行一遍扫描，并且处理出必要的信息，例如深度、DP 值等。</li><li>开始以 $1$ 进行换根，并且向下递归，在递归之前，需要将自己变成子节点的身份。</li><li>进入新的根后，按照根的身份，重新进行转移。并且维护答案。</li></ol><h3 id="4-1-卖树"><a href="#4-1-卖树" class="headerlink" title="4.1 卖树"></a>4.1 <a href="https://www.lanqiao.cn/problems/3029/learning/">卖树</a></h3><p><img src="https://dn-simplecloud.shiyanlou.com/questions/uid1792586-20240418-1713424080194" alt="图片描述"></p><p>本题需要计算以每个点为根的情况下，产生的盈利。</p><p>如果我们确定了一个点为根，我们很容易算出答案，如果确定了根，问题就变成了求最大深度，这个问题只需要一遍DFS就可以完成。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> f, <span class="hljs-type">int</span> dt)</span> </span>&#123; <span class="hljs-comment">// 求出以1为根的原始信息 dep[u] = dt; Mdp[u] = 0; // Mdp即为当前点为根的最大深度 for (int v : G[u]) &#123; if (v == f) continue; dfs(v, u, dt + 1); Mdp[u] = max(Mdp[v] + 1, Mdp[u]); &#125; &#125;</span><br></code></pre></td></tr></table></figure><p>因为节点数量太多，我们无法承受 $O(n^2)$ 的复杂度，所以我们需要进行换根，</p><p>基本思想如上述一致：</p><ol><li>我们需要先算出以 $1$ 为根的信息，包括以每个节点为子树的最大深度，从 $1$ 转移到 $i$ 节点的代价。</li><li>我们从 $1$ 号点开始换根，每次只将根的身份换给儿子，然后进入递归，进入之前，我们需要将当前点的身份改为子节点。</li><li>进行新的根，由于原来的转移已经失效，所以需要重新转移。并且维护答案，然后重复2步骤。</li></ol><ul><li>C++</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span> #<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span> using namespace std; const int N = 1e5+10; vector<span class="hljs-string">&lt;int&gt;</span> G[N]; int n, k, c; int dep[N], Mdp[N]; typedef long long ll; ll ans = 0; void dfs(int u, int f, int dt) &#123; <span class="hljs-comment">// 求出以1为根的原始信息 dep[u] = dt; Mdp[u] = 0; for (int v : G[u]) &#123; if (v == f) continue; dfs(v, u, dt + 1); Mdp[u] = max(Mdp[v] + 1, Mdp[u]); &#125; &#125; void dfs2(int u, int f) &#123; // 开始换根 /** * 重新转移 */ int tmpf = 0, Mx1 = 0, Mx2 = 0; for (int v : G[u]) &#123; tmpf = max(tmpf, Mdp[v] + 1); &#125; // 维护答案 ans = max(1ll * tmpf * k - 1ll * dep[u] * c, ans); // 根变儿子步骤 int pre = Mdp[u]; for (int v : G[u]) &#123; if (Mdp[v] + 1 &gt; Mx1) &#123; Mx2 = Mx1; Mx1 = Mdp[v] + 1; &#125; else if (Mdp[v] + 1 &gt; Mx2) &#123; Mx2 = Mdp[v] + 1; &#125; &#125; for (int v : G[u]) &#123; if (v == f) continue; // 由于根要变成儿子，所以要改变原来的转移值 if (Mdp[v] + 1 == Mx1) Mdp[u] = Mx2; else Mdp[u] = Mx1; dfs2(v, u); &#125; // 还原原始的值。 Mdp[u] = pre; &#125; void sol() &#123; for (int i = 1; i &lt;= n; ++i) G[i].clear(); ans = 0; cin &gt;&gt; n &gt;&gt; k &gt;&gt; c; int u, v; for (int i = 1; i &lt; n; ++i) &#123; cin &gt;&gt; u &gt;&gt; v; G[u].push_back(v); G[v].push_back(u); &#125; dfs(1, 0, 0); dfs2(1, 0); cout &lt;&lt; ans &lt;&lt; &#x27;\n&#x27;; &#125; int main() &#123; ios::sync_with_stdio(0); int T; cin &gt;&gt; T; while (T --) &#123; sol(); &#125; return 0; &#125;</span></span><br></code></pre></td></tr></table></figure><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict <span class="hljs-keyword">import</span> sys sys.setrecursionlimit(<span class="hljs-number">100000</span>) N = <span class="hljs-number">100010</span> G = defaultdict(<span class="hljs-built_in">list</span>) n, k, c = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span> dep = [<span class="hljs-number">0</span>] * N Mdp = [<span class="hljs-number">0</span>] * N ans = <span class="hljs-number">0</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">u, f, dt</span>): <span class="hljs-comment"># 求出以1为根的原始信息 global dep, Mdp dep[u] = dt Mdp[u] = 0 for v in G[u]: if v == f: continue dfs(v, u, dt + 1) Mdp[u] = max(Mdp[v] + 1, Mdp[u]) def dfs2(u, f): # 开始换根 global ans, dep, Mdp tmpf = 0 Mx1 = 0 Mx2 = 0 # 重新转移 for v in G[u]: tmpf = max(tmpf, Mdp[v] + 1) # 维护答案 ans = max(ans, tmpf * k - dep[u] * c) # 根变儿子步骤 pre = Mdp[u] for v in G[u]: if Mdp[v] + 1 &gt; Mx1: Mx2 = Mx1 Mx1 = Mdp[v] + 1 elif Mdp[v] + 1 &gt; Mx2: Mx2 = Mdp[v] + 1 for v in G[u]: if v == f: continue # 由于根要变成儿子，所以要改变原来的转移值 if Mdp[v] + 1 == Mx1: Mdp[u] = Mx2 else: Mdp[u] = Mx1 dfs2(v, u) # 还原原始的值。 Mdp[u] = pre def sol(): global n, k, c, ans, G, dep, Mdp n, k, c = map(int, input().split()) G.clear() ans = 0 for _ in range(n - 1): u, v = map(int, input().split()) G[u].append(v) G[v].append(u) dfs(1, 0, 0) dfs2(1, 0) print(ans) T = int(input()) for _ in range(T): sol()</span><br></code></pre></td></tr></table></figure><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*; <span class="hljs-keyword">import</span> java.io.*; <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123; <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">100010</span>; <span class="hljs-keyword">static</span> List&lt;Integer&gt;[] G; <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> n, k, c; <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] dep, Mdp; <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> ans; <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> f, <span class="hljs-type">int</span> dt)</span> &#123; <span class="hljs-comment">// 求出以1为根的原始信息 Mdp[u] = 0; for (int v : G[u]) &#123; if (v == f) continue; dfs(v, u, dt + 1); Mdp[u] = Math.max(Mdp[v] + 1, Mdp[u]); &#125; &#125; static void dfs2(int u, int f) &#123; // 开始换根 int tmpf = 0, Mx1 = 0, Mx2 = 0; /** * 重新转移 */ for (int v : G[u]) &#123; tmpf = Math.max(tmpf, Mdp[v] + 1); &#125; // 维护答案 ans = Math.max(ans, (long) tmpf * k - (long) dep[u] * c); // 根变儿子步骤 int pre = Mdp[u]; for (int v : G[u]) &#123; if (Mdp[v] + 1 &gt; Mx1) &#123; Mx2 = Mx1; Mx1 = Mdp[v] + 1; &#125; else if (Mdp[v] + 1 &gt; Mx2) &#123; Mx2 = Mdp[v] + 1; &#125; &#125; for (int v : G[u]) &#123; if (v == f) continue; // 由于根要变成儿子，所以要改变原来的转移值 if (Mdp[v] + 1 == Mx1) &#123; Mdp[u] = Mx2; &#125; else &#123; Mdp[u] = Mx1; &#125; dfs2(v, u); &#125; // 还原原始的值。 Mdp[u] = pre; &#125; static void sol(Scanner scanner) &#123; for (int i = 1; i &lt;= n; i++) G[i].clear(); ans = 0; n = scanner.nextInt(); k = scanner.nextInt(); c = scanner.nextInt(); int u, v; for (int i = 1; i &lt; n; i++) &#123; u = scanner.nextInt(); v = scanner.nextInt(); G[u].add(v); G[v].add(u); &#125; dfs(1, 0, 0); dfs2(1, 0); System.out.println(ans); &#125; public static void main(String[] args) &#123; G = new ArrayList[N]; for (int i = 0; i &lt; N; i++) &#123; G[i] = new ArrayList&lt;&gt;(); &#125; dep = new int[N]; Mdp = new int[N]; Scanner scanner = new Scanner(System.in); int T = scanner.nextInt(); while (T-- &gt; 0) &#123; sol(scanner); &#125; &#125; &#125;</span><br></code></pre></td></tr></table></figure><h2 id="5-作业"><a href="#5-作业" class="headerlink" title="5. 作业"></a>5. 作业</h2><table><thead><tr><th>题目</th><th>链接</th></tr></thead><tbody><tr><td>取气球（算法赛）</td><td><a href="https://www.lanqiao.cn/problems/17024/learning/">https://www.lanqiao.cn/problems/17024/learning/</a></td></tr><tr><td>左孩子右兄弟（21 年省赛）</td><td><a href="https://www.lanqiao.cn/problems/1451/learning/">https://www.lanqiao.cn/problems/1451/learning/</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-树上DP概述&quot;&gt;&lt;a href=&quot;#1-树上DP概述&quot; class=&quot;headerlink&quot; title=&quot;1. 树上DP概述&quot;&gt;&lt;/a&gt;1. 树上DP概述&lt;/h2&gt;&lt;p&gt;树形 DP，即在树上进行的 DP。由于树固有的递归性质，树形 DP 一般都是递归进行的。</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>线性动态规划问题&amp;背包问题进阶策略详解</title>
    <link href="http://zdx-1.github.io/2024/05/06/%E7%BA%BF%E6%80%A7%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E8%BF%9B%E9%98%B6%E7%AD%96%E7%95%A5%E8%AF%A6%E8%A7%A3/"/>
    <id>http://zdx-1.github.io/2024/05/06/%E7%BA%BF%E6%80%A7%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E8%BF%9B%E9%98%B6%E7%AD%96%E7%95%A5%E8%AF%A6%E8%A7%A3/</id>
    <published>2024-05-06T03:30:54.000Z</published>
    <updated>2024-05-17T11:01:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-DP-概述"><a href="#1-DP-概述" class="headerlink" title="1. DP 概述"></a>1. DP 概述</h2><p>DP（dynamic Progamming），动态规划算法，是一类常见、常考的算法。</p><p>在算法竞赛中，DP的考法多而杂，并且难度可以从简单到超难，主要难在状态的设计，以及思考如何转移；但是在蓝桥杯比赛中，涉及到的往往都是简单，基础的DP考点，十分考验基本功。</p><p>动态规划是一种通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。</p><p>由于动态规划并不是某种具体的算法，而是一种解决特定问题的方法，因此它会出现在各式各样的数据结构中，与之相关的题目种类也更为繁杂。</p><p>在算法类竞赛中，计数等非最优化问题的递推解法也常被不规范地称作 DP。</p><h2 id="2-主要思想以及条件"><a href="#2-主要思想以及条件" class="headerlink" title="2. 主要思想以及条件"></a>2. 主要思想以及条件</h2><p>DP 将原问题划分划分为若干个重叠的子问题，并且逐层递进，每个子问题在求解的过程中，都会被抽象为“阶段”，也叫做“状态”，在完成前一个阶段的计算后，才能进行下一阶段的计算。</p><p>最广泛运用的例子就是数字三角形问题：</p><p>给定一个三角形，第 $i$ 行有 $i$ 个元素，如下图：</p><p>​       <span> 5 </span><br>​     <span> 5 </span> <span> 4 </span><br>   <span> 8 </span> <span> 9 </span> <span> 0 </span></p><p>你初始在第一行的第一个元素位置，每一次，可以选择左下，或者右下的位置进行移动，每次移动到一个位置上，可以获得相应的分数。问：你可以任意规划自己的路线，请问在走到最后一行时，能够获得的最大分数是多少？</p><p>同学们可以自行计算一下，当然，很多同学可以一眼看出来，答案是 $5 + 5 + 9 &#x3D; 19$。从第一行开始，往左边，然后往右边。</p><p>如果利用动态规划的思想，应该如下考虑：</p><p>而对于每一个点，它的下一步决策只有两种：往左下角或者往右下角（如果存在）。因此只需要记录当前点的最大权值，用这个最大权值执行下一步决策，来更新后续点的最大权值。<strong>即，对于每一个点，当作一种状态，代表的意义是：到达当前点能累积的最大分数。</strong></p><p>如果你理解了这一步，并且认为其设计的十分有道理，那么我们来剖析一下其中原理：</p><h3 id="2-1-条件"><a href="#2-1-条件" class="headerlink" title="2.1 条件"></a>2.1 条件</h3><p>能用动态规划解决的问题，需要满足三个条件：最优子结构，无后效性和子问题重叠。</p><ol><li>无后效性</li></ol><p>已经求解的子问题，不会再受到后续决策的影响，即后续状态不会影响前序状态，也说明了求解的有序性。</p><ol start="2"><li>子问题重叠</li></ol><p>子问题 A 和子问题 B 可能存在共同的子问题 C，那么我们可以将一些重叠的子问题存储下来，特别来说，重叠的越多，我们的空间利用率越高。</p><ol start="3"><li>最优子结构</li></ol><p>当前问题的最优解一定可以由子问题的最优解导出。</p><p>再抽象一点，其实大部分的 DP 问题，都可以抽象为数字三角形问题，结构图如下：</p><p><img src="/./../images/%E7%BA%BF%E6%80%A7%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E8%BF%9B%E9%98%B6%E7%AD%96%E7%95%A5%E8%AF%A6%E8%A7%A3/uid1792586-20240417-1713337518314.png" alt="图片描述"></p><p>箭头源代表子问题，箭头指向，代表后续问题。</p><p>例如：$\lbrace 1 \rbrace$ 同时是 $\lbrace 2,3 \rbrace$ 的子问题，并且 $2$ 问题的解可以由 $1$ 导出。</p><p>总结：<strong>动态规划对状态的遍历，构成了一张有向无环图，遍历顺序（或者求解顺序）应该是该图的一个拓扑序</strong>。</p><h2 id="3-关于比赛中的状态设计"><a href="#3-关于比赛中的状态设计" class="headerlink" title="3. 关于比赛中的状态设计"></a>3. 关于比赛中的状态设计</h2><p>DP 的难点在于状态的设计和子结构的发掘，即使学界讨论了诸多DP转移的状态设计和优化手段，但是如何把问题形式化为状态空间，往往是一件考察智力而非套路的事情。</p><p>但是在蓝桥杯的赛题中，考察的是选手的基本功，与一点点的拔高，所以不会太难，可以遵循某些套路。</p><p>笔者按照经验，先讲授一些自己常用的状态设计思路，然后结合例题讲解。</p><p>设计一个状态分为如下几步：</p><ol><li>尝试找到题目中的需要优化的值，例如最小值，最大值，次数等，做为目标，也是就是状态的最优值。</li><li>尝试找到题目中的条件，例如长度，区间数量等，做为状态设计。</li><li>尝试模拟题目中的求解步骤，这往往是题目中的条件，例如对某个数加一，或者在占领某些土地。作为转移的部分。</li><li>尝试结合将 1，2，3 结合起来，看能否找到一个合理的最优结构，并且无后向性。</li><li>如果不是最优，尝试这加大状态的条件，例如在补上一个必要的量，在进行3步骤。</li></ol><p>笔者还有一些习惯，例如在看到某个题目时，如果准备尝试用DP解题，就是按照题目中的量进行一个简单尝试。例如，题目中有三个量，就会尝试写出 $dp_{i,j,k}$ ，然后尝试读出其代表的实际意义。如果可行，就进行优化或者细化。</p><p>一般而言，常见的线性DP，都能用此种方法解决，对于较难的问题，往往很难一下子设计出一个较好的状态，这就需要大量的经验以及一些天赋。</p><p>例如，你可以尝试设计这两个问题的状态：</p><ol><li><p><a href="https://www.lanqiao.cn/problems/3601/learning/">蓝桥云课-青蛙吃虫</a></p></li><li><p><a href="https://www.lanqiao.cn/problems/17004/learning/">蓝桥算法赛-食堂</a></p></li></ol><p>可以很明显的感觉出设计的难点。</p><h2 id="4-线性DP"><a href="#4-线性DP" class="headerlink" title="4. 线性DP"></a>4. 线性DP</h2><p>本部分将结合一些题，来不断的重复上述建立 DP 状态的方法，意图帮助读者强化一些简单的DP状态设计。</p><h3 id="4-1-蓝桥云课-青蛙吃虫"><a href="#4-1-蓝桥云课-青蛙吃虫" class="headerlink" title="4.1 蓝桥云课-青蛙吃虫"></a>4.1 <a href="https://www.lanqiao.cn/problems/3601/learning/">蓝桥云课-青蛙吃虫</a></h3><p><img src="/./../images/%E7%BA%BF%E6%80%A7%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E8%BF%9B%E9%98%B6%E7%AD%96%E7%95%A5%E8%AF%A6%E8%A7%A3/uid1792586-20240417-1713337799031.png" alt="图片描述"></p><ol><li>找到题目中的需要优化的值，“最多吃多少昆虫”，完美符合要求，我们将这个最大值作为状态的最优值，也就是说，如果我们设计了一个状态 $s$，那么我们的 $dp_s$ 所代表的意义大概率在 $s$ 情况下的吃虫的最大虫数。</li><li>尝试找到题目中的条件，路径长度为 $N$，最多跳 $K$ 次。</li><li>尝试模拟题目中的求解步骤，这往往是题目中的条件。每次跳 $T$ 格，但是满足 $A \le T \le B$，可以看作跳一次，就是一次转移。</li></ol><p>尝试结合将 1，2，3 结合起来，看能否找到一个合理的最优结构，并且无后向性。</p><blockquote><p>得到的状态以及转移如下：</p><p>定义 $dp_{i,j}$ 为跳跃了 $i$ 次后，当前处在 $j$ 位置能吃到的最大昆虫数量。</p><p>那么由定义得到 $dp_{0,0} &#x3D; 0$，这是初始状态，代表的意义是在未跳跃前的状态，很明显符合定义（初始状态的定义，往往是需要对应于真实情况）。</p><p>我们思考如何转移，由于转移的过程为题目中的求解条件：每次跳跃一些格子，那么跳跃就是转移的过程。</p><p>我们思路如何得到 $dp_{i,j}$ ，复习定义：跳跃了 $i$ 次后，当前处在 $j$ 位置能吃到的最大昆虫数量。</p><p>那么这个状态的前一个状态是什么，也是就说，他的子问题是什么，根据实际情况，我们可以得到上一个状态一定是 $dp_{i-1,j’}$，定义为 跳跃了 $i-1$ 次后，到达位置为 $j’$ 的位置，如果满足跳一次可以到达 $j$，那么必须满足 $A \le j-j’ \le B$。</p></blockquote><p>有了这个过程，那么我们实际上就得到了转移的逻辑，你完全可以根据这个思路写出代码核心：</p><ul><li>C++</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">memset</span>(dp, <span class="hljs-number">-0x3f3f3f3f</span>, <span class="hljs-built_in">sizeof</span>(dp)); <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= K; ++i) &#123; <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++j) &#123; <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = A; k &lt;= B; ++k) &#123; <span class="hljs-keyword">if</span> (j - k &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>; dp[i][j] = <span class="hljs-built_in">max</span>(dp[i][j], dp[i - <span class="hljs-number">1</span>][j - k] + a[j]); &#125; ans = <span class="hljs-built_in">max</span>(ans, dp[i][j]); &#125; &#125; cout &lt;&lt; ans &lt;&lt; endl;<br></code></pre></td></tr></table></figure><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] row : dp) &#123; <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; row.length; j++) &#123; row[j] = -<span class="hljs-number">0x3f3f3f3f</span>; &#125; &#125; dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>; <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= K; ++i) &#123; <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= n; ++j) &#123; <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> A; k &lt;= B; ++k) &#123; <span class="hljs-keyword">if</span> (j - k &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>; dp[i][j] = Math.max(dp[i][j], dp[i - <span class="hljs-number">1</span>][j - k] + a[j]); &#125; ans = Math.max(ans, dp[i][j]); &#125; &#125; System.out.println(ans);<br></code></pre></td></tr></table></figure><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, K + <span class="hljs-number">1</span>): <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>): <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(A, B + <span class="hljs-number">1</span>): <span class="hljs-keyword">if</span> j - k &lt; <span class="hljs-number">0</span>: <span class="hljs-keyword">continue</span> dp[i][j] = <span class="hljs-built_in">max</span>(dp[i][j], dp[i - <span class="hljs-number">1</span>][j - k] + a[j]) ans = <span class="hljs-built_in">max</span>(ans, dp[i][j]) <span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><p>我们可以写出更具规整的转移： $dp_{0,0} &#x3D; 0 \ dp_{i,j} &#x3D; \max_{A \le k \le B}(dp_{i-1,k})$ 我们要求的答案为 $\underset{0 \le i \le k, 0 \le j \le n}{\max}(dp_{i,j})$。</p><h3 id="4-2-蓝桥算法赛-奇怪的段"><a href="#4-2-蓝桥算法赛-奇怪的段" class="headerlink" title="4.2 蓝桥算法赛-奇怪的段"></a>4.2 <a href="https://www.lanqiao.cn/problems/12112/learning/">蓝桥算法赛-奇怪的段</a></h3><p><img src="/./../images/%E7%BA%BF%E6%80%A7%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E8%BF%9B%E9%98%B6%E7%AD%96%E7%95%A5%E8%AF%A6%E8%A7%A3/uid1792586-20240417-1713337554344.png" alt="图片描述"></p><p>我们继续重复上述解题方法：</p><ol><li><p>找到题目中的需要优化的值，“加权和值最大”，完美符合要求，我们将这个最大值作为状态的最优值，也就是说，如果我们设计了一个状态 $s$，那么我们的 $dp_s$ 所代表的意义大概率在 $s$ 情况下的最大加权和值。</p></li><li><p>尝试找到题目中的条件，序列长度为 $n$，划分出 $k$ 个区间。</p></li><li><p>尝试模拟题目中的求解步骤，这往往是题目中的条件。在本题中，划分区间就是一次转移。</p></li><li><p>尝试结合将1，2，3结合起来，看能否找到一个合理的最优结构，并且无后向性。</p></li></ol><p>我们可以尝试建立如下转移：</p><blockquote><p>定义状态 $dp_{i,j}$ 表示处理到第 $i$ 个数字，分出 $j$ 个区间的最大值。</p><p>初始状态为 $dp_{0,0} &#x3D; 0$。这个代表初始情况下，未划分区间的最大值，是符合实际情况，并且是符合定义的。</p><p>由于一次划分就是一次转移，我们考虑 $dp_{i,j}$，他的上一次划分一定是 $dp_{i’,j-1}$，所代表的意义是，划分 $j-1$ 段时，最后一个元素是 $i$ 的情况。</p><p>那么我们的转移就是 $dp_{i,j} &#x3D; dp_{i’,j-1} + p_j \times \sum _{y&#x3D;i’+1} ^i a_y$。</p><p>当然，我们要求的是最大值，所以我们需要加一个条件： $dp_{i,j} &#x3D; \underset {j \le i’ \le i} {\max}  (dp_{i’,j-1} + p_j \times \sum _{y&#x3D;i’+1} ^i a_y)$ 状态是 $n \times k$ 个，每次转移的代价是 $n$ 次，那么这个转移的复杂度为 $O(n^2 \times k)$。</p><p>当然，对于这个题来说，复杂度太高了，无法通过本题，由于是算法赛，所以无法通过，<strong>如果是蓝桥大赛的题，那么大概率能得到 $50$ % 的分数。</strong> 当然需要一些优化策略，不然求和的这一部分也会增加复杂度，同学们自行思考（提示：前缀和，或者边循环边算）。</p><p>如果要解决本题，我们考虑优化</p><p>将式子拆开</p><p><img src="/./../images/%E7%BA%BF%E6%80%A7%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E8%BF%9B%E9%98%B6%E7%AD%96%E7%95%A5%E8%AF%A6%E8%A7%A3/uid1792586-20240417-1713348601655.png" alt="图片描述"></p><p>上述的理解为，将 $a_i$ 新开一个区间，还是并入旧区间。</p><p>转移的复杂度为：$O(n\times k)$。</p><p>实现过程中用了滚动数组，用来节约空间，当然也可以不用。</p><p>滚动数组： 由于每次转移 $dp_{i,j}$ 只与 $dp_{i-1, j’}$ 有关，对于第一维来说， $dp_i$ 只与 $dp_{i-1}$ 有关，所以，我们用两个量来表示当前的 $dp_i$ 和 $dp_{i-1}$ 即可。在代码中用 $dp_{now}$ 和 $dp_{pre}$ 表示。</p></blockquote><p>代码如下：</p><ul><li>C++</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span> #<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span> using namespace std; const int N = 1e5+100; using ll = long long; ll dp[2][204]; int n, k; int a[N], b[204]; int main() &#123; cin &gt;&gt; n &gt;&gt; k; for (int i = 1; i <span class="hljs-string">&lt;= n; ++i) cin &gt;</span>&gt; a[i]; for (int i = 1; i <span class="hljs-string">&lt;= k; ++i) cin &gt;</span>&gt; b[i]; memset(dp, -0x3f, sizeof(dp)); int now = 0, pre = 1; dp[now][0] = 0; for (int i = 1; i &lt;= n; ++i) &#123; swap(now, pre); memset(dp[now], -0x3f, sizeof(dp[now])); for (int j = 1; j &lt;= k; ++j) &#123; dp[now][j] = max(dp[pre][j], dp[pre][j - 1]) + 1ll * a[i] * b[j]; &#125; &#125; cout &lt;&lt; dp[now][k] &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>; return 0; &#125;</span><br></code></pre></td></tr></table></figure><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner; <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">std</span> &#123; <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123; <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in); <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">100500</span>; <span class="hljs-type">long</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">long</span>[<span class="hljs-number">2</span>][<span class="hljs-number">205</span>]; <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> scanner.nextInt(); <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> scanner.nextInt(); <span class="hljs-type">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N]; <span class="hljs-type">int</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">205</span>]; <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123; a[i] = scanner.nextInt(); &#125; <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= k; ++i) &#123; b[i] = scanner.nextInt(); &#125; <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">205</span>; ++i) dp[<span class="hljs-number">0</span>][i] = dp[<span class="hljs-number">1</span>][i] = -<span class="hljs-number">9000000000000000000L</span>; dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>; <span class="hljs-type">int</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, pre = <span class="hljs-number">1</span>; <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123; now ^= <span class="hljs-number">1</span>; pre ^= <span class="hljs-number">1</span>; <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">205</span>; ++j) dp[now][j] = -<span class="hljs-number">9000000000000000000L</span>; <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= k; ++j) &#123; dp[now][j] = Math.max(dp[pre][j], dp[pre][j - <span class="hljs-number">1</span>]) + <span class="hljs-number">1L</span> * a[i] * b[j]; &#125; &#125; System.out.println(dp[now][k]); &#125; &#125;<br></code></pre></td></tr></table></figure><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">N = <span class="hljs-number">100500</span> dp = [[-<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)] * <span class="hljs-number">205</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>)] n, k = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()) a = [<span class="hljs-number">0</span>] + <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())) b = [<span class="hljs-number">0</span>] + <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())) now, pre = <span class="hljs-number">0</span>, <span class="hljs-number">1</span> dp[now][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>): now, pre = pre, now dp[now] = [-<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)] * <span class="hljs-number">205</span> <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, k + <span class="hljs-number">1</span>): dp[now][j] = <span class="hljs-built_in">max</span>(dp[pre][j], dp[pre][j - <span class="hljs-number">1</span>]) + a[i] * b[j] <span class="hljs-built_in">print</span>(dp[now][k])<br></code></pre></td></tr></table></figure><h2 id="5-背包"><a href="#5-背包" class="headerlink" title="5. 背包"></a>5. 背包</h2><p>背包问题是老生常谈的经典问题了。</p><p>原始模型如下：</p><p>有 $n$ 个物品和一个容量为 $m$ 的背包，每个物品有一个价值 $p$ 和 体积 $v$ 。问在总容量不超过 $m$ 的情况下，你能装载的最大价值和为多少？</p><p>背包有多种模型：</p><ol><li>0&#x2F;1 背包，在这种情况下，每个物品只有一个。</li><li>完全背包，在这种情况下，每个物品有无穷个。</li><li>多重背包，在这种情况下，每个物品有 $c_i$ 个，$c_i$ 为第 $i$ 个物品的数量。</li><li>分组背包，在这种情况下，存在 $n$ 个组别，每个组别有若干个物品，但是每组至多只能选择一个。</li><li>依赖背包，在这种情况下，某些物品之间存在依赖关系。</li></ol><p>最基础的属于 0&#x2F;1 背包和完全背包。</p><p>其模板代码如下：</p><h3 id="5-1-0-1-背包"><a href="#5-1-0-1-背包" class="headerlink" title="5.1 0&#x2F;1 背包"></a>5.1 0&#x2F;1 背包</h3><ul><li>C++</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 二维数组版本 for (int i = 1; i &lt;= n; ++i) &#123; for (int j = m; j - v[i] &gt;= 0; --j) &#123; dp[i][j] = max(dp[i][j], dp[i - 1][j - v[i]] + p[i]); &#125; &#125; // ------------- 一维数组版本 for (int i = 1; i &lt;= n; ++i) &#123; for (int j = m; j - v[i] &gt;= 0; --j) &#123; dp[j] = max(dp[j], dp[j - v[i]] + p[i]); &#125; &#125; // dp[i][j] 代表处理到第 i 个物品，容量为 j 时的最大值。</span><br></code></pre></td></tr></table></figure><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 二维数组版本 for (int i = 1; i &lt;= n; ++i) &#123; for (int j = m; j - v[i] &gt;= 0; --j) &#123; dp[i][j] = Math.max(dp[i][j], dp[i - 1][j - v[i]] + p[i]); &#125; &#125; // ------------- 一维数组版本 for (int i = 1; i &lt;= n; ++i) &#123; for (int j = m; j - v[i] &gt;= 0; --j) &#123; dp[j] = Math.max(dp[j], dp[j - v[i]] + p[i]); &#125; &#125; // dp[i][j] 代表处理到第 i 个物品，容量为 j 时的最大值。</span><br></code></pre></td></tr></table></figure><ul><li>python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 二维数组版本 for i in range(1, n + 1): for j in range(m, v[i] - 1, -1): dp[i][j] = max(dp[i][j], dp[i - 1][j - v[i]] + p[i]) # ------------- 一维数组版本 for i in range(1, n + 1): for j in range(m, v[i] - 1, -1): dp[j] = max(dp[j], dp[j - v[i]] + p[i])</span><br></code></pre></td></tr></table></figure><h3 id="5-2-完全背包"><a href="#5-2-完全背包" class="headerlink" title="5.2 完全背包"></a>5.2 完全背包</h3><ul><li>C++</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// ------------- 一维数组版本 for (int i = 1; i &lt;= n; ++i) &#123; for (int j = v[i]; j &lt;= m; ++j) &#123; dp[j] = max(dp[j], dp[j - v[i]] + p[i]); &#125; &#125; // dp[i][j] 代表处理到第 i 个物品，容量为 j 时的最大值。</span><br></code></pre></td></tr></table></figure><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ------------- 一维数组版本 for (int i = 1; i &lt;= n; ++i) &#123; for (int j = v[i]; j &lt;= m; ++j) &#123; dp[j] = Math.max(dp[j], dp[j - v[i]] + p[i]); &#125; &#125; // dp[i][j] 代表处理到第 i 个物品，容量为 j 时的最大值。</span><br></code></pre></td></tr></table></figure><ul><li>python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>): <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(v[i], m + <span class="hljs-number">1</span>): dp[j] = <span class="hljs-built_in">max</span>(dp[j], dp[j - v[i]] + p[i])<br></code></pre></td></tr></table></figure><h3 id="5-3-多重背包"><a href="#5-3-多重背包" class="headerlink" title="5.3 多重背包"></a>5.3 多重背包</h3><p>多重背包可以转化为 $0&#x2F;1$ 背包。</p><p>首先我们可以将每个物品的 $c_i$ 个全部拆出来，变成0&#x2F;1 背包，但是这样的话复杂度就变成了 $O(m \times \sum c_i)$。</p><p>还有另外一种方式，我们可以将 $c_i$ 按照进制拆分，分为 $\lbrace 1, 2, 4, 8, … \rbrace$ 个，例如，如果是 $5$ 个，每个物品的容量为 $v$，价值为 $p$，那么划分为 $\lbrace 1, 2, 2\rbrace$，将这 $5$ 个物品划分为 $3$ 个物品，第一个物品容量为 $v$，价格为 $p$，第二个物品容量为 $2v$，价格为 $2p$，第三个物品容量为 $2v$，价格为 $2p$，这样就将复杂度降低为了 $O(m \sum \log_2(c_i))$。</p><blockquote><p>这样的划分，可以拼凑出 $0 \sim c_i$ 所有数量的物品。因为是按照二进制划分的，假设划分的最大数量是 $2^k$，那么最后一个是 $x &#x3D; c_i-2^{k+1} + 1$。</p><p>我们首先可以用前 $k$ 个拼凑出 $0 \sim 2 ^{k+1} - 1$ 种情况，并且 $x \lt 2^{k+1}$，所以其他数可以先加上 $x$ ，然后再加上 $0 \sim 2^{k+1} - 1$ 中的一个，那么就可以拼凑出 $0 \sim c_i$ 所有的数量了。</p></blockquote><p>拆分代码：</p><ul><li>C++</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// index 为新的物品编号 index = 0; for (int i = 1; i &lt;= m; i++) &#123; int cnt = 1, p, v, c; cin &gt;&gt; p &gt;&gt; v &gt;&gt; c; while (c &gt; cnt) &#123; c -= cnt; list[++index].p = c * p; list[index].v = c * v; cnt *= 2; &#125; list[++index].p = c * p; list[index].v = c * v; &#125; // list 存储所有新的物品</span><br></code></pre></td></tr></table></figure><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m): cnt = <span class="hljs-number">1</span> p, v, c = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()) <span class="hljs-keyword">while</span> c &gt; cnt: c = c - cnt <span class="hljs-built_in">list</span>.append((c * p, c * v)) cnt = cnt * <span class="hljs-number">2</span> <span class="hljs-built_in">list</span>.append((c * p, c * v))<br></code></pre></td></tr></table></figure><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in); p = scanner.nextInt(); v = scanner.nextInt(); c = scanner.nextInt(); <span class="hljs-keyword">while</span> (c &gt; cnt) &#123; c -= cnt; index++; list[index].p = c * p; list[index].v = c * v; cnt *= <span class="hljs-number">2</span>; &#125; index++; list[index].p = c * p; list[index].v = c * v;<br></code></pre></td></tr></table></figure><h4 id="5-3-1-小明的背包4"><a href="#5-3-1-小明的背包4" class="headerlink" title="5.3.1 小明的背包4"></a>5.3.1 <a href="https://www.lanqiao.cn/problems/1177/learning/">小明的背包4</a></h4><p><img src="/./../images/%E7%BA%BF%E6%80%A7%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E8%BF%9B%E9%98%B6%E7%AD%96%E7%95%A5%E8%AF%A6%E8%A7%A3/uid1792586-20240417-1713349006255.png" alt="图片描述"></p><p>算是一个多重背包模板题，套用上述模板解题即可。</p><p>当然，本题中存在无限的数量，可以有两种考虑方法，对于无穷数量，我们定义会满载的数量，例如 $\frac{V}{w_i}$；或者在分完多重背包后，在进行完全背包。</p><p>都可以，推荐同学们两种都试试。</p><ul><li>C++</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span> using namespace std; int idx = 0; int w[40003], v[40003]; int N, V; int dp[2003]; int main() &#123; cin &gt;&gt; N &gt;&gt; V; int ww, vv, c; while (N --) &#123; cin &gt;&gt; ww &gt;&gt; vv &gt;&gt; c; <span class="hljs-keyword">if</span> (c == 0) c = V / ww; int cnt = 1; while (c &gt; cnt) &#123; idx ++; c -= cnt; w[idx] = cnt * ww; v[idx] = cnt * vv; cnt *= 2; &#125; idx ++; w[idx] = c * ww; v[idx] = c * vv; &#125; for (int i = 1; i <span class="hljs-string">&lt;= idx; ++i) &#123; for (int j = V; j - w[i] &gt;</span>= 0; --j) &#123; dp[j] = max(dp[j], dp[j - w[i]] + v[i]); &#125; &#125; cout &lt;&lt; dp[V] &lt;&lt; endl; return 0; &#125;</span><br></code></pre></td></tr></table></figure><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner; <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">std</span> &#123; <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123; <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in); <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-type">int</span>[] w = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">40003</span>]; <span class="hljs-type">int</span>[] v = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">40003</span>]; <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> scanner.nextInt(); <span class="hljs-type">int</span> <span class="hljs-variable">V</span> <span class="hljs-operator">=</span> scanner.nextInt(); <span class="hljs-type">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2003</span>]; <span class="hljs-keyword">while</span> (N-- &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-type">int</span> <span class="hljs-variable">ww</span> <span class="hljs-operator">=</span> scanner.nextInt(); <span class="hljs-type">int</span> <span class="hljs-variable">vv</span> <span class="hljs-operator">=</span> scanner.nextInt(); <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> scanner.nextInt(); <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) c = V / ww; <span class="hljs-type">int</span> <span class="hljs-variable">cnt</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-keyword">while</span> (c &gt; cnt) &#123; idx++; c -= cnt; w[idx] = cnt * ww; v[idx] = cnt * vv; cnt *= <span class="hljs-number">2</span>; &#125; idx++; w[idx] = c * ww; v[idx] = c * vv; &#125; <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= idx; ++i) &#123; <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> V; j - w[i] &gt;= <span class="hljs-number">0</span>; --j) &#123; dp[j] = Math.max(dp[j], dp[j - w[i]] + v[i]); &#125; &#125; System.out.println(dp[V]); &#125; &#125;<br></code></pre></td></tr></table></figure><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">idx = <span class="hljs-number">0</span> w = [<span class="hljs-number">0</span>] * <span class="hljs-number">40003</span> v = [<span class="hljs-number">0</span>] * <span class="hljs-number">40003</span> N, V = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()) dp = [<span class="hljs-number">0</span>] * <span class="hljs-number">2003</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N): ww, vv, c = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()) <span class="hljs-keyword">if</span> c == <span class="hljs-number">0</span>: c = V // ww cnt = <span class="hljs-number">1</span> <span class="hljs-keyword">while</span> c &gt; cnt: idx += <span class="hljs-number">1</span> c -= cnt w[idx] = cnt * ww v[idx] = cnt * vv cnt *= <span class="hljs-number">2</span> idx += <span class="hljs-number">1</span> w[idx] = c * ww v[idx] = c * vv <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, idx + <span class="hljs-number">1</span>): <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(V, w[i] - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>): dp[j] = <span class="hljs-built_in">max</span>(dp[j], dp[j - w[i]] + v[i]) <span class="hljs-built_in">print</span>(dp[V])<br></code></pre></td></tr></table></figure><h3 id="5-4-分组背包"><a href="#5-4-分组背包" class="headerlink" title="5.4 分组背包"></a>5.4 分组背包</h3><p>给定 $n$ 组物品，第 $i$ 组中有 $c_i$ 个物品，第 $i$ 组中第 $j$ 个物品的价值为 $p_{i,j}$ ，体积为 $v_{i,j}$，每组物品最多只能选择一个。</p><p>背包大小为 $m$ ，问装载的最大价值。</p><p>这个问题与原始的 $0&#x2F;1$ 背包十分相似，复习下，原始的 $0&#x2F;1$ 背包如何建立的状态转移：$dp_{i,j}$ 为处理到第 $i$ 个物品，装载体积为 $j$ 的最大价值。</p><p>其转移为 $dp_{i,j} &#x3D; \max(dp_{i-1, j} , dp_{i-1,j-v_i} + p_i)$</p><p>我们只要稍作思考，就可以完成转化：</p><p>我们定义：$dp_{i,j}$ 为处理到第 $i$ <strong>组</strong>物品，装载体积为 $j$ 的最大价值。</p><p>那么转移为： $dp_{i,j} &#x3D; \max(dp_{i-1, j} , \max_{1 \le j \le c_i}(dp_{i-1,j-v_{i,j}} + p_{i,j}))$ 观察到了吗，这两种甚至没有区别，只有再处理每一组的过程中进行了一次选择，逻辑通顺，完美转移！</p><p>我们来看一道例题：</p><h4 id="5-4-1-金明的预算"><a href="#5-4-1-金明的预算" class="headerlink" title="5.4.1 金明的预算"></a>5.4.1 <a href="https://www.lanqiao.cn/problems/558/learning/">金明的预算</a></h4><p><img src="/./../images/%E7%BA%BF%E6%80%A7%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E8%BF%9B%E9%98%B6%E7%AD%96%E7%95%A5%E8%AF%A6%E8%A7%A3/uid1792586-20240417-1713347341038.png" alt="图片描述"></p><p>我们简化一下题意：</p><p>有 $m$ 块钱，$n$ 件物品，每个物品的价值为 $p_i \times v_i$，价格为 $v_i$。有一些物品存在依赖关系，想要购买当前物品，就一定要购买前置物品。</p><p>问能购买的最大价值。</p><p><strong>条件</strong>：每一件物品最多只有<strong>两件</strong>附属物品。</p><p>看起来是一个依赖有关的背包问题，但是仔细思考就会发现，如果 $A$ 物品有两件附属物品 $B,C$，那么对于这三件物品，只有这么几种情况 $\lbrace \varnothing \rbrace,\lbrace A \rbrace,\lbrace A,B \rbrace,\lbrace A, C \rbrace,\lbrace A, B, C \rbrace$，并且对于这三个物品的组合，只能选择<strong>一种</strong>。对于有一个附属物品和没有附属物品的情况，类似考虑。</p><p>回过头来，是不是发现，很想分组背包的感觉。</p><p>我们重新描绘一下题意：</p><p>有 $m$ 块钱，$n$ 组物品，每组物品数量不超过三，每个物品有价值、价格。每组物品只能选择<strong>一种</strong>组合。问能购买的最大价值。</p><p>完美转换为分组背包。</p><p>代码如下：</p><ul><li>C++</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span> #<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span> using namespace std; int n, m; vector<span class="hljs-string">&lt;int&gt;</span> G[65]; int v[65], p[65], q[65]; int dp[33000]; int main() &#123; cin &gt;&gt; n &gt;&gt; m; for (int i = 1; i <span class="hljs-string">&lt;= m; ++i) &#123; cin &gt;</span>&gt; v[i] &gt;&gt; p[i] &gt;&gt; q[i]; p[i] *= v[i]; <span class="hljs-keyword">if</span> (q[i]) &#123; G[q[i]].push_back(i); &#125; &#125; for (int i = 1; i <span class="hljs-string">&lt;= m; ++i) &#123; if (q[i] == 0) &#123; for (int j = n; j &gt;</span>= 0; --j) &#123; <span class="hljs-keyword">if</span> (j - v[i] &gt;= 0) dp[j] = max(dp[j], dp[j - v[i]] + p[i]); <span class="hljs-keyword">if</span> (G[i].size() &gt; 0 &amp;&amp; j - v[i] - v[G[i][0]] &gt;= 0) dp[j] = max(dp[j], dp[j - v[i] - v[G[i][0]]] + p[i] + p[G[i][0]]); <span class="hljs-keyword">if</span> (G[i].size() &gt; 1 &amp;&amp; j - v[i] - v[G[i][1]] &gt;= 0) dp[j] = max(dp[j], dp[j - v[i] - v[G[i][1]]] + p[i] + p[G[i][1]]); <span class="hljs-keyword">if</span> (G[i].size() &gt; 1 &amp;&amp; j - v[i] - v[G[i][0]] - v[G[i][1]] &gt;= 0) dp[j] = max(dp[j], dp[j - v[i] - v[G[i][0]] - v[G[i][1]]] + p[i] + p[G[i][0]] + p[G[i][1]]); &#125; &#125; &#125; cout &lt;&lt; dp[n] &lt;&lt; endl; return 0; &#125;</span><br></code></pre></td></tr></table></figure><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList; <span class="hljs-keyword">import</span> java.util.List; <span class="hljs-keyword">import</span> java.util.Scanner; <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123; <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> n, m; <span class="hljs-keyword">static</span> List&lt;Integer&gt;[] G = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>[<span class="hljs-number">65</span>]; <span class="hljs-comment">// 使用ArrayList数组来表示图 static int[] v = new int[65], p = new int[65], q = new int[65]; static int[] dp = new int[33000]; public static void main(String[] args) &#123; Scanner scanner = new Scanner(System.in); n = scanner.nextInt(); m = scanner.nextInt(); // 初始化G数组 for (int i = 0; i &lt; G.length; i++) &#123; G[i] = new ArrayList&lt;&gt;(); &#125; for (int i = 1; i &lt;= m; i++) &#123; v[i] = scanner.nextInt(); p[i] = scanner.nextInt(); q[i] = scanner.nextInt(); p[i] *= v[i]; if (q[i] != 0) &#123; G[q[i]].add(i); // 将后继节点i添加到q[i]的列表中 &#125; &#125; for (int i = 1; i &lt;= m; i++) &#123; if (q[i] == 0) &#123; for (int j = n; j &gt;= 0; j--) &#123; if (j - v[i] &gt;= 0) dp[j] = Math.max(dp[j], dp[j - v[i]] + p[i]); // 处理后继节点 for (int k = 0; k &lt; G[i].size(); k++) &#123; int nextItem = G[i].get(k); if (j - v[i] - v[nextItem] &gt;= 0) &#123; dp[j] = Math.max(dp[j], dp[j - v[i] - v[nextItem]] + p[i] + p[nextItem]); &#125; &#125; if (G[i].size() &gt; 1) &#123; int p1 = G[i].get(0), p2 = G[i].get(1); if (j - v[i] - v[p1] - v[p2] &gt;= 0) &#123; dp[j] = Math.max(dp[j], dp[j - v[i] - v[p1] - v[p2]] + p[i] + p[p1] + p[p2]); &#125; &#125; &#125; &#125; &#125; System.out.println(dp[n]); scanner.close(); &#125; &#125;</span><br></code></pre></td></tr></table></figure><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()) G = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">65</span>)] v = [<span class="hljs-number">0</span>] * <span class="hljs-number">65</span> p = [<span class="hljs-number">0</span>] * <span class="hljs-number">65</span> q = [<span class="hljs-number">0</span>] * <span class="hljs-number">65</span> dp = [<span class="hljs-number">0</span>] * <span class="hljs-number">33000</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>): v[i], p[i], q[i] = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()) p[i] *= v[i] <span class="hljs-keyword">if</span> q[i]: G[q[i]].append(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>): <span class="hljs-keyword">if</span> q[i] == <span class="hljs-number">0</span>: <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>): <span class="hljs-keyword">if</span> j - v[i] &gt;= <span class="hljs-number">0</span>: dp[j] = <span class="hljs-built_in">max</span>(dp[j], dp[j - v[i]] + p[i]) <span class="hljs-keyword">if</span> G[i]: <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(G[i])): <span class="hljs-keyword">if</span> j - v[i] - v[G[i][k]] &gt;= <span class="hljs-number">0</span>: dp[j] = <span class="hljs-built_in">max</span>(dp[j], dp[j - v[i] - v[G[i][k]]] + p[i] + p[G[i][k]]) <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(G[i]) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> j - v[i] - v[G[i][<span class="hljs-number">0</span>]] - v[G[i][<span class="hljs-number">1</span>]] &gt;= <span class="hljs-number">0</span>: dp[j] = <span class="hljs-built_in">max</span>(dp[j], dp[j - v[i] - v[G[i][<span class="hljs-number">0</span>]] - v[G[i][<span class="hljs-number">1</span>]]] + p[i] + p[G[i][<span class="hljs-number">0</span>]] + p[G[i][<span class="hljs-number">1</span>]]) <span class="hljs-built_in">print</span>(dp[n])<br></code></pre></td></tr></table></figure><h2 id="6-依赖背包"><a href="#6-依赖背包" class="headerlink" title="6. 依赖背包"></a>6. 依赖背包</h2><p>这个比较复杂，一般来讲是树形的依赖关系，我们放在树形DP再讲。</p><h2 id="7-作业"><a href="#7-作业" class="headerlink" title="7. 作业"></a>7. 作业</h2><table><thead><tr><th>考点</th><th>题目</th></tr></thead><tbody><tr><td>线性 DP</td><td><a href="https://www.lanqiao.cn/problems/2114/learning/">李白打酒-真题</a></td></tr><tr><td>线性 DP</td><td><a href="https://www.lanqiao.cn/problems/3545/learning/">保险箱-真题</a></td></tr><tr><td>背包问题</td><td><a href="https://www.lanqiao.cn/problems/5130/learning/">健身-算法赛</a></td></tr><tr><td>背包问题</td><td><a href="https://www.lanqiao.cn/problems/98/learning/">包子凑数</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-DP-概述&quot;&gt;&lt;a href=&quot;#1-DP-概述&quot; class=&quot;headerlink&quot; title=&quot;1. DP 概述&quot;&gt;&lt;/a&gt;1. DP 概述&lt;/h2&gt;&lt;p&gt;DP（dynamic Progamming），动态规划算法，是一类常见、常考的算法。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>算法竞赛入门经典（第2版）学习记录</title>
    <link href="http://zdx-1.github.io/2024/04/25/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8%EF%BC%88%E7%AC%AC2%E7%89%88%EF%BC%89%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://zdx-1.github.io/2024/04/25/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8%EF%BC%88%E7%AC%AC2%E7%89%88%EF%BC%89%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2024-04-25T07:46:31.000Z</published>
    <updated>2024-04-27T17:21:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iomanip&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//算数表达式的计算</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">/* 算术表达式的计算 */</span><br>    <span class="hljs-comment">// printf(&quot;%d\n&quot;,1+2);</span><br>    <span class="hljs-comment">// //实验一</span><br>    <span class="hljs-comment">// printf(&quot;%d\n&quot;,3-4);</span><br>    <span class="hljs-comment">// //二</span><br>    <span class="hljs-comment">// printf(&quot;%d\n&quot;,5*6);</span><br>    <span class="hljs-comment">// //三</span><br>    <span class="hljs-comment">// printf(&quot;%d\n&quot;,7/8);</span><br>    <span class="hljs-comment">// //四</span><br>    <span class="hljs-comment">// printf(&quot;%d\n&quot;,9%10);</span><br>    <span class="hljs-comment">// //五</span><br>    <span class="hljs-comment">// printf(&quot;%.1f\n&quot;,8.0/5.0);</span><br>    <span class="hljs-comment">// //整数值用%d,浮点数用%f</span><br>    <span class="hljs-comment">// //比较复杂的表达式计算</span><br>    <span class="hljs-comment">// printf(&quot;%.8f\n&quot;,1+2*sqrt(3)/(5-0.1));</span><br>    <span class="hljs-comment">// //数学函数sqrt(x)的作用是计算x的算术平方根</span><br>    <span class="hljs-comment">// printf(&quot;%.8f\n&quot;,pow(2,3));</span><br>    <span class="hljs-comment">// //pow(x,y)的作用是计算x的y次方</span><br><br><br>    <span class="hljs-comment">/* 1.2 输入输出 */</span><br>    <span class="hljs-comment">// int a,b;</span><br>    <span class="hljs-comment">// scanf(&quot;%d%d&quot;,&amp;a,&amp;b);</span><br>    <span class="hljs-comment">// printf(&quot;%d\n&quot;,a+b);</span><br>    <span class="hljs-comment">// 输入的样例</span><br>    <span class="hljs-comment">// //例题1-1 圆柱体的表面积</span><br>    <span class="hljs-comment">// const double PI=acos(-1.0);</span><br>    <span class="hljs-comment">// double r,h,s1,s2,s;</span><br>    <span class="hljs-comment">// //cin&gt;&gt;r&gt;&gt;h;</span><br>    <span class="hljs-comment">// scanf(&quot;%lf%lf&quot;,&amp;r,&amp;h);</span><br>    <span class="hljs-comment">// s1=2*PI*r*r;</span><br>    <span class="hljs-comment">// s2=2*PI*r*h;</span><br>    <span class="hljs-comment">// s=s1+s2;</span><br>    <span class="hljs-comment">// printf(&quot;Area=%.3f\n&quot;,s);</span><br>    <span class="hljs-comment">// cout &lt;&lt; &quot;&quot; &lt;&lt; endl;</span><br>    <span class="hljs-comment">//算法竞赛的程序应当只做3件事情：</span><br>    <span class="hljs-comment">//读入数据、计算结果、打印输出。</span><br>    <span class="hljs-comment">//尽量使用const关键字声明常数</span><br><br><br>    <span class="hljs-comment">/*1.3 顺序结构程序设计*/</span><br>    <span class="hljs-comment">// //三位数翻转</span><br>    <span class="hljs-comment">// int a,b,c;</span><br>    <span class="hljs-comment">// cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br>    <span class="hljs-comment">// cout&lt;&lt;c&lt;&lt;b&lt;&lt;a&lt;&lt;endl;</span><br>    <span class="hljs-comment">// // 交换变量</span><br>    <span class="hljs-comment">// // 三变量法</span><br>    <span class="hljs-comment">// int a,b,c;</span><br>    <span class="hljs-comment">// cin&gt;&gt;a&gt;&gt;b;</span><br>    <span class="hljs-comment">// c=a;</span><br>    <span class="hljs-comment">// a=b;</span><br>    <span class="hljs-comment">// b=c;</span><br>    <span class="hljs-comment">// cout&lt;&lt;a&lt;&lt;&quot; &quot;&lt;&lt;b&lt;&lt;endl;</span><br>    <span class="hljs-comment">// // 两变量法</span><br>    <span class="hljs-comment">// int a,b;</span><br>    <span class="hljs-comment">// cin&gt;&gt;a&gt;&gt;b;</span><br>    <span class="hljs-comment">// a=a+b;</span><br>    <span class="hljs-comment">// b=a-b;</span><br>    <span class="hljs-comment">// a=a-b;</span><br>    <span class="hljs-comment">// cout&lt;&lt;a&lt;&lt;&quot; &quot;&lt;&lt;b&lt;&lt;endl;</span><br>    <span class="hljs-comment">// // 输入输出</span><br>    <span class="hljs-comment">// int a,b;</span><br>    <span class="hljs-comment">// cin&gt;&gt;a&gt;&gt;b;</span><br>    <span class="hljs-comment">// cout&lt;&lt;b&lt;&lt;&quot; &quot;&lt;&lt;a&lt;&lt;endl;</span><br><br>    <span class="hljs-comment">/*1.4 分支结构程序设计*/</span><br>    <span class="hljs-comment">// //鸡兔同笼</span><br>    <span class="hljs-comment">// int a,b,n,m;</span><br>    <span class="hljs-comment">// cin&gt;&gt;n&gt;&gt;m;</span><br>    <span class="hljs-comment">// if(n&gt;m)&#123;cout&lt;&lt;&quot;No answer&quot;&lt;&lt;endl;&#125;</span><br>    <span class="hljs-comment">// else&#123;</span><br>    <span class="hljs-comment">//     a=(4*n-m)/2;</span><br>    <span class="hljs-comment">//     b=n-a;</span><br>    <span class="hljs-comment">//     if (m%2==1 || a&lt;0 || b&lt;0)</span><br>    <span class="hljs-comment">//     &#123;</span><br>    <span class="hljs-comment">//         cout&lt;&lt;&quot;No answer&quot;&lt;&lt;endl;</span><br>    <span class="hljs-comment">//     &#125;</span><br>    <span class="hljs-comment">//     else&#123;</span><br>    <span class="hljs-comment">//         cout&lt;&lt;a&lt;&lt;&quot; &quot;&lt;&lt;b&lt;&lt;endl;</span><br>    <span class="hljs-comment">//     &#125;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// //C语言中的逻辑运算符都是短路运算符</span><br>    <span class="hljs-comment">// //&amp;&amp;和||都是短路运算符，当第一个运算符为假时，第二个运算符将不会被执行。</span><br>    <span class="hljs-comment">// // 三整数排序</span><br>    <span class="hljs-comment">// int a,b,c,t;</span><br>    <span class="hljs-comment">// cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br>    <span class="hljs-comment">// if(a&gt;b)&#123;t=a;a=b;b=t;&#125;</span><br>    <span class="hljs-comment">// if(a&gt;c)&#123;t=a;a=c;c=t;&#125;</span><br>    <span class="hljs-comment">// if(b&gt;c)&#123;t=b;b=c;c=t;&#125;</span><br>    <span class="hljs-comment">// cout&lt;&lt;a&lt;&lt;&quot; &quot;&lt;&lt;b&lt;&lt;&quot; &quot;&lt;&lt;c&lt;&lt;endl;</span><br><br>    <span class="hljs-comment">/*1.5 注解和习题*/</span><br>    <span class="hljs-comment">//实验A1：表达式11111*11111的值是多少？把5个1改成6个1呢？9个1呢？</span><br>    <span class="hljs-comment">//cout&lt;&lt;11111*11111&lt;&lt;endl;// 1234534321</span><br><br>    <span class="hljs-comment">//实验A2：把实验A1中的所有数换成浮点数，结果如何？</span><br>    <span class="hljs-comment">//cout&lt;&lt;11111.0*11111.0&lt;&lt;endl;// 1.23454e+08</span><br><br>    <span class="hljs-comment">//实验A3：表达式sqrt（-10）的值是多少？尝试用各种方式输出。在计算的过程中系统会报错吗？</span><br>    <span class="hljs-comment">//cout&lt;&lt;sqrt(-10)&lt;&lt;endl;// nan</span><br>    <span class="hljs-comment">// cout&lt;&lt;&quot;sqrt(-10)=&quot;&lt;&lt;sqrt(-10)&lt;&lt;endl;</span><br>    <span class="hljs-comment">// cout&lt;&lt;&quot;sqrt(-10)=&quot;&lt;&lt;sqrt(-10.0)&lt;&lt;endl;</span><br>    <span class="hljs-comment">// cout&lt;&lt;&quot;sqrt(-10)=&quot;&lt;&lt;sqrt(-10.0f)&lt;&lt;endl;</span><br>    <span class="hljs-comment">// cout&lt;&lt;&quot;sqrt(-10)=&quot;&lt;&lt;sqrt(-10.0l)&lt;&lt;endl;</span><br><br>    <span class="hljs-comment">// //实验A4：表达式1.0/0.0、0.0/0.0的值是多少？尝试用各种方式输出。在计算的过程中系统会报错吗？</span><br>    <span class="hljs-comment">// cout&lt;&lt;1.0/0.0&lt;&lt;endl; // inf</span><br>    <span class="hljs-comment">// cout&lt;&lt;0.0/0.0&lt;&lt;endl; // nan</span><br><br>    <span class="hljs-comment">//实验A5：表达式1/0的值是多少？在计算的过程中系统会报错吗？</span><br>    <span class="hljs-comment">//cout&lt;&lt;1/0&lt;&lt;endl; // Arithmetic exception</span><br><br>    <span class="hljs-comment">// //实验B1：在同一行中输入12和2，并以空格分隔，是否得到了预期的结果？</span><br>    <span class="hljs-comment">// int a,b;</span><br>    <span class="hljs-comment">// cin&gt;&gt;a&gt;&gt;b;</span><br>    <span class="hljs-comment">// cout&lt;&lt;a/b&lt;&lt;endl; // 6 正常</span><br><br>    <span class="hljs-comment">// //实验B2：在不同的两行中输入12和2，是否得到了预期的结果？</span><br>    <span class="hljs-comment">// int a,b;</span><br>    <span class="hljs-comment">// cin&gt;&gt;a;</span><br>    <span class="hljs-comment">// cin&gt;&gt;b;</span><br>    <span class="hljs-comment">// cout&lt;&lt;a/b&lt;&lt;endl; // 6 正常</span><br><br>    <span class="hljs-comment">// // 实验B3：在实验B1和B2中，在12和2的前面和后面加入大量的空格或水平制表符（TAB），甚至插入一些空行。</span><br>    <span class="hljs-comment">// int a,b;</span><br>    <span class="hljs-comment">// cin&gt;&gt;a&gt;&gt;b;</span><br>    <span class="hljs-comment">// cout&lt;&lt;a/b&lt;&lt;endl;// 6 正常</span><br><br>    <span class="hljs-comment">// //实验B4：把2换成字符s，重复实验B1～B3。</span><br>    <span class="hljs-comment">// char s;</span><br>    <span class="hljs-comment">// cin&gt;&gt;s;</span><br>    <span class="hljs-comment">// cout&lt;&lt;s/s&lt;&lt;endl; // 1 正常</span><br><br>    <span class="hljs-comment">/*习题*/</span><br>    <span class="hljs-comment">// // 平均数</span><br>    <span class="hljs-comment">// int a,b,c;</span><br>    <span class="hljs-comment">// cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br>    <span class="hljs-comment">// //保留三位小数</span><br>    <span class="hljs-comment">// //cout输出控制小数位，需要添加头文件#include &lt;iomanip&gt;</span><br>    <span class="hljs-comment">// cout&lt;&lt;setiosflags(ios::fixed)</span><br>    <span class="hljs-comment">//     &lt;&lt;setprecision(3)&lt;&lt;(a+b+c)/3.0&lt;&lt;endl;</span><br>    <span class="hljs-comment">// // 温度</span><br>    <span class="hljs-comment">// double f,c;</span><br>    <span class="hljs-comment">// cin&gt;&gt;f;</span><br>    <span class="hljs-comment">// c=(f-32)*5/9;</span><br>    <span class="hljs-comment">// cout&lt;&lt;setiosflags(ios::fixed)</span><br>    <span class="hljs-comment">//     &lt;&lt;setprecision(3)&lt;&lt;c&lt;&lt;endl;</span><br>    <span class="hljs-comment">// // 连续和</span><br>    <span class="hljs-comment">// // 输入正整数n，输出1到n的连续和。</span><br>    <span class="hljs-comment">// int n,m;</span><br>    <span class="hljs-comment">// cin&gt;&gt;n;</span><br>    <span class="hljs-comment">// m=n*(n+1)/2;</span><br>    <span class="hljs-comment">// cout&lt;&lt;m&lt;&lt;endl;</span><br>    <span class="hljs-comment">// // sin和cos</span><br>    <span class="hljs-comment">// int n;</span><br>    <span class="hljs-comment">// cin&gt;&gt;n;</span><br>    <span class="hljs-comment">// cout&lt;&lt;sin(n)&lt;&lt;&quot; &quot;&lt;&lt;cos(n)&lt;&lt;endl;</span><br>    <span class="hljs-comment">// // 打折</span><br>    <span class="hljs-comment">// double price,discount,total;</span><br>    <span class="hljs-comment">// cin&gt;&gt;discount;</span><br>    <span class="hljs-comment">// price=95;</span><br>    <span class="hljs-comment">// total=price*discount;</span><br>    <span class="hljs-comment">// if (total&gt;=300)</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     cout&lt;&lt;&quot;Total price is &quot;&lt;&lt;total*0.85&lt;&lt;&quot; yuan.&quot;&lt;&lt;endl;</span><br>    <span class="hljs-comment">// &#125;else&#123;</span><br>    <span class="hljs-comment">//     cout&lt;&lt;&quot;Total price is &quot;&lt;&lt;total&lt;&lt;&quot; yuan.&quot;&lt;&lt;endl;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// // 三角形</span><br>    <span class="hljs-comment">// int a,b,c;</span><br>    <span class="hljs-comment">// cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br>    <span class="hljs-comment">// if (a+b&gt;c &amp;&amp; a+c&gt;b &amp;&amp; b+c&gt;a)</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     cout&lt;&lt;&quot;Yes&quot;&lt;&lt;endl;</span><br>    <span class="hljs-comment">// &#125;else&#123;</span><br>    <span class="hljs-comment">//     cout&lt;&lt;&quot;No&quot;&lt;&lt;endl;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// // 年份</span><br>    <span class="hljs-comment">// int year;</span><br>    <span class="hljs-comment">// cin&gt;&gt;year;</span><br>    <span class="hljs-comment">// if (year%400==0 || (year%4==0 &amp;&amp; year%100!=0))</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     cout&lt;&lt;&quot;Yes&quot;&lt;&lt;endl;</span><br>    <span class="hljs-comment">// &#125;else&#123;</span><br>    <span class="hljs-comment">//     cout&lt;&lt;&quot;No&quot;&lt;&lt;endl;</span><br>    <span class="hljs-comment">// &#125;</span><br><br>    <span class="hljs-comment">// //问题1：int型整数的最小值和最大值是多少（需要精确值）？</span><br>    <span class="hljs-comment">// cout&lt;&lt;INT_MIN&lt;&lt;&quot; &quot;&lt;&lt;INT_MAX&lt;&lt;endl;// -2147483648 2147483647</span><br>    <span class="hljs-comment">// //问题2：double型浮点数能精确到多少位小数？或者，这个问题本身值得商榷？</span><br>    <span class="hljs-comment">// cout&lt;&lt;DBL_DIG&lt;&lt;endl;// 15</span><br>    <span class="hljs-comment">// //问题3：double型浮点数最大正数值和最小正数值分别是多少（不必特别精确）？</span><br>    <span class="hljs-comment">// cout&lt;&lt;DBL_MIN&lt;&lt;&quot; &quot;&lt;&lt;DBL_MAX&lt;&lt;endl;// 2.22507e-308 1.79769e+308</span><br>    <span class="hljs-comment">// //问题4：逻辑运算符号“&amp;&amp;”、“||”和“！”（表示逻辑非）的相对优先级是怎样的？也就是说，a&amp;&amp;b||c应理解成（a&amp;&amp;b）||c还是a&amp;&amp;（b||c），或者随便怎么理解都可以？</span><br>    <span class="hljs-comment">//  cout&lt;&lt;&quot;&amp;&amp;优先级高于||&quot;&lt;&lt;endl;</span><br>    <span class="hljs-comment">//  cout&lt;&lt;&quot;!优先级最低&quot;&lt;&lt;endl;</span><br>    <span class="hljs-comment">//  cout&lt;&lt;&quot;a&amp;&amp;b||c&quot;&lt;&lt;endl;</span><br>    <span class="hljs-comment">//  cout&lt;&lt;&quot;(a&amp;&amp;b)||c&quot;&lt;&lt;endl;</span><br>    <span class="hljs-comment">//  cout&lt;&lt;&quot;a&amp;&amp;(b||c)&quot;&lt;&lt;endl;</span><br>    <span class="hljs-comment">// // 问题5：if（a）if（b）x＋＋；else  y＋＋的确切含义是什么？这个else应和哪个if配套？有没有办法明确表达出配套方法？</span><br>    <span class="hljs-comment">// int a,b,x,y;</span><br>    <span class="hljs-comment">// a=1,b=1,x=0,y=0;</span><br>    <span class="hljs-comment">// if(a)if(b)x++;else y++;</span><br>    <span class="hljs-comment">// cout&lt;&lt;a&lt;&lt;&quot; &quot;&lt;&lt;b&lt;&lt;endl;</span><br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;headerlink&quot; title=&quot;第一章&quot;&gt;&lt;/a&gt;第一章&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;spa</summary>
      
    
    
    
    <category term="算法与数据结构" scheme="http://zdx-1.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="算法与数据结构" scheme="http://zdx-1.github.io/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录突击版学习</title>
    <link href="http://zdx-1.github.io/2024/04/25/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AA%81%E5%87%BB%E7%89%88%E5%AD%A6%E4%B9%A0/"/>
    <id>http://zdx-1.github.io/2024/04/25/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AA%81%E5%87%BB%E7%89%88%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-04-25T02:46:34.000Z</published>
    <updated>2024-04-25T03:04:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p><p>示例 1:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">输入: nums = [-1,0,3,5,9,12], target = 9     <br>输出: 4       <br>解释: 9 出现在 nums 中并且下标为 4     <br></code></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">输入: nums = [-1,0,3,5,9,12], target = 2     <br>输出: -1        <br>解释: 2 不存在 nums 中因此返回 -1        <br></code></pre></td></tr></table></figure><p>提示：</p><ul><li>你可以假设 nums 中的所有元素是不重复的。</li><li>n 将在 [1, 10000]之间。</li><li>nums 的每个元素都将在 [-9999, 9999]之间。</li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先，二分查找的使用限制：</p><p>​二分查找只使用于有序数组中，二分查找的边界需要进行判断</p><p>使用python编写的模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#在单调递增序列a中查找&gt;=x的数中最小的一个（即x或x的后继）</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">findMin</span>(<span class="hljs-params">a,x,low,high</span>):<br>    <span class="hljs-keyword">while</span> low&lt;high:<br>        mid=<span class="hljs-built_in">int</span>((low+high)/<span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">if</span>(a[mid]&gt;=x):<br>            high=mid<br>        <span class="hljs-keyword">else</span>:<br>            low=mid+<span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(a[high])<br><span class="hljs-comment">#在单调递增序列a中查找&lt;=x的数中最大的一个（即x或x的前驱）</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">findMax</span>(<span class="hljs-params">a,x,low,high</span>):<br>    <span class="hljs-keyword">while</span> low&lt;high:<br>        mid=<span class="hljs-built_in">int</span>((low+high+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">if</span>(a[mid]&lt;=x):<br>            low=mid<br>        <span class="hljs-keyword">else</span>:<br>            high = mid-<span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(a[low])<br>a=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>]<br>x=<span class="hljs-number">3</span><br>low=<span class="hljs-number">0</span><br>high=<span class="hljs-built_in">len</span>(a)-<span class="hljs-number">1</span><br>findMin(a,x,low,high)<br>findMax(a,x,low,high)<br></code></pre></td></tr></table></figure><p>那么，使用java怎么实现呢？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;二分查找&quot;&gt;&lt;a href=&quot;#二分查找&quot; class=&quot;headerlink&quot; title=&quot;二分查找&quot;&gt;&lt;/a&gt;二分查找&lt;/h1&gt;&lt;p&gt;给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 tar</summary>
      
    
    
    
    <category term="数据结构" scheme="http://zdx-1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="http://zdx-1.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构刷题题单</title>
    <link href="http://zdx-1.github.io/2024/04/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%B7%E9%A2%98%E9%A2%98%E5%8D%95/"/>
    <id>http://zdx-1.github.io/2024/04/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%B7%E9%A2%98%E9%A2%98%E5%8D%95/</id>
    <published>2024-04-24T11:35:35.000Z</published>
    <updated>2024-04-27T17:58:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="P1996-约瑟夫问题"><a href="#P1996-约瑟夫问题" class="headerlink" title="P1996 约瑟夫问题"></a>P1996 约瑟夫问题</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>$n$ 个人围成一圈，从第一个人开始报数,数到 $m$ 的人出列，再由下一个人重新从 $1$ 开始报数，数到 $m$ 的人再出圈，依次类推，直到所有的人都出圈，请输出依次出圈人的编号。</p><p><strong>注意：本题和《深入浅出-基础篇》上例题的表述稍有不同。书上表述是给出淘汰 $n-1$ 名小朋友，而该题是全部出圈。</strong></p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入两个整数 $n,m$。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一行 $n$ 个整数，按顺序输出每个出圈人的编号。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">10 </span><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">6</span> <span class="hljs-number">9</span> <span class="hljs-number">2</span> <span class="hljs-number">7</span> <span class="hljs-number">1</span> <span class="hljs-number">8</span> <span class="hljs-number">5</span> <span class="hljs-number">10</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>$1 \le m, n \le 100$​</p><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>由于这题数据范围非常小，因此可以用很多比较奇怪的算法。不过，命题者的初衷是希望我们使用链表进行模拟。</p><p>在这里，我使用了一个结构体 <code>Peo</code> 存储一个双向链表：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Peo</span><br>&#123;<br>    <span class="hljs-type">int</span> ID;                    <span class="hljs-comment">//编号</span><br>    Peo *next, *front;<br>&#125;;<br></code></pre></td></tr></table></figure><p>其中 <code>ID</code> 代表这个人的编号，输出时使用，另外两个指针分别指向上一个和下一个人，不过我们先要对其初始化。 使用两个变量 <code>tot</code>, <code>outNum</code> 来分别存储总人数和出局的数，然后让链表之间互相链接，最后首尾相连。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; tot - <span class="hljs-number">1</span>; i++) &#123; n[i].front = n + i - <span class="hljs-number">1</span>; n[i].next = n + i + <span class="hljs-number">1</span>; n[i].ID = i + <span class="hljs-number">1</span>; &#125;<br>    n[<span class="hljs-number">0</span>].front = n + tot - <span class="hljs-number">1</span>; n[<span class="hljs-number">0</span>].next = n + <span class="hljs-number">1</span>; n[tot - <span class="hljs-number">1</span>].front = n + tot - <span class="hljs-number">2</span>; n[tot - <span class="hljs-number">1</span>].next = n;<br>    n[<span class="hljs-number">0</span>].ID = <span class="hljs-number">1</span>; n[tot - <span class="hljs-number">1</span>].ID = tot;<br></code></pre></td></tr></table></figure><p>链表初始化完成之后，我们可以使用一个结构体指针 <code>now</code> 来表示我们现在模拟到哪一个人了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Peo *now = n;            <span class="hljs-comment">//指向目前报数的人的指针</span><br></code></pre></td></tr></table></figure><p>最后，我们需要用一种方法来删除链表当中的某一项，可以这样考虑，如果当前需要删除的项是 <code>now</code>, 那么链表中需要修改的变量只有它前一项和后一项的两个指针，在代码实现上，将 <code>now-&gt;front</code> 的 <code>next</code> 更改为<code>now-&gt;next</code>，然后 <code>now-&gt;next</code> 的 <code>front</code> 更改为<code>now-&gt;front</code> 就可以了。我们使用一个函数封装这一过程。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">void</span> _Cut(Peo *num)<br>    &#123;<br>        num = num-&gt;front;<br>        num-&gt;next = num-&gt;next-&gt;next;<br>        num = num-&gt;next;<br>        num-&gt;front = num-&gt;front-&gt;front;<br>    &#125;<br></code></pre></td></tr></table></figure><p>这样，剩下的就是依据题意模拟了，过程虽然看似有些复杂，但是这大致就是题目期望我们去做的全部过程。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Peo</span><br>&#123;<br>    <span class="hljs-type">int</span> ID;                                    <span class="hljs-comment">//编号</span><br>    Peo *next, *front;<br><br>    <span class="hljs-built_in">Peo</span>()&#123; next = front = <span class="hljs-literal">nullptr</span>; &#125;<br>&#125;n[<span class="hljs-number">100</span>];<br><br><span class="hljs-type">void</span> _Cut(Peo *num)<br>&#123;<br>    num = num-&gt;front;<br>    num-&gt;next = num-&gt;next-&gt;next;<br>    num = num-&gt;next;<br>    num-&gt;front = num-&gt;front-&gt;front;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> tot, outNum, nowNum = <span class="hljs-number">1</span>;<br>    Peo *now = n;            <span class="hljs-comment">//指向目前报数的人的指针</span><br>    cin &gt;&gt; tot &gt;&gt; outNum;        <span class="hljs-comment">//数据读入</span><br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; tot - <span class="hljs-number">1</span>; i++) &#123; n[i].front = n + i - <span class="hljs-number">1</span>; n[i].next = n + i + <span class="hljs-number">1</span>; n[i].ID = i + <span class="hljs-number">1</span>; &#125;<br>    n[<span class="hljs-number">0</span>].front = n + tot - <span class="hljs-number">1</span>; n[<span class="hljs-number">0</span>].next = n + <span class="hljs-number">1</span>; n[tot - <span class="hljs-number">1</span>].front = n + tot - <span class="hljs-number">2</span>; n[tot - <span class="hljs-number">1</span>].next = n;<br>    n[<span class="hljs-number">0</span>].ID = <span class="hljs-number">1</span>; n[tot - <span class="hljs-number">1</span>].ID = tot;<br>    <span class="hljs-comment">//初始化链表</span><br>    <br>    <span class="hljs-keyword">while</span> (tot &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (nowNum == outNum) &#123;<br>            cout &lt;&lt; now-&gt;ID &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;        <span class="hljs-comment">//输出出局的人的编号</span><br>            <br>            _Cut(now);                    <span class="hljs-comment">//出局</span><br>            nowNum = <span class="hljs-number">1</span>;                    <span class="hljs-comment">//初始化数字</span><br>            tot--;                        <span class="hljs-comment">//总人数-1</span><br>            now = now-&gt;next;            <span class="hljs-comment">//下一个人</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            nowNum++;                    <span class="hljs-comment">//数字+1</span><br>            now = now-&gt;next;            <span class="hljs-comment">//下一个人</span><br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法2：队列"><a href="#方法2：队列" class="headerlink" title="方法2：队列"></a>方法2：队列</h3><p>若是使用链表，这题的代码实现复杂程度无疑大大上升了，其实，我们完全用不着那么麻烦，一个个地报数，可以想象成一个队列，一个人报完数后，判断他所报的数是不是出局的数，如果是，直接弹出，但若不是，将其移动至队尾。</p><p>我们使用一个队列 <code>q</code> 进行模拟，在读取总人数和出局数字后，把这些人一个个地压入队列尾部。在使用队列之前，需要先加上头文件 <code>&lt;queue&gt;</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> tot, outNum, nowNum = <span class="hljs-number">1</span>;<br>        queue&lt;<span class="hljs-type">int</span>&gt; q;<br>        cin &gt;&gt; tot &gt;&gt; outNum;                        <span class="hljs-comment">//读取数据</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= tot; i++)q.<span class="hljs-built_in">push</span>(i);    <span class="hljs-comment">//初始化队列</span><br></code></pre></td></tr></table></figure><p>完成这些之后，开始模拟，整个过程非常直观，在这里就不详细解释了。以下是完整代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>    <span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br>    <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>    <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> tot, outNum, nowNum = <span class="hljs-number">1</span>;<br>        queue&lt;<span class="hljs-type">int</span>&gt; q;<br>        cin &gt;&gt; tot &gt;&gt; outNum;                        <span class="hljs-comment">//读取数据</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= tot; i++)q.<span class="hljs-built_in">push</span>(i);    <span class="hljs-comment">//初始化队列</span><br>        <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())                    <span class="hljs-comment">//在队列不为空时继续模拟</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (nowNum == outNum)<br>            &#123;<br>                cout &lt;&lt; q.<span class="hljs-built_in">front</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;    <span class="hljs-comment">//打印出局的人的编号</span><br>                q.<span class="hljs-built_in">pop</span>();                    <span class="hljs-comment">//出局</span><br>                nowNum = <span class="hljs-number">1</span>;                    <span class="hljs-comment">//初始化现在的数字</span><br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                nowNum++;<br>                q.<span class="hljs-built_in">push</span>(q.<span class="hljs-built_in">front</span>());            <span class="hljs-comment">//排至队尾</span><br>                q.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>        &#125;<br>        cout &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>14-3-2020 UPD： 替换了正文部分错误或模棱两可的表述。规范了第一段代码中不合适的实现细节。</p><p>作者：Mickey_snow </p><h2 id="解题思路（python）"><a href="#解题思路（python）" class="headerlink" title="解题思路（python）"></a>解题思路（python）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>peo = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>)]<br>ple = []<br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> peo:<br>    i += <span class="hljs-number">1</span><br>    p = peo.pop(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">if</span> i == m:<br>        ple.append(p)<br>        i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">else</span>:<br>        peo.append(p)<br> <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ple:<br>    <span class="hljs-built_in">print</span>(i,end = <span class="hljs-string">&quot; &quot;</span>)<br></code></pre></td></tr></table></figure><p>解法2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pytohn">import queue        # 导入Python自带的queue标准库可以实现队列、栈、优先队列<br> <br> <br>def josephus(num1, num2):<br>    q = queue.Queue()                # 声明q是一个队列<br>    for i in range(1, num1 + 1):        # 数字依次导入<br>       q.put(i)<br> <br>    while q.qsize() &gt; 0:<br>        for i in range(num2 - 1):    # 死亡计数，被点到的出列<br>            q.put(q.get())<br>        print(q.get(), end=&#x27; &#x27;)    # 输出出列数<br> <br> <br>n, m = map(int, input().split())<br>josephus(n, m)<br></code></pre></td></tr></table></figure><h1 id="P1047-NOIP2005-普及组-校门外的树"><a href="#P1047-NOIP2005-普及组-校门外的树" class="headerlink" title="P1047 [NOIP2005 普及组] 校门外的树"></a>P1047 [NOIP2005 普及组] 校门外的树</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>某校大门外长度为 $l$ 的马路上有一排树，每两棵相邻的树之间的间隔都是 $1$ 米。我们可以把马路看成一个数轴，马路的一端在数轴 $0$ 的位置，另一端在 $l$ 的位置；数轴上的每个整数点，即 $0,1,2,\dots,l$，都种有一棵树。</p><p>由于马路上有一些区域要用来建地铁。这些区域用它们在数轴上的起始点和终止点表示。已知任一区域的起始点和终止点的坐标都是整数，区域之间可能有重合的部分。现在要把这些区域中的树（包括区域端点处的两棵树）移走。你的任务是计算将这些树都移走后，马路上还有多少棵树。</p><h2 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行有两个整数，分别表示马路的长度 $l$ 和区域的数目 $m$。</p><p>接下来 $m$ 行，每行两个整数 $u, v$，表示一个区域的起始点和终止点的坐标。</p><h2 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一行一个整数，表示将这些树都移走后，马路上剩余的树木数量。</p><h2 id="样例-1-1"><a href="#样例-1-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-1"><a href="#样例输入-1-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">500 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">150 </span><span class="hljs-number">300</span><br><span class="hljs-symbol">100 </span><span class="hljs-number">200</span><br><span class="hljs-symbol">470 </span><span class="hljs-number">471</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-1"><a href="#样例输出-1-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">298<br></code></pre></td></tr></table></figure><h2 id="提示-1"><a href="#提示-1" class="headerlink" title="提示"></a>提示</h2><p><strong>【数据范围】</strong></p><ul><li>对于 $20%$ 的数据，保证区域之间没有重合的部分。</li><li>对于 $100%$ 的数据，保证 $1 \leq l \leq 10^4$，$1 \leq m \leq 100$，$0 \leq u \leq v \leq l$。</li></ul><p><strong>【题目来源】</strong></p><p>NOIP 2005 普及组第二题</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, m = <span class="hljs-number">0</span>;<span class="hljs-comment">//马路长度和区间个数</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;l, &amp;m);<br>    <span class="hljs-type">int</span> u = <span class="hljs-number">0</span>, v = <span class="hljs-number">0</span>;<span class="hljs-comment">//区间的左右位置，u肯定小于v滴</span><br>    <span class="hljs-type">int</span> tree[<span class="hljs-number">10001</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-comment">//树树全部初始化为0，代表没砍过</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<span class="hljs-comment">//一共有m个区间，那就得操作m次呐</span><br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);<span class="hljs-comment">//想从哪砍到哪呢</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = u; j &lt;= v; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(tree[j]==<span class="hljs-number">0</span>)<br>            tree[j] = <span class="hljs-number">1</span>;<span class="hljs-comment">//砍过的标记为1</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<span class="hljs-comment">//剩余sum棵树树还没被砍</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt;= l; k++)<span class="hljs-comment">//遍历树树</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (tree[k] == <span class="hljs-number">0</span>) sum++;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, sum);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="P5732-【深基5-习7】杨辉三角"><a href="#P5732-【深基5-习7】杨辉三角" class="headerlink" title="P5732 【深基5.习7】杨辉三角"></a>P5732 【深基5.习7】杨辉三角</h1><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>给出 $n(n\le20)$，输出杨辉三角的前 $n$ 行。</p><p>如果你不知道什么是杨辉三角，可以观察样例找找规律。</p><h2 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h2><h2 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h2><h2 id="样例-1-2"><a href="#样例-1-2" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-2"><a href="#样例输入-1-2" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">6<br></code></pre></td></tr></table></figure><h3 id="样例输出-1-2"><a href="#样例输出-1-2" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">5</span> <span class="hljs-number">10</span> <span class="hljs-number">10</span> <span class="hljs-number">5</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>杨辉三角形的规律：</p><ul><li>1、每个数等于它上方两数之和。</li><li>2、每行数字左右对称，由1开始逐渐变大。</li><li>3、第n行的数字有n项。</li><li>4、第n行数字和为2^(n-1)。（2的(n-1)次方）</li><li>5 (a+b)^n的展开式中的各项系数依次对应杨辉三角的第(n+1)行中的每一项。</li><li>6、第n行的第m个数和第n-m个数相等，即C(n,m)&#x3D;C(n,n-m)，这是组合数性质</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-type">int</span> arr[<span class="hljs-number">30</span>][<span class="hljs-number">30</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=i;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>&amp;&amp;j==<span class="hljs-number">1</span>)<br>&#123;<br>arr[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,arr[i][j]);     <span class="hljs-comment">//第一行是特殊的，需要注意</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br>arr[i][j]=arr[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]+arr[i<span class="hljs-number">-1</span>][j];<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,arr[i][j]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="P1160-队列安排"><a href="#P1160-队列安排" class="headerlink" title="P1160 队列安排"></a>P1160 队列安排</h1><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>一个学校里老师要将班上 $N$ 个同学排成一列，同学被编号为 $1\sim N$，他采取如下的方法：</p><ol><li><p>先将 $1$ 号同学安排进队列，这时队列中只有他一个人；</p></li><li><p>$2\sim N$ 号同学依次入列，编号为 $i$ 的同学入列方式为：老师指定编号为 $i$ 的同学站在编号为 $1\sim(i-1)$ 中某位同学（即之前已经入列的同学）的左边或右边；</p></li><li><p>从队列中去掉 $M$ 个同学，其他同学位置顺序不变。</p></li></ol><p>在所有同学按照上述方法队列排列完毕后，老师想知道从左到右所有同学的编号。</p><h2 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行一个整数 $N$，表示了有 $N$ 个同学。</p><p>第 $2\sim N$ 行，第 $i$ 行包含两个整数 $k,p$，其中 $k$ 为小于 $i$ 的正整数，$p$ 为 $0$ 或者 $1$。若 $p$ 为 $0$，则表示将 $i$ 号同学插入到 $k$ 号同学的左边，$p$ 为 $1$ 则表示插入到右边。</p><p>第 $N+1$ 行为一个整数 $M$，表示去掉的同学数目。</p><p>接下来 $M$ 行，每行一个正整数 $x$，表示将 $x$ 号同学从队列中移去，如果 $x$ 号同学已经不在队列中则忽略这一条指令。</p><h2 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h2><p>一行，包含最多 $N$ 个空格隔开的整数，表示了队列从左到右所有同学的编号。</p><h2 id="样例-1-3"><a href="#样例-1-3" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-3"><a href="#样例输入-1-3" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">0</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">0</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-3"><a href="#样例输出-1-3" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span><span class="hljs-number">4</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="提示-2"><a href="#提示-2" class="headerlink" title="提示"></a>提示</h2><p><strong>【样例解释】</strong></p><p>将同学 $2$ 插入至同学 $1$ 左边，此时队列为：</p><p><code>2 1</code></p><p>将同学 $3$ 插入至同学 $2$ 右边，此时队列为：</p><p><code>2 3 1</code>  </p><p>将同学 $4$ 插入至同学 $1$ 左边，此时队列为：</p><p><code>2 3 4 1</code>  </p><p>将同学 $3$ 从队列中移出，此时队列为：</p><p><code>2 4 1</code>  </p><p>同学 $3$ 已经不在队列中，忽略最后一条指令</p><p>最终队列：</p><p><code>2 4 1</code>  </p><p><strong>【数据范围】</strong></p><p>对于 $20%$ 的数据，$1\leq N\leq 10$。</p><p>对于 $40%$ 的数据，$1\leq N\leq 1000$。</p><p>对于 $100%$ 的数据，$1&lt;M\leq N\leq 10^5$​。</p><h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100005</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br><span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = <span class="hljs-number">0</span>;<br>&#125;L[N];<br><span class="hljs-type">int</span> h[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n, m, head = <span class="hljs-number">1</span>;<span class="hljs-comment">//初始化头节点为第一个同学</span><br>cin &gt;&gt; n;<br><span class="hljs-built_in">memset</span>(h, <span class="hljs-number">1</span>, <span class="hljs-built_in">sizeof</span>(h));<span class="hljs-comment">//h数组用来检查第i个同学有没有被删除，置1。</span><br><span class="hljs-type">int</span> k, p;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;k, &amp;p);<br><span class="hljs-keyword">if</span> (p == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">if</span> (L[k].l) &#123;<span class="hljs-comment">//如果k同学左边还有同学</span><br>L[L[k].l].r = i;<span class="hljs-comment">//先修改k左边的同学的右边为i</span><br>L[i].l = L[k].l;<br>&#125;<br>L[i].r = k;<span class="hljs-comment">//注意不能写在if (L[k].l)前。</span><br>L[k].l = i;<br><span class="hljs-keyword">if</span> (head == k) &#123;<span class="hljs-comment">//k为头节点的话，i又插入在k左边，则将head=i；</span><br>head = i;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//同上</span><br><span class="hljs-keyword">if</span> (L[k].r) &#123;<br>L[L[k].r].l = i;<br>L[i].r = L[k].r;<br>&#125;<br>L[i].l = k;<br>L[k].r = i;<br>&#125;<br>&#125;<br>cin &gt;&gt; m;<br><span class="hljs-type">int</span> cur;<br><span class="hljs-keyword">while</span> (m--) &#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;cur);<br><span class="hljs-keyword">if</span> (h[cur]) &#123;<span class="hljs-comment">//cur没有被删除</span><br><span class="hljs-type">int</span> tmp = L[cur].l;<br><span class="hljs-keyword">if</span> (L[cur].l) &#123;<br>L[L[cur].l].r = L[cur].r;<br>&#125;<span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//如果左边没有节点，则需要修改头节点</span><br>head = L[cur].r;<br>&#125;<br><span class="hljs-keyword">if</span> (L[cur].r) &#123;<br>L[L[cur].r].l = tmp;<br>&#125;<br>h[cur] = <span class="hljs-number">0</span>;<br>&#125;<br> <br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head; i != <span class="hljs-number">0</span>; i = L[i].r) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, i);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="P4387-【深基15-习9】验证栈序列"><a href="#P4387-【深基15-习9】验证栈序列" class="headerlink" title="P4387 【深基15.习9】验证栈序列"></a>P4387 【深基15.习9】验证栈序列</h1><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>给出两个序列 pushed 和 poped 两个序列，其取值从 1 到 $n(n\le100000)$。已知入栈序列是 pushed，如果出栈序列有可能是 poped，则输出 <code>Yes</code>，否则输出 <code>No</code>。为了防止骗分，每个测试点有多组数据，不超过 $5$ 组。</p><h2 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行一个整数 $q$，询问次数。</p><p>接下来 $q$ 个询问，对于每个询问：</p><p>第一行一个整数 $n$ 表示序列长度；</p><p>第二行 $n$ 个整数表示入栈序列；</p><p>第三行 $n$ 个整数表示出栈序列；</p><h2 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h2><p>对于每个询问输出答案。</p><h2 id="样例-1-4"><a href="#样例-1-4" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-4"><a href="#样例输入-1-4" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">2</span><br><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-4"><a href="#样例输出-1-4" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">Yes</span><br><span class="hljs-keyword">No</span><br></code></pre></td></tr></table></figure><h2 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h2><p>在python中，对于栈使用的是stack。</p><p>可以如下两种编写方式，重构后感觉第二种更适合刷题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">judge</span>(<span class="hljs-params">pushed, poped</span>):  <br>    stack = []<br>    push = <span class="hljs-number">0</span>  <br>    popo = <span class="hljs-number">0</span>  <br>    <span class="hljs-keyword">while</span> push &lt; <span class="hljs-built_in">len</span>(pushed) <span class="hljs-keyword">and</span> popo &lt; <span class="hljs-built_in">len</span>(poped):   <br>        stack.append(pushed[push])  <br>        push += <span class="hljs-number">1</span>   <br>        <span class="hljs-keyword">while</span> stack <span class="hljs-keyword">and</span> stack[-<span class="hljs-number">1</span>] == poped[popo]:  <br>            stack.pop()  <br>            popo += <span class="hljs-number">1</span>  <br>    <span class="hljs-keyword">return</span> push == <span class="hljs-built_in">len</span>(pushed) <span class="hljs-keyword">and</span> popo == <span class="hljs-built_in">len</span>(poped) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> stack  <br>q = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())  <br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(q):  <br>    n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())  <br>    pushed = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))  <br>    poped = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))  <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Yes&quot;</span> <span class="hljs-keyword">if</span> judge(pushed, poped) <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;No&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">q=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(q):<br>    n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>    pushed=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>    poped=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>    stack = []<br>    push_index=<span class="hljs-number">0</span><br>    pop_index=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> push_index &lt; <span class="hljs-built_in">len</span>(pushed) <span class="hljs-keyword">and</span> pop_index &lt;<span class="hljs-built_in">len</span>(poped):<br>        stack.append(pushed[push_index])<br>        push_index +=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> stack <span class="hljs-keyword">and</span> stack[-<span class="hljs-number">1</span>]==poped[pop_index]:<br>            stack.pop()<br>            pop_index += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> push_index == <span class="hljs-built_in">len</span>(pushed) <span class="hljs-keyword">and</span> pop_index ==<span class="hljs-built_in">len</span>(poped) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> stack:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Yes&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="解题思路2"><a href="#解题思路2" class="headerlink" title="解题思路2"></a>解题思路2</h2><p>使用C语言</p><p>   每个数字只能入栈出栈1次，无法将入栈数字全部出栈的输出No</p><p>   除出栈入栈数组外多一个数组作为缓冲区外部循环做n次每次将第i个数据放在缓冲区最顶的内存里，进入内循环如果缓冲区最顶的数据与第j个出栈的数据一致就将数据出栈，内循环直到缓冲区没有数据退出内循环，外循环结束时缓冲区没有数据代表出栈成功。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">int</span> a[<span class="hljs-number">100005</span>]=&#123;<span class="hljs-number">0</span>&#125;,top=<span class="hljs-number">0</span>,b[<span class="hljs-number">100005</span>]=&#123;<span class="hljs-number">0</span>&#125;,c[<span class="hljs-number">100005</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-built_in">main</span>()<br>&#123;<br><span class="hljs-type">int</span> i,j=<span class="hljs-number">0</span>,k,q,n;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;q);<br><span class="hljs-keyword">while</span>(q--)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-built_in">memset</span>(a,<span class="hljs-number">0</span>,n*<span class="hljs-number">4</span>);<br><span class="hljs-built_in">memset</span>(b,<span class="hljs-number">0</span>,n*<span class="hljs-number">4</span>);<br><span class="hljs-built_in">memset</span>(c,<span class="hljs-number">0</span>,n*<span class="hljs-number">4</span>);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;b[i]);<br>i=<span class="hljs-number">0</span>;j=<span class="hljs-number">0</span>;  top=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(i&lt;n)<br>&#123;<br>c[top++]=a[i++];<br><span class="hljs-keyword">while</span>(c[top<span class="hljs-number">-1</span>]==b[j] )&#123;<br>j++,top--;<br><span class="hljs-keyword">if</span>(top==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">if</span>(top==<span class="hljs-number">0</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Yes\n&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No\n&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="P1090-NOIP2004-提高组-合并果子-USACO06NOV-Fence-Repair-G"><a href="#P1090-NOIP2004-提高组-合并果子-USACO06NOV-Fence-Repair-G" class="headerlink" title="P1090 [NOIP2004 提高组] 合并果子 &#x2F; [USACO06NOV] Fence Repair G"></a>P1090 [NOIP2004 提高组] 合并果子 &#x2F; [USACO06NOV] Fence Repair G</h1><h2 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个果园里，多多已经将所有的果子打了下来，而且按果子的不同种类分成了不同的堆。多多决定把所有的果子合成一堆。</p><p>每一次合并，多多可以把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和。可以看出，所有的果子经过 $n-1$ 次合并之后， 就只剩下一堆了。多多在合并果子时总共消耗的体力等于每次合并所耗体力之和。</p><p>因为还要花大力气把这些果子搬回家，所以多多在合并果子时要尽可能地节省体力。假定每个果子重量都为 $1$ ，并且已知果子的种类 数和每种果子的数目，你的任务是设计出合并的次序方案，使多多耗费的体力最少，并输出这个最小的体力耗费值。</p><p>例如有 $3$ 种果子，数目依次为 $1$ ， $2$ ， $9$ 。可以先将 $1$ 、 $2$ 堆合并，新堆数目为 $3$ ，耗费体力为 $3$ 。接着，将新堆与原先的第三堆合并，又得到新的堆，数目为 $12$ ，耗费体力为 $12$ 。所以多多总共耗费体力 $&#x3D;3+12&#x3D;15$ 。可以证明 $15$ 为最小的体力耗费值。</p><h2 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a>输入格式</h2><p>共两行。<br>第一行是一个整数 $n(1\leq n\leq 10000)$ ，表示果子的种类数。  </p><p>第二行包含 $n$ 个整数，用空格分隔，第 $i$ 个整数 $a_i(1\leq a_i\leq 20000)$ 是第 $i$ 种果子的数目。</p><h2 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个整数，也就是最小的体力耗费值。输入数据保证这个值小于 $2^{31}$ 。</p><h2 id="样例-1-5"><a href="#样例-1-5" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-5"><a href="#样例输入-1-5" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-5"><a href="#样例输出-1-5" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">15<br></code></pre></td></tr></table></figure><h2 id="提示-3"><a href="#提示-3" class="headerlink" title="提示"></a>提示</h2><p>对于 $30%$ 的数据，保证有 $n \le 1000$：</p><p>对于 $50%$ 的数据，保证有 $n \le 5000$；</p><p>对于全部的数据，保证有 $n \le 10000$​。</p><h2 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h2><p>这是一个典型的哈夫曼树，哈夫曼树是二叉树中的一种完全二叉树</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-type">int</span> n, a1[<span class="hljs-number">99999</span>], a2[<span class="hljs-number">99999</span>];       <span class="hljs-comment">//a1用于存剩余元素，a2用于存合并之后的元素</span><br><span class="hljs-type">int</span> ans, x;            <span class="hljs-comment">//x为a2的元素个数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; n;<br><span class="hljs-built_in">memset</span>(a1, <span class="hljs-number">127</span>, <span class="hljs-built_in">sizeof</span>(a1));<br><span class="hljs-built_in">memset</span>(a2, <span class="hljs-number">127</span>, <span class="hljs-built_in">sizeof</span>(a2));<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>cin &gt;&gt; a1[i];<br><span class="hljs-built_in">sort</span>(a1, a1 + n);<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>, w;        <span class="hljs-comment">//w为每次一消耗的体力</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt; n; k++)<br>&#123;<br>w = a1[i] &lt; a2[j] ? a1[i++] : a2[j++];<br>w += a1[i] &lt; a2[j] ? a1[i++] : a2[j++];<br>a2[x++] = w;<br>ans += w;<br>&#125;<br>cout &lt;&lt; ans;<br> <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先将两个数组的元素初始值设置为int的最大值，使得后续找最小值时方便，再将数组进行从小到大的排序，当然也是便于寻找最小值。</p><p>ok，进入核心步骤，也就是找最小值合并。</p><p>有n个堆，那么合并成一个堆只需要n-1次操作，因此循环为n-1次</p><p>由于a1(利用了sort函数),a2(每次取最小值合并，下一次合并的堆一定比上一次大)均为从小到大排序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">  w = a1[i] &lt; a2[j] ? a1[i++] : a2[j++];    <span class="hljs-comment">//第一次取最小值</span><br>w += a1[i] &lt; a2[j] ? a1[i++] : a2[j++];    <span class="hljs-comment">//第二次去最小值</span><br>a2[x++] = w;<br>ans += w;<br></code></pre></td></tr></table></figure><p>那么就可以直接在两个数组中按下标顺序找最小值，i和j起一个指针作用，若该元素已经使用了，就指到下一个元素。通过两次取最小值，找到最小堆合并存入第二个数组中，最后利用ans算出结果</p><h1 id="P1449-后缀表达式"><a href="#P1449-后缀表达式" class="headerlink" title="P1449 后缀表达式"></a>P1449 后缀表达式</h1><h2 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h2><p>所谓后缀表达式是指这样的一个表达式：式中不再引用括号，运算符号放在两个运算对象之后，所有计算按运算符号出现的顺序，严格地由左而右新进行（不用考虑运算符的优先级）。</p><p>本题中运算符仅包含 $\texttt{+-*&#x2F;}$。保证对于 $\texttt{&#x2F;}$ 运算除数不为 0。特别地，其中 $\texttt{&#x2F;}$ 运算的结果需要<strong>向 0 取整</strong>（即与 C++ <code>/</code> 运算的规则一致）。</p><p>如：$\texttt{3*(5-2)+7}$ 对应的后缀表达式为：$\texttt{3.5.2.-*7.+@}$。在该式中，<code>@</code> 为表达式的结束符号。<code>.</code> 为操作数的结束符号。</p><h2 id="输入格式-6"><a href="#输入格式-6" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入一行一个字符串 $s$，表示后缀表达式。</p><h2 id="输出格式-6"><a href="#输出格式-6" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一个整数，表示表达式的值。</p><h2 id="样例-1-6"><a href="#样例-1-6" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-6"><a href="#样例输入-1-6" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">3</span>.<span class="hljs-number">5</span>.<span class="hljs-number">2</span>.-*<span class="hljs-number">7</span>.+@<br></code></pre></td></tr></table></figure><h3 id="样例输出-1-6"><a href="#样例输出-1-6" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">16<br></code></pre></td></tr></table></figure><h2 id="样例-2"><a href="#样例-2" class="headerlink" title="样例 #2"></a>样例 #2</h2><h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">10</span>.<span class="hljs-number">28</span>.<span class="hljs-number">30</span>./*<span class="hljs-number">7</span>.-@<br></code></pre></td></tr></table></figure><h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-7</span><br></code></pre></td></tr></table></figure><h2 id="提示-4"><a href="#提示-4" class="headerlink" title="提示"></a>提示</h2><p>数据保证，$1 \leq |s| \leq 50$，答案和计算过程中的每一个值的绝对值不超过 $10^9$​。</p><h2 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h2><p><img src="/./../images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%B7%E9%A2%98%E9%A2%98%E5%8D%95/format,png.png" alt="img"><br>     上图是一棵表达式树，对应的后缀表达式是4 1 5 2 - * + 6 3 &#x2F; -。</p><p>可以看出，每个运算符结点都有左子树和右子树，每个数字结点都是叶子节点。<br>    表达式树的中序遍历就是中缀表达式。<br>运算方式：左子树的结果 运算符 右子树的结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>stack &lt;<span class="hljs-type">int</span>&gt; n;<br><span class="hljs-type">int</span> s=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">char</span> ch;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        cin&gt;&gt;ch;<br>        <span class="hljs-keyword">if</span>(ch&lt;=<span class="hljs-string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="hljs-string">&#x27;0&#x27;</span>) s=s*<span class="hljs-number">10</span>+ch-<span class="hljs-string">&#x27;0&#x27;</span>;<span class="hljs-comment">//累计</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;.&#x27;</span>)&#123;<br>            n.<span class="hljs-built_in">push</span>(s);<span class="hljs-comment">//压栈</span><br>            s=<span class="hljs-number">0</span>;<span class="hljs-comment">//s清零</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ch!=<span class="hljs-string">&#x27;@&#x27;</span>)&#123;<br>            <span class="hljs-type">int</span> a1=n.<span class="hljs-built_in">top</span>();n.<span class="hljs-built_in">pop</span>();<span class="hljs-type">int</span> a2=n.<span class="hljs-built_in">top</span>();n.<span class="hljs-built_in">pop</span>();<span class="hljs-comment">//弹出栈顶两个元素</span><br>            <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;+&#x27;</span>) n.<span class="hljs-built_in">push</span>(a1+a2);<br>            <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;-&#x27;</span>) n.<span class="hljs-built_in">push</span>(a2-a1);<br>            <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;*&#x27;</span>) n.<span class="hljs-built_in">push</span>(a1*a2);<br>            <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;/&#x27;</span>) n.<span class="hljs-built_in">push</span>(a2/a1);<br>            <span class="hljs-comment">//压入结果</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>    &#125;<br>    cout&lt;&lt;n.<span class="hljs-built_in">top</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="P1241-括号序列"><a href="#P1241-括号序列" class="headerlink" title="P1241 括号序列"></a>P1241 括号序列</h1><h2 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h2><p>定义如下规则：</p><ol><li>空串是「平衡括号序列」</li><li>若字符串 $S$ 是「平衡括号序列」，那么 $\texttt{[}S\texttt]$ 和 $\texttt{(}S\texttt)$ 也都是「平衡括号序列」</li><li>若字符串 $A$ 和 $B$ 都是「平衡括号序列」，那么 $AB$（两字符串拼接起来）也是「平衡括号序列」。</li></ol><p>例如，下面的字符串都是平衡括号序列：</p><ul><li><code>()</code>，<code>[]</code>，<code>(())</code>，<code>([])</code>，<code>()[]</code>，<code>()[()]</code></li></ul><p>而以下几个则不是：</p><ul><li><code>(</code>，<code>[</code>，<code>]</code>，<code>)(</code>，<code>())</code>，<code>([()</code></li></ul><p>现在，给定一个仅由 <code>(</code>，<code>)</code>，<code>[</code>，<code>]</code>构成的字符串 $s$，请你按照如下的方式给字符串中每个字符配对：</p><ol><li>从左到右扫描整个字符串。</li><li>对于当前的字符，如果它是一个右括号，考察它与它左侧离它<strong>最近</strong>的<strong>未匹配</strong>的的左括号。如果该括号与之对应（即小括号匹配小括号，中括号匹配中括号），则将二者配对。如果左侧未匹配的左括号不存在或与之不对应，则其配对失败。</li></ol><p>配对结束后，对于 $s$ 中全部未配对的括号，请你在其旁边添加一个字符，使得该括号和新加的括号匹配。</p><h2 id="输入格式-7"><a href="#输入格式-7" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入只有一行一个字符串，表示 $s$。</p><h2 id="输出格式-7"><a href="#输出格式-7" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一行一个字符串表示你的答案。</p><h2 id="样例-1-7"><a href="#样例-1-7" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-7"><a href="#样例输入-1-7" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">([()<br></code></pre></td></tr></table></figure><h3 id="样例输出-1-7"><a href="#样例输出-1-7" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">()[]()<br></code></pre></td></tr></table></figure><h2 id="样例-2-1"><a href="#样例-2-1" class="headerlink" title="样例 #2"></a>样例 #2</h2><h3 id="样例输入-2-1"><a href="#样例输入-2-1" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">([)</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-2-1"><a href="#样例输出-2-1" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h3><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">()[]()<br></code></pre></td></tr></table></figure><h2 id="提示-5"><a href="#提示-5" class="headerlink" title="提示"></a>提示</h2><h3 id="数据规模与约定"><a href="#数据规模与约定" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h3><p>对于全部的测试点，保证 $s$ 的长度不超过 $100$​，且只含  <code>(</code>，<code>)</code>，<code>[</code>，<code>]</code> 四种字符。</p><h2 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li><p>参考思路<br>原题目：扫描一遍原序列，对每一个右括号，找到在它左边最靠近它的左括号匹配，如果没有就放弃。</p></li><li><p>翻译：扫描一遍原序列，当找到一个右括号（即找到一个 ‘ ) ‘ 或者 ‘ ] ‘ 时），以它为起点向左找，找到一个没被标记成功匹配的左括号（即找到一个 ‘ ( ‘ 或者 ‘ [ ‘ ），如果两者匹配的话，标记它们成功匹配，如果不匹配，或者找不到左括号的话，不做任何标记。</p></li><li><p>原题目：在以这种方式把原序列匹配完成后，把剩下的未匹配的括号补全。</p></li><li><p>翻译：上面扫描一遍标记完成功匹配的括号之后，扫描一遍序列，对于标记过的括号，则直接输出；对于没有标记的括号，则补全成对输出</p></li><li><p>举例：如果有个 ‘ [ ‘ 或 ‘ ] ‘ 没被标记匹配，则输出 [ ]</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br> <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-type">int</span> a[<span class="hljs-number">105</span>]; <span class="hljs-comment">// 标记</span><br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i,j;<br>    string s;<br>    cin &gt;&gt; s;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;s.<span class="hljs-built_in">length</span>(); i++) &#123;<br>        <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;)&#x27;</span>) &#123; <span class="hljs-comment">// 找到了右括号</span><br>            <span class="hljs-keyword">for</span> (j=i<span class="hljs-number">-1</span>; j&gt;=<span class="hljs-number">0</span>; j--) &#123;<br>                <span class="hljs-keyword">if</span> (s[j] == <span class="hljs-string">&#x27;(&#x27;</span> <span class="hljs-keyword">and</span> a[j] == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 找到了没被匹配过的左括号且匹配成功</span><br>                    a[i] = a[j] = <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[j] == <span class="hljs-string">&#x27;[&#x27;</span> <span class="hljs-keyword">and</span> a[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 找到了左括号但匹配失败</span><br>            &#125;<br>            <span class="hljs-comment">// 找不到左括号，不做任何操作</span><br>        &#125;<br>        <span class="hljs-comment">// 下面同理</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;]&#x27;</span>) &#123;<br>            <span class="hljs-keyword">for</span> (j=i<span class="hljs-number">-1</span>; j&gt;=<span class="hljs-number">0</span>; j--) &#123;<br>                <span class="hljs-keyword">if</span> (s[j] == <span class="hljs-string">&#x27;[&#x27;</span> <span class="hljs-keyword">and</span> a[j] == <span class="hljs-number">0</span>) &#123;<br>                    a[i] = a[j] = <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[j] == <span class="hljs-string">&#x27;(&#x27;</span> <span class="hljs-keyword">and</span> a[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;s.<span class="hljs-built_in">length</span>(); i++) &#123;<br>        <span class="hljs-keyword">if</span> (a[i] == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 没有匹配则成对输出</span><br>            <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;(&#x27;</span> <span class="hljs-keyword">or</span> s[i] == <span class="hljs-string">&#x27;)&#x27;</span>) cout &lt;&lt; <span class="hljs-string">&quot;()&quot;</span>;<br>            <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;[]&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> cout &lt;&lt; s[i]; <span class="hljs-comment">// 匹配成功则直接输出</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="P1044-NOIP2003-普及组-栈"><a href="#P1044-NOIP2003-普及组-栈" class="headerlink" title="P1044 [NOIP2003 普及组] 栈"></a>P1044 [NOIP2003 普及组] 栈</h1><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>栈是计算机中经典的数据结构，简单的说，栈就是限制在一端进行插入删除操作的线性表。</p><p>栈有两种最重要的操作，即 pop（从栈顶弹出一个元素）和 push（将一个元素进栈）。</p><p>栈的重要性不言自明，任何一门数据结构的课程都会介绍栈。宁宁同学在复习栈的基本概念时，想到了一个书上没有讲过的问题，而他自己无法给出答案，所以需要你的帮忙。</p><h2 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="/./../images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%B7%E9%A2%98%E9%A2%98%E5%8D%95/5qxy9fz2.png"></p><p>宁宁考虑的是这样一个问题：一个操作数序列，$1,2,\ldots ,n$（图示为 1 到 3 的情况），栈 A 的深度大于 $n$。</p><p>现在可以进行两种操作，</p><ol><li>将一个数，从操作数序列的头端移到栈的头端（对应数据结构栈的 push 操作）</li><li>将一个数，从栈的头端移到输出序列的尾端（对应数据结构栈的 pop 操作）</li></ol><p>使用这两种操作，由一个操作数序列就可以得到一系列的输出序列，下图所示为由 <code>1 2 3</code> 生成序列 <code>2 3 1</code> 的过程。</p><p><img src="/./../images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%B7%E9%A2%98%E9%A2%98%E5%8D%95/8uwv2pa2.png"></p><p>（原始状态如上图所示）</p><p>你的程序将对给定的 $n$，计算并输出由操作数序列 $1,2,\ldots,n$ 经过操作可能得到的输出序列的总数。</p><h2 id="输入格式-8"><a href="#输入格式-8" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入文件只含一个整数 $n$（$1 \leq n \leq 18$）。</p><h2 id="输出格式-8"><a href="#输出格式-8" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出文件只有一行，即可能输出序列的总数目。</p><h2 id="样例-1-8"><a href="#样例-1-8" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-8"><a href="#样例输入-1-8" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3<br></code></pre></td></tr></table></figure><h3 id="样例输出-1-8"><a href="#样例输出-1-8" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">5<br></code></pre></td></tr></table></figure><h2 id="提示-6"><a href="#提示-6" class="headerlink" title="提示"></a>提示</h2><p><strong>【题目来源】</strong></p><p>NOIP 2003 普及组第三题</p><h2 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h2><p>思路：先定义数组和变量，然后令f[0]&#x3D;1,f[1]&#x3D;1,默认f[0]&#x3D;1纯粹是为了满足表达式计算，无实际意义；然后用卡特兰数递推式方可求出从2开始到n的各个f值，最后输出f[n]即可.<br>    **卡特兰数原理：令h(0)&#x3D;1,h(1)&#x3D;1，catalan数满足递推式:h(n)&#x3D; h(0)<em>h(n-1)+h(1)<em>h(n-2) + … + h(n-1)h(0) (n&gt;&#x3D;2)</em></em></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">1001</span>;<br><span class="hljs-type">int</span> f[MAXN],n;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    f[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>, f[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//从2到n按规律递推</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>;i &lt;= n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt; i;j++)<br>            f[i] += f[j] * f[i-j<span class="hljs-number">-1</span>];<span class="hljs-comment">//卡特兰数递推式</span><br>    cout&lt;&lt;f[n];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="P6033-NOIP2004-提高组-合并果子-加强版"><a href="#P6033-NOIP2004-提高组-合并果子-加强版" class="headerlink" title="P6033 [NOIP2004 提高组] 合并果子 加强版"></a>P6033 [NOIP2004 提高组] 合并果子 加强版</h1><h2 id="题目背景-1"><a href="#题目背景-1" class="headerlink" title="题目背景"></a>题目背景</h2><p>本题除【数据范围与约定】外与 <a href="https://www.luogu.com.cn/problem/P1090">P1090</a> <strong>完  全  一  致</strong>。</p><h2 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个果园里，多多已经将所有的果子打了下来，而且按果子的不同种类分成了不同的堆。多多决定把所有的果子合成一堆。</p><p>每一次合并，多多可以把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和。可以看出，所有的果子经过 $(n - 1)$ 次合并之后， 就只剩下一堆了。多多在合并果子时总共消耗的体力等于每次合并所耗体力之和。</p><p>因为还要花大力气把这些果子搬回家，所以多多在合并果子时要尽可能地节省体力。假定每个果子重量都为 $1$，并且已知果子的种类数和每种果子的数目，你的任务是设计出合并的次序方案，使多多耗费的体力最少，并输出这个最小的体力耗费值。</p><p>例如有 $3$ 堆果子，数目依次为 $1,<del>2,</del>9$。可以先将 $1$、$2$ 堆合并，新堆数目为 $3$，耗费体力为 $3$。接着，将新堆与原先的第三堆合并，又得到新的堆，数目为 $12$，耗费体力为 $12$。所以多多总共耗费体力为 $3+12&#x3D;15$。可以证明 $15$ 为最小的体力耗费值。</p><h2 id="输入格式-9"><a href="#输入格式-9" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入的第一行是一个整数 $n$，代表果子的堆数。<br>输入的第二行有 $n$ 个用空格隔开的整数，第 $i$ 个整数代表第 $i$ 堆果子的个数 $a_i$。</p><h2 id="输出格式-9"><a href="#输出格式-9" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一行一个整数，表示最小耗费的体力值。</p><h2 id="样例-1-9"><a href="#样例-1-9" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-9"><a href="#样例输入-1-9" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-9"><a href="#样例输出-1-9" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">15<br></code></pre></td></tr></table></figure><h2 id="提示-7"><a href="#提示-7" class="headerlink" title="提示"></a>提示</h2><p><strong>【数据规模与约定】</strong></p><p><strong>本题采用多测试点捆绑测试，共有四个子任务</strong>。</p><ul><li>Subtask 1（10 points）：$1 \leq n \leq 8$。</li><li>Subtask 2（20 points）：$1 \leq n \leq 10^3$。</li><li>Subtask 3（30 points）：$1 \leq n \leq 10^5$。</li><li>Subtask 4（40 points）：$1 \leq n \leq 10^7$。</li></ul><p>对于全部的测试点，保证 $1 \leq a_i \leq 10^5$。</p><p><strong>【提示】</strong></p><ul><li>请注意常数因子对程序效率造成的影响。</li><li>请使用类型合适的变量来存储本题的结果。</li><li>本题输入规模较大，请注意数据读入对程序效率造成的影响。</li></ul><h2 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h2><p>参考文章：<a href="https://blog.csdn.net/qq_46105170/article/details/125371722?ops_request_misc=%7B%22request_id%22:%22171423979916800180663041%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171423979916800180663041&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-125371722-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=P6033&spm=1018.2226.3001.4187">【洛谷】P6033 合并果子 加强版（配数学证明）_洛谷6033测试数据-CSDN博客</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>, N = <span class="hljs-number">1e7</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, a[M];<br><span class="hljs-type">long</span> res;<br><span class="hljs-type">long</span> q1[N], q2[N];<br><span class="hljs-type">int</span> hh1, tt1, hh2, tt2;<br><br><span class="hljs-comment">// 快读</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;x)</span> </span>&#123;<br>  <span class="hljs-type">int</span> si = <span class="hljs-number">1</span>;<br>  x = <span class="hljs-number">0</span>;<br>  <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>  <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) si = <span class="hljs-number">-1</span>, c = <span class="hljs-built_in">getchar</span>();<br>  <span class="hljs-keyword">for</span> (; <span class="hljs-string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>; c = <span class="hljs-built_in">getchar</span>())<br>    x = x * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>;<br>  x *= si;<br>&#125;<br><br><span class="hljs-comment">// 两个队列里取队头最小值</span><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-title">find_min</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">long</span> x;<br>  <span class="hljs-keyword">if</span> (hh2 == tt2 || hh1 &lt; tt1 &amp;&amp; q1[hh1] &lt; q2[hh2]) x = q1[hh1++];<br>  <span class="hljs-keyword">else</span> x = q2[hh2++];<br>  <span class="hljs-keyword">return</span> x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-built_in">read</span>(n);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, x; i &lt;= n; i++) &#123;<br>    <span class="hljs-built_in">read</span>(x);<br>    a[x]++;<br>  &#125;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; M; i++) <span class="hljs-keyword">while</span> (a[i]) a[i]--, q1[tt1++] = i;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>    <span class="hljs-type">long</span> x = <span class="hljs-built_in">find_min</span>(), y = <span class="hljs-built_in">find_min</span>();<br>    res += x + y;<br>    q2[tt2++] = x + y;<br>  &#125;<br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%ld\n&quot;</span>, res);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="P3370-【模板】字符串哈希"><a href="#P3370-【模板】字符串哈希" class="headerlink" title="P3370 【模板】字符串哈希"></a>P3370 【模板】字符串哈希</h1><h2 id="题目描述-10"><a href="#题目描述-10" class="headerlink" title="题目描述"></a>题目描述</h2><p>如题，给定 $N$ 个字符串（第 $i$ 个字符串长度为 $M_i$，字符串内包含数字、大小写字母，大小写敏感），请求出 $N$ 个字符串中共有多少个不同的字符串。</p><p><strong>友情提醒：如果真的想好好练习哈希的话，请自觉。</strong></p><h2 id="输入格式-10"><a href="#输入格式-10" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行包含一个整数 $N$，为字符串的个数。</p><p>接下来 $N$ 行每行包含一个字符串，为所提供的字符串。</p><h2 id="输出格式-10"><a href="#输出格式-10" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出包含一行，包含一个整数，为不同的字符串个数。</p><h2 id="样例-1-10"><a href="#样例-1-10" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-10"><a href="#样例输入-1-10" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-number">5</span><br><span class="hljs-keyword">abc</span><br>aaaa<br><span class="hljs-keyword">abc</span><br>abcc<br><span class="hljs-number">12345</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-10"><a href="#样例输出-1-10" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">4<br></code></pre></td></tr></table></figure><h2 id="提示-8"><a href="#提示-8" class="headerlink" title="提示"></a>提示</h2><p>对于 $30%$ 的数据：$N\leq 10$，$M_i≈6$，$Mmax\leq 15$。</p><p>对于 $70%$ 的数据：$N\leq 1000$，$M_i≈100$，$Mmax\leq 150$。</p><p>对于 $100%$ 的数据：$N\leq 10000$，$M_i≈1000$，$Mmax\leq 1500$。</p><p>样例说明：</p><p>样例中第一个字符串(abc)和第三个字符串(abc)是一样的，所以所提供字符串的集合为{aaaa,abc,abcc,12345}，故共计4个不同的字符串。</p><p>Tip：<br>感兴趣的话，你们可以先看一看以下三题：</p><p>BZOJ3097：<a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3097">http://www.lydsy.com/JudgeOnline/problem.php?id=3097</a></p><p>BZOJ3098：<a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3098">http://www.lydsy.com/JudgeOnline/problem.php?id=3098</a></p><p>BZOJ3099：<a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3099">http://www.lydsy.com/JudgeOnline/problem.php?id=3099</a></p><p>如果你仔细研究过了（或者至少仔细看过AC人数的话），我想你一定会明白字符串哈希的正确姿势的^_^</p><h2 id="提示-9"><a href="#提示-9" class="headerlink" title="提示"></a>提示</h2><p>对于 $30%$ 的数据：$N\leq 10$，$M_i≈6$，$Mmax\leq 15$。</p><p>对于 $70%$ 的数据：$N\leq 1000$，$M_i≈100$，$Mmax\leq 150$。</p><p>对于 $100%$ 的数据：$N\leq 10000$，$M_i≈1000$，$Mmax\leq 1500$。</p><p>样例说明：</p><p>样例中第一个字符串(abc)和第三个字符串(abc)是一样的，所以所提供字符串的集合为{aaaa,abc,abcc,12345}，故共计4个不同的字符串。</p><p>Tip：<br>感兴趣的话，你们可以先看一看以下三题：</p><p>BZOJ3097：<a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3097">http://www.lydsy.com/JudgeOnline/problem.php?id=3097</a></p><p>BZOJ3098：<a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3098">http://www.lydsy.com/JudgeOnline/problem.php?id=3098</a></p><p>BZOJ3099：<a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3099">http://www.lydsy.com/JudgeOnline/problem.php?id=3099</a></p><p>如果你仔细研究过了（或者至少仔细看过AC人数的话），我想你一定会明白字符串哈希的正确姿势的^_^</p><h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>a=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">input</span>() <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n))<br>a.sort()<br>cout=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> a:<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(a)==<span class="hljs-number">1</span>:<br>        cout+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> a[<span class="hljs-number">0</span>]!=a[<span class="hljs-number">1</span>]:<br>        cout+=<span class="hljs-number">1</span><br>        a.pop(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">else</span>:<br>        a.pop(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(cout)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>lst = [<span class="hljs-built_in">input</span>() <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>lst.sort()<br> <br>count = n<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n):<br>    <span class="hljs-keyword">if</span> lst[i] == lst[i - <span class="hljs-number">1</span>]:<br>        count -= <span class="hljs-number">1</span><br> <br><span class="hljs-built_in">print</span>(count)<br></code></pre></td></tr></table></figure><h2 id="解题思路-9"><a href="#解题思路-9" class="headerlink" title="解题思路"></a>解题思路</h2><p><a href="https://blog.csdn.net/louisdlee/article/details/134437128?ops_request_misc=%7B%22request_id%22:%22171423993116800184189562%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171423993116800184189562&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-134437128-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=P3370&spm=1018.2226.3001.4187">《洛谷深入浅出基础篇》 p3370字符串哈希——hash表_洛谷p3370-CSDN博客</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> LL;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">1007</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> base = <span class="hljs-number">117</span>;<br><br>vector&lt;string&gt; linker[mod + <span class="hljs-number">2</span>];<br>string s;<br><span class="hljs-type">int</span> ans;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert1</span><span class="hljs-params">(string s)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> hash = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); i++)<br>&#123;<br>hash = (hash*<span class="hljs-number">1ll</span>*base + (LL)s[i]) % mod;<br>&#125;<br> <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; linker[hash].<span class="hljs-built_in">size</span>(); i++)<br><span class="hljs-keyword">if</span> (linker[hash][i] == s)<span class="hljs-keyword">return</span>;<br>linker[hash].<span class="hljs-built_in">push_back</span>(s);<br>ans++;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">while</span> (n--)<br>&#123;<br>cin &gt;&gt; s;<br><span class="hljs-built_in">insert1</span>(s);<br>&#125;<br>cout &lt;&lt; ans;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="P5250-【深基17-例5】木材仓库"><a href="#P5250-【深基17-例5】木材仓库" class="headerlink" title="P5250 【深基17.例5】木材仓库"></a>P5250 【深基17.例5】木材仓库</h1><h2 id="题目描述-11"><a href="#题目描述-11" class="headerlink" title="题目描述"></a>题目描述</h2><p>博艾市有一个木材仓库，里面可以存储各种长度的木材，但是保证没有两个木材的长度是相同的。作为仓库负责人，你有时候会进货，有时候会出货，因此需要维护这个库存。有不超过 100000 条的操作：</p><ul><li>进货，格式<code>1 Length</code>：在仓库中放入一根长度为 Length(不超过 $10^9$) 的木材。如果已经有相同长度的木材那么输出<code>Already Exist</code>。</li><li>出货，格式<code>2 Length</code>：从仓库中取出长度为 Length 的木材。如果没有刚好长度的木材，取出仓库中存在的和要求长度最接近的木材。如果有多根木材符合要求，取出比较短的一根。输出取出的木材长度。如果仓库是空的，输出<code>Empty</code>。</li></ul><h2 id="输入格式-11"><a href="#输入格式-11" class="headerlink" title="输入格式"></a>输入格式</h2><h2 id="输出格式-11"><a href="#输出格式-11" class="headerlink" title="输出格式"></a>输出格式</h2><h2 id="样例-1-11"><a href="#样例-1-11" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-11"><a href="#样例输入-1-11" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">7</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-11"><a href="#样例输出-1-11" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-number">3</span><br><span class="hljs-number">1</span><br><span class="hljs-number">5</span><br><span class="hljs-built_in">Empty</span><br></code></pre></td></tr></table></figure><h2 id="解题答案"><a href="#解题答案" class="headerlink" title="解题答案"></a>解题答案</h2><p>python版</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> bisect <span class="hljs-keyword">import</span> bisect_left  <br>  <br>s = <span class="hljs-built_in">set</span>()  <br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())  <br>  <br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):  <br>    k, l = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())  <br>      <br>    <span class="hljs-keyword">if</span> k == <span class="hljs-number">1</span>:  <br>        <span class="hljs-keyword">if</span> l <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> s:  <br>            s.add(l)  <br>        <span class="hljs-keyword">else</span>:  <br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Already Exist&quot;</span>)  <br>    <span class="hljs-keyword">else</span>:  <br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> s:  <br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Empty&quot;</span>)  <br>            <span class="hljs-keyword">continue</span>  <br>          <br>        <span class="hljs-comment"># Python的set没有lower_bound方法，但我们可以使用bisect_left来找到最接近l的元素索引  </span><br>        <span class="hljs-comment"># 首先将set转换为sorted list  </span><br>        sorted_s = <span class="hljs-built_in">sorted</span>(s)  <br>        index = bisect_left(sorted_s, l)  <br>          <br>        <span class="hljs-keyword">if</span> index == <span class="hljs-number">0</span>:  <br>            <span class="hljs-built_in">print</span>(sorted_s[index])  <br>            s.remove(sorted_s[index])  <br>            <span class="hljs-keyword">continue</span>  <br>          <br>        <span class="hljs-keyword">if</span> index == <span class="hljs-built_in">len</span>(sorted_s):  <br>            index -= <span class="hljs-number">1</span>  <br>            <span class="hljs-built_in">print</span>(sorted_s[index])  <br>            s.remove(sorted_s[index])  <br>            <span class="hljs-keyword">continue</span>  <br>          <br>        <span class="hljs-comment"># 找出离l最近的两个元素  </span><br>        prev = sorted_s[index - <span class="hljs-number">1</span>]  <br>        curr = sorted_s[index]  <br>          <br>        <span class="hljs-comment"># 根据差值大小决定删除哪个元素  </span><br>        <span class="hljs-keyword">if</span> l - prev &lt;= curr - l:  <br>            <span class="hljs-built_in">print</span>(prev)  <br>            s.remove(prev)  <br>        <span class="hljs-keyword">else</span>:  <br>            <span class="hljs-built_in">print</span>(curr)  <br>            s.remove(curr)<br></code></pre></td></tr></table></figure><p>c语言版</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IOS ios::sync_with_stdio(0),cin.tie(0),cout.tie(0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&quot;\n&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> lb lower_bound</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ub upper_bound</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">1e12</span>+<span class="hljs-number">10</span>;<br>set&lt;<span class="hljs-type">int</span>&gt; s;<span class="hljs-comment">//存放木材 </span><br><span class="hljs-type">int</span> num=<span class="hljs-number">0</span>;<span class="hljs-comment">//目前有几个木材 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> op,x;<br>cin&gt;&gt;op&gt;&gt;x;<br><span class="hljs-keyword">if</span>(op==<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">count</span>(x))<br>  cout&lt;&lt;<span class="hljs-string">&quot;Already Exist&quot;</span>&lt;&lt;endl;<br><span class="hljs-keyword">else</span><br>  s.<span class="hljs-built_in">insert</span>(x);<span class="hljs-comment">//存放长度为x木材  </span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op==<span class="hljs-number">2</span>)&#123;<br><span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">size</span>()==<span class="hljs-number">2</span>)<br>  cout&lt;&lt;<span class="hljs-string">&quot;Empty&quot;</span>&lt;&lt;endl;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">auto</span> k=s.<span class="hljs-built_in">lb</span>(x);<br><span class="hljs-keyword">if</span>(*k==x)&#123;<span class="hljs-comment">//有刚好长度的木材 </span><br>cout&lt;&lt;x&lt;&lt;endl;<br>s.<span class="hljs-built_in">erase</span>(k);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">auto</span> k1=s.<span class="hljs-built_in">lb</span>(x),k2=--s.<span class="hljs-built_in">lb</span>(x);<span class="hljs-comment">//找到长度接近x的木材 </span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(*k1-x)&lt;<span class="hljs-built_in">abs</span>(*k2-x))&#123; <br>cout&lt;&lt;*k1&lt;&lt;endl;<br>s.<span class="hljs-built_in">erase</span>(k1); <br>&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//取最接近x且比较短的一根木材</span><br>cout&lt;&lt;*k2&lt;&lt;endl;<br>s.<span class="hljs-built_in">erase</span>(k2); <br>&#125;<br>&#125;<br>&#125;<br>&#125; <br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>IOS;<br>s.<span class="hljs-built_in">insert</span>(INF),s.<span class="hljs-built_in">insert</span>(-INF);<br><span class="hljs-type">int</span> T=<span class="hljs-number">1</span>;<br>cin&gt;&gt;T;<br><span class="hljs-keyword">while</span>(T--)&#123;<br><span class="hljs-built_in">solve</span>();<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="P5266-【深基17-例6】学籍管理"><a href="#P5266-【深基17-例6】学籍管理" class="headerlink" title="P5266 【深基17.例6】学籍管理"></a>P5266 【深基17.例6】学籍管理</h1><h2 id="题目描述-12"><a href="#题目描述-12" class="headerlink" title="题目描述"></a>题目描述</h2><p>您要设计一个学籍管理系统，最开始学籍数据是空的，然后该系统能够支持下面的操作（不超过 $10^5$ 条）：</p><ul><li>插入与修改，格式<code>1 NAME SCORE</code>：在系统中插入姓名为 NAME(由字母和数字组成不超过 20 个字符的字符串，区分大小写) ，分数为 $\texttt{SCORE}$（$0&lt;\texttt{SCORE}&lt;2^{31}$） 的学生。如果已经有同名的学生则更新这名学生的成绩为 SCORE。如果成功插入或者修改则输出<code>OK</code>。</li><li>查询，格式<code>2 NAME</code>：在系统中查询姓名为 NAME 的学生的成绩。如果没能找到这名学生则输出<code>Not found</code>，否则输出该生成绩。</li><li>删除，格式<code>3 NAME</code>：在系统中删除姓名为 NAME 的学生信息。如果没能找到这名学生则输出<code>Not found</code>，否则输出<code>Deleted successfully</code>。</li><li>汇总，格式<code>4</code>：输出系统中学生数量。</li></ul><h2 id="输入格式-12"><a href="#输入格式-12" class="headerlink" title="输入格式"></a>输入格式</h2><h2 id="输出格式-12"><a href="#输出格式-12" class="headerlink" title="输出格式"></a>输出格式</h2><h2 id="样例-1-12"><a href="#样例-1-12" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-12"><a href="#样例输入-1-12" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span>lxl <span class="hljs-number">10</span><br><span class="hljs-symbol">2 </span>lxl<br><span class="hljs-symbol">3 </span>lxl<br><span class="hljs-symbol">2 </span>lxl<br><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-12"><a href="#样例输出-1-12" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">OK</span><br><span class="hljs-number">10</span><br><span class="hljs-variable">Deleted</span> <span class="hljs-variable">successfully</span><br><span class="hljs-built_in">Not</span> <span class="hljs-variable">found</span><br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="解题思路-10"><a href="#解题思路-10" class="headerlink" title="解题思路"></a>解题思路</h3><p>题目要求对字符串进行存储、修改、查询、删除、统计数目等操作，考虑到直接对字符串进行上述操作在代码实现和时间复杂度上都不够优，从而想到利用哈希建立映射关系，对哈希函数的返回值进行操作。</p><p><strong>代码：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,sc,k,num,haxh;<span class="hljs-comment">//n为操作总数，sc为学生分数，k为操作格式，num记录系统中的人数，haxh用于存储字符串hash值。 </span><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> base=<span class="hljs-number">173</span>,mod=<span class="hljs-number">19260817</span>;<span class="hljs-comment">//哈希函数的基数和模数。 </span><br><span class="hljs-type">char</span> s[<span class="hljs-number">114</span>];<span class="hljs-comment">//学生姓名。 </span><br><span class="hljs-type">int</span> b[<span class="hljs-number">30000000</span>];<span class="hljs-comment">//利用数组进行操作。 </span><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">hs</span><span class="hljs-params">(<span class="hljs-type">char</span> str[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> len=<span class="hljs-built_in">strlen</span>(str),ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)<br>ans=(ans*base+(<span class="hljs-type">long</span> <span class="hljs-type">long</span>)str[i])%mod;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<span class="hljs-comment">//通过哈希函数将字符串映射到 int 类型上。 </span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-keyword">while</span>(n--)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;k);<br><span class="hljs-keyword">if</span>(k&lt;<span class="hljs-number">4</span>)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,s);<span class="hljs-comment">//前三种操作需要读入学生姓名。 </span><br>haxh=<span class="hljs-built_in">hs</span>(s);<span class="hljs-comment">//计算学生姓名的hash值。 </span><br><span class="hljs-keyword">if</span>(k==<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;sc);<br><span class="hljs-keyword">if</span>(b[haxh]&lt;=<span class="hljs-number">0</span>) <br>num++;<span class="hljs-comment">//分数小于等于0说明系统中没有该学生，学生总数加一。</span><br>b[haxh]=sc;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;OK\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(k==<span class="hljs-number">2</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(b[haxh]&gt;<span class="hljs-number">0</span>)<span class="hljs-comment">//判断系统中有无该学生的信息。 </span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,b[haxh]);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Not found\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(k==<span class="hljs-number">3</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(b[haxh]&gt;<span class="hljs-number">0</span>)<br>&#123;<br>b[haxh]=<span class="hljs-number">0</span>;<br>num--;<span class="hljs-comment">//删除该生信息。 </span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Deleted successfully\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Not found\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,num);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>当然也可以用 $STL$ 中的 $map$ 来建立映射关系，但在时间常数上要比手打哈希略大。</p><p><img src="/./../images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%B7%E9%A2%98%E9%A2%98%E5%8D%95/resize,m_lfit,h_1700,w_2205.png"></p><p>上面三次提交使用的是手打哈希，下面两次提交使用的是 $map$ ，可以明显看出 $map$ 比手打哈希要慢。</p><p><strong>代码：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,sc,k,num;<br><span class="hljs-type">char</span> s[<span class="hljs-number">114</span>];<br>map&lt;string,<span class="hljs-type">int</span>&gt;sys;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-keyword">while</span>(n--)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;k);<br><span class="hljs-keyword">if</span>(k&lt;<span class="hljs-number">4</span>)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,s);<br><span class="hljs-keyword">if</span>(k==<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;sc);<br><span class="hljs-keyword">if</span>(sys[s]&lt;=<span class="hljs-number">0</span>)<br>num++;<br>sys[s]=sc;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;OK\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(k==<span class="hljs-number">2</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(sys[s]&gt;<span class="hljs-number">0</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,sys[s]);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Not found\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(k==<span class="hljs-number">3</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(sys[s]&gt;<span class="hljs-number">0</span>)<br>&#123;<br>sys[s]=<span class="hljs-number">0</span>;<br>num--;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Deleted successfully\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Not found\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,num);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>作者：linponess    创建时间：2019-12-26 11:45:56</p><h1 id="P1102-A-B-数对"><a href="#P1102-A-B-数对" class="headerlink" title="P1102 A-B 数对"></a>P1102 A-B 数对</h1><h2 id="题目背景-2"><a href="#题目背景-2" class="headerlink" title="题目背景"></a>题目背景</h2><p>出题是一件痛苦的事情！</p><p>相同的题目看多了也会有审美疲劳，于是我舍弃了大家所熟悉的 A+B Problem，改用 A-B 了哈哈！</p><h2 id="题目描述-13"><a href="#题目描述-13" class="headerlink" title="题目描述"></a>题目描述</h2><p>给出一串正整数数列以及一个正整数 $C$，要求计算出所有满足 $A - B &#x3D; C$ 的数对的个数（不同位置的数字一样的数对算不同的数对）。</p><h2 id="输入格式-13"><a href="#输入格式-13" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入共两行。</p><p>第一行，两个正整数 $N,C$。</p><p>第二行，$N$ 个正整数，作为要求处理的那串数。</p><h2 id="输出格式-13"><a href="#输出格式-13" class="headerlink" title="输出格式"></a>输出格式</h2><p>一行，表示该串正整数中包含的满足 $A - B &#x3D; C$ 的数对的个数。</p><h2 id="样例-1-13"><a href="#样例-1-13" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-13"><a href="#样例输入-1-13" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-13"><a href="#样例输出-1-13" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3<br></code></pre></td></tr></table></figure><h2 id="提示-10"><a href="#提示-10" class="headerlink" title="提示"></a>提示</h2><p>对于 $75%$ 的数据，$1 \leq N \leq 2000$。</p><p>对于 $100%$ 的数据，$1 \leq N \leq 2 \times 10^5$，$0 \leq a_i &lt;2^{30}$，$1 \leq C &lt; 2^{30}$。</p><p>2017&#x2F;4&#x2F;29 新添数据两组</p><h2 id="解题思路-11"><a href="#解题思路-11" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="map-映照容器可以解决这一题"><a href="#map-映照容器可以解决这一题" class="headerlink" title="map 映照容器可以解决这一题"></a><strong>map 映照容器可以解决这一题</strong></h3><p>首先，我们来了解一下 map 是个什么东西：</p><ul><li>map 映照容器在头文件中定义，它的元素数据是由一个键值和一个映照数据组成的，键值和映照数据具有一一对应的关系，键值可以是数，也可以是字符。 例如：</li></ul><hr><p>键值    映照数据<br>  <span>(name)</span>     <span>(score)</span><br>   Alice        <span>98</span><br>   Mary        <span>96</span><br>   <span>156</span>        <span>66</span></p><hr><p>在没有指定比较函数时，元素是从小到大插入的。比较函数只对键值进行比较，元素的各项数据可以通过键值检索出来。</p><hr><p>对于这一道题，我们可以把 A-B&#x3D;C 改成 B+C&#x3D;A，再通过 map 进行映照，就可以得出答案。</p><p><strong>code:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span><span class="hljs-comment">//万能头文件,不用调用头文件&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> n,c,co=<span class="hljs-number">0</span>; <span class="hljs-comment">//要开long long,否则会 WA 一个数据点 </span><br>    cin&gt;&gt;n&gt;&gt;c; <br>    <span class="hljs-type">int</span> a[n+<span class="hljs-number">1</span>];<br>    map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; b;<span class="hljs-comment">//键值和映照数据都是 int 类型</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++) &#123; <br>        cin&gt;&gt;a[i]; b[a[i]]++;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++) <br>        co+=b[a[i]+c];<span class="hljs-comment">//反向思维,枚举 B+C </span><br>    cout&lt;&lt;co&lt;&lt;endl; <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125;<br></code></pre></td></tr></table></figure><p>作者：onepeople666    创建时间：2020-02-04 13:12:37</p><p>以上是洛谷题解中的一种C++做法，那么对于这个问题，肯定要使用自己熟悉的语言来进行实现。</p><h3 id="python如何解决这一个问题？"><a href="#python如何解决这一个问题？" class="headerlink" title="python如何解决这一个问题？"></a>python如何解决这一个问题？</h3><h4 id="常规思路：遍历"><a href="#常规思路：遍历" class="headerlink" title="常规思路：遍历"></a>常规思路：遍历</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py">n,c=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>nums=<span class="hljs-built_in">list</span>=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>count_dict=&#123;&#125;<br>pair_count=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> nums:<br>    <span class="hljs-keyword">if</span> num -c <span class="hljs-keyword">in</span> count_dict:<br>        pair_count +=count_dict[num -c]<br>    count_dict[num] =count_dict.get(num,<span class="hljs-number">0</span>) +<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(pair_count)<br></code></pre></td></tr></table></figure><p>虽然确实符合思维逻辑，但是超时了。</p><p>那就使用算法，使用二分算法比较符合当前的情况，在python中，可以使用bisect库来实现。</p><h4 id="二分实现："><a href="#二分实现：" class="headerlink" title="二分实现："></a>二分实现：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> bisect<br>n,c = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>lst0 = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>lst0.sort() <span class="hljs-comment">#此方法用到了二分查找,所以需要先对列表进行排序</span><br>lst1 = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    lst1[i] = lst0[i]-c<br>count = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    x = bisect.bisect_left (lst0,lst1[i])<br>    y = bisect.bisect_right(lst0,lst1[i])<br>    count += y-x<br><span class="hljs-built_in">print</span>(count)<br></code></pre></td></tr></table></figure><h3 id="知识点补充（bisect库）"><a href="#知识点补充（bisect库）" class="headerlink" title="知识点补充（bisect库）"></a>知识点补充（bisect库）</h3><h4 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1 基础知识"></a>1 基础知识</h4><p><strong>前提：列表有序！！！</strong></p><p><a href="https://so.csdn.net/so/search?q=bisect&spm=1001.2101.3001.7020">bisect</a>()和bisect_right()等同，那下面就介绍bisect_left()和bisec_right()的区别！</p><p>用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">index1 = bisect(ls, x)   <span class="hljs-comment">#第1个参数是列表，第2个参数是要查找的数，返回值为索引</span><br>index2 = bisect_left(ls, x)<br>index3 = bisec_right(ls, x)<br></code></pre></td></tr></table></figure><p>bisect.bisect和bisect.bisect_right返回大于x的第一个下标(相当于C++中的upper_bound)，bisect.bisect_left返回大于等于x的第一个下标(相当于C++中的lower_bound)。</p><p>case1<br>如果列表中没有元素x，那么bisect_left(ls, x)和bisec_right(ls, x)返回相同的值，该值是x在ls中“<strong>合适的插入点索引，使得数组有序</strong>”。此时，ls[index2] &gt; x，ls[index3] &gt; x。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> bisect<br>ls = [<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">13</span>,<span class="hljs-number">17</span>]<br>index1 = bisect.bisect(ls,<span class="hljs-number">7</span>)<br>index2 = bisect.bisect_left(ls,<span class="hljs-number">7</span>)<br>index3 = bisect.bisect_right(ls,<span class="hljs-number">7</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;index1 = &#123;&#125;, index2 = &#123;&#125;, index3 = &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(index1, index2, index3))<br></code></pre></td></tr></table></figure><p>程序运行结果为，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">index1 = <span class="hljs-number">2</span>, index2 = <span class="hljs-number">2</span>, index3 = <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>case2<br>如果列表中只有一个元素等于x，那么bisect_left(ls, x)的值是x在ls中的<strong>索引</strong>，ls[index2] &#x3D; x。而bisec_right(ls, x)的值是x在ls中的<strong>索引加1</strong>，ls[index3] &gt; x。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> bisect<br>ls = [<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">13</span>,<span class="hljs-number">17</span>]<br>index1 = bisect.bisect(ls,<span class="hljs-number">9</span>)<br>index2 = bisect.bisect_left(ls,<span class="hljs-number">9</span>)<br>index3 = bisect.bisect_right(ls,<span class="hljs-number">9</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;index1 = &#123;&#125;, index2 = &#123;&#125;, index3 = &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(index1, index2, index3))<br></code></pre></td></tr></table></figure><p>程序运行结果为，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">index1 = <span class="hljs-number">3</span>, index2 = <span class="hljs-number">2</span>, index3 = <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>case3<br>如果列表中存在多个元素等于x，那么bisect_left(ls, x)返回<strong>最左边的那个索引</strong>，此时ls[index2] &#x3D; x。bisect_right(ls, x)返回<strong>最右边的那个索引加1</strong>，此时ls[index3] &gt; x。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> bisect<br>ls = [<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">17</span>]<br>index1 = bisect.bisect(ls,<span class="hljs-number">5</span>)<br>index2 = bisect.bisect_left(ls,<span class="hljs-number">5</span>)<br>index3 = bisect.bisect_right(ls,<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;index1 = &#123;&#125;, index2 = &#123;&#125;, index3 = &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(index1, index2, index3))<br></code></pre></td></tr></table></figure><p>程序运行结果为，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">index1 = <span class="hljs-number">4</span>, index2 = <span class="hljs-number">1</span>, index3 = <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h4 id="2-扩展知识"><a href="#2-扩展知识" class="headerlink" title="2 扩展知识"></a>2 扩展知识</h4><p>（一）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python3">j = bisect.bisect_right(rides, start, hi = i - 1, key = lambda x : x[1])<br></code></pre></td></tr></table></figure><p><code>rides</code>：这是一个列表，已经按顺序排列。</p><p><code>start</code>：这是我们要在<code>rides</code>中查找的元素。</p><p><code>hi = i - 1</code>：这是查找的上界。具体而言，在<code>[0, hi)</code>这个左闭右开区间中，寻找满足<code>rides[x][1] &gt; start</code>且<code>x</code>最小的case，返回<code>x</code>。如果没有找到，则返回<code>hi</code>。</p><p><code>key = lambda x : x[1]</code>：这是用于比较的元素。默认情况下，<code>bisect_right</code>比较元素<code>x</code>的值，而这里表示比较元素<code>x</code>的下标等于1的元素的值（说明元素<code>x</code>是一个列表或元组等等），即<code>x[1]</code>。</p><p>参考文章：<a href="http://t.csdnimg.cn/ZdACV">http://t.csdnimg.cn/ZdACV</a></p><h1 id="P8681-蓝桥杯-2019-省-AB-完全二叉树的权值"><a href="#P8681-蓝桥杯-2019-省-AB-完全二叉树的权值" class="headerlink" title="P8681 [蓝桥杯 2019 省 AB] 完全二叉树的权值"></a>P8681 [蓝桥杯 2019 省 AB] 完全二叉树的权值</h1><h2 id="题目描述-14"><a href="#题目描述-14" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一棵包含 $N$ 个节点的完全二叉树，树上每个节点都有一个权值，按从上到下、从左到右的顺序依次是 $A_1,A_2, \cdots A_N$，如下图所示：</p><p><img src="/./../images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%B7%E9%A2%98%E9%A2%98%E5%8D%95/lq1cyfst.png"></p><p>现在小明要把相同深度的节点的权值加在一起，他想知道哪个深度的节点权值之和最大？如果有多个深度的权值和同为最大，请你输出其中最小的深度。</p><p>注：根的深度是 $1$。</p><h2 id="输入格式-14"><a href="#输入格式-14" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行包含一个整数 $N$。</p><p>第二行包含 $N$ 个整数 $A_1,A_2, \cdots, A_N$。</p><h2 id="输出格式-14"><a href="#输出格式-14" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一个整数代表答案。</p><h2 id="样例-1-14"><a href="#样例-1-14" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-14"><a href="#样例输入-1-14" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">7</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">6</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-14"><a href="#样例输出-1-14" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">2<br></code></pre></td></tr></table></figure><h2 id="提示-11"><a href="#提示-11" class="headerlink" title="提示"></a>提示</h2><p>对于所有评测用例，$1 \le N \le 10^5$，$0 \le |A_i| \le 10^5$。</p><p>蓝桥杯 2019 省赛 A 组 F 题（B 组 G 题）。</p><h1 id="P4715-【深基16-例1】淘汰赛"><a href="#P4715-【深基16-例1】淘汰赛" class="headerlink" title="P4715 【深基16.例1】淘汰赛"></a>P4715 【深基16.例1】淘汰赛</h1><h2 id="题目描述-15"><a href="#题目描述-15" class="headerlink" title="题目描述"></a>题目描述</h2><p>有 $2^n$（$n\le7$）个国家参加世界杯决赛圈且进入淘汰赛环节。已经知道各个国家的能力值，且都不相等。能力值高的国家和能力值低的国家踢比赛时高者获胜。1 号国家和 2 号国家踢一场比赛，胜者晋级。3 号国家和 4 号国家也踢一场，胜者晋级……晋级后的国家用相同的方法继续完成赛程，直到决出冠军。给出各个国家的能力值，请问亚军是哪个国家？</p><h2 id="输入格式-15"><a href="#输入格式-15" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行一个整数 $n$，表示一共 $2^n$ 个国家参赛。</p><p>第二行 $2^n$ 个整数，第 $i$ 个整数表示编号为 $i$ 的国家的能力值（$1\leq i \leq 2^n$）。</p><p>数据保证不存在平局。</p><h2 id="输出格式-15"><a href="#输出格式-15" class="headerlink" title="输出格式"></a>输出格式</h2><p>仅一个整数，表示亚军国家的编号。</p><h2 id="样例-1-15"><a href="#样例-1-15" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-15"><a href="#样例输入-1-15" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">10</span> <span class="hljs-number">5</span> <span class="hljs-number">9</span> <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-15"><a href="#样例输出-1-15" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1<br></code></pre></td></tr></table></figure><h3 id="解题答案-1"><a href="#解题答案-1" class="headerlink" title="解题答案"></a>解题答案</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>L=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>q=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> L:<br>    q.append(i)<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(q)&gt;<span class="hljs-number">2</span>:<br>    a,b=q.pop(<span class="hljs-number">0</span>),q.pop(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">if</span> a&gt;b:<br>        q.append(a)<br>    <span class="hljs-keyword">else</span>:<br>        q.append(b)<br><span class="hljs-built_in">print</span>(L.index(<span class="hljs-built_in">min</span>(q))+<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h1 id="P4913-【深基16-例3】二叉树深度"><a href="#P4913-【深基16-例3】二叉树深度" class="headerlink" title="P4913 【深基16.例3】二叉树深度"></a>P4913 【深基16.例3】二叉树深度</h1><h2 id="题目描述-16"><a href="#题目描述-16" class="headerlink" title="题目描述"></a>题目描述</h2><p>有一个 $n(n \le 10^6)$ 个结点的二叉树。给出每个结点的两个子结点编号（均不超过 $n$），建立一棵二叉树（根节点的编号为 $1$），如果是叶子结点，则输入 <code>0 0</code>。</p><p>建好这棵二叉树之后，请求出它的深度。二叉树的<strong>深度</strong>是指从根节点到叶子结点时，最多经过了几层。</p><h2 id="输入格式-16"><a href="#输入格式-16" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行一个整数 $n$，表示结点数。</p><p>之后 $n$ 行，第 $i$ 行两个整数 $l$、$r$，分别表示结点 $i$ 的左右子结点编号。若 $l&#x3D;0$ 则表示无左子结点，$r&#x3D;0$ 同理。</p><h2 id="输出格式-16"><a href="#输出格式-16" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个整数，表示最大结点深度。</p><h2 id="样例-1-16"><a href="#样例-1-16" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-16"><a href="#样例输入-1-16" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">7</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">7</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">6</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-16"><a href="#样例输出-1-16" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">4<br></code></pre></td></tr></table></figure><h3 id="解题答案-2"><a href="#解题答案-2" class="headerlink" title="解题答案"></a>解题答案</h3><p>可以使用bfs或dfs进行求解</p><h4 id="DFS搜索答案"><a href="#DFS搜索答案" class="headerlink" title="DFS搜索答案"></a>DFS搜索答案</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> sys <br>sys.setrecursionlimit(<span class="hljs-number">5000</span>)<br> <br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-keyword">global</span> longth<br>    <span class="hljs-keyword">if</span> x == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> V[x] == (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>):<br>        <span class="hljs-keyword">return</span><br>    longth = <span class="hljs-built_in">max</span>(longth, y)<br>    dfs(V[x][<span class="hljs-number">0</span>], y + <span class="hljs-number">1</span>)<br>    dfs(V[x][<span class="hljs-number">1</span>], y + <span class="hljs-number">1</span>)<br> <br> <br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>V = &#123;&#125;  <span class="hljs-comment"># 建个字典</span><br>longth = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    l, r = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    V[i + <span class="hljs-number">1</span>] = (l, r)  <span class="hljs-comment"># 塞键值对,节点数</span><br> <br>dfs(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(longth + <span class="hljs-number">1</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="BFS搜索答案"><a href="#BFS搜索答案" class="headerlink" title="BFS搜索答案"></a>BFS搜索答案</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">bfs</span>(<span class="hljs-params">n</span>):<br>    q.append(n)<br>    G[n]=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> q:<br>        x=q.pop(<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">dict</span>[x][j]!=<span class="hljs-number">0</span>:<br>                q.append(<span class="hljs-built_in">dict</span>[x][j])<br>                G[<span class="hljs-built_in">dict</span>[x][j]]=G[x]+<span class="hljs-number">1</span><br>n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>q=[]<br><span class="hljs-built_in">dict</span>=&#123;&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    l,r=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    <span class="hljs-built_in">dict</span>[i+<span class="hljs-number">1</span>]=(l,r)<br>G=[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br>bfs(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(G))<br></code></pre></td></tr></table></figure><h1 id="P1030-NOIP2001-普及组-求先序排列"><a href="#P1030-NOIP2001-普及组-求先序排列" class="headerlink" title="P1030 [NOIP2001 普及组] 求先序排列"></a>P1030 [NOIP2001 普及组] 求先序排列</h1><h2 id="题目描述-17"><a href="#题目描述-17" class="headerlink" title="题目描述"></a>题目描述</h2><p>给出一棵二叉树的中序与后序排列。求出它的先序排列。（约定树结点用不同的大写字母表示，且二叉树的节点个数 $ \le 8$）。</p><h2 id="输入格式-17"><a href="#输入格式-17" class="headerlink" title="输入格式"></a>输入格式</h2><p>共两行，均为大写字母组成的字符串，表示一棵二叉树的中序与后序排列。</p><h2 id="输出格式-17"><a href="#输出格式-17" class="headerlink" title="输出格式"></a>输出格式</h2><p>共一行一个字符串，表示一棵二叉树的先序。</p><h2 id="样例-1-17"><a href="#样例-1-17" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-17"><a href="#样例输入-1-17" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">BADC</span><br><span class="hljs-attribute">BDCA</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-17"><a href="#样例输出-1-17" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ABCD</span><br></code></pre></td></tr></table></figure><h2 id="提示-12"><a href="#提示-12" class="headerlink" title="提示"></a>提示</h2><p><strong>【题目来源】</strong></p><p>NOIP 2001 普及组第三题</p><h3 id="解题思路-12"><a href="#解题思路-12" class="headerlink" title="解题思路"></a>解题思路</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs txt">首先先序中序后序，搞懂<br>我们知道，后序是“左 右 根”<br>中序是“左 根 右”<br>所以，后序的最后一个必定是“根”<br>接着，在中序中找到这个根，它左边便是此时这个节点的左子树，右边便是这个节点的右子树，一直递归<br>为了优化，我们发现先序是“根 左 右”，<br>所以每次循环的时候打出后序的最后一个，便是这个树的“根”<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 从用户那里获取中序遍历的字符串输入  </span><br>mid = <span class="hljs-built_in">input</span>()  <br><span class="hljs-comment"># 从用户那里获取后序遍历的字符串输入  </span><br>last = <span class="hljs-built_in">input</span>()  <br><span class="hljs-comment"># 定义一个函数bf，用于构建先序遍历  </span><br><span class="hljs-comment"># 参数m表示中序遍历字符串，l表示后序遍历字符串  </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bf</span>(<span class="hljs-params">m, l</span>):  <br>    <span class="hljs-comment"># 如果中序遍历或后序遍历的字符串为空，则直接返回空字符串  </span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(l) == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">len</span>(m) == <span class="hljs-number">0</span>:  <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>  <br>    <span class="hljs-comment"># 找到后序遍历字符串最后一个字符（即根节点）在中序遍历字符串中的位置  </span><br>    k = m.index(l[-<span class="hljs-number">1</span>])  <br>    <span class="hljs-comment"># 拼接先序遍历的结果：根节点 + 左子树的先序遍历 + 右子树的先序遍历  </span><br>    <span class="hljs-comment"># 注意：左子树的中序遍历是m[0:k]，后序遍历是l[0:k]  </span><br>    <span class="hljs-comment">#       右子树的中序遍历是m[k+1:]，后序遍历是l[k:-1]（去掉根节点）  </span><br>    <span class="hljs-keyword">return</span> l[-<span class="hljs-number">1</span>] + bf(m[<span class="hljs-number">0</span>:k], l[<span class="hljs-number">0</span>:k]) + bf(m[k+<span class="hljs-number">1</span>:], l[k:-<span class="hljs-number">1</span>])  <br><span class="hljs-comment"># 调用bf函数，传入中序遍历和后序遍历的字符串，得到先序遍历的结果  </span><br>t = bf(mid, last)  <br><span class="hljs-comment"># 打印先序遍历的结果，注意这里t[1:]是为了去掉根节点前的多余字符（如果有的话）  </span><br><span class="hljs-built_in">print</span>(t[<span class="hljs-number">1</span>:])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">mid=<span class="hljs-built_in">input</span>()<br>last=<span class="hljs-built_in">input</span>()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bf</span>(<span class="hljs-params">m,l</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(l)==<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">len</span>(m)==<span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>    k=m.index(l[-<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">return</span> l[-<span class="hljs-number">1</span>]+bf(m[<span class="hljs-number">0</span>:k],l[<span class="hljs-number">0</span>:k])+bf(m[k+<span class="hljs-number">1</span>:],l[k:-<span class="hljs-number">1</span>])<br>t=bf(mid,last)<br><span class="hljs-built_in">print</span>(t[<span class="hljs-number">1</span>:])<br></code></pre></td></tr></table></figure><h1 id="P1157-组合的输出"><a href="#P1157-组合的输出" class="headerlink" title="P1157 组合的输出"></a>P1157 组合的输出</h1><h2 id="题目描述-18"><a href="#题目描述-18" class="headerlink" title="题目描述"></a>题目描述</h2><p>排列与组合是常用的数学方法，其中组合就是从 $n$ 个元素中抽出 $r$ 个元素（不分顺序且 $r \le n$），我们可以简单地将 $n$ 个元素理解为自然数 $1,2,\dots,n$，从中任取 $r$ 个数。</p><p>现要求你输出所有组合。</p><p>例如 $n&#x3D;5,r&#x3D;3$，所有组合为：</p><p>$123,124,125,134,135,145,234,235,245,345$。</p><h2 id="输入格式-18"><a href="#输入格式-18" class="headerlink" title="输入格式"></a>输入格式</h2><p>一行两个自然数 $n,r(1&lt;n&lt;21,0 \le r \le n)$。</p><h2 id="输出格式-18"><a href="#输出格式-18" class="headerlink" title="输出格式"></a>输出格式</h2><p>所有的组合，每一个组合占一行且其中的元素按由小到大的顺序排列，每个元素占三个字符的位置，所有的组合也按字典顺序。</p><p><strong>注意哦！输出时，每个数字需要 $3$ 个场宽。以 C++ 为例，你可以使用下列代码：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cout &lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">3</span>) &lt;&lt; x;<br></code></pre></td></tr></table></figure><p>输出占 $3$ 个场宽的数 $x$。注意你需要头文件 <code>iomanip</code>。</p><h2 id="样例-1-18"><a href="#样例-1-18" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-18"><a href="#样例输入-1-18" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-18"><a href="#样例输出-1-18" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span><br>  <span class="hljs-attribute">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">4</span><br>  <span class="hljs-attribute">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">5</span><br>  <span class="hljs-attribute">1</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span><br>  <span class="hljs-attribute">1</span>  <span class="hljs-number">3</span>  <span class="hljs-number">5</span><br>  <span class="hljs-attribute">1</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span><br>  <span class="hljs-attribute">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span><br>  <span class="hljs-attribute">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">5</span><br>  <span class="hljs-attribute">2</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span><br>  <span class="hljs-attribute">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h1 id="P3378-【模板】堆"><a href="#P3378-【模板】堆" class="headerlink" title="P3378 【模板】堆"></a>P3378 【模板】堆</h1><h2 id="题目描述-19"><a href="#题目描述-19" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个数列，初始为空，请支持下面三种操作：</p><ol><li>给定一个整数 $x$，请将 $x$ 加入到数列中。</li><li>输出数列中最小的数。</li><li>删除数列中最小的数（如果有多个数最小，只删除 $1$ 个）。</li></ol><h2 id="输入格式-19"><a href="#输入格式-19" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行是一个整数，表示操作的次数 $n$。<br>接下来 $n$ 行，每行表示一次操作。每行首先有一个整数 $op$ 表示操作类型。</p><ul><li>若 $op &#x3D; 1$，则后面有一个整数 $x$，表示要将 $x$ 加入数列。</li><li>若 $op &#x3D; 2$，则表示要求输出数列中的最小数。</li><li>若 $op &#x3D; 3$，则表示删除数列中的最小数。如果有多个数最小，只删除 $1$ 个。</li></ul><h2 id="输出格式-19"><a href="#输出格式-19" class="headerlink" title="输出格式"></a>输出格式</h2><p>对于每个操作 $2$，输出一行一个整数表示答案。</p><h2 id="样例-1-19"><a href="#样例-1-19" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-19"><a href="#样例输入-1-19" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">5</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-19"><a href="#样例输出-1-19" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">2<br>5<br></code></pre></td></tr></table></figure><h2 id="提示-13"><a href="#提示-13" class="headerlink" title="提示"></a>提示</h2><p><strong>【数据规模与约定】</strong></p><ul><li>对于 $30%$ 的数据，保证 $n \leq 15$。</li><li>对于 $70%$ 的数据，保证 $n \leq 10^4$。</li><li>对于 $100%$ 的数据，保证 $1 \leq n \leq 10^6$，$1 \leq x \lt 2^{31}$，$op \in {1, 2, 3}$。</li></ul><h1 id="P1135-奇怪的电梯"><a href="#P1135-奇怪的电梯" class="headerlink" title="P1135 奇怪的电梯"></a>P1135 奇怪的电梯</h1><h2 id="题目背景-3"><a href="#题目背景-3" class="headerlink" title="题目背景"></a>题目背景</h2><p>感谢 @<a href="https://www.luogu.com.cn/user/101694">yummy</a> 提供的一些数据。</p><h2 id="题目描述-20"><a href="#题目描述-20" class="headerlink" title="题目描述"></a>题目描述</h2><p>呵呵，有一天我做了一个梦，梦见了一种很奇怪的电梯。大楼的每一层楼都可以停电梯，而且第 $i$ 层楼（$1 \le i \le N$）上有一个数字 $K_i$（$0 \le K_i \le N$）。电梯只有四个按钮：开，关，上，下。上下的层数等于当前楼层上的那个数字。当然，如果不能满足要求，相应的按钮就会失灵。例如： $3, 3, 1, 2, 5$ 代表了 $K_i$（$K_1&#x3D;3$，$K_2&#x3D;3$，……），从 $1$ 楼开始。在 $1$ 楼，按“上”可以到 $4$ 楼，按“下”是不起作用的，因为没有 $-2$ 楼。那么，从 $A$ 楼到 $B$ 楼至少要按几次按钮呢？</p><h2 id="输入格式-20"><a href="#输入格式-20" class="headerlink" title="输入格式"></a>输入格式</h2><p>共二行。  </p><p>第一行为三个用空格隔开的正整数，表示 $N, A, B$（$1 \le N \le 200$，$1 \le A, B \le N$）。</p><p>第二行为 $N$ 个用空格隔开的非负整数，表示 $K_i$。</p><h2 id="输出格式-20"><a href="#输出格式-20" class="headerlink" title="输出格式"></a>输出格式</h2><p>一行，即最少按键次数，若无法到达，则输出 <code>-1</code>。</p><h2 id="样例-1-20"><a href="#样例-1-20" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-20"><a href="#样例输入-1-20" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">1</span> <span class="hljs-number">5</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-20"><a href="#样例输出-1-20" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3<br></code></pre></td></tr></table></figure><h2 id="提示-14"><a href="#提示-14" class="headerlink" title="提示"></a>提示</h2><p>对于 $100 %$ 的数据，$1 \le N \le 200$，$1 \le A, B \le N$，$0 \le K_i \le N$。</p><p>本题共 $16$ 个测试点，前 $15$ 个每个测试点 $6$ 分，最后一个测试点 $10$ 分。</p><h1 id="P1334-瑞瑞的木板"><a href="#P1334-瑞瑞的木板" class="headerlink" title="P1334 瑞瑞的木板"></a>P1334 瑞瑞的木板</h1><h2 id="题目背景-4"><a href="#题目背景-4" class="headerlink" title="题目背景"></a>题目背景</h2><p>瑞瑞想要亲自修复在他的一个小牧场周围的围栏。</p><h2 id="题目描述-21"><a href="#题目描述-21" class="headerlink" title="题目描述"></a>题目描述</h2><p>他测量栅栏并发现他需要 $n$ 根木板，每根的长度为整数 $l_i$。于是，他买了一根足够长的木板，长度为所需的 $n$ 根木板的长度的总和，他决定将这根木板切成所需的 $n$ 根木板（瑞瑞在切割木板时不会产生木屑，不需考虑切割时损耗的长度)。</p><p>瑞瑞切割木板时使用的是一种特殊的方式，这种方式在将一根长度为 $x$ 的木板切为两根时，需要消耗 $x$ 个单位的能量。瑞瑞拥有无尽的能量，但现在提倡节约能量，所以作为榜样，他决定尽可能节约能量。显然，总共需要切割 $(n-1)$ 次，问题是，每次应该怎么切呢？请编程计算最少需要消耗的能量总和。</p><h2 id="输入格式-21"><a href="#输入格式-21" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入的第一行是整数，表示所需木板的数量 $n$。</p><p>第 $2$ 到第 $(n + 1)$ 行，每行一个整数，第 $(i + 1)$ 行的整数 $l_i$ 代表第  $i$ 根木板的长度 $l_i$。</p><h2 id="输出格式-21"><a href="#输出格式-21" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个整数，表示最少需要消耗的能量总和。</p><h2 id="样例-1-21"><a href="#样例-1-21" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-21"><a href="#样例输入-1-21" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">3<br>8<br>5<br>8<br></code></pre></td></tr></table></figure><h3 id="样例输出-1-21"><a href="#样例输出-1-21" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">34<br></code></pre></td></tr></table></figure><h2 id="提示-15"><a href="#提示-15" class="headerlink" title="提示"></a>提示</h2><h4 id="输入输出样例-1-解释"><a href="#输入输出样例-1-解释" class="headerlink" title="输入输出样例 1 解释"></a>输入输出样例 1 解释</h4><p>将长度为 $21$ 的木板，第一次切割为长度为 $8$ 和长度为 $13$ 的，消耗 $21$ 个单位的能量，第二次将长度为 $13$ 的木板切割为长度为 $5$ 和 $8$ 的，消耗 $13$ 个单位的能量，共消耗 $34$ 个单位的能量，是消耗能量最小的方案。</p><hr><h4 id="数据规模与约定-1"><a href="#数据规模与约定-1" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h4><ul><li>对于 $100%$ 的数据，保证 $1\le n \le 2 \times 10^4$，$1 \leq l_i \leq 5 \times 10^4$。</li></ul><h1 id="P1631-序列合并"><a href="#P1631-序列合并" class="headerlink" title="P1631 序列合并"></a>P1631 序列合并</h1><h2 id="题目描述-22"><a href="#题目描述-22" class="headerlink" title="题目描述"></a>题目描述</h2><p>有两个长度为 $N$ 的<strong>单调不降</strong>序列 $A,B$，在 $A,B$ 中各取一个数相加可以得到 $N^2$ 个和，求这 $N^2$ 个和中最小的 $N$ 个。</p><h2 id="输入格式-22"><a href="#输入格式-22" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行一个正整数 $N$；</p><p>第二行 $N$ 个整数 $A_{1\dots N}$。</p><p>第三行 $N$ 个整数 $B_{1\dots N}$。</p><h2 id="输出格式-22"><a href="#输出格式-22" class="headerlink" title="输出格式"></a>输出格式</h2><p>一行 $N$ 个整数，从小到大表示这 $N$ 个最小的和。</p><h2 id="样例-1-22"><a href="#样例-1-22" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-22"><a href="#样例输入-1-22" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">6</span> <span class="hljs-number">6</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">4</span> <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-22"><a href="#样例输出-1-22" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">6</span> <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><h2 id="提示-16"><a href="#提示-16" class="headerlink" title="提示"></a>提示</h2><p>对于 $50%$ 的数据，$N \le 10^3$。</p><p>对于 $100%$ 的数据，$1 \le N \le 10^5$，$1 \le a_i,b_i \le 10^9$。</p><h1 id="P5657-CSP-S2019-格雷码"><a href="#P5657-CSP-S2019-格雷码" class="headerlink" title="P5657 [CSP-S2019] 格雷码"></a>P5657 [CSP-S2019] 格雷码</h1><h2 id="题目描述-23"><a href="#题目描述-23" class="headerlink" title="题目描述"></a>题目描述</h2><p>通常，人们习惯将所有 $n$ 位二进制串按照字典序排列，例如所有 2 位二进制串按字典序从小到大排列为：00，01，10，11。</p><p>格雷码（Gray Code）是一种特殊的 $n$ 位二进制串排列法，它要求相邻的两个二进制串间<strong>恰好</strong>有一位<strong>不同</strong>，特别地，第一个串与最后一个串也算作相邻。</p><p>所有 2 位二进制串按格雷码排列的一个例子为：00，01，11，10。</p><p>$n$ 位格雷码不止一种，下面给出其中一种格雷码的生成算法：</p><ol><li>1 位格雷码由两个 1 位二进制串组成，顺序为：0，1。</li><li>$n + 1$ 位格雷码的前 $2^n$ 个二进制串，可以由依此算法生成的 $n$ 位格雷码（总共 $2^n$ 个 $n$ 位二进制串）按<strong>顺序</strong>排列，再在每个串前加一个前缀 0 构成。</li><li>$n + 1$ 位格雷码的后 $2^n$ 个二进制串，可以由依此算法生成的 $n$ 位格雷码（总共 $2^n$ 个 $n$ 位二进制串）按<strong>逆序</strong>排列，再在每个串前加一个前缀 1 构成。</li></ol><p>综上，$n + 1$ 位格雷码，由 $n$ 位格雷码的 $2^n$ 个二进制串按顺序排列再加前缀 0，和按逆序排列再加前缀 1 构成，共 $2^{n+1}$ 个二进制串。另外，对于 $n$ 位格雷码中的 $2^n$ 个 二进制串，我们按上述算法得到的排列顺序将它们从 $0 \sim 2^n - 1$ 编号。</p><p>按该算法，2 位格雷码可以这样推出：</p><ol><li>已知 1 位格雷码为 0，1。</li><li>前两个格雷码为 00，01。后两个格雷码为 11，10。合并得到 00，01，11，10，编号依次为 0 ~ 3。</li></ol><p>同理，3 位格雷码可以这样推出：</p><ol><li>已知 2 位格雷码为：00，01，11，10。</li><li>前四个格雷码为：000，001，011，010。后四个格雷码为：110，111，101，100。合并得到：000，001，011，010，110，111，101，100，编号依次为 0 ~ 7。</li></ol><p>现在给出 $n$，$k$，请你求出按上述算法生成的 $n$ 位格雷码中的 $k$ 号二进制串。</p><h2 id="输入格式-23"><a href="#输入格式-23" class="headerlink" title="输入格式"></a>输入格式</h2><p>仅一行两个整数 $n$，$k$，意义见题目描述。</p><h2 id="输出格式-23"><a href="#输出格式-23" class="headerlink" title="输出格式"></a>输出格式</h2><p>仅一行一个 $n$ 位二进制串表示答案。</p><h2 id="样例-1-23"><a href="#样例-1-23" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-23"><a href="#样例输入-1-23" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-23"><a href="#样例输出-1-23" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">10<br></code></pre></td></tr></table></figure><h2 id="样例-2-2"><a href="#样例-2-2" class="headerlink" title="样例 #2"></a>样例 #2</h2><h3 id="样例输入-2-2"><a href="#样例输入-2-2" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-2-2"><a href="#样例输出-2-2" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">111<br></code></pre></td></tr></table></figure><h2 id="样例-3"><a href="#样例-3" class="headerlink" title="样例 #3"></a>样例 #3</h2><h3 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入 #3"></a>样例输入 #3</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">44 </span><span class="hljs-number">1145141919810</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出 #3"></a>样例输出 #3</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">00011000111111010000001001001000000001100011<br></code></pre></td></tr></table></figure><h2 id="提示-17"><a href="#提示-17" class="headerlink" title="提示"></a>提示</h2><p>【样例 1 解释】</p><p>2 位格雷码为：00，01，11，10，编号从 0∼3，因此 3 号串是 10。</p><p>【样例 2 解释】</p><p>3 位格雷码为：000，001，011，010，110，111，101，100，编号从 0∼7，因此 5 号串是 111。</p><p>【数据范围】</p><p>对于 $50%$ 的数据：$n \leq 10$</p><p>对于 $80%$ 的数据：$k \leq 5 \times 10^6$</p><p>对于 $95%$ 的数据：$k \leq 2^{63} - 1$</p><p>对于 $100%$ 的数据：$1 \leq n \leq 64$, $0 \leq k \lt 2^n$</p><h1 id="P3884-JLOI2009-二叉树问题"><a href="#P3884-JLOI2009-二叉树问题" class="headerlink" title="P3884 [JLOI2009] 二叉树问题"></a>P3884 [JLOI2009] 二叉树问题</h1><h2 id="题目描述-24"><a href="#题目描述-24" class="headerlink" title="题目描述"></a>题目描述</h2><p>如下图所示的一棵二叉树的深度、宽度及结点间距离分别为：</p><ul><li>深度：$4$</li><li>宽度：$4$</li><li>结点 8 和 6 之间的距离：$8$</li><li>结点 7 和 6 之间的距离：$3$</li></ul><p>其中宽度表示二叉树上同一层最多的结点个数，节点 $u, v$ 之间的距离表示从 $u$ 到 $v$ 的最短有向路径上向根节点的边数的两倍加上向叶节点的边数。</p><p><img src="/./../images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%B7%E9%A2%98%E9%A2%98%E5%8D%95/6843.png"></p><p>给定一颗以 1 号结点为根的二叉树，请求出其深度、宽度和两个指定节点 $x, y$ 之间的距离。</p><h2 id="输入格式-24"><a href="#输入格式-24" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行是一个整数，表示树的结点个数 $n$。<br>接下来 $n - 1$ 行，每行两个整数 $u, v$，表示树上存在一条连接 $u, v$ 的边。<br>最后一行有两个整数 $x, y$，表示求 $x, y$ 之间的距离。</p><h2 id="输出格式-24"><a href="#输出格式-24" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出三行，每行一个整数，依次表示二叉树的深度、宽度和 $x, y$ 之间的距离。</p><h2 id="样例-1-24"><a href="#样例-1-24" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-24"><a href="#样例输入-1-24" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">10 </span>                               <br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span>                            <br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span>                            <br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">6</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">7</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">8</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">9</span><br><span class="hljs-symbol">6 </span><span class="hljs-number">10</span><br><span class="hljs-symbol">8 </span><span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-24"><a href="#样例输出-1-24" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">4<br>4<br>8<br></code></pre></td></tr></table></figure><h2 id="提示-18"><a href="#提示-18" class="headerlink" title="提示"></a>提示</h2><p>对于全部的测试点，保证 $1 \leq u, v, x, y \leq n \leq 100$​，且给出的是一棵树。</p><h2 id="解题思路-13"><a href="#解题思路-13" class="headerlink" title="解题思路"></a>解题思路</h2><p>读题可知题目需要求出二叉树的深度宽度与两点间最短路径，这其实是三个问题分别解决并输出，求宽度与深度可以在一个dfs中完成，开数组记录每一深度下的节点数，最大的即为宽度，对于最短路径则使用bfs，用队列保存节点，每次弹出队头并加入左右父节点，左右节点则路径加一，父节点则路径加二，直到搜索到目的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Treenode</span>&#123;<br><span class="hljs-type">int</span> left,right,father,val;<br>&#125;node[<span class="hljs-number">101</span>];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Station</span>&#123;<br><span class="hljs-type">int</span> pos,step;<br>&#125;;<br><span class="hljs-type">int</span> width[<span class="hljs-number">101</span>],visited[<span class="hljs-number">101</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(Treenode nod,<span class="hljs-type">int</span> deep)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(nod.val!=<span class="hljs-number">0</span>)<br>width[deep]++;<br><span class="hljs-keyword">if</span>(nod.left==<span class="hljs-number">0</span>&amp;&amp;nod.right==<span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(<span class="hljs-built_in">dfs</span>(node[nod.left],deep+<span class="hljs-number">1</span>),<span class="hljs-built_in">dfs</span>(node[nod.right],deep+<span class="hljs-number">1</span>))+<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n,i,u,v,x,y;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=n;i++)<br>&#123;<br>node[i].val=i;<br>&#125;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;n;i++)<br>&#123;<br>cin&gt;&gt;u&gt;&gt;v;<br><span class="hljs-keyword">if</span>(!node[u].left)<br>node[u].left=v;<br><span class="hljs-keyword">else</span><br>node[u].right=v;<br>node[v].father=u;<br>&#125;<br>cin&gt;&gt;x&gt;&gt;y;<br><span class="hljs-type">int</span> ans,wide=<span class="hljs-number">0</span>;<br>ans=<span class="hljs-built_in">dfs</span>(node[<span class="hljs-number">1</span>],<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++) <br>wide=<span class="hljs-built_in">max</span>(wide,width[i]);<br>cout&lt;&lt;ans&lt;&lt;endl&lt;&lt;wide&lt;&lt;endl;<br><br><br>Station tn=&#123;x,<span class="hljs-number">0</span>&#125;;<br>queue&lt;Station&gt; tem;<br><span class="hljs-built_in">memset</span>(visited,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(visited));<br>visited[x]=<span class="hljs-number">1</span>;<br>tem.<span class="hljs-built_in">push</span>(tn);<br><span class="hljs-keyword">while</span>(!tem.<span class="hljs-built_in">empty</span>())<br>&#123;<br>Station nodes=tem.<span class="hljs-built_in">front</span>();<br>tem.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">if</span>(nodes.pos==y)<br>&#123;<br>cout&lt;&lt;nodes.step;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-type">int</span> left=node[nodes.pos].left,right=node[nodes.pos].right,father=node[nodes.pos].father,step=nodes.step;<br><span class="hljs-keyword">if</span>(left&amp;&amp;!visited[left])<br>&#123;<br>visited[left]=<span class="hljs-number">1</span>;<br>tem.<span class="hljs-built_in">push</span>(&#123;left,step+<span class="hljs-number">1</span>&#125;);<br>&#125;<br><span class="hljs-keyword">if</span>(right&amp;&amp;!visited[right])<br>&#123;<br>visited[right]=<span class="hljs-number">1</span>;<br>tem.<span class="hljs-built_in">push</span>(&#123;right,step+<span class="hljs-number">1</span>&#125;);<br>&#125;<br><span class="hljs-keyword">if</span>(father&amp;&amp;!visited[father])<br>&#123;<br>visited[father]=<span class="hljs-number">1</span>;<br>tem.<span class="hljs-built_in">push</span>(&#123;father,step+<span class="hljs-number">2</span>&#125;);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="P6915-ICPC2015-WF-Weather-Report"><a href="#P6915-ICPC2015-WF-Weather-Report" class="headerlink" title="P6915 [ICPC2015 WF] Weather Report"></a>P6915 [ICPC2015 WF] Weather Report</h1><h2 id="题面翻译"><a href="#题面翻译" class="headerlink" title="题面翻译"></a>题面翻译</h2><p>给定4种天气情况出现的概率，你需要将n天的所有可能的 $4^{n}$ 种情况已某种方式编码为01串，使得：</p><ul><li>编码长度的期望最短</li><li>任何一个编码不是另一个编码的前缀</li></ul><p>求期望长度。</p><h2 id="题目描述-25"><a href="#题目描述-25" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="/./../images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%B7%E9%A2%98%E9%A2%98%E5%8D%95/xqo70y6n.png"></p><p>You have been hired by the Association for Climatological Measurement, a scientific organization interested in tracking global weather trends over a long period of time. Of course, this is no easy task. They have deployed many small devices around the world, designed to take periodic measurements of the local weather conditions. These are cheap devices with somewhat restricted capabilities. Every day they observe which of the four standard kinds of weather occurred: Sunny, Cloudy, Rainy, or Frogs. After every $n$ of these observations have been made, the results are reported to the main server for analysis. However, the massive number of devices has caused the available communication bandwidth to be overloaded. The Association needs your help to come up with a method of compressing these reports into fewer bits. </p><p>For a particular device’s location, you may assume that the weather each day is an independent random event, and you are given the predicted probabilities of the four possible weather types. Each of the $4^ n$ possible weather reports for a device must be encoded as a unique sequence of bits, such that no sequence is a prefix of any other sequence (an important property, or else the server would not know when each sequence ends). The goal is to use an encoding that minimizes the expected number of transmitted bits.</p><h2 id="输入格式-25"><a href="#输入格式-25" class="headerlink" title="输入格式"></a>输入格式</h2><p>The first line of input contains an integer $1 \le n \le 20$, the number of observations that go into each report. The second line contains four positive floating-point numbers, $p_{\text {sunny}}$, $p_{\text {cloudy}}$, $p_{\text {rainy}}$, and $p_{\text {frogs}}$, representing the respective weather probabilities. These probabilities have at most 6 digits after the decimal point and sum to 1.</p><h2 id="输出格式-25"><a href="#输出格式-25" class="headerlink" title="输出格式"></a>输出格式</h2><p>Display the minimum expected number of bits in the encoding of a report, with an absolute or relative error of at most $10^{-4}$.</p><h2 id="样例-1-25"><a href="#样例-1-25" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-25"><a href="#样例输入-1-25" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">9</span> <span class="hljs-number">0</span>.<span class="hljs-number">049999</span> <span class="hljs-number">0</span>.<span class="hljs-number">05</span> <span class="hljs-number">0</span>.<span class="hljs-number">000001</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-25"><a href="#样例输出-1-25" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.<span class="hljs-number">457510</span><br></code></pre></td></tr></table></figure><h2 id="样例-2-3"><a href="#样例-2-3" class="headerlink" title="样例 #2"></a>样例 #2</h2><h3 id="样例输入-2-3"><a href="#样例输入-2-3" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">20</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">25</span> <span class="hljs-number">0</span>.<span class="hljs-number">25</span> <span class="hljs-number">0</span>.<span class="hljs-number">25</span> <span class="hljs-number">0</span>.<span class="hljs-number">25</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-2-3"><a href="#样例输出-2-3" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">40</span>.<span class="hljs-number">000000</span><br></code></pre></td></tr></table></figure><h2 id="提示-19"><a href="#提示-19" class="headerlink" title="提示"></a>提示</h2><p>Time limit: 1000 ms, Memory limit: 1048576 kB. </p><p> International Collegiate Programming Contest (ACM-ICPC) World Finals 2015</p><h2 id="解题思路-14"><a href="#解题思路-14" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>给出四种天气出现的概率（每天都一样），要求把nnn天中4n4n4^n种可能的天气序列映射成010101串，满足任何一个010101串不是另一个010101串的前缀，且期望串长最短。</li><li>n≤20n≤20n\le20</li></ul><h3 id="哈夫曼树：堆-贪心"><a href="#哈夫曼树：堆-贪心" class="headerlink" title="哈夫曼树：堆+贪心"></a>哈夫曼树：堆+贪心</h3><p>哈夫曼树是满足∑x∈leafdepx×valx∑x∈leafdepx×valx\sum_{x\in leaf}dep_x\times val_x最小的二叉树。</p><p>把4n4n4^n种可能的天气序列看作叶节点，valxvalxval_x取每种天气数列出现的概率，发现上面的式子恰好就是期望的计算式。因此，只要建出哈夫曼树就解决了这道题目。</p><p>4n4n4^n太大不可能直接单独考虑每种天气序列。发现一种天气序列的概率只取决于其中每种天气各自的个数而与顺序无关，因此不同的概率只有C3n+3Cn+33C_{n+3}^3种，我们可以把相同的概率绑成一个pairpairpair一起求解。</p><p>求解的过程就是经典的堆+贪心，每次取出最小元素，先让它自己尽可能两两配对，如果有一个多余的就再和新的堆顶配对。</p><h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Tp template<span class="hljs-string">&lt;typename Ty&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Ts template<span class="hljs-string">&lt;typename Ty,typename... Ar&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Rg register</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RI Rg int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Cn const</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CI Cn int&amp;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> I inline</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> W while</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 20</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LL long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DB long double</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,C[N+<span class="hljs-number">5</span>][N+<span class="hljs-number">5</span>];DB p[<span class="hljs-number">4</span>];<span class="hljs-keyword">typedef</span> pair&lt;DB,LL&gt; Pr;priority_queue&lt;Pr,vector&lt;Pr&gt;,greater&lt;Pr&gt; &gt; q;<br><span class="hljs-function">I <span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(CI x,CI t,DB w,Cn LL&amp; s)</span><span class="hljs-comment">//暴搜可能状态</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(x==<span class="hljs-number">3</span>) &#123;<span class="hljs-keyword">for</span>(RI i=<span class="hljs-number">1</span>;i&lt;=t;++i) w*=p[x];q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">make_pair</span>(w,s));<span class="hljs-keyword">return</span>;&#125;<span class="hljs-comment">//概率和个数绑成pair扔入堆</span><br><span class="hljs-keyword">for</span>(RI i=<span class="hljs-number">0</span>;i&lt;=t;++i) <span class="hljs-built_in">dfs</span>(x+<span class="hljs-number">1</span>,t-i,w,s*C[t][i]),w*=p[x];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>RI i,j;<span class="hljs-keyword">for</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n),i=<span class="hljs-number">0</span>;i^<span class="hljs-number">4</span>;++i) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%Lf&quot;</span>,p+i);<br><span class="hljs-keyword">for</span>(C[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=i=<span class="hljs-number">1</span>;i&lt;=n;++i) <span class="hljs-keyword">for</span>(C[i][<span class="hljs-number">0</span>]=j=<span class="hljs-number">1</span>;j&lt;=i;++j) C[i][j]=C[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]+C[i<span class="hljs-number">-1</span>][j];<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Push(x,y) (q.push(make_pair(x,y)),ans+=(x)*(y))<span class="hljs-comment">//合并得到y个x，扔入堆，同时统计答案</span></span><br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>,n,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);Pr k,o;DB ans=<span class="hljs-number">0</span>;<span class="hljs-built_in">W</span>(!q.<span class="hljs-built_in">empty</span>()) k=q.<span class="hljs-built_in">top</span>(),q.<span class="hljs-built_in">pop</span>(),<br>k.se&gt;<span class="hljs-number">1</span>&amp;&amp;<span class="hljs-built_in">Push</span>(<span class="hljs-number">2</span>*k.fi,k.se&gt;&gt;<span class="hljs-number">1</span>),k.se&amp;<span class="hljs-number">1</span>&amp;&amp;!q.<span class="hljs-built_in">empty</span>()&amp;&amp;(o=q.<span class="hljs-built_in">top</span>(),q.<span class="hljs-built_in">pop</span>(),--o.se&amp;&amp;(q.<span class="hljs-built_in">push</span>(o),<span class="hljs-number">0</span>),<span class="hljs-built_in">Push</span>(k.fi+o.fi,<span class="hljs-number">1</span>));<span class="hljs-comment">//尽可能自己两两配对，若有剩余和新的堆顶配对</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.4Lf\n&quot;</span>,ans),<span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="P3916-图的遍历"><a href="#P3916-图的遍历" class="headerlink" title="P3916 图的遍历"></a>P3916 图的遍历</h1><h2 id="题目描述-26"><a href="#题目描述-26" class="headerlink" title="题目描述"></a>题目描述</h2><p>给出 $N$ 个点，$M$ 条边的有向图，对于每个点 $v$，求 $A(v)$ 表示从点 $v$ 出发，能到达的编号最大的点。</p><h2 id="输入格式-26"><a href="#输入格式-26" class="headerlink" title="输入格式"></a>输入格式</h2><p>第 $1$ 行 $2$ 个整数 $N,M$，表示点数和边数。</p><p>接下来 $M$ 行，每行 $2$ 个整数 $U_i,V_i$，表示边 $(U_i,V_i)$。点用 $1,2,\dots,N$ 编号。</p><h2 id="输出格式-26"><a href="#输出格式-26" class="headerlink" title="输出格式"></a>输出格式</h2><p>一行 $N$ 个整数 $A(1),A(2),\dots,A(N)$。</p><h2 id="样例-1-26"><a href="#样例-1-26" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-26"><a href="#样例输入-1-26" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1-26"><a href="#样例输出-1-26" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h2 id="提示-20"><a href="#提示-20" class="headerlink" title="提示"></a>提示</h2><ul><li>对于 $60%$ 的数据，$1 \leq N,M \leq 10^3$。</li><li>对于 $100%$ 的数据，$1 \leq N,M \leq 10^5$​。</li></ul><h2 id="解题思路-15"><a href="#解题思路-15" class="headerlink" title="解题思路"></a>解题思路</h2><p>使用链式前向星</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> AUTHOR <span class="hljs-string">&quot;HEX9CF&quot;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">100005</span>;<br><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> maxi[maxn];<br><span class="hljs-comment">// 链式前向星</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Sedge</span><br>&#123;<br>    <span class="hljs-type">int</span> to;<br>    <span class="hljs-type">int</span> next;<br>&#125; edge[maxn];<br><span class="hljs-type">int</span> head[maxn];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[cnt].to = v;<br>    edge[cnt].next = head[u];<br>    head[u] = cnt++;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> ori)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (maxi[x])<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    maxi[x] = ori;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; ~i; i = edge[i].next)<br>    &#123;<br>        <span class="hljs-built_in">dfs</span>(edge[i].to, ori);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> ch;<br>    x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!(<span class="hljs-string">&#x27;0&#x27;</span> &lt;= ch &amp;&amp; <span class="hljs-string">&#x27;9&#x27;</span> &gt;= ch))<br>    &#123;<br>        ch = <span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span> ((<span class="hljs-string">&#x27;0&#x27;</span> &lt;= ch &amp;&amp; <span class="hljs-string">&#x27;9&#x27;</span> &gt;= ch))<br>    &#123;<br>        x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        ch = <span class="hljs-built_in">getchar</span>();<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    <span class="hljs-type">int</span> a, b;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(head));<br>    <span class="hljs-built_in">memset</span>(maxi, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(maxi));<br>    <span class="hljs-built_in">read</span>(n);<br>    <span class="hljs-built_in">read</span>(m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-built_in">read</span>(a);<br>        <span class="hljs-built_in">read</span>(b);<br>        <span class="hljs-built_in">add</span>(b, a); <span class="hljs-comment">// 反向添加边</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i; i--)<br>    &#123;<br>        <span class="hljs-comment">// 反向搜索</span><br>        <span class="hljs-built_in">dfs</span>(i, i);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        cout &lt;&lt; maxi[i];<br>        <span class="hljs-keyword">if</span> (i != n)<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;P1996-约瑟夫问题&quot;&gt;&lt;a href=&quot;#P1996-约瑟夫问题&quot; class=&quot;headerlink&quot; title=&quot;P1996 约瑟夫问题&quot;&gt;&lt;/a&gt;P1996 约瑟夫问题&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;</summary>
      
    
    
    
    <category term="数据结构" scheme="http://zdx-1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="http://zdx-1.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>js基本语法&amp;vue基本语法</title>
    <link href="http://zdx-1.github.io/2024/04/17/js%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95-vue%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>http://zdx-1.github.io/2024/04/17/js%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95-vue%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</id>
    <published>2024-04-17T04:41:48.000Z</published>
    <updated>2024-04-17T04:44:18.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JavaScript学习<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 对象的增删改查 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 创建一个对象</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> obj=&#123;&#125;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> obj2=&#123;&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 添加属性</span></span></span><br><span class="language-javascript"><span class="language-xml">        obj.<span class="hljs-property">a</span>=<span class="hljs-number">1</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj)</span></span><br><span class="language-javascript"><span class="language-xml">        obj2.<span class="hljs-property">a</span>=<span class="hljs-number">2</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj2)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 删除属性</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">delete</span> obj.<span class="hljs-property">a</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 添加属性</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> user=&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 添加属性</span></span></span><br><span class="language-javascript"><span class="language-xml">        user[<span class="hljs-string">&quot;address&quot;</span>]=<span class="hljs-string">&quot;北京&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;深拷贝1&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> teacher=&#123;&#125;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 把user里面的属性转给teacher,安全的对象转移方式</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(teacher,user) <span class="hljs-comment">//深拷贝</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;user===&quot;</span>,user)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;teacher===&quot;</span>,teacher)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 深拷贝方式2</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;深拷贝2&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> teacher1=<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(user))</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;teacher1===&quot;</span>,teacher1)</span></span><br><span class="language-javascript"><span class="language-xml">        teacher1.<span class="hljs-property">xxx</span>=<span class="hljs-string">&quot;测试&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;teacher1===&quot;</span>,teacher1)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;user===&quot;</span>,user)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 深拷贝方式3</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;深拷贝3&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> teacher2=<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;,user)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;teacher2===&quot;</span>,teacher2)</span></span><br><span class="language-javascript"><span class="language-xml">        teacher2.<span class="hljs-property">xxx</span>=<span class="hljs-string">&quot;测试&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;teacher2===&quot;</span>,teacher2)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;user===&quot;</span>,user)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 浅拷贝</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;浅拷贝&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> teacher3=teacher2 <span class="hljs-comment">//浅拷贝</span></span></span><br><span class="language-javascript"><span class="language-xml">        teacher3.<span class="hljs-property">yyy</span>=<span class="hljs-string">&quot;测试&quot;</span> <span class="hljs-comment">// teacher3和teacher2指向同一个对象</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;teacher3===&quot;</span>,teacher3)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;teacher2===&quot;</span>,teacher2)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//从对象中拿到属性</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> user1=&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;从对象中拿到属性&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 三种方式</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;方式1&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user1.<span class="hljs-property">name</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;方式2&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user1[<span class="hljs-string">&quot;name&quot;</span>])</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;方式3&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;解构语法&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> &#123;name&#125; = user1</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> a=<span class="hljs-literal">null</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//let c=a.x</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//console.log(&quot;c===&quot;,c)</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;拿到空数据&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;使用?.解决拿到空数据报错问题&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> b=a ?.<span class="hljs-property">x</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;b===&quot;</span>,b)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;使用??解决拿到空数据报错问题&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> d=<span class="hljs-literal">null</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> e=<span class="hljs-number">1</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> f= d ?? e</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;f===&quot;</span>,f)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;user&quot;</span>))</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> n=<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;user&quot;</span>)??<span class="hljs-string">&quot;&#123;&#125;&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;n===&quot;</span>,n)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;使用||解决拿到空数据报错问题&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> res;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> res1=res||&#123;&#125;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res1.<span class="hljs-property">name</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;左边为null则取右边的值&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        a=<span class="hljs-number">1</span></span></span><br><span class="language-javascript"><span class="language-xml">        b=<span class="hljs-literal">null</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a ??= b)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> jsObj=&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;张三&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">sex</span>:<span class="hljs-string">&quot;男&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-number">2</span>:<span class="hljs-string">&quot;2&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(jsObj[<span class="hljs-number">1</span>])</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// debugger</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> jsObj)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;key===&quot;</span>,key)</span></span><br><span class="language-javascript"><span class="language-xml">            jsObj[key]+=<span class="hljs-string">&quot;---测试&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;jsObj[key]===&quot;</span>,jsObj[key])</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">if</span> (key===<span class="hljs-string">&quot;name&quot;</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;name===&quot;</span>,jsObj[key])</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 数组的增删改查 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> arr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>()</span></span><br><span class="language-javascript"><span class="language-xml">        arr.<span class="hljs-title function_">push</span>(<span class="hljs-number">1</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> arr1=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//arr增加元素</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;arr增加元素&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        arr1[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1)</span></span><br><span class="language-javascript"><span class="language-xml">        arr1.<span class="hljs-title function_">push</span>(<span class="hljs-number">2</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//修改元素</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;修改元素&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        arr1[<span class="hljs-number">0</span>]=<span class="hljs-number">3</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//删除元素</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;删除元素&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;pop尾部删除&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        arr1.<span class="hljs-title function_">pop</span>()</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;shift头部删除&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        arr1.<span class="hljs-title function_">shift</span>()</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;splice左闭右开区间删除&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        arr1.<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//切片</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;切片--截取元素，左闭右开&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> arrNew=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> arrNew1=arrNew.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;arrNew===&quot;</span>,arrNew)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;arrNew1===&quot;</span>,arrNew1)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//合并数组</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;合并数组&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> arrNew2=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> arrNew3=[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> arrNew4=arrNew2.<span class="hljs-title function_">concat</span>(arrNew3)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;arrNew2===&quot;</span>,arrNew2)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;arrNew3===&quot;</span>,arrNew3)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;arrNew4===&quot;</span>,arrNew4)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//split</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;split&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> str=<span class="hljs-string">&quot;1,2,3,4,5&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> arrNew5=str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;,&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;arrNew5===&quot;</span>,arrNew5)</span></span><br><span class="language-javascript"><span class="language-xml">        str=<span class="hljs-string">&quot;ceshi,shigfd&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;,&quot;</span>))</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//join</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;join&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> arrNew6=[<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;5&quot;</span>]</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arrNew6.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;,&quot;</span>))</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arrNew6.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&quot;</span>))</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arrNew6.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;---&quot;</span>))</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//sort 排序排的是字典序 unicode码</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;sort 排序&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> arrNew7=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">10</span>,<span class="hljs-number">15</span>,<span class="hljs-number">22</span>,<span class="hljs-number">20</span>,<span class="hljs-number">11</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>]</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arrNew7.<span class="hljs-title function_">sort</span>())</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;按照数值大小排序&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arrNew7.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a,b</span>)=&gt;</span>a-b))</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arrNew7.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a,b</span>)=&gt;</span>b-a))</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//reverse</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;reverse&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arrNew7.<span class="hljs-title function_">reverse</span>())</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arrNew7.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a,b</span>)=&gt;</span>b-a))<span class="hljs-comment">//降序</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//indexOf</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;indexOf&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> arrNew8=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arrNew8.<span class="hljs-title function_">indexOf</span>(<span class="hljs-number">3</span>))<span class="hljs-comment">//没有返回-1，有返回下标</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//filter</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;filter&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> arrNew9=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;查找大于3的元素&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> arrNew10=arrNew9.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>item&gt;<span class="hljs-number">3</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arrNew10)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> arrNew11=[&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;,&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">19</span>&#125;,&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">20</span>&#125;]</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;查找大于18岁的元素&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> arrNew12=arrNew11.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>item.<span class="hljs-property">age</span>&gt;<span class="hljs-number">18</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arrNew12)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//删除数组的某一项</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;删除数组的某一项&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> arrNew13=[&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;,&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">19</span>&#125;,&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;王&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">20</span>&#125;]</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arrNew13)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> arrNew14= arrNew13.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>item.<span class="hljs-property">name</span>!==<span class="hljs-string">&quot;王&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arrNew14)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//find</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;find&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> arrNew15=[&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;,&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">19</span>&#125;,&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">20</span>&#125;]</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;查找李四&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> arrNew16=arrNew15.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>item.<span class="hljs-property">name</span>===<span class="hljs-string">&quot;李四&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arrNew16)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//findIndex</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;findIndex&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> arrNew17=[&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;,&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">19</span>&#125;,&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">20</span>&#125;]</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;查找李四的下标&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> arrNew18=arrNew17.<span class="hljs-title function_">findIndex</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>item.<span class="hljs-property">name</span>===<span class="hljs-string">&quot;李四&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arrNew18)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//map</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;map&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> arrNew19=[&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;,&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">19</span>&#125;,&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">20</span>&#125;]</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;遍历数组&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> arrNew20=arrNew19.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>&#123;<span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">name</span>:item.<span class="hljs-property">name</span>, <span class="hljs-attr">age</span>:item.<span class="hljs-property">age</span>+<span class="hljs-number">1</span>&#125;&#125;)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arrNew20)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;遍历数组，只取name&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> arrNew21=arrNew19.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>&#123;<span class="hljs-keyword">return</span> item.<span class="hljs-property">name</span>&#125;)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arrNew21)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;遍历数组，只取name，并拼接&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> arrNew22=arrNew19.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>&#123;<span class="hljs-keyword">return</span> item.<span class="hljs-property">name</span>+<span class="hljs-string">&quot;---&quot;</span>&#125;)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arrNew22)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> arrNew23=arrNew19.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>item.<span class="hljs-property">name</span>+<span class="hljs-string">&quot;---&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arrNew23)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//forEach</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;forEach&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> arrNew24=[&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;,&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">19</span>&#125;,&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">20</span>&#125;]</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;遍历数组&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        arrNew24.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>&#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item)&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//reduce</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;reduce&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> arrNew25=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;求和&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//pre 前一个值 cur 当前值</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> sum=arrNew25.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">pre,cur</span>)=&gt;</span>&#123;<span class="hljs-keyword">return</span> pre+cur&#125;,<span class="hljs-number">0</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sum)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//统计</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;统计出现的次数&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> count=arrNew24.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">pre,cur</span>)=&gt;</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">if</span> (cur.<span class="hljs-property">name</span> <span class="hljs-keyword">in</span> pre)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                pre[cur.<span class="hljs-property">name</span>]++</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;<span class="hljs-keyword">else</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                pre[cur.<span class="hljs-property">name</span>]=<span class="hljs-number">1</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">return</span> pre</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,&#123;&#125;)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(count)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//json</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> json=&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张三&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-string">&quot;sex&quot;</span>:<span class="hljs-string">&quot;男&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-string">&quot;address&quot;</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-string">&quot;province&quot;</span>:<span class="hljs-string">&quot;四川&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-string">&quot;city&quot;</span>:<span class="hljs-string">&quot;成都&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-string">&quot;hobby&quot;</span>:[<span class="hljs-string">&quot;吃饭&quot;</span>,<span class="hljs-string">&quot;睡觉&quot;</span>,<span class="hljs-string">&quot;打豆豆&quot;</span>],</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-string">&quot;children&quot;</span>:[</span></span><br><span class="language-javascript"><span class="language-xml">                &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>&#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">19</span>&#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                &#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">20</span>&#125;</span></span><br><span class="language-javascript"><span class="language-xml">            ]</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(json)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[]是引用类型，&#123;&#125;是值类型&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//http://www.json.cn/ json验证</span></span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>vue学习<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.active</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            &#123;&#123;num&#125;&#125; <span class="hljs-comment">&lt;!--运算会有问题尽量不要在这里做运算--&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            &#123;&#123;bool&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            &#123;&#123;bool ? &#x27;a&#x27;:&#x27;b&#x27;&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            &#123;&#123;bool2 ? &#x27;a&#x27;:&#x27;b&#x27;&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            &#123;&#123;arr[0].name&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            &#123;&#123;arr.find(item=&gt;item.name===&quot;张三&quot;)&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;htmlStr&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>v-html渲染<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>v-model是双向绑定的<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;value&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;color===&#x27;red&#x27;&quot;</span>&gt;</span>红色<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;color===&#x27;绿色&#x27;&quot;</span>&gt;</span>绿色<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;color===&#x27;蓝色&#x27;&quot;</span>&gt;</span>蓝色<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else</span>&gt;</span>黑色<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>搜索一下<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>v-bind:href可以简写成:href<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>搜索一下<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;von&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100px;height: 100px;background-color: red;&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;clickDiv&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;von1&quot;</span> &gt;</span>v-on绑定事件简写@<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in fruits&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in fruits&quot;</span>&gt;</span>&#123;&#123;index+1&#125;&#125;:&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in fruitsS&quot;</span>&gt;</span>&#123;&#123;index+1&#125;&#125;:&#123;&#123;item.name&#125;&#125;:&#123;&#123;item.price&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in fruitsS&quot;</span> <span class="hljs-attr">v-bind:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span>&#123;&#123;index+1&#125;&#125;:&#123;&#123;item.name&#125;&#125;:&#123;&#123;item.price&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: flex;margin-top: 30px;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;cur_menu&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in menu&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;padding: 0 10px&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123;&#x27;active&#x27;:item ===cur_menu&#125;&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in menu&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,   <span class="hljs-comment">// 绑定元素</span></span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;hello vue&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">num</span>:<span class="hljs-number">1</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">bool</span>:<span class="hljs-literal">true</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">bool2</span>:<span class="hljs-literal">false</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">arr</span>:[&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;],</span><br><span class="language-javascript">                <span class="hljs-attr">htmlStr</span>:<span class="hljs-string">&quot;&lt;a href=&#x27;http://www.baidu.com&#x27;&gt;百度&lt;/a&gt;&lt;br/&gt;&lt;strong&gt;v-html渲染&lt;/strong&gt;&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">value</span>:<span class="hljs-string">&quot;&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">color</span>:<span class="hljs-string">&#x27;red&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">fruits</span>:[<span class="hljs-string">&quot;苹果&quot;</span>,<span class="hljs-string">&quot;香蕉&quot;</span>,<span class="hljs-string">&quot;西瓜&quot;</span>],</span><br><span class="language-javascript">                <span class="hljs-attr">fruitsS</span>:[&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;苹果&quot;</span>,<span class="hljs-attr">price</span>:<span class="hljs-number">5</span>&#125;,&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;香蕉&quot;</span>,<span class="hljs-attr">price</span>:<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;西瓜&quot;</span>,<span class="hljs-attr">price</span>:<span class="hljs-number">10</span>&#125;],</span><br><span class="language-javascript">                <span class="hljs-attr">menu</span>:[<span class="hljs-string">&quot;首页&quot;</span>,<span class="hljs-string">&quot;详情&quot;</span>,<span class="hljs-string">&quot;购物车&quot;</span>,<span class="hljs-string">&quot;我的&quot;</span>],</span><br><span class="language-javascript">                <span class="hljs-attr">cur_menu</span>:<span class="hljs-string">&#x27;首页&#x27;</span>,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">clickDiv</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;点击了div&quot;</span>)</span><br><span class="language-javascript">                    <span class="hljs-keyword">let</span> color=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;von&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span></span><br><span class="language-javascript">                    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;von&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span>= color === <span class="hljs-string">&quot;red&quot;</span> ? <span class="hljs-string">&quot;green&quot;</span> : <span class="hljs-string">&quot;red&quot;</span></span><br><span class="language-javascript">                    <span class="hljs-keyword">let</span> color1=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;von1&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span></span><br><span class="language-javascript">                    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;von1&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span>= color1 === <span class="hljs-string">&quot;red&quot;</span> ? <span class="hljs-string">&quot;green&quot;</span> : <span class="hljs-string">&quot;red&quot;</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="Vue2&amp;&amp;JavaScript" scheme="http://zdx-1.github.io/categories/Vue2-JavaScript/"/>
    
    
    <category term="vue&amp;&amp;JavaScript" scheme="http://zdx-1.github.io/tags/vue-JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>19-23年蓝桥杯真题</title>
    <link href="http://zdx-1.github.io/2024/04/11/19-23%E5%B9%B4%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%9F%E9%A2%98/"/>
    <id>http://zdx-1.github.io/2024/04/11/19-23%E5%B9%B4%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%9F%E9%A2%98/</id>
    <published>2024-04-11T11:36:55.000Z</published>
    <updated>2024-04-11T11:37:54.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://www.luogu.com.cn/problem/P8678">P8678 [蓝桥杯 2019 省 A] 填空问题</a></li><li><a href="https://www.luogu.com.cn/problem/P8679">P8679 [蓝桥杯 2019 省 B] 填空问题</a></li><li><a href="https://www.luogu.com.cn/problem/P8680">P8680 [蓝桥杯 2019 省 B] 特别数的和</a></li><li><a href="https://www.luogu.com.cn/problem/P8681">P8681 [蓝桥杯 2019 省 AB] 完全二叉树的权值</a></li><li><a href="https://www.luogu.com.cn/problem/P8682">P8682 [蓝桥杯 2019 省 B] 等差数列</a></li><li><a href="https://www.luogu.com.cn/problem/P8683">P8683 [蓝桥杯 2019 省 B] 后缀表达式</a></li><li><a href="https://www.luogu.com.cn/problem/P8684">P8684 [蓝桥杯 2019 省 B] 灵能传输</a></li><li><a href="https://www.luogu.com.cn/problem/P8685">P8685 [蓝桥杯 2019 省 A] 外卖店优先级</a></li><li><a href="https://www.luogu.com.cn/problem/P8686">P8686 [蓝桥杯 2019 省 A] 修改数组</a></li><li><a href="https://www.luogu.com.cn/problem/P8687">P8687 [蓝桥杯 2019 省 A] 糖果</a></li><li><a href="https://www.luogu.com.cn/problem/P8688">P8688 [蓝桥杯 2019 省 A] 组合数问题</a></li><li><a href="https://www.luogu.com.cn/problem/P8704">P8704 [蓝桥杯 2020 省 A1] 填空问题</a></li><li><a href="https://www.luogu.com.cn/problem/P8705">P8705 [蓝桥杯 2020 省 B1] 填空问题</a></li><li><a href="https://www.luogu.com.cn/problem/P8706">P8706 [蓝桥杯 2020 省 AB1] 解码</a></li><li><a href="https://www.luogu.com.cn/problem/P8707">P8707 [蓝桥杯 2020 省 AB1] 走方格</a></li><li><a href="https://www.luogu.com.cn/problem/P8708">P8708 [蓝桥杯 2020 省 A1] 整数小拼接</a></li><li><a href="https://www.luogu.com.cn/problem/P8709">P8709 [蓝桥杯 2020 省 A1] 超级胶水</a></li><li><a href="https://www.luogu.com.cn/problem/P8710">P8710 [蓝桥杯 2020 省 AB1] 网络分析</a></li><li><a href="https://www.luogu.com.cn/problem/P8711">P8711 [蓝桥杯 2020 省 B1] 整除序列</a></li><li><a href="https://www.luogu.com.cn/problem/P8712">P8712 [蓝桥杯 2020 省 B1] 整数拼接</a></li><li><a href="https://www.luogu.com.cn/problem/P8713">P8713 [蓝桥杯 2020 省 A2] 填空问题</a></li><li><a href="https://www.luogu.com.cn/problem/P8714">P8714 [蓝桥杯 2020 省 B2] 填空问题</a></li><li><a href="https://www.luogu.com.cn/problem/P8715">P8715 [蓝桥杯 2020 省 AB2] 子串分值</a></li><li><a href="https://www.luogu.com.cn/problem/P8716">P8716 [蓝桥杯 2020 省 AB2] 回文日期</a></li><li><a href="https://www.luogu.com.cn/problem/P8717">P8717 [蓝桥杯 2020 省 AB2] 成绩分析</a></li><li><a href="https://www.luogu.com.cn/problem/P8718">P8718 [蓝桥杯 2020 省 A2] 荒岛探测</a></li><li><a href="https://www.luogu.com.cn/problem/P8719">P8719 [蓝桥杯 2020 省 AB2] 字串排序</a></li><li><a href="https://www.luogu.com.cn/problem/P8720">P8720 [蓝桥杯 2020 省 B2] 平面切分</a></li><li><a href="https://www.luogu.com.cn/problem/P8721">P8721 [蓝桥杯 2020 省 AB3] 填空问题(缺少 inc.txt, E 题数据)</a></li><li><a href="https://www.luogu.com.cn/problem/P8722">P8722 [蓝桥杯 2020 省 AB3] 日期识别</a></li><li><a href="https://www.luogu.com.cn/problem/P8723">P8723 [蓝桥杯 2020 省 AB3] 乘法表</a></li><li><a href="https://www.luogu.com.cn/problem/P8724">P8724 [蓝桥杯 2020 省 AB3] 限高杆</a></li><li><a href="https://www.luogu.com.cn/problem/P8725">P8725 [蓝桥杯 2020 省 AB3] 画中漂流</a></li><li><a href="https://www.luogu.com.cn/problem/P8726">P8726 [蓝桥杯 2020 省 AB3] 旅行家</a></li><li><a href="https://www.luogu.com.cn/problem/P8740">P8740 [蓝桥杯 2021 省 A] 填空问题</a></li><li><a href="https://www.luogu.com.cn/problem/P8741">P8741 [蓝桥杯 2021 省 B] 填空问题</a></li><li><a href="https://www.luogu.com.cn/problem/P8742">P8742 [蓝桥杯 2021 省 AB] 砝码称重</a></li><li><a href="https://www.luogu.com.cn/problem/P8743">P8743 [蓝桥杯 2021 省 A] 异或数列</a></li><li><a href="https://www.luogu.com.cn/problem/P8744">P8744 [蓝桥杯 2021 省 A] 左孩子右兄弟</a></li><li><a href="https://www.luogu.com.cn/problem/P8745">P8745 [蓝桥杯 2021 省 AB] 括号序列</a></li><li><a href="https://www.luogu.com.cn/problem/P8746">P8746 [蓝桥杯 2021 省 A] 分果果</a></li><li><a href="https://www.luogu.com.cn/problem/P8747">P8747 [蓝桥杯 2021 省 B] 双向排序</a></li><li><a href="https://www.luogu.com.cn/problem/P8748">P8748 [蓝桥杯 2021 省 B] 时间显示</a></li><li><a href="https://www.luogu.com.cn/problem/P8749">P8749 [蓝桥杯 2021 省 B] 杨辉三角形</a></li><li><a href="https://www.luogu.com.cn/problem/P8750">P8750 [蓝桥杯 2021 省 A2] 填空问题</a></li><li><a href="https://www.luogu.com.cn/problem/P8751">P8751 [蓝桥杯 2021 省 B2] 填空问题</a></li><li><a href="https://www.luogu.com.cn/problem/P8752">P8752 [蓝桥杯 2021 省 B2] 特殊年份</a></li><li><a href="https://www.luogu.com.cn/problem/P8753">P8753 [蓝桥杯 2021 省 AB2] 小平方</a></li><li><a href="https://www.luogu.com.cn/problem/P8754">P8754 [蓝桥杯 2021 省 AB2] 完全平方数</a></li><li><a href="https://www.luogu.com.cn/problem/P8755">P8755 [蓝桥杯 2021 省 AB2] 负载均衡</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P8678&quot;&gt;P8678 [蓝桥杯 2019 省 A] 填空问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P</summary>
      
    
    
    
    <category term="刷题" scheme="http://zdx-1.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="蓝桥" scheme="http://zdx-1.github.io/categories/%E5%88%B7%E9%A2%98/%E8%93%9D%E6%A1%A5/"/>
    
    
    <category term="蓝桥杯" scheme="http://zdx-1.github.io/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>EF框架</title>
    <link href="http://zdx-1.github.io/2024/04/10/EF%E6%A1%86%E6%9E%B6/"/>
    <id>http://zdx-1.github.io/2024/04/10/EF%E6%A1%86%E6%9E%B6/</id>
    <published>2024-04-10T14:46:49.000Z</published>
    <updated>2024-04-10T14:47:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h1><p>[video(video-xcdU9b91-1704040286495)(type-csdn)(url-<a href="https://live.csdn.net/v/embed/355757)(image-https://video-community.csdnimg.cn/vod-84deb4/a090dd94a7e271eebfde0675b3ed0102/snapshots/8ea7d139d04a45018cee00f5941a4830-00004.jpg?auth_key=4857630234-0-0-fd49d3e2a45ced4ff569beca2381b74b)(title-EF%E6%A1%86%E6%9E%B6%E6%BC%94%E7%A4%BA)%5D">https://live.csdn.net/v/embed/355757)(image-https://video-community.csdnimg.cn/vod-84deb4/a090dd94a7e271eebfde0675b3ed0102/snapshots/8ea7d139d04a45018cee00f5941a4830-00004.jpg?auth_key=4857630234-0-0-fd49d3e2a45ced4ff569beca2381b74b)(title-EF框架演示)]</a></p><h1 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h1><p>Visual Studio 2019<br>SQL Server<br>EntityFramework 6.2.0</p><h1 id="一、创建项目，编写数据库"><a href="#一、创建项目，编写数据库" class="headerlink" title="一、创建项目，编写数据库"></a>一、创建项目，编写数据库</h1><h2 id="创建一个Windows窗体应用-NET-Framework"><a href="#创建一个Windows窗体应用-NET-Framework" class="headerlink" title="创建一个Windows窗体应用(.NET Framework)"></a>创建一个Windows窗体应用(.NET Framework)</h2><h3 id="添加新项目"><a href="#添加新项目" class="headerlink" title="添加新项目"></a>添加新项目</h3><p><img src="/./../images/EF%E6%A1%86%E6%9E%B6/23ea1cd9d9634190b6a8f31b16988c1f.png" alt="创建一个窗体项目"><img src="/./../images/EF%E6%A1%86%E6%9E%B6/e7b5d3811f1b450f95aa8e32019a2ac0.png" alt="具体内容">创建后再创建下图：<br><img src="/./../images/EF%E6%A1%86%E6%9E%B6/e5da96b6d8d44bd9a97166ef1c7e0ef2.png" alt="可视化界面"></p><h3 id="创建SQL数据库，创建表"><a href="#创建SQL数据库，创建表" class="headerlink" title="创建SQL数据库，创建表"></a>创建SQL数据库，创建表</h3><p>创建数据库StudyEF，创建表如下：<br>在这里要强调一点，在创建表的时候一定设置主键，不然创建后的ef框架会有问题。<br><img src="/./../images/EF%E6%A1%86%E6%9E%B6/4eede7e3d5254b3fbe246eb3035a5e29.png" alt="建表">往表里面添加几条数据，方便进行测试<br><img src="/./../images/EF%E6%A1%86%E6%9E%B6/c2d63178c31043d18fa63bd343cb8552.png" alt="表中数据"></p><h2 id="给项目添加EF实体数据模型"><a href="#给项目添加EF实体数据模型" class="headerlink" title="给项目添加EF实体数据模型"></a>给项目添加EF实体数据模型</h2><p>添加一个ADO.NET实体数据模型，我将其命名为EFData，然后进行下面操作<br><img src="/./../images/EF%E6%A1%86%E6%9E%B6/68010de04d114b54911a7fd54fe4400e.png" alt="选择第一个"><img src="/./../images/EF%E6%A1%86%E6%9E%B6/b483bc2b0272416596f8f8561421afbc.png" alt="继续"><img src="/./../images/EF%E6%A1%86%E6%9E%B6/4b155b9626db4c25a73318c72fa4326c.png" alt="新建连接"><img src="/./../images/EF%E6%A1%86%E6%9E%B6/8a315ee3b4cf496ab60dc5c4087a5970.png" alt="测试连接"><img src="/./../images/EF%E6%A1%86%E6%9E%B6/ce34dc63b9144bcfb63f75a9b9b6904e.png" alt="修改对应的连接"><br><img src="/./../images/EF%E6%A1%86%E6%9E%B6/31fa81caf3004751bbb9e8a1292959df.png" alt="添加"><br>然后就是完成，漫长的等待创建完成</p><p><img src="/./../images/EF%E6%A1%86%E6%9E%B6/274f2968f1bf4abe9ff28dae4d7e297f.png" alt="创建成功"></p><h1 id="二、DataGridView绑定数据源"><a href="#二、DataGridView绑定数据源" class="headerlink" title="二、DataGridView绑定数据源"></a>二、DataGridView绑定数据源</h1><p><img src="/./../images/EF%E6%A1%86%E6%9E%B6/861af9287cfc46d38d2ed3eb5d876f19.png" alt="添加数据库">下一步，下一步，然后选择连接<br><img src="/./../images/EF%E6%A1%86%E6%9E%B6/639606538b554ddba521733ebbf2950c.png" alt="在这里插入图片描述">下一步，下一步，一直到下图，选中表，点击完成<br><img src="/./../images/EF%E6%A1%86%E6%9E%B6/02f7559804954c33b0c50dc2ce250b5e.png" alt="在这里插入图片描述"><br>添加完成后，dgv控件自动显示字段名<br><img src="/./../images/EF%E6%A1%86%E6%9E%B6/c8ada2553bbf458089488d979b4b650f.png" alt="在这里插入图片描述"><br>这里的表头可以根据需求修改<br><img src="/./../images/EF%E6%A1%86%E6%9E%B6/ae14d255c29d4c9ea36e8a009a8d6926.png" alt="在这里插入图片描述"><br>运行测试，数据显示正常<br><img src="/./../images/EF%E6%A1%86%E6%9E%B6/a7da9b7137034732945cedc3af2f8d56.png" alt="在这里插入图片描述"></p><h1 id="三、实现添加按钮"><a href="#三、实现添加按钮" class="headerlink" title="三、实现添加按钮"></a>三、实现添加按钮</h1><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><p>首先添加一个Add的windows窗体<br>如图所示：<br><img src="/./../images/EF%E6%A1%86%E6%9E%B6/ca8bda65cdbd49388744c8e3d4b2a06c.png" alt="添加窗体设计">鼠标双击添加按钮，在添加按钮事件里面开始编写：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs csharp">String username = textBox1.Text;<br>       String name = textBox2.Text;<br>       String password = textBox3.Text;<br>       String age = textBox4.Text;<br>       String phone = textBox5.Text;<br>       String email = textBox6.Text;<br>       String address = textBox7.Text;<br>       <span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> study = <span class="hljs-keyword">new</span> StudyEFEntities())<br>       &#123;<br>           <span class="hljs-keyword">var</span> test = <span class="hljs-keyword">new</span> TestData <span class="hljs-comment">// 假设TestData是您的实体类  </span><br>           &#123;<br>               <span class="hljs-comment">// 在此处设置test对象的属性，例如：  </span><br>               password = password,<br>               username=username,<br>               name=name,<br>               age=age,<br>               phone=phone,<br>               email=email,<br>               address=address<br>           &#125;;<br><br>           <span class="hljs-comment">// 将test对象添加到数据库中  </span><br>           study.TestData.Add(test);<br>           <span class="hljs-comment">// 保存更改到数据库  </span><br>           study.SaveChanges();<br>       &#125;<br>       MessageBox.Show(<span class="hljs-string">&quot;添加成功&quot;</span>);<br>       Main f1 = (Main)<span class="hljs-keyword">this</span>.Owner;<br>       f1.Refresh_Method();<br>       f1.Activate();<br>       <span class="hljs-keyword">this</span>.Hide();<br></code></pre></td></tr></table></figure><p><img src="/./../images/EF%E6%A1%86%E6%9E%B6/56e07fd67d4d4dcd90f6008c20bbfc96.png" alt="添加">在主页面（原来我写的是Test窗体，但是重新生成解决方案了也没有显示，估计是重名了与其他功能，于是我主界面换成了Main窗体）的添加按钮里面编写new一个窗体，并且写一个让数据刷新的方法，通过owner在添加窗体调用，这样添加完成原来的窗体更新数据。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button1_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>     &#123;<br>         Add f1 = <span class="hljs-keyword">new</span> Add();<br>         f1.Owner = <span class="hljs-keyword">this</span>;<br>         f1.Show();<br>     &#125;<br><br>     <span class="hljs-function"><span class="hljs-keyword">internal</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Refresh_Method</span>()</span><br>     &#123;<br>         <span class="hljs-keyword">this</span>.testDataTableAdapter.Fill(<span class="hljs-keyword">this</span>.studyEFDataSet1.TestData);<br>     &#125;<br></code></pre></td></tr></table></figure><p><img src="/./../images/EF%E6%A1%86%E6%9E%B6/52910a887077462a89be7c7abe92c5e9.png" alt="在这里插入图片描述"></p><h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h2><p><img src="/./../images/EF%E6%A1%86%E6%9E%B6/5d607bca1a624e9ea829b0b7e9e84670.png" alt="在这里插入图片描述"><img src="/./../images/EF%E6%A1%86%E6%9E%B6/f51496f5946c47538fdc822a030dc9c8.png" alt="在这里插入图片描述">测试没有问题。</p><h1 id="四、实现删除按钮"><a href="#四、实现删除按钮" class="headerlink" title="四、实现删除按钮"></a>四、实现删除按钮</h1><h2 id="编写代码-1"><a href="#编写代码-1" class="headerlink" title="编写代码"></a>编写代码</h2><p>在Main窗体里面，双击删除按钮</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//删除按钮</span><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button2_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">var</span> dev1 = <span class="hljs-keyword">this</span>.dataGridView1.CurrentRow;<br>            <span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> study = <span class="hljs-keyword">new</span> StudyEFEntities())<br>            &#123;<br>                <span class="hljs-keyword">if</span> (dev1.Cells[<span class="hljs-number">0</span>].Value != <span class="hljs-literal">null</span>)<br>                &#123;<br>                    <span class="hljs-built_in">int</span> idToDelete;<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">int</span>.TryParse(dev1.Cells[<span class="hljs-number">0</span>].Value.ToString(), <span class="hljs-keyword">out</span> idToDelete))<br>                    &#123;<br>                        <span class="hljs-keyword">var</span> ToDelete = study.TestData.FirstOrDefault(u =&gt; u.id == idToDelete);<br>                        <span class="hljs-keyword">if</span> (ToDelete != <span class="hljs-literal">null</span>)<br>                        &#123;<br>                            study.TestData.Remove(ToDelete);<br>                            study.SaveChanges();<br>                        &#125;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">this</span>.testDataTableAdapter.Fill(<span class="hljs-keyword">this</span>.studyEFDataSet1.TestData);<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p><img src="/./../images/EF%E6%A1%86%E6%9E%B6/a1c758d8c0434c579d7f803ae34a5239.png" alt="删除按钮"></p><h2 id="运行测试-1"><a href="#运行测试-1" class="headerlink" title="运行测试"></a>运行测试</h2><p><img src="/./../images/EF%E6%A1%86%E6%9E%B6/ed387128824b4eae916a6a9112d5a60f.png" alt="在这里插入图片描述">测试没有问题，点击删除删除选中数据，并且刷新数据（原理是重新绑定数据）</p><h1 id="五、实现修改按钮"><a href="#五、实现修改按钮" class="headerlink" title="五、实现修改按钮"></a>五、实现修改按钮</h1><h2 id="编写代码-2"><a href="#编写代码-2" class="headerlink" title="编写代码"></a>编写代码</h2><h3 id="窗体之间传递参数"><a href="#窗体之间传递参数" class="headerlink" title="窗体之间传递参数"></a>窗体之间传递参数</h3><p>因为修改，修改是要有数据显示才能方便，不然就成重写了，在这里我觉得需要做一个参数传递。</p><h4 id="Main窗体中修改按钮事件"><a href="#Main窗体中修改按钮事件" class="headerlink" title="Main窗体中修改按钮事件"></a>Main窗体中修改按钮事件</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//修改按钮</span><br>       <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button3_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>       &#123;<br>           <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.dataGridView1.SelectedRows.Count &gt; <span class="hljs-number">0</span>)<br>           &#123;<br>               <span class="hljs-keyword">var</span> dev1 = <span class="hljs-keyword">this</span>.dataGridView1.CurrentRow;<br>               Update frm = <span class="hljs-keyword">new</span> Update(dev1);<br>               frm.Owner = <span class="hljs-keyword">this</span>;<br>               frm.Show();<br>           &#125;<br>           <span class="hljs-keyword">else</span><br>           &#123;<br>               MessageBox.Show(<span class="hljs-string">&quot;请先选择一条数据&quot;</span>);<br>           &#125;<br>       &#125;<br></code></pre></td></tr></table></figure><p><img src="/./../images/EF%E6%A1%86%E6%9E%B6/9553048d44794291bbe15479e654fbf8.png" alt="在这里插入图片描述"></p><h4 id="在update窗体中添加参数绑定"><a href="#在update窗体中添加参数绑定" class="headerlink" title="在update窗体中添加参数绑定"></a>在update窗体中添加参数绑定</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Update</span>(<span class="hljs-params">DataGridViewRow dev1</span>)</span><br>        &#123;<br>            InitializeComponent();<br>            textBox8.Text = dev1.Cells[<span class="hljs-number">0</span>].Value.ToString();<br>            textBox1.Text = dev1.Cells[<span class="hljs-number">1</span>].Value.ToString();<br>            textBox2.Text = dev1.Cells[<span class="hljs-number">2</span>].Value.ToString();<br>            textBox3.Text = dev1.Cells[<span class="hljs-number">3</span>].Value.ToString();<br>            textBox4.Text = dev1.Cells[<span class="hljs-number">4</span>].Value.ToString();<br>            textBox5.Text = dev1.Cells[<span class="hljs-number">5</span>].Value.ToString();<br>            textBox6.Text = dev1.Cells[<span class="hljs-number">6</span>].Value.ToString();<br>            textBox7.Text = dev1.Cells[<span class="hljs-number">7</span>].Value.ToString();<br>        &#125;<br></code></pre></td></tr></table></figure><h4 id="在update窗体中添加修改按钮代码"><a href="#在update窗体中添加修改按钮代码" class="headerlink" title="在update窗体中添加修改按钮代码"></a>在update窗体中添加修改按钮代码</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button1_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>       &#123;<br>           <span class="hljs-built_in">int</span> id = <span class="hljs-built_in">int</span>.Parse(textBox8.Text);<br>           <span class="hljs-built_in">string</span> username = textBox1.Text;<br>           <span class="hljs-built_in">string</span> name = textBox2.Text;<br>           <span class="hljs-built_in">string</span> password = textBox3.Text;<br>           <span class="hljs-built_in">string</span> age = textBox4.Text;<br>           <span class="hljs-built_in">string</span> phone = textBox5.Text;<br>           <span class="hljs-built_in">string</span> email = textBox6.Text;<br>           <span class="hljs-built_in">string</span> address = textBox7.Text;<br>           <span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> study = <span class="hljs-keyword">new</span> StudyEFEntities())<br>           &#123;<br>               <span class="hljs-comment">// 假设你要更新的是用户信息  </span><br>               <span class="hljs-keyword">var</span> ToUpdate = study.TestData.FirstOrDefault(u =&gt; u.id == id);<br>               <span class="hljs-keyword">if</span> (ToUpdate != <span class="hljs-literal">null</span>)<br>               &#123;<br>                   <span class="hljs-comment">// 更新用户的属性  </span><br>                   ToUpdate.username = username;<br>                   ToUpdate.name = name;<br>                   ToUpdate.password = password;<br>                   ToUpdate.age = age;<br>                   ToUpdate.phone = phone;<br>                   ToUpdate.email = email;<br>                   ToUpdate.address = address;<br>                   <span class="hljs-comment">// 保存更改到数据库  </span><br>                   study.SaveChanges();<br>               &#125;<br>           &#125;<br>               MessageBox.Show(<span class="hljs-string">&quot;修改成功&quot;</span>);<br>               Main f1 = (Main)<span class="hljs-keyword">this</span>.Owner;<br>               f1.Refresh_Method();<br>               f1.Activate();<br>               <span class="hljs-keyword">this</span>.Hide();<br>       &#125;<br></code></pre></td></tr></table></figure><h2 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h2><p>运行测试没有问题。</p><h1 id="六、实现查询按钮"><a href="#六、实现查询按钮" class="headerlink" title="六、实现查询按钮"></a>六、实现查询按钮</h1><h2 id="新建表checkname，给下拉框添加数据"><a href="#新建表checkname，给下拉框添加数据" class="headerlink" title="新建表checkname，给下拉框添加数据"></a>新建表checkname，给下拉框添加数据</h2><p><img src="https://img-blog.csdnimg.cn/direct/images/EF%E6%A1%86%E6%9E%B6/75526e320ad74d32a524e6c97e65f22c.png" alt="在这里插入图片描述"><br>添加字段<br><img src="/./../images/EF%E6%A1%86%E6%9E%B6/159df9cc1cb54fdd871eda06f8927b2c.png" alt="在这里插入图片描述"></p><p>去vs里更新模型数据<br><img src="/./../images/EF%E6%A1%86%E6%9E%B6/d1fe399d8bf84bc3b424f7af036192c8.png" alt="在这里插入图片描述"></p><p>在main窗体里面绑定数据<br><img src="/./../images/EF%E6%A1%86%E6%9E%B6/03e64d968aac4c1d941a28dcd75e39c2.png" alt="在这里插入图片描述"></p><h2 id="编写代码-3"><a href="#编写代码-3" class="headerlink" title="编写代码"></a>编写代码</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//查询按钮实现</span><br>       <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button4_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>       &#123;<br>           <span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> study = <span class="hljs-keyword">new</span> StudyEFEntities())<br>           &#123;<br>               <span class="hljs-comment">// 查询满足条件的用户 </span><br>               <span class="hljs-keyword">if</span> (comboBox1.SelectedValue.ToString() == <span class="hljs-string">&quot;u.id&quot;</span>) <br>               &#123;<br>                   <span class="hljs-built_in">int</span> ToCheck;<br>                   <span class="hljs-keyword">if</span> (<span class="hljs-built_in">int</span>.TryParse(textBox1.Text, <span class="hljs-keyword">out</span> ToCheck))<br>                   &#123;<br>                       <span class="hljs-keyword">var</span> test = study.TestData.Where(u =&gt; u.id == ToCheck);<br>                       <span class="hljs-keyword">this</span>.dataGridView1.DataSource = test.ToList(); <br>                   &#125;<br>               &#125;<br>               <span class="hljs-keyword">if</span> (comboBox1.SelectedValue.ToString() == <span class="hljs-string">&quot;u.username&quot;</span>)<br>               &#123;<br>                   <span class="hljs-keyword">var</span> test = study.TestData.Where(u =&gt; u.username == textBox1.Text);<br>                   <span class="hljs-keyword">this</span>.dataGridView1.DataSource = test.ToList();<br>               &#125;<br>               <span class="hljs-keyword">if</span> (comboBox1.SelectedValue.ToString() == <span class="hljs-string">&quot;u.name&quot;</span>)<br>               &#123;<br>                   <span class="hljs-keyword">var</span> test = study.TestData.Where(u =&gt; u.name == textBox1.Text);<br>                   <span class="hljs-keyword">this</span>.dataGridView1.DataSource = test.ToList();<br>               &#125;<br>               <span class="hljs-keyword">if</span> (comboBox1.SelectedValue.ToString() == <span class="hljs-string">&quot;u.password&quot;</span>)<br>               &#123;<br>                   <span class="hljs-keyword">var</span> test = study.TestData.Where(u =&gt; u.password == textBox1.Text);<br>                   <span class="hljs-keyword">this</span>.dataGridView1.DataSource = test.ToList();<br>               &#125;<br>               <span class="hljs-keyword">if</span> (comboBox1.SelectedValue.ToString() == <span class="hljs-string">&quot;u.phone&quot;</span>)<br>               &#123;<br>                   <span class="hljs-keyword">var</span> test = study.TestData.Where(u =&gt; u.phone == textBox1.Text);<br>                   <span class="hljs-keyword">this</span>.dataGridView1.DataSource = test.ToList();<br>               &#125;<br>               <span class="hljs-keyword">if</span> (comboBox1.SelectedValue.ToString() == <span class="hljs-string">&quot;u.email&quot;</span>)<br>               &#123;<br>                   <span class="hljs-keyword">var</span> test = study.TestData.Where(u =&gt; u.email == textBox1.Text);<br>                   <span class="hljs-keyword">this</span>.dataGridView1.DataSource = test.ToList();<br>               &#125;<br>               <span class="hljs-keyword">if</span> (comboBox1.SelectedValue.ToString() == <span class="hljs-string">&quot;u.phone&quot;</span>)<br>               &#123;<br>                   <span class="hljs-keyword">var</span> test = study.TestData.Where(u =&gt; u.phone == textBox1.Text);<br>                   <span class="hljs-keyword">this</span>.dataGridView1.DataSource = test.ToList();<br>               &#125;<br><br>           &#125;<br>       &#125;<br>       <span class="hljs-comment">//重置按钮实现</span><br>       <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button5_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>       &#123;<br>           textBox1.Text = <span class="hljs-string">&quot;&quot;</span>;<br>           comboBox1.Text = <span class="hljs-string">&quot;&quot;</span>;<br>           <span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> study = <span class="hljs-keyword">new</span> StudyEFEntities())<br>           &#123;<br>                <br>               <span class="hljs-keyword">var</span> test = study.TestData;<br>               <span class="hljs-keyword">this</span>.dataGridView1.DataSource = test.ToList();<br><br>           &#125;<br>       &#125;<br></code></pre></td></tr></table></figure><h2 id="运行测试-2"><a href="#运行测试-2" class="headerlink" title="运行测试"></a>运行测试</h2><p><img src="/./../images/EF%E6%A1%86%E6%9E%B6/34dfb9ef8a084e68bd51bc7166ebf7c8.png" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;演示&quot;&gt;&lt;a href=&quot;#演示&quot; class=&quot;headerlink&quot; title=&quot;演示&quot;&gt;&lt;/a&gt;演示&lt;/h1&gt;&lt;p&gt;[video(video-xcdU9b91-1704040286495)(type-csdn)(url-&lt;a href=&quot;https://l</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>蓝桥杯模拟赛</title>
    <link href="http://zdx-1.github.io/2024/04/05/%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A8%A1%E6%8B%9F%E8%B5%9B%E6%B1%87%E6%80%BB/"/>
    <id>http://zdx-1.github.io/2024/04/05/%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A8%A1%E6%8B%9F%E8%B5%9B%E6%B1%87%E6%80%BB/</id>
    <published>2024-04-05T01:39:41.000Z</published>
    <updated>2024-04-24T12:06:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小郑的蓝桥平衡串"><a href="#小郑的蓝桥平衡串" class="headerlink" title="小郑的蓝桥平衡串"></a>小郑的蓝桥平衡串</h1><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>平衡串指的是一个字符串，其中包含两种不同字符，并且这两种字符的数量相等。</p><p>例如，$ababab$ 和 $aababb$ 都是平衡串，因为每种字符各有三个，而 $abaab$ 和 $aaaab$ 都不是平衡串，因为它们的字符数量不相等。</p><p>平衡串在密码学和计算机科学中具有重要应用，比如可以用于构造哈希函数或者解决一些数学问题。</p><p>小郑拿到一个只包含 $L$、$Q$ 的字符串，他的任务就是找到最长平衡串，且满足平衡串的要求，即保证子串中 $L$、$Q$ 的数量相等。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入一行字符串，保证字符串中只包含字符 $L$、$Q$。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出一个整数，为输入字符串中最长平衡串的长度。</p><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">LQLL<br></code></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">2<br></code></pre></td></tr></table></figure><h3 id="评测数据规模"><a href="#评测数据规模" class="headerlink" title="评测数据规模"></a>评测数据规模</h3><p>对于所有评测数据，输入字符串的长度 $len \le 1000$。</p><h3 id="运行限制"><a href="#运行限制" class="headerlink" title="运行限制"></a>运行限制</h3><table><thead><tr><th>语言</th><th>最大运行时间</th><th>最大运行内存</th></tr></thead><tbody><tr><td>C++</td><td>1s</td><td>256M</td></tr><tr><td>C</td><td>1s</td><td>256M</td></tr><tr><td>Java</td><td>2s</td><td>256M</td></tr><tr><td>Python3</td><td>3s</td><td>256M</td></tr><tr><td>PyPy3</td><td>3s</td><td>256M</td></tr><tr><td>Go</td><td>3s</td><td>256M</td></tr><tr><td>JavaScript</td><td>3s</td><td>256M</td></tr></tbody></table><h3 id="解题答案"><a href="#解题答案" class="headerlink" title="解题答案"></a>解题答案</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> accumulate<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_presum</span>(<span class="hljs-params">a</span>):<br>  <span class="hljs-built_in">sum</span>=<span class="hljs-built_in">list</span>(accumulate(a))<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_sum</span>(<span class="hljs-params"><span class="hljs-built_in">sum</span>,l,r</span>):<br>  <span class="hljs-keyword">if</span> l==<span class="hljs-number">0</span>:<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>[r]<br>  <span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>[r]-<span class="hljs-built_in">sum</span>[l-<span class="hljs-number">1</span>]<br>s=<span class="hljs-built_in">input</span>()<br>n=<span class="hljs-built_in">len</span>(s)<br>a=[]<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> s:<br>  <span class="hljs-keyword">if</span> x==<span class="hljs-string">&quot;L&quot;</span>:<br>    a.append(<span class="hljs-number">1</span>)<br>  <span class="hljs-keyword">else</span>:<br>    a.append(-<span class="hljs-number">1</span>)<br><span class="hljs-built_in">sum</span>=get_presum(a)<br>ans=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>  <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i,n):<br>    <span class="hljs-keyword">if</span> get_sum(<span class="hljs-built_in">sum</span>,i,j)==<span class="hljs-number">0</span>:<br>      ans=<span class="hljs-built_in">max</span>(ans,j-i+<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h1 id="区间次方和"><a href="#区间次方和" class="headerlink" title="区间次方和"></a>区间次方和</h1><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>给定一个长度为 $n$ 的整数数组 $a$ 以及 $m$ 个查询。</p><p>每个查询包含三个整数 $l,r,k$ 表示询问 $l \sim r$ 之间所有元素的 $k$ 次方和。</p><p>请对每个查询输出一个答案，答案对 $10^9+7$ 取模。</p><h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行输入两个整数 $n,m$ 其含义如上所述。</p><p>第二行输入 $n$ 个整数 $a[1],a[2],…,a[n]$。</p><p>接下来 $m$ 行，每行输入三个整数 $l,r,k$ 表示一个查询。</p><h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出 $m$ 行，每行一个整数，表示查询的答案对 $10^9+7$ 取模的结果。</p><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">5 3<br>1 2 3 4 5<br>1 3 2<br>2 4 3<br>3 5 1<br></code></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">14<br>99<br>12<br></code></pre></td></tr></table></figure><h3 id="评测数据规模："><a href="#评测数据规模：" class="headerlink" title="评测数据规模："></a>评测数据规模：</h3><p>对于 $100$% 的评测数据：$1 \leq n,m \leq 10^5$ ，$1 \leq a[i] \leq 100$ ，$1 \leq l \leq r \leq n$ ，$1 \leq k \leq 5$ 。</p><h3 id="运行限制-1"><a href="#运行限制-1" class="headerlink" title="运行限制"></a>运行限制</h3><table><thead><tr><th>语言</th><th>最大运行时间</th><th>最大运行内存</th></tr></thead><tbody><tr><td>C++</td><td>1s</td><td>256M</td></tr><tr><td>C</td><td>1s</td><td>256M</td></tr><tr><td>Java</td><td>2s</td><td>256M</td></tr><tr><td>Python3</td><td>3s</td><td>256M</td></tr><tr><td>PyPy3</td><td>3s</td><td>256M</td></tr><tr><td>Go</td><td>3s</td><td>256M</td></tr><tr><td>JavaScript</td><td>3s</td><td>256M</td></tr></tbody></table><p>总通过次数: 1770  |  总提交次数: 2005  |  通过率: 88.3%</p><p>难度: 简单   标签: 前缀和</p><h3 id="解题答案-1"><a href="#解题答案-1" class="headerlink" title="解题答案"></a>解题答案</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> accumulate<br>MOD=<span class="hljs-number">1000000007</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_presum</span>(<span class="hljs-params">a</span>):<br>  <span class="hljs-built_in">sum</span>=<span class="hljs-built_in">list</span>(accumulate(a))<br>  <span class="hljs-built_in">sum</span>=[x % MOD <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">sum</span>]<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_sum</span>(<span class="hljs-params"><span class="hljs-built_in">sum</span>,l,r</span>):<br>  <span class="hljs-keyword">if</span> l==<span class="hljs-number">0</span>:<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>[r]<br>  <span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">sum</span>[r]-<span class="hljs-built_in">sum</span>[l-<span class="hljs-number">1</span>]+MOD)%MOD<br>n,m=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>a=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>sum_list=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>):<br>  sum_list.append(get_presum([x**i <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> a]))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>  l,r,k=<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>  <span class="hljs-built_in">print</span>(get_sum(sum_list[k-<span class="hljs-number">1</span>],l-<span class="hljs-number">1</span>,r-<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><h1 id="蓝桥17160"><a href="#蓝桥17160" class="headerlink" title="蓝桥17160"></a>蓝桥17160</h1><h3 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h3><p>小 Z 喜欢盖印章。</p><p>有一天，小 Z 得到了一个 $n\times m$ 的网格图，与此同时，他的手上有两种印章（分别称为 A，B），如下图所示。</p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A8%A1%E6%8B%9F%E8%B5%9B%E6%B1%87%E6%80%BB/uid2149259-20240110-1704873080724.jpeg"></p><p>他想将这两种印章盖在这个网格图上。</p><p>由于小 Z 是一个有原则的人，他将按照以下规则进行操作。</p><ol><li>每个印章所形成的图案的边必须和网格图边重合。</li><li>对于网格图上的每一个格子，最多只能被一个印章图案覆盖。</li><li>对于每个印章，可以将印章顺时针旋转 $90^{\circ},180^{\circ},270^{\circ}$。</li><li>印章的图案在网格图上必须是<strong>完整</strong>的。</li></ol><p>给定小 Z 所盖完印章的网格图以及两种印章的使用次数 $K$，请你分别求出两种印章的使用次数。可以证明，在这种情况下二者的使用次数是唯一的。</p><p>数据保证存在一种方案达到要求。</p><p>具体例子可以参考样例。</p><h3 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行包含三个正整数 $n ,m, K(2 \le n \times m \le 10^{6}, 0 \le K \le n \times m)$，具体意义如题面所示。</p><p>接下来有 $n$ 行长度为 $m$ 的 01 串，其中 1 表示这个位置被印章图案覆盖。否则表示这个位置没有被覆盖。</p><h3 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出两个整数，第一个整数为 A 出现的次数，第二个整数为 B 出现的次数。</p><h3 id="样例输入1"><a href="#样例输入1" class="headerlink" title="样例输入1"></a>样例输入1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">3</span> <span class="hljs-number">3</span><br><span class="hljs-number">110</span><br><span class="hljs-number">110</span><br><span class="hljs-number">110</span><br></code></pre></td></tr></table></figure><h3 id="xxxxxxxxxx15-1import-os2import-sys3​4-请在此输入您的代码5n-int-input-6a-list-map-int-input-split-7a-sort-8b-9c-10for-i-in-range-n-11-if-a-i-2-0-12-b-append-a-i-13-else-14-c-append-a-i-15print-“-“-join-map-str-c-”-“-join-map-str-b-python"><a href="#xxxxxxxxxx15-1import-os2import-sys3​4-请在此输入您的代码5n-int-input-6a-list-map-int-input-split-7a-sort-8b-9c-10for-i-in-range-n-11-if-a-i-2-0-12-b-append-a-i-13-else-14-c-append-a-i-15print-“-“-join-map-str-c-”-“-join-map-str-b-python" class="headerlink" title="xxxxxxxxxx15 1import os2import sys3​4# 请在此输入您的代码5n &#x3D; int(input())6a &#x3D; list(map(int, input().split()))7a.sort()8b &#x3D; []9c &#x3D; []10for i in range(n):11    if a[i] % 2 &#x3D;&#x3D; 0:12        b.append(a[i])13    else:14        c.append(a[i])15print(“ “.join(map(str, c)),” “.join(map(str,b)))python"></a>xxxxxxxxxx15 1import os2import sys3​4# 请在此输入您的代码5n &#x3D; int(input())6a &#x3D; list(map(int, input().split()))7a.sort()8b &#x3D; []9c &#x3D; []10for i in range(n):11    if a[i] % 2 &#x3D;&#x3D; 0:12        b.append(a[i])13    else:14        c.append(a[i])15print(“ “.join(map(str, c)),” “.join(map(str,b)))python</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="样例输入2"><a href="#样例输入2" class="headerlink" title="样例输入2"></a>样例输入2</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">3</span> <span class="hljs-number">2</span><br><span class="hljs-number">110</span><br><span class="hljs-number">110</span><br><span class="hljs-number">110</span><br></code></pre></td></tr></table></figure><h3 id="样例输出2"><a href="#样例输出2" class="headerlink" title="样例输出2"></a>样例输出2</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>上述样例如图所示：</p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A8%A1%E6%8B%9F%E8%B5%9B%E6%B1%87%E6%80%BB/uid2149259-20240110-1704873294740.jpeg"></p><h3 id="运行限制-2"><a href="#运行限制-2" class="headerlink" title="运行限制"></a>运行限制</h3><table><thead><tr><th>语言</th><th>最大运行时间</th><th>最大运行内存</th></tr></thead><tbody><tr><td>C++</td><td>1s</td><td>128M</td></tr><tr><td>C</td><td>1s</td><td>128M</td></tr><tr><td>Java</td><td>2s</td><td>128M</td></tr><tr><td>Python3</td><td>3s</td><td>128M</td></tr><tr><td>PyPy3</td><td>3s</td><td>128M</td></tr><tr><td>Go</td><td>3s</td><td>128M</td></tr><tr><td>JavaScript</td><td>3s</td><td>128M</td></tr></tbody></table><h1 id="奇偶排序"><a href="#奇偶排序" class="headerlink" title="奇偶排序"></a>奇偶排序</h1><h3 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h3><p>小蓝所在的王国名为偶数王国，在他们王国中数字的比较通常按以下步骤进行：</p><ul><li>如果两个数字的奇偶性不同，那么偶数一定大于奇数。</li><li>如果两个数字的奇偶性相同，则比较它们的实际数值大小。</li></ul><p>现在给你一个正整数数组 AA，请你输出按照偶数王国规则从小到大排序后的 AA。</p><h3 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行输入一个整数 N(1≤N≤103)N(1≤N≤103) 表示数组 AA 的长度。</p><p>第二行输入 NN 个整数 A1,A2,A3,⋯ ,AN(1≤Ai≤105)A1,A2,A3,⋯,AN(1≤Ai≤105) 表示数组 AA。</p><h3 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出一行 NN 个整数表示答案。</p><h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">5<br>1 2 3 4 5<br></code></pre></td></tr></table></figure><h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">1 3 5 2 4<br></code></pre></td></tr></table></figure><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>解法1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-comment"># 请在此输入您的代码</span><br><br>n = <span class="hljs-built_in">input</span>()<br>str_n = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>list_a = []<br>list_b = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> str_n:<br>    <span class="hljs-keyword">if</span> i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>:<br>        list_b.append(i)<br>    <span class="hljs-keyword">else</span>:<br>        list_a.append(i)<br>list_a.sort()<br>list_b.sort()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot; &quot;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>,list_a))+<span class="hljs-string">&quot; &quot;</span>+<span class="hljs-string">&quot; &quot;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>,list_b)))<br></code></pre></td></tr></table></figure><p>解法2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-comment"># 请在此输入您的代码</span><br>a=<span class="hljs-built_in">input</span>()<br>b=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>c=[]<br>d=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(b)):<br>    <span class="hljs-keyword">if</span> b[i]%<span class="hljs-number">2</span>==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> b[i]!=<span class="hljs-number">0</span>:<br>        c.append(b[i])<br>    <span class="hljs-keyword">else</span>:<br>        d.append(b[i])<br>c.sort()<br>d.sort()<br>e=d+c<br>f=<span class="hljs-string">&#x27; &#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>,e))<br><span class="hljs-built_in">print</span>(f)<br></code></pre></td></tr></table></figure><p>解法3：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>nums=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>a=[]<br>b=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>  <span class="hljs-keyword">if</span> nums[i]&amp;<span class="hljs-number">1</span>:<br>    a.append(nums[i])<br>  <span class="hljs-keyword">else</span>:<br>    b.append(nums[i])<br>a.sort()<br>b.sort()<br>c=a+b<br><span class="hljs-built_in">print</span>(*c)<br></code></pre></td></tr></table></figure><p>解法4：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-comment"># 请在此输入您的代码</span><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>a = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>a.sort()<br>b = []<br>c = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    <span class="hljs-keyword">if</span> a[i] % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        b.append(a[i])<br>    <span class="hljs-keyword">else</span>:<br>        c.append(a[i])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot; &quot;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, c)),<span class="hljs-string">&quot; &quot;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>,b)))<br></code></pre></td></tr></table></figure><h1 id="可结合的元素对"><a href="#可结合的元素对" class="headerlink" title="可结合的元素对"></a>可结合的元素对</h1><h3 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h3><p>小蓝和小桥是蓝桥学院中学业成绩最好的两位同学。一天，小蓝向小桥提出了一个问题，希望小桥能够展示她最新学到的知识。问题是这样的：</p><p>给定一个长度为 NN 的数组 A，如果一对下标 (i,j) 满足以下规则，那么称它们为可结合的元素对：</p><ul><li>1≤i&lt;j≤N。</li><li>lowbit(ai+aj)&#x3D;ai+aj ，其中 lowbit(x) 表示 x 的二进制表示中最低位的 1的值。</li></ul><p>小蓝希望小桥能够计算出数组 AA 中可结合的元素对的数量，但小桥无法解决这个问题，只能请你帮忙了。</p><h3 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行输入一个整数 N(2≤N≤105) 表示数组 A 的长度。</p><p>第二行输入 NN 个整数 A1,A2,A3,⋯ ,AN(1≤Ai≤109) 表示数组 A。</p><h3 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出一个整数表示答案。</p><h3 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">5<br>2 4 6 7 8<br></code></pre></td></tr></table></figure><h3 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">1<br></code></pre></td></tr></table></figure><h3 id="样例说明"><a href="#样例说明" class="headerlink" title="样例说明"></a>样例说明</h3><p>只有下标对 (1,3) 符合条件。</p><h3 id="运行限制-3"><a href="#运行限制-3" class="headerlink" title="运行限制"></a>运行限制</h3><table><thead><tr><th>语言</th><th>最大运行时间</th><th>最大运行内存</th></tr></thead><tbody><tr><td>C++</td><td>2s</td><td>256M</td></tr><tr><td>C</td><td>2s</td><td>256M</td></tr><tr><td>Java</td><td>3s</td><td>256M</td></tr><tr><td>Python3</td><td>4s</td><td>256M</td></tr><tr><td>PyPy3</td><td>4s</td><td>256M</td></tr><tr><td>Go</td><td>4s</td><td>256M</td></tr><tr><td>JavaScript</td><td>4s</td><td>256M</td></tr></tbody></table><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>解法1：</p><p>二者之和为2的幂次即为所求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Counter<br><br><span class="hljs-comment"># 请在此输入您的代码</span><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>a = [<span class="hljs-built_in">int</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">input</span>().split()]<br>a.sort()<br>pool =&#123;&#125;<br><br>rs = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> a:<br>  e = <span class="hljs-number">2</span> ** x.bit_length()-x<br>  rs += pool.get(e,<span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">if</span> x <span class="hljs-keyword">in</span> pool:<br>      pool[x] += <span class="hljs-number">1</span><br>  <span class="hljs-keyword">else</span>:<br>      pool[x] = <span class="hljs-number">1</span><br><br><span class="hljs-built_in">print</span>(rs)<br></code></pre></td></tr></table></figure><p>解法2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> log<br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Counter<br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>arr = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>arr.sort()<br>d = Counter()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<span class="hljs-comment">#预处理计数</span><br>    d[arr[i]] += <span class="hljs-number">1</span><br>ans = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>    d[arr[i]] -= <span class="hljs-number">1</span> <span class="hljs-comment">#计数减去当前位置</span><br>    cnt = <span class="hljs-built_in">int</span>(log(arr[i], <span class="hljs-number">2</span>)) + <span class="hljs-number">1</span><br>    res = <span class="hljs-number">2</span> ** cnt - arr[i]<br>    ans += d[res]<br>    <span class="hljs-comment"># ans+=arr[0:i].count(res)</span><br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><p>解法3：</p><p>两个数加起来是2n的都符合条件，用hash表计数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>a = <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split()))<br>res = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">32</span>): res.append(<span class="hljs-number">1</span>&lt;&lt;i)<br>cnt = &#123;&#125;<br>ans = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(res)):<br>        ans += cnt.get(res[j] - a[i], <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">if</span> a[i] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> cnt: cnt[a[i]] = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>: cnt[a[i]] += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h1 id="题目：霓虹"><a href="#题目：霓虹" class="headerlink" title="题目：霓虹"></a>题目：霓虹</h1><h3 id="问题描述-5"><a href="#问题描述-5" class="headerlink" title="问题描述"></a>问题描述</h3><p>晚上，小蓝正无聊的走在大路上，小蓝所在的街区是一个带有赛博朋克风格的街区。</p><p>他抬头一看，看到了很多霓虹灯牌。在其中的某一个店铺前，挂着一排的数字灯牌，每一个数字的显示都依靠 77 段 LED 管，亮着的灯管组成数字，具体来说如下图所示： </p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A8%A1%E6%8B%9F%E8%B5%9B%E6%B1%87%E6%80%BB/uid1792586-20240227-1709024109264.jpeg" alt="图片描述"></p><p>小蓝刚学过数字电路，他知道具体的工作原理如下：</p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A8%A1%E6%8B%9F%E8%B5%9B%E6%B1%87%E6%80%BB/uid1792586-20240227-1709024091566.jpeg" alt="图片描述"></p><p>在思考的过程中，他发现数字发生了变化。他想要知道，在数字变化的过程中，总共有多少根<strong>灯管</strong>的状态产生了变化？</p><p>例如，从显示数字 00 到显示数字 66，会有一个灯管熄灭，一个灯管点亮，那么总共有两根灯管发生了变化。</p><p>具体来说，当前的数字串是 AA，一秒钟之后，数字串变成了 BB，小蓝想知道，在数字跳转的过程中，有多少个<strong>灯管</strong>的状态发生了变化。</p><h3 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入共两行，包含两个<strong>等长</strong>字符串。</p><p>第一行包含一个字符串 SS（∣S∣≤105∣S∣≤105），代表一开始的数字串。</p><p>第二行包含一个字符串 TT（∣T∣≤105∣T∣≤105），代表跳变后的数字串。</p><h3 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h3><p>一个整数，代表跳变过程中变化的灯管数量。</p><h3 id="样例输入-4"><a href="#样例输入-4" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">01<br>56<br></code></pre></td></tr></table></figure><h3 id="样例输出-4"><a href="#样例输出-4" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">9<br></code></pre></td></tr></table></figure><h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h3><p>跳变过程如题干中的图片。</p><p>0→50→5 变化了 33 根灯管，1→61→6 变化了 66 根灯管，共变化 99 根灯管。</p><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>本题考察位运算，具体考察异或运算。</p><p>每个数字由 77 个数码管表示，我们可以用 77 个二进制位来表示每个数。</p><p>0∼90∼9 可以表示为如下数位：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima">int pos[] = &#123;<span class="hljs-number">0B1111110</span>, <span class="hljs-number">0B0000110</span>, <span class="hljs-number">0B1011011</span>, <span class="hljs-number">0B1001111</span>, <span class="hljs-number">0B0100111</span>,<br>             <span class="hljs-number">0B1101101</span>, <span class="hljs-number">0B1111101</span>, <span class="hljs-number">0B1000110</span>, <span class="hljs-number">0B1111111</span>, <span class="hljs-number">0B1101111</span>&#125;;<br></code></pre></td></tr></table></figure><p><code>0B</code> 是代码语言的二进制前缀，同样的还有 <code>0X</code> 是十六进制前缀，<code>0</code> 是八进制前缀。</p><p>对于两个数，比如 11 和 22，我们可以用 pos1⊗pos2pos1⊗pos2，⊗⊗ 为异或，结果为 <code>0B1011101</code>，11 的数量就是不同的数量。</p><p>复杂度：O(∣S∣)O(∣S∣)。</p><p>如果你愿意统计出 100100 种情况，也是可以的。</p><h3 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC_Code"></a>AC_Code</h3><ul><li>C++</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span>+<span class="hljs-number">100</span>;<br><br><span class="hljs-type">int</span> pos[] = &#123;<span class="hljs-number">0B</span>1111110, <span class="hljs-number">0B</span>0000110, <span class="hljs-number">0B</span>1011011, <span class="hljs-number">0B</span>1001111, <span class="hljs-number">0B</span>0100111,<br>             <span class="hljs-number">0B</span>1101101, <span class="hljs-number">0B</span>1111101, <span class="hljs-number">0B</span>1000110, <span class="hljs-number">0B</span>1111111, <span class="hljs-number">0B</span>1101111&#125;;<br><br><span class="hljs-type">char</span> S[N], T[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">nu_i</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (x) &#123;<br>        res += (x &amp; <span class="hljs-number">1</span>);<br>        x &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; S;<br>    cin &gt;&gt; T;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; S[i]; ++i) &#123;<br>        ans += <span class="hljs-built_in">nu_i</span>(pos[S[i] - <span class="hljs-string">&#x27;0&#x27;</span>] ^ pos[T[i] - <span class="hljs-string">&#x27;0&#x27;</span>]);<br>    &#125;<br>    cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">std</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">100010</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] pos = &#123;<span class="hljs-number">0B1111110</span>, <span class="hljs-number">0B0000110</span>, <span class="hljs-number">0B1011011</span>, <span class="hljs-number">0B1001111</span>, <span class="hljs-number">0B0100111</span>,<br>                        <span class="hljs-number">0B1101101</span>, <span class="hljs-number">0B1111101</span>, <span class="hljs-number">0B1000110</span>, <span class="hljs-number">0B1111111</span>, <span class="hljs-number">0B1101111</span>&#125;;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nu_i</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (x != <span class="hljs-number">0</span>) &#123;<br>            res += (x &amp; <span class="hljs-number">1</span>);<br>            x &gt;&gt;= <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">char</span>[] S = scanner.next().toCharArray();<br>        <span class="hljs-type">char</span>[] T = scanner.next().toCharArray();<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; S.length; i++) &#123;<br>            ans += nu_i(pos[S[i] - <span class="hljs-string">&#x27;0&#x27;</span>] ^ pos[T[i] - <span class="hljs-string">&#x27;0&#x27;</span>]);<br>        &#125;<br>        System.out.println(ans);<br>        scanner.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">nu_i</span>(<span class="hljs-params">x</span>):<br>    res = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> x:<br>        res += (x &amp; <span class="hljs-number">1</span>)<br>        x &gt;&gt;= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    pos = [<span class="hljs-number">0B1111110</span>, <span class="hljs-number">0B0000110</span>, <span class="hljs-number">0B1011011</span>, <span class="hljs-number">0B1001111</span>, <span class="hljs-number">0B0100111</span>,<br>           <span class="hljs-number">0B1101101</span>, <span class="hljs-number">0B1111101</span>, <span class="hljs-number">0B1000110</span>, <span class="hljs-number">0B1111111</span>, <span class="hljs-number">0B1101111</span>]<br><br>    S = <span class="hljs-built_in">input</span>()<br>    T = <span class="hljs-built_in">input</span>()<br><br>    ans = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(S)):<br>        ans += nu_i(pos[<span class="hljs-built_in">int</span>(S[i])] ^ pos[<span class="hljs-built_in">int</span>(T[i])])<br>    <span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h3 id="其他解法："><a href="#其他解法：" class="headerlink" title="其他解法："></a>其他解法：</h3><p>解法1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">li=[[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]]<br>num1=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>()))<br>num2=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>()))<br>add=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(num1)):<br>  <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> li:<br>    add+=j[num1[i]]^j[num2[i]]<br><span class="hljs-built_in">print</span>(add)<br></code></pre></td></tr></table></figure><p>解法2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-comment"># 请在此输入您的代码</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dd</span>(<span class="hljs-params">a,b</span>):<br>  z = <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> b:<br>      z+=i<br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> b:<br>    <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> a:<br>      z+=i<br>  <span class="hljs-keyword">return</span> z<br><br>f1 = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27; &#x27;</span>)<br>f2 = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27; &#x27;</span>)<br>sz = &#123;<br>    <span class="hljs-string">&#x27;0&#x27;</span>:<span class="hljs-string">&#x27;abcdef&#x27;</span>,<br>    <span class="hljs-string">&#x27;1&#x27;</span>:<span class="hljs-string">&#x27;bc&#x27;</span>,<br>    <span class="hljs-string">&#x27;2&#x27;</span>:<span class="hljs-string">&#x27;abged&#x27;</span>,<br>    <span class="hljs-string">&#x27;3&#x27;</span>:<span class="hljs-string">&#x27;abgcd&#x27;</span>,<br>    <span class="hljs-string">&#x27;4&#x27;</span>:<span class="hljs-string">&#x27;fgbc&#x27;</span>,<br>    <span class="hljs-string">&#x27;5&#x27;</span>:<span class="hljs-string">&#x27;afgcd&#x27;</span>,<br>    <span class="hljs-string">&#x27;6&#x27;</span>:<span class="hljs-string">&#x27;afedcg&#x27;</span>,<br>    <span class="hljs-string">&#x27;7&#x27;</span>:<span class="hljs-string">&#x27;abc&#x27;</span>,<br>    <span class="hljs-string">&#x27;8&#x27;</span>:<span class="hljs-string">&#x27;abcdefg&#x27;</span>,<br>    <span class="hljs-string">&#x27;9&#x27;</span>:<span class="hljs-string">&#x27;abcdfg&#x27;</span><br>&#125;<br>t = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i,j <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(f1):<br>    t+=dd(sz[j],sz[f2[i]])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(t))<br></code></pre></td></tr></table></figure><p>解法3：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br>num = [[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],<br>       [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>],<br>       [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]]<br><br>start_num = <span class="hljs-built_in">input</span>()<br>end_num = <span class="hljs-built_in">input</span>()<br>count = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(start_num)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>        <span class="hljs-keyword">if</span> num[<span class="hljs-built_in">int</span>(start_num[i])][j] != num[<span class="hljs-built_in">int</span>(end_num[i])][j]:<br>            count += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(count)<br></code></pre></td></tr></table></figure><p>解法4：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">S = <span class="hljs-built_in">input</span>()<br>T = <span class="hljs-built_in">input</span>()<br>n = <span class="hljs-built_in">len</span>(S)<br>ans = <span class="hljs-number">0</span><br>res = &#123;<span class="hljs-number">0</span>: <span class="hljs-string">&quot;1111110&quot;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&quot;0011000&quot;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&quot;0110111&quot;</span>, <span class="hljs-number">3</span>: <span class="hljs-string">&quot;0111101&quot;</span>, <span class="hljs-number">4</span>: <span class="hljs-string">&quot;1011001&quot;</span>, <span class="hljs-number">5</span>: <span class="hljs-string">&quot;1101101&quot;</span>,<br>       <span class="hljs-number">6</span>: <span class="hljs-string">&quot;1101111&quot;</span>, <span class="hljs-number">7</span>: <span class="hljs-string">&quot;0111000&quot;</span>, <span class="hljs-number">8</span>: <span class="hljs-string">&quot;1111111&quot;</span>, <span class="hljs-number">9</span>: <span class="hljs-string">&quot;1111101&quot;</span>&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    a = res[<span class="hljs-built_in">int</span>(S[i])]<br>    b = res[<span class="hljs-built_in">int</span>(T[i])]<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>        <span class="hljs-keyword">if</span> a[j] != b[j]:<br>            ans += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h1 id="矩阵X"><a href="#矩阵X" class="headerlink" title="矩阵X"></a>矩阵X</h1><h3 id="问题描述-6"><a href="#问题描述-6" class="headerlink" title="问题描述"></a>问题描述</h3><p>小蓝面对一个 n×m 的矩形D，其中每个位置 (i,j) 上都有一个元素 xi,j。</p><p>我们定义两个函数 f(D)、g(D)，f(D) 的值为矩阵 D 的所有元素的和值，g(D) 为矩阵 D 的极差，即矩阵中的最大值减去最小值。</p><p>他需要在这个矩形中选择一个 n′×m′n′×m′ 的<strong>连续子矩阵</strong>，记为矩阵 D′，他希望选择的连续子矩阵 D′ 能够使得 f(D′)×g(D′) 最大化。</p><p>小蓝知道你很聪明，于是他把问题交给了你，希望你回答他最大化的值是多少。</p><p>连续子矩阵：是在原矩阵选取部分<strong>连续行</strong>、<strong>连续列</strong>所组成的新矩阵。</p><h3 id="输入格式-6"><a href="#输入格式-6" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行包含四个整数 n,m,n′,m′（n×m≤106,1≤n′≤n,1≤m′≤m），表示矩形的行数和列数，以及你需要选择的子矩阵的行数和列数。</p><p>接下来 n 行，每行包含 m 个整数，表示矩形中每个位置的元素值 xi,j（1≤xi,j≤106）。</p><p>输入量较大，建议采用较快的输入输出方式。</p><h3 id="输出格式-6"><a href="#输出格式-6" class="headerlink" title="输出格式"></a>输出格式</h3><p>一个整数，代表最大化的值。</p><h3 id="样例输入-5"><a href="#样例输入-5" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">4 4 2 2<br>1 2 3 3<br>2 3 4 5<br>1 1 3 5<br>1 7 2 4<br></code></pre></td></tr></table></figure><h3 id="样例输出-5"><a href="#样例输出-5" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">78<br></code></pre></td></tr></table></figure><h3 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h3><p>选择的连续子矩阵如下图黄色部分所示：</p><p>f(D′)&#x3D;13,g(D′)&#x3D;6f(D′)&#x3D;13,g(D′)&#x3D;6。</p><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A8%A1%E6%8B%9F%E8%B5%9B%E6%B1%87%E6%80%BB/uid1792586-20240228-1709110370184.png" alt="图片描述"></p><h3 id="运行限制-4"><a href="#运行限制-4" class="headerlink" title="运行限制"></a>运行限制</h3><table><thead><tr><th>语言</th><th>最大运行时间</th><th>最大运行内存</th></tr></thead><tbody><tr><td>C++</td><td>4s</td><td>256M</td></tr><tr><td>C</td><td>4s</td><td>256M</td></tr><tr><td>Java</td><td>5s</td><td>256M</td></tr><tr><td>Python3</td><td>10s</td><td>256M</td></tr><tr><td>PyPy3</td><td>10s</td><td>256M</td></tr><tr><td>Go</td><td>10s</td><td>256M</td></tr><tr><td>JavaScript</td><td>10s</td><td>256M</td></tr></tbody></table><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>本题考察单调队列，优先队列，思维，二维前缀和。</p><p>首先第一个问题是存储问题，由于 n×m≤106n×m≤106，但是不知道 n,mn,m 的具体范围，所以，我们可以用一维数组模拟二维，或者二维 vectorvector，这样便就可以解决二维存储问题。</p><p>第二个问题，矩阵求和，我们可以用简单的二维前缀和解决这个问题。</p><p>第三个问题，求子矩阵的最值，我们有两个解法：</p><ol><li>我们记录一下每一行的连续 m′m′ 个元素的最值，具体用优先队列，或者单调队列实现吗，然后我们枚举每个子矩阵，并且暴力扫描这个子矩阵的所有行，由于行数可能很大，我们可以调换一下行列，因为 min⁡(n′,m′)≤106min(n′,m′)≤1</li></ol><p>06，所以整体的复杂度为 O(nmnm)O(nmnm</p><ol><li>)，四秒可以通过。</li><li>我们不需要暴力扫描子矩阵的所有行，我们仍然可以通过单调队列完成扫描每一行，然后记录下连续 n′n′ 的最值即可。复杂度为 O(nm)O(nm)。</li></ol><h3 id="AC-Code-1"><a href="#AC-Code-1" class="headerlink" title="AC_Code"></a>AC_Code</h3><ul><li>C++</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n, m, n1, m1;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span>+<span class="hljs-number">100</span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-type">int</span> a[N];<br>ll t[N];<br><span class="hljs-type">int</span> Mx[N], Mn[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">getidx</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a * m + b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; n1 &gt;&gt; m1;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n * m; ++i) &#123;<br>        cin &gt;&gt; t[i];<br>        a[i] = t[i];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (n1 &gt; m1) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; ++j) &#123;<br>                a[j * n + i] = t[i * m + j];<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">swap</span>(n1, m1);<br>        <span class="hljs-built_in">swap</span>(n, m);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        t[<span class="hljs-built_in">getidx</span>(i, <span class="hljs-number">0</span>)] = a[<span class="hljs-built_in">getidx</span>(i, <span class="hljs-number">0</span>)];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; m; ++j) &#123;<br>            t[<span class="hljs-built_in">getidx</span>(i, j)] = a[<span class="hljs-built_in">getidx</span>(i, j)] + t[<span class="hljs-built_in">getidx</span>(i, j - <span class="hljs-number">1</span>)];<br>        &#125;<br>    &#125;  <br>    <span class="hljs-keyword">using</span> Pair = pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;;<br>    priority_queue&lt;Pair&gt; qx, qn;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">while</span> (!qx.<span class="hljs-built_in">empty</span>()) qx.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">while</span> (!qn.<span class="hljs-built_in">empty</span>()) qn.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m1 - <span class="hljs-number">1</span>; ++j) &#123;<br>            qx.<span class="hljs-built_in">push</span>(&#123;a[<span class="hljs-built_in">getidx</span>(i, j)], j&#125;);<br>            qn.<span class="hljs-built_in">push</span>(&#123;-a[<span class="hljs-built_in">getidx</span>(i, j)], j&#125;);<br>        &#125;   <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = m1 - <span class="hljs-number">1</span>; j &lt; m; ++j) &#123;<br>            <span class="hljs-keyword">while</span> (!qx.<span class="hljs-built_in">empty</span>() &amp;&amp; qx.<span class="hljs-built_in">top</span>().second &lt;= j - m1) qx.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">while</span> (!qn.<span class="hljs-built_in">empty</span>() &amp;&amp; qn.<span class="hljs-built_in">top</span>().second &lt;= j - m1) qn.<span class="hljs-built_in">pop</span>();<br>            qx.<span class="hljs-built_in">push</span>(&#123;a[<span class="hljs-built_in">getidx</span>(i, j)], j&#125;);<br>            qn.<span class="hljs-built_in">push</span>(&#123;-a[<span class="hljs-built_in">getidx</span>(i, j)], j&#125;);<br>            Mx[<span class="hljs-built_in">getidx</span>(i, j)] = qx.<span class="hljs-built_in">top</span>().first;<br>            Mn[<span class="hljs-built_in">getidx</span>(i, j)] = -qn.<span class="hljs-built_in">top</span>().first;<br>        &#125;<br>    &#125;  <br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n1 - <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = m1 - <span class="hljs-number">1</span>; j &lt; m; ++j) &#123;<br>            ll sum = <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> tx = <span class="hljs-number">-1e9</span>, tn = <span class="hljs-number">1e9</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; n1; ++k) &#123;<br>                tx = <span class="hljs-built_in">max</span>(tx, Mx[<span class="hljs-built_in">getidx</span>(i - k, j)]);<br>                tn = <span class="hljs-built_in">min</span>(tn, Mn[<span class="hljs-built_in">getidx</span>(i - k, j)]);<br>                <span class="hljs-keyword">if</span> (j == m1 - <span class="hljs-number">1</span>) sum += t[<span class="hljs-built_in">getidx</span>(i - k, j)];<br>                <span class="hljs-keyword">else</span> sum += t[<span class="hljs-built_in">getidx</span>(i - k, j)] - t[<span class="hljs-built_in">getidx</span>(i - k, j - m1)];<br>            &#125;<br>            ans = <span class="hljs-built_in">max</span>(ans, sum * (tx - tn));<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">std</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> n, m, n1, m1;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] a, Mx, Mn;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">long</span>[] t;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        n = scanner.nextInt();<br>        m = scanner.nextInt();<br>        n1 = scanner.nextInt();<br>        m1 = scanner.nextInt();<br>        <br>        a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n * m];<br>        t = <span class="hljs-keyword">new</span> <span class="hljs-title class_">long</span>[n * m];<br>        Mx = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n * m];<br>        Mn = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n * m];<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n * m; ++i) &#123;<br>            t[i] = scanner.nextLong();<br>            a[i] = (<span class="hljs-type">int</span>) t[i];<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (n1 &gt; m1) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; m; ++j) &#123;<br>                    a[j * n + i] = (<span class="hljs-type">int</span>) t[i * m + j];<br>                &#125;<br>            &#125;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> n1;<br>            n1 = m1;<br>            m1 = temp;<br>            temp = n;<br>            n = m;<br>            m = temp;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            t[getidx(i, <span class="hljs-number">0</span>)] = a[getidx(i, <span class="hljs-number">0</span>)];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt; m; ++j) &#123;<br>                t[getidx(i, j)] = a[getidx(i, j)] + t[getidx(i, j - <span class="hljs-number">1</span>)];<br>            &#125;<br>        &#125;<br><br>        PriorityQueue&lt;Pair&gt; qx = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;((p1, p2) -&gt; Integer.compare(p2.first, p1.first));<br>        PriorityQueue&lt;Pair&gt; qn = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;((p1, p2) -&gt; Integer.compare(p2.first, p1.first));<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-keyword">while</span> (!qx.isEmpty()) qx.poll();<br>            <span class="hljs-keyword">while</span> (!qn.isEmpty()) qn.poll();<br>            <br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; m1 - <span class="hljs-number">1</span>; ++j) &#123;<br>                qx.offer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Pair</span>(a[getidx(i, j)], j));<br>                qn.offer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Pair</span>(-a[getidx(i, j)], j));<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> m1 - <span class="hljs-number">1</span>; j &lt; m; ++j) &#123;<br>                <span class="hljs-keyword">while</span> (!qx.isEmpty() &amp;&amp; qx.peek().second &lt;= j - m1) qx.poll();<br>                <span class="hljs-keyword">while</span> (!qn.isEmpty() &amp;&amp; qn.peek().second &lt;= j - m1) qn.poll();<br>                qx.offer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Pair</span>(a[getidx(i, j)], j));<br>                qn.offer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Pair</span>(-a[getidx(i, j)], j));<br>                Mx[getidx(i, j)] = qx.peek().first;<br>                Mn[getidx(i, j)] = -qn.peek().first;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> n1 - <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> m1 - <span class="hljs-number">1</span>; j &lt; m; ++j) &#123;<br>                <span class="hljs-type">long</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">tx</span> <span class="hljs-operator">=</span> Integer.MIN_VALUE, tn = Integer.MAX_VALUE;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; n1; ++k) &#123;<br>                    tx = Math.max(tx, Mx[getidx(i - k, j)]);<br>                    tn = Math.min(tn, Mn[getidx(i - k, j)]);<br>                    <span class="hljs-keyword">if</span> (j == m1 - <span class="hljs-number">1</span>) sum += t[getidx(i - k, j)];<br>                    <span class="hljs-keyword">else</span> sum += t[getidx(i - k, j)] - t[getidx(i - k, j - m1)];<br>                &#125;<br>                ans = Math.max(ans, sum * (tx - tn));<br>            &#125;<br>        &#125;<br>        System.out.println(ans);<br>        scanner.close();<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getidx</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-keyword">return</span> a * m + b;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pair</span> &#123;<br>        <span class="hljs-type">int</span> first;<br>        <span class="hljs-type">int</span> second;<br><br>        Pair(<span class="hljs-type">int</span> first, <span class="hljs-type">int</span> second) &#123;<br>            <span class="hljs-built_in">this</span>.first = first;<br>            <span class="hljs-built_in">this</span>.second = second;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> heapq<br><br>n, m, n1, m1 = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>a = []<br>t = []<br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    xx = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>    <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> xx:<br>        <span class="hljs-comment"># print(num)</span><br>        t.append(num)<br>        a.append(num)<br><br><span class="hljs-keyword">if</span> n1 &gt; m1:<br>    a = [t[i * m + j] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>    n1, m1 = m1, n1<br>    n, m = m, n<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>        <span class="hljs-keyword">if</span> j == <span class="hljs-number">0</span>:<br>            t[i * m + j] = a[i * m + j]<br>        <span class="hljs-keyword">else</span>:<br>            t[i * m + j] = a[i * m + j] + t[i * m + j - <span class="hljs-number">1</span>]<br><br>Mx = [<span class="hljs-number">0</span>] * (n * m)<br>Mn = [<span class="hljs-number">0</span>] * (n * m)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    qx = []<br>    qn = []<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m1 - <span class="hljs-number">1</span>):<br>        heapq.heappush(qx, (-a[i * m + j], j))<br>        heapq.heappush(qn, (a[i * m + j], j))<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m1 - <span class="hljs-number">1</span>, m):<br>        <span class="hljs-keyword">while</span> qx <span class="hljs-keyword">and</span> qx[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] &lt;= j - m1:<br>            heapq.heappop(qx)<br>        <span class="hljs-keyword">while</span> qn <span class="hljs-keyword">and</span> qn[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] &lt;= j - m1:<br>            heapq.heappop(qn)<br>        heapq.heappush(qx, (-a[i * m + j], j))<br>        heapq.heappush(qn, (a[i * m + j], j))<br>        Mx[i * m + j] = -qx[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br>        Mn[i * m + j] = qn[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br><br>ans = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n1 - <span class="hljs-number">1</span>, n):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m1 - <span class="hljs-number">1</span>, m):<br>        sum_val = <span class="hljs-number">0</span><br>        tx = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;-inf&#x27;</span>)<br>        tn = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n1):<br>            tx = <span class="hljs-built_in">max</span>(tx, Mx[(i - k) * m + j])<br>            tn = <span class="hljs-built_in">min</span>(tn, Mn[(i - k) * m + j])<br>            <span class="hljs-keyword">if</span> j == m1 - <span class="hljs-number">1</span>:<br>                sum_val += t[(i - k) * m + j]<br>            <span class="hljs-keyword">else</span>:<br>                sum_val += t[(i - k) * m + j] - t[(i - k) * m + j - m1]<br>        ans = <span class="hljs-built_in">max</span>(ans, sum_val * (tx - tn))<br><br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h3 id="解题思路2"><a href="#解题思路2" class="headerlink" title="解题思路2"></a>解题思路2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br><span class="hljs-built_in">input</span> = sys.stdin.readline<br><span class="hljs-comment"># 请在此输入您的代码</span><br>n, m, n1, m1 = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br><br>matrix = [[<span class="hljs-number">0</span>] * (m + <span class="hljs-number">1</span>)]<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    matrix.append([<span class="hljs-number">0</span>] + <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())))<br><br><span class="hljs-comment"># 二维前缀和</span><br>prefix = [[<span class="hljs-number">0</span>] * (m + <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)]<br><br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>):<br>        prefix[i][j] = prefix[i-<span class="hljs-number">1</span>][j] + prefix[i][j-<span class="hljs-number">1</span>] - prefix[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>] + matrix[i][j]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">shift_window</span>(<span class="hljs-params">a, n, k, f, l</span>):<br>    b = []<br>    de = deque()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-keyword">while</span> de <span class="hljs-keyword">and</span> f(a[i], a[de[-<span class="hljs-number">1</span>]], l):<br>            de.pop()<br>        de.append(i)<br>        <span class="hljs-keyword">if</span> i &gt;= de[<span class="hljs-number">0</span>] + k:<br>            de.popleft()<br>        <span class="hljs-keyword">if</span> i &gt;= k - <span class="hljs-number">1</span>:<br>            b.append(a[de[<span class="hljs-number">0</span>]])<br>    <span class="hljs-keyword">return</span> b<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x, y, l</span>):<br>    <span class="hljs-keyword">if</span> l:<br>        <span class="hljs-keyword">return</span> x &gt;= y<br>    <span class="hljs-keyword">return</span> x &lt;= y<br><br><br>bb_mx = []<br>bb_mn = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>    bb_mx.append(shift_window(matrix[i][<span class="hljs-number">1</span>:], m, m1, f, <span class="hljs-number">1</span>))<br>    bb_mn.append(shift_window(matrix[i][<span class="hljs-number">1</span>:], m, m1, f, <span class="hljs-number">0</span>))<br><br>cc_mx = []<br>cc_mn = []<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(bb_mx[<span class="hljs-number">0</span>])):<br>    temp1 = []<br>    temp2 = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        temp1.append(bb_mx[i][j])<br>        temp2.append(bb_mn[i][j])<br>    cc_mx.extend(shift_window(temp1, n, n1, f, <span class="hljs-number">1</span>))<br>    cc_mn.extend(shift_window(temp2, n, n1, f, <span class="hljs-number">0</span>))<br><br>gap = [<span class="hljs-number">0</span>] * <span class="hljs-built_in">len</span>(cc_mn)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(cc_mn)):<br>    gap[i] = cc_mx[i] - cc_mn[i]<br>cnt = <span class="hljs-number">0</span><br>ans = -<span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, m - m1 + <span class="hljs-number">2</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n - n1 + <span class="hljs-number">2</span>):<br>        ii, jj = i + n1 - <span class="hljs-number">1</span>, j + m1 - <span class="hljs-number">1</span><br>        pre_sum = prefix[ii][jj] - prefix[ii-n1][jj] - prefix[ii][jj-m1] + prefix[ii-n1][jj-m1]<br>        ans = <span class="hljs-built_in">max</span>(ans, pre_sum * gap[cnt])<br>        cnt += <span class="hljs-number">1</span><br><br><br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h1 id="兽之泪"><a href="#兽之泪" class="headerlink" title="兽之泪"></a>兽之泪</h1><h3 id="问题描述-7"><a href="#问题描述-7" class="headerlink" title="问题描述"></a>问题描述</h3><p><img src="/./../images/%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A8%A1%E6%8B%9F%E8%B5%9B%E6%B1%87%E6%80%BB/uid1792586-20240228-1709088676873.png" alt="图片描述"></p><p>在蓝桥王国，流传着一个古老的传说：在怪兽谷，有一笔由神圣骑士留下的宝藏。</p><p>小蓝是一位年轻而勇敢的冒险家，他决定去寻找宝藏。根据远古卷轴的提示，如果要找到宝藏，那么需要集齐 nn 滴兽之泪，同时卷轴中也记载了，每击败一次怪物，就能够收集一滴兽之泪。</p><p>小蓝知道，这些怪物并非泛泛之辈，每一只都拥有强大的力量和狡猾的技巧。每一只怪物都有它独特的弱点和对策，小蓝必须谨慎选择战斗的策略和使用的能量。</p><p>在怪兽谷中，有 k 只怪兽。对于第 ii 只怪兽，第一次击败他需要 xixi 点能量，后续再击败他需要 yi点能量，由于怪兽吃了亏，所以有所准备，可以得到 yi≥xi。在挑战过程中，前 k−1 只怪兽可以随意挑战，但是第 kk 只怪兽是怪兽之王，如果要挑战第 k只怪兽，那么对于前 k−1 只怪兽<strong>都要击败至少一次</strong>。</p><p>小蓝想知道，如果要集齐 n 滴兽之泪，那么至少需要多少能量。</p><h3 id="输入格式-7"><a href="#输入格式-7" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行包含两个整数 kk 和 nn（2≤k≤105,1≤n≤2×105），表示怪物的数量和需要收集的兽之泪的数量。</p><p>接下来 kk 行，每行包含两个整数 xi 和 yi（1≤xi≤yi≤109），表示第 ii 只怪物第一次和后续击败所需的能量。</p><h3 id="输出格式-7"><a href="#输出格式-7" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出一个整数，表示小蓝至少需要多少点能量才能收集完成。</p><h3 id="样例输入-6"><a href="#样例输入-6" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">3 4<br>2 4<br>4 5<br>1 1<br></code></pre></td></tr></table></figure><h3 id="样例输出-6"><a href="#样例输出-6" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">8<br></code></pre></td></tr></table></figure><h3 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h3><p>一种可行的方案是：</p><ol><li>第一次选择 1 号怪物，消耗能量 2。</li><li>第二次选择 2 号怪物，消耗能量 4。</li><li>由于 1,2都已经击败一次，所以可以选择 33 号，第三次选择 3 号怪物，消耗能量 1。</li><li>第四次选择 3 号怪物，消耗能量 1。</li></ol><h3 id="运行限制-5"><a href="#运行限制-5" class="headerlink" title="运行限制"></a>运行限制</h3><table><thead><tr><th>语言</th><th>最大运行时间</th><th>最大运行内存</th></tr></thead><tbody><tr><td>C++</td><td>1s</td><td>256M</td></tr><tr><td>C</td><td>1s</td><td>256M</td></tr><tr><td>Java</td><td>2s</td><td>256M</td></tr><tr><td>Python3</td><td>3s</td><td>256M</td></tr><tr><td>PyPy3</td><td>3s</td><td>256M</td></tr><tr><td>Go</td><td>3s</td><td>256M</td></tr><tr><td>JavaScript</td><td>3s</td><td>256M</td></tr></tbody></table><h2 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><p>考察分情况讨论与优先队列。</p><ol><li>攻击最后一只怪兽。</li><li>不攻击最后一只怪兽。</li></ol><p>如果攻击最后一只怪兽，那么每只怪兽都要攻击至少一次，然后还剩下 n−kn−k 次，只需要选择最小的一个攻击 n−kn−k 次即可。</p><p>如果不攻击最后一只怪兽，那么只能攻击前 k−1k−1 只怪兽，考虑优先队列，我们首先将前 k−1k−1 只怪兽都入队，然后每次选择最小的那个，当他攻击过后，我们将第二次攻击的能量入队，持续 nn 次即可。</p><p>时间复杂度：O(nlog⁡k)O(nlogk)。</p><h3 id="AC-Code-2"><a href="#AC-Code-2" class="headerlink" title="AC_Code"></a>AC_Code</h3><ul><li>C++</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n, k;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span>+<span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> a[N], b[N];<br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-keyword">using</span> Pair = pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; k &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; ++i) &#123;<br>        cin &gt;&gt; a[i] &gt;&gt; b[i];<br>    &#125;<br>    ll ans1 = <span class="hljs-number">0</span>, ans2 = <span class="hljs-number">1e18</span>;<br><br><span class="hljs-comment">// ------- 不挑战最后一个怪兽</span><br>    priority_queue&lt;Pair&gt; q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; k; ++i) &#123;<br>        q.<span class="hljs-built_in">push</span>(&#123;-a[i], i&#125;);<br>    &#125;<br>    <span class="hljs-type">int</span> tmp = n;<br>    <span class="hljs-keyword">while</span> (tmp) &#123;<br>        <span class="hljs-keyword">auto</span> x = q.<span class="hljs-built_in">top</span>(); q.<span class="hljs-built_in">pop</span>();<br>        ans1 += -x.first;<br>        q.<span class="hljs-built_in">push</span>(&#123;-b[x.second], x.second&#125;);<br>        tmp --;<br>    &#125;<br>    <br><span class="hljs-comment">// ------- 挑战最后一个怪兽</span><br>    <span class="hljs-keyword">if</span> (n &gt;= k) &#123;<br>        ans2 = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; ++i) &#123;<br>            ans2 += a[i];<br>            q.<span class="hljs-built_in">push</span>(&#123;-b[i], i&#125;);<br>        &#125;<br>        n -= k;<br>        <span class="hljs-keyword">while</span> (n) &#123;<br>            <span class="hljs-keyword">auto</span> x = q.<span class="hljs-built_in">top</span>(); q.<span class="hljs-built_in">pop</span>();<br>            ans2 += -x.first;<br>            q.<span class="hljs-built_in">push</span>(&#123;-b[x.second], x.second&#125;);<br>            n --;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-built_in">min</span>(ans1, ans2) &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">std</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pair</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Pair&gt; &#123;<br>        <span class="hljs-type">int</span> first;<br>        <span class="hljs-type">int</span> second;<br><br>        Pair(<span class="hljs-type">int</span> first, <span class="hljs-type">int</span> second) &#123;<br>            <span class="hljs-built_in">this</span>.first = first;<br>            <span class="hljs-built_in">this</span>.second = second;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Pair other)</span> &#123;<br>            <span class="hljs-keyword">return</span> Integer.compare(<span class="hljs-built_in">this</span>.first, other.first);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-type">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[k + <span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[k + <span class="hljs-number">1</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= k; ++i) &#123;<br>            a[i] = scanner.nextInt();<br>            b[i] = scanner.nextInt();<br>        &#125;<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">ans1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, ans2 = Long.MAX_VALUE;<br><br>        <span class="hljs-comment">// ------- 不挑战最后一个怪兽</span><br>        PriorityQueue&lt;Pair&gt; q = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; k; ++i) &#123;<br>            q.offer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Pair</span>(a[i], i));<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> n;<br>        <span class="hljs-keyword">while</span> (tmp &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">Pair</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> q.poll();<br>            ans1 += x.first;<br>            q.offer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Pair</span>(b[x.second], x.second));<br>            tmp--;<br>        &#125;<br><br>        <span class="hljs-comment">// ------- 挑战最后一个怪兽</span><br>        <span class="hljs-keyword">if</span> (n &gt;= k) &#123;<br>            ans2 = <span class="hljs-number">0</span>;<br>            q.clear();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= k; ++i) &#123;<br>                ans2 += a[i];<br>                q.offer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Pair</span>(b[i], i));<br>            &#125;<br>            n -= k;<br>            <span class="hljs-keyword">while</span> (n &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-type">Pair</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> q.poll();<br>                ans2 += x.first;<br>                q.offer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Pair</span>(b[x.second], x.second));<br>                n--;<br>            &#125;<br>        &#125;<br>        System.out.println(Math.min(ans1, ans2));<br>        scanner.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> heapq<br><br>k, n = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>a = [<span class="hljs-number">0</span>] * (k + <span class="hljs-number">1</span>)<br>b = [<span class="hljs-number">0</span>] * (k + <span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, k + <span class="hljs-number">1</span>):<br>    a[i], b[i] = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br><br>ans1, ans2 = <span class="hljs-number">0</span>, <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br><br><span class="hljs-comment"># ------- 不挑战最后一个怪兽</span><br>q = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, k):<br>    heapq.heappush(q, (a[i], i))<br><br>tmp = n<br><span class="hljs-keyword">while</span> tmp:<br>    x = heapq.heappop(q)<br>    ans1 += x[<span class="hljs-number">0</span>]<br>    heapq.heappush(q, (b[x[<span class="hljs-number">1</span>]], x[<span class="hljs-number">1</span>]))<br>    tmp -= <span class="hljs-number">1</span><br><br><span class="hljs-comment"># ------- 挑战最后一个怪兽</span><br><span class="hljs-keyword">if</span> n &gt;= k:<br>    ans2 = <span class="hljs-number">0</span><br>    q = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, k + <span class="hljs-number">1</span>):<br>        ans2 += a[i]<br>        heapq.heappush(q, (b[i], i))<br>    n -= k<br>    <span class="hljs-keyword">while</span> n:<br>        x = heapq.heappop(q)<br>        ans2 += x[<span class="hljs-number">0</span>]<br>        heapq.heappush(q, (b[x[<span class="hljs-number">1</span>]], x[<span class="hljs-number">1</span>]))<br>        n -= <span class="hljs-number">1</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">min</span>(ans1, ans2))<br></code></pre></td></tr></table></figure><h2 id="解题思路2-1"><a href="#解题思路2-1" class="headerlink" title="解题思路2"></a>解题思路2</h2><p>解法2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">import</span> heapq<br><br>a = []<br>b = []<br><br>n,k = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>  x,y = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>  a.append(x)<br>  b.append(y)<br><br><br>q = []<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>):<br>  heapq.heappush(q,(a[i],i))<br><br><br>t = k<br><br>ans = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">while</span> t &gt; <span class="hljs-number">0</span>:<br>  w,i = heapq.heappop(q)<br><br>  heapq.heappush(q,(b[i],i))<br>  ans += w<br>  t -= <span class="hljs-number">1</span><br><br><br>ans2 = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> k &gt;= n:<br>  ans2 += <span class="hljs-built_in">sum</span>(a) + (k-n) * <span class="hljs-built_in">min</span>(b)<br><br><br><span class="hljs-keyword">if</span> k &gt;= n:<br>  <span class="hljs-built_in">print</span>(<span class="hljs-built_in">min</span>(ans,ans2))<br><span class="hljs-keyword">else</span>:<br>  <span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;小郑的蓝桥平衡串&quot;&gt;&lt;a href=&quot;#小郑的蓝桥平衡串&quot; class=&quot;headerlink&quot; title=&quot;小郑的蓝桥平衡串&quot;&gt;&lt;/a&gt;小郑的蓝桥平衡串&lt;/h1&gt;&lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="刷题" scheme="http://zdx-1.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    <category term="蓝桥" scheme="http://zdx-1.github.io/categories/%E5%88%B7%E9%A2%98/%E8%93%9D%E6%A1%A5/"/>
    
    
    <category term="蓝桥杯" scheme="http://zdx-1.github.io/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>2023年蓝桥杯省赛A组试题</title>
    <link href="http://zdx-1.github.io/2024/04/03/2023%E5%B9%B4%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%81%E8%B5%9BA%E7%BB%84%E8%AF%95%E9%A2%98/"/>
    <id>http://zdx-1.github.io/2024/04/03/2023%E5%B9%B4%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%81%E8%B5%9BA%E7%BB%84%E8%AF%95%E9%A2%98/</id>
    <published>2024-04-03T06:36:36.000Z</published>
    <updated>2024-04-03T06:36:38.000Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>2023年蓝桥杯省赛B组试题</title>
    <link href="http://zdx-1.github.io/2024/04/01/2023%E5%B9%B4%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%81%E8%B5%9BB%E7%BB%84%E8%AF%95%E9%A2%98/"/>
    <id>http://zdx-1.github.io/2024/04/01/2023%E5%B9%B4%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%81%E8%B5%9BB%E7%BB%84%E8%AF%95%E9%A2%98/</id>
    <published>2024-04-01T09:00:13.000Z</published>
    <updated>2024-04-01T10:41:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目总览"><a href="#题目总览" class="headerlink" title="题目总览"></a>题目总览</h2><ul><li>2023</li><li>硬币兑换</li><li>松散子序列</li><li>管道</li><li>保险箱</li><li>树上选点</li><li>T字消除</li><li>独一无二</li><li>异或和</li><li>混论的数组</li></ul><h2 id="2023-蓝桥云课-lanqiao-cn"><a href="#2023-蓝桥云课-lanqiao-cn" class="headerlink" title="2023 - 蓝桥云课 (lanqiao.cn)"></a><a href="https://www.lanqiao.cn/problems/3496/learning/?page=1&first_category_id=1&tags=2023">2023 - 蓝桥云课 (lanqiao.cn)</a></h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>请求出在 $12345678$ （含）至 $98765432$ （含）中，有多少个数中完全不包含 $2023$。</p><p>完全不包含 $2023$ 是指无论将这个数的哪些数位移除都不能得到 $2023$。例如 $20322175$，$33220022$ 都完全不包含 $2023$，而 $20230415$，$20193213$ 则含有 $2023$（后者取第 $1,2,6,8$ 个数位）。</p><h3 id="答案提交"><a href="#答案提交" class="headerlink" title="答案提交"></a>答案提交</h3><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h3 id="运行限制"><a href="#运行限制" class="headerlink" title="运行限制"></a>运行限制</h3><table><thead><tr><th>语言</th><th>最大运行时间</th><th>最大运行内存</th></tr></thead><tbody><tr><td>C++</td><td>1s</td><td>256M</td></tr><tr><td>C</td><td>1s</td><td>256M</td></tr><tr><td>Java</td><td>2s</td><td>256M</td></tr><tr><td>Python3</td><td>3s</td><td>256M</td></tr><tr><td>PyPy3</td><td>3s</td><td>256M</td></tr><tr><td>Go</td><td>3s</td><td>256M</td></tr><tr><td>JavaScript</td><td>3s</td><td>256M</td></tr></tbody></table><p>总通过次数: 2971  |  总提交次数: 4174  |  通过率: 71.2%</p><p>难度: 中等   标签: 2023, 模拟, 枚举, 省赛</p><h3 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">ck</span>(<span class="hljs-params">u</span>):<br>    a=[]<br>    <span class="hljs-keyword">while</span> u:<br>        a.append(u%<span class="hljs-number">10</span>)<br>        u//=<span class="hljs-number">10</span><br>    a.reverse()<br>    n=<span class="hljs-built_in">len</span>(a)<br>    cnt1,cnt2,cnt3=<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-keyword">if</span> a[i]==<span class="hljs-number">2</span>:<br>            cnt1+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> a[i]==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> cnt1&gt;<span class="hljs-number">0</span>:<br>            cnt2+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> a[i]==<span class="hljs-number">2</span> <span class="hljs-keyword">and</span> cnt2&gt;<span class="hljs-number">0</span>:<br>            cnt3+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> a[i]==<span class="hljs-number">3</span> <span class="hljs-keyword">and</span> cnt3&gt;<span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>ans=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">12345678</span>,<span class="hljs-number">98765432</span>+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> ck(i):<br>        ans+=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>((<span class="hljs-number">98765432</span>-<span class="hljs-number">12345678</span>+<span class="hljs-number">1</span>)-ans)<br></code></pre></td></tr></table></figure><h2 id="硬币兑换-蓝桥云课"><a href="#硬币兑换-蓝桥云课" class="headerlink" title="硬币兑换 - 蓝桥云课"></a><a href="https://www.lanqiao.cn/problems/3501/learning/?page=2&first_category_id=1&tags=2023">硬币兑换 - 蓝桥云课</a></h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>小蓝手中有 $2023$ 种不同面值的硬币，这些硬币全部是新版硬币，其中第 $i(1 \leq i \leq 2023)$ 种硬币的面值为 $i$，数量也为 $i$ 个。硬币兑换机可以进行硬币兑换，兑换规则为：交给硬币兑换机两个新版硬币 $coin_1$ 和 $coin_2$，硬币兑换机会兑换成一个面值为 $coin_1 + coin_2$ 的旧版硬币。</p><p>小蓝可以用自己已有的硬币进行任意次数兑换，假设最终小蓝手中有 $K$ 种不同面值的硬币（只看面值，不看新旧）并且第 $i(1 \leq i \leq K)$ 种硬币的个数为 $sum_i$。小蓝想要使得 $\max{sum_1,sum_2,\dots,sum_K}$ 的值达到最大，请你帮他计算这个值最大是多少。</p><p>注意硬币兑换机只接受新版硬币进行兑换，并且兑换出的硬币全部是旧版硬币。</p><h3 id="答案提交-1"><a href="#答案提交-1" class="headerlink" title="答案提交"></a>答案提交</h3><p>这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h3 id="运行限制-1"><a href="#运行限制-1" class="headerlink" title="运行限制"></a>运行限制</h3><table><thead><tr><th>语言</th><th>最大运行时间</th><th>最大运行内存</th></tr></thead><tbody><tr><td>C++</td><td>1s</td><td>256M</td></tr><tr><td>C</td><td>1s</td><td>256M</td></tr><tr><td>Java</td><td>2s</td><td>256M</td></tr><tr><td>Python3</td><td>3s</td><td>256M</td></tr><tr><td>PyPy3</td><td>3s</td><td>256M</td></tr><tr><td>Go</td><td>3s</td><td>256M</td></tr><tr><td>JavaScript</td><td>3s</td><td>256M</td></tr></tbody></table><h3 id="参考答案-1"><a href="#参考答案-1" class="headerlink" title="参考答案"></a>参考答案</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">a=[<span class="hljs-number">0</span>]*<span class="hljs-number">100000</span><br>ans=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2024</span>):<br>    a[i]=i<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">4501</span>):<br>    res=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,i//<span class="hljs-number">2</span>+<span class="hljs-number">1</span>):<br>        k=i-j<br>        <span class="hljs-keyword">if</span> j!=k:<br>            res+=<span class="hljs-built_in">min</span>(a[j],a[k])<br>        <span class="hljs-keyword">else</span>:<br>            res+=a[j]//<span class="hljs-number">2</span><br>    res+=a[i]<br>    ans=<span class="hljs-built_in">max</span>(res,ans)<br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h2 id="松散子序列-蓝桥云课"><a href="#松散子序列-蓝桥云课" class="headerlink" title="松散子序列 - 蓝桥云课"></a><a href="https://www.lanqiao.cn/problems/3543/learning/?page=1&first_category_id=1&tags=2023&name=%E6%9D%BE%E6%95%A3%E5%AD%90%E5%BA%8F%E5%88%97">松散子序列 - 蓝桥云课</a></h2><h3 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h3><p>给定一个仅含小写字母的字符串 $s$，假设 $s$ 的一个子序列 $t$ 的第 $i$ 个字符对应了原字符串中的第 $p_i$ 个字符。我们定义 $s$ 的一个松散子序列为：对于 $i &gt; 1$ 总是有 $p_i - p_{i-1} \geq 2$。设一个子序列的价值为其包含的每个字符的价值之和 ($a \sim z$ 分别为 $1 \sim 26$)。</p><p>求 $s$ 的松散子序列中的最大价值。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入一行包含一个字符串 $s$。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出一行包含一个整数表示答案。</p><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">azaazaz<br></code></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">78<br></code></pre></td></tr></table></figure><h3 id="评测用例规模与约定"><a href="#评测用例规模与约定" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h3><p>对于 $20$% 的评测用例，$|s| \leq 10$；</p><p>对于 $40$% 的评测用例，$|s| \leq 300$；</p><p>对于 $70$% 的评测用例，$|s| \leq 5000$；</p><p>对于所有评测用例，$1 \leq |s| \leq 10^6$，字符串中仅包含小写字母。</p><h3 id="运行限制-2"><a href="#运行限制-2" class="headerlink" title="运行限制"></a>运行限制</h3><table><thead><tr><th>语言</th><th>最大运行时间</th><th>最大运行内存</th></tr></thead><tbody><tr><td>C++</td><td>3s</td><td>512M</td></tr><tr><td>C</td><td>3s</td><td>512M</td></tr><tr><td>Java</td><td>5s</td><td>512M</td></tr><tr><td>Python3</td><td>12s</td><td>512M</td></tr><tr><td>PyPy3</td><td>12s</td><td>512M</td></tr><tr><td>Go</td><td>12s</td><td>512M</td></tr><tr><td>JavaScript</td><td>12s</td><td>512M</td></tr></tbody></table><p>总通过次数: 1367  |  总提交次数: 1668  |  通过率: 82%</p><p>难度: 困难   标签: 2023, 省赛, 动态规划</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>根据题目要求，我们需要求出字符串 $s$ 的松散子序列中的最大价值。因此，我们可以使用动态规划的思想来解决这个问题。</p><h4 id="定义状态"><a href="#定义状态" class="headerlink" title="定义状态"></a>定义状态</h4><p>我们可以使用 $f[i][0]$ 表示不选字符串 $s$ 的第 $i$ 个字符时的价值，$f[i][1]$ 表示选字符串 $s$ 的第 $i$ 个字符时的价值。</p><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><p>因为要求价值最大，所以我们需要取最大值。</p><h4 id="状态计算"><a href="#状态计算" class="headerlink" title="状态计算"></a>状态计算</h4><p>因为有 $p_i-p_{i-1}\ge2$ 的限制，所以 $f[i][1]&#x3D;max(f[i-2][1], f[i-2][0])+val$，只能从隔了 $1$ 个的开始选。</p><p>$f[i][0]&#x3D;max(f[i-1][1], f[i-1][0])$，因为第 $i$ 个字符没有选，那么我们就用前一个来更新。</p><p>最终的答案即为 $max(f[n-1][1], f[n-1][0])$。</p><h4 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h4><p>该题的时间复杂度为 $O(n)$。</p><h3 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC_Code"></a>AC_Code</h3><ul><li>C++</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e6</span>+<span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> f[N][<span class="hljs-number">2</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    string s;<br>    cin &gt;&gt; s;<br>    <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">length</span>();<br><br>    unordered_map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; values;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++) &#123;<br>        values[<span class="hljs-string">&#x27;a&#x27;</span> + i] = i + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    f[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = values[s[<span class="hljs-number">0</span>]];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>        f[i][<span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(f[i - <span class="hljs-number">2</span>][<span class="hljs-number">1</span>], f[i - <span class="hljs-number">2</span>][<span class="hljs-number">0</span>]) + values[s[i]];<br>        f[i][<span class="hljs-number">0</span>] = <span class="hljs-built_in">max</span>(f[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>], f[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>]);<br>    &#125;<br><br>    cout &lt;&lt; <span class="hljs-built_in">max</span>(f[n - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>], f[n - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>]) &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> N=(<span class="hljs-type">int</span>)<span class="hljs-number">1e6</span>+<span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[][] f = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N + <span class="hljs-number">1</span>][<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> scanner.next();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> s.length();<br><br>        Map&lt;Character, Integer&gt; values = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++) &#123;<br>            values.put((<span class="hljs-type">char</span>) (<span class="hljs-string">&#x27;a&#x27;</span> + i), i + <span class="hljs-number">1</span>);<br>        &#125;<br><br>        <br>        f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        f[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = values.get(s.charAt(<span class="hljs-number">0</span>));<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>          <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)  f[i][<span class="hljs-number">1</span>] = values.get(s.charAt(i));<br>          <span class="hljs-keyword">if</span>(i&gt;=<span class="hljs-number">2</span>)  f[i][<span class="hljs-number">1</span>] = Math.max(f[i - <span class="hljs-number">2</span>][<span class="hljs-number">1</span>], f[i - <span class="hljs-number">2</span>][<span class="hljs-number">0</span>]) + values.get(s.charAt(i));<br>            f[i][<span class="hljs-number">0</span>] = Math.max(f[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>], f[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>]);<br>        &#125;<br><br>        System.out.println(Math.max(f[n - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>], f[n - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>]));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-built_in">input</span>()<br>n = <span class="hljs-built_in">len</span>(s)<br>f = [[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)] <br>values = &#123;<span class="hljs-built_in">chr</span>(i): <span class="hljs-built_in">ord</span>(<span class="hljs-built_in">chr</span>(i)) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>) + <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">97</span>, <span class="hljs-number">97</span>+<span class="hljs-number">26</span>, <span class="hljs-number">1</span>)&#125;<br><br>f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br>f[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = values[s[<span class="hljs-number">0</span>]]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(s), <span class="hljs-number">1</span>):<br>    f[i][<span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(f[i-<span class="hljs-number">2</span>][<span class="hljs-number">1</span>], f[i-<span class="hljs-number">2</span>][<span class="hljs-number">0</span>]) + values[s[i]]<br>    f[i][<span class="hljs-number">0</span>] = <span class="hljs-built_in">max</span>(f[i-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>], f[i-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>])<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(f-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>], f[n-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]))<br></code></pre></td></tr></table></figure><h2 id="管道-蓝桥云课"><a href="#管道-蓝桥云课" class="headerlink" title="管道 - 蓝桥云课"></a><a href="https://www.lanqiao.cn/problems/3544/learning/?page=1&first_category_id=1&tags=2023&name=%E7%AE%A1%E9%81%93">管道 - 蓝桥云课</a></h2><h3 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h3><p>有一根长度为 $\text{len}$ 的横向的管道，该管道按照单位长度分为 $\text{len}$ 段，每一段的中央有一个可开关的阀门和一个检测水流的传感器。</p><p>一开始管道是空的，位于 $L_i$ 的阀门会在 $S_i$ 时刻打开，并不断让水流入管道。</p><p>对于位于 $L_i$ 的阀门，它流入的水在 $T_i$ ($T_i \geq S_i$) 时刻会使得从第 $L_i - (T_i - S_i)$ 段到第 $L_i + (T_i - S_i)$ 段的传感器检测到水流。</p><p>求管道中每一段中间的传感器都检测到有水流的最早时间。</p><h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入的第一行包含两个整数 $n,\text{len}$，用一个空格分隔，分别表示会打开的阀门数和管道长度。</p><p>接下来 $n$ 行每行包含两个整数 $L_i,S_i$，用一个空格分隔，表示位于第 $L_i$ 段管道中央的阀门会在 $S_i$ 时刻打开。</p><h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出一行包含一个整数表示答案。</p><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">3 10 1 1 6 5 10 2<br></code></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">5<br></code></pre></td></tr></table></figure><h3 id="评测用例规模与约定-1"><a href="#评测用例规模与约定-1" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h3><p>对于 $30$% 的评测用例，$n \leq 200$，$S_i, \text{len} \leq 3000$；</p><p>对于 $70$% 的评测用例，$n \leq 5000$，$S_i, \text{len} \leq 10^5$；</p><p>对于所有评测用例，$1 \leq n \leq 10^5$，$1 \leq S_i,\text{len} \leq 10^9$，$1 \leq L_i \leq \text{len}$，$L_{i-1} &lt; L_i$。</p><h3 id="运行限制-3"><a href="#运行限制-3" class="headerlink" title="运行限制"></a>运行限制</h3><table><thead><tr><th>语言</th><th>最大运行时间</th><th>最大运行内存</th></tr></thead><tbody><tr><td>C++</td><td>3s</td><td>512M</td></tr><tr><td>C</td><td>3s</td><td>512M</td></tr><tr><td>Java</td><td>5s</td><td>512M</td></tr><tr><td>Python3</td><td>12s</td><td>512M</td></tr><tr><td>PyPy3</td><td>12s</td><td>512M</td></tr><tr><td>Go</td><td>12s</td><td>512M</td></tr><tr><td>JavaScript</td><td>12s</td><td>512M</td></tr></tbody></table><p>总通过次数: 1124  |  总提交次数: 1560  |  通过率: 72.1%</p><p>难度: 简单   标签: 2023, 贪心, 省赛, 二分</p><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>对于一个时间点 $x$，如果此时所有传感器都能检测到水流，那么当时间点大于 $x$ 时也一定保证所有传感器都能检测到水流。题目要求我们找到满足条件的最小时间点，因为答案具有二段性，所以我们可以想到二分答案。</p><p>有了二分的思路后，问题转换为对于一个确定的时间点 $x$，我们如何判断此时所有传感器都能检测到水流？仔细思考，当时间确定后，对于一个位于 $a_i$ 且开启时间为 $S_i(S_i \leq x)$ 的阀门，它的水流实际就是一条覆盖区间 $[a_i-(x-S_i),a_i+(x-S_i)]$ 的线段。</p><p>我们可以将所有 $S_i \leq x$ 的阀门都进行转换，实际上得到的就是若干条线段。判断所有传感器是否都能检测到水流，等价于判断能否用这若干条线段覆盖区间 $[1,\text{len}]$，问题接着转换为区间覆盖问题。</p><p>区间覆盖是一个经典问题。我们可以按区间的左端点来排序这些区间。接下来，我们检查这些区间是否覆盖了整个管道。如果第一个区间的左端点大于 $1$，那么表示管道的开始部分没有被覆盖，直接返回 <code>false</code>。否则我们设一个变量 $r$ 表示可到达的最远距离，$r$ 的初始值为第一个区间的右端点。我们接着检查其他区间是否与 $r$ 相邻或重叠。如果当前区间和 $r$ 相邻或重叠，我们将当前区间的右端点和 $r$ 取最大值。最后如果 $r \geq \text{len}$ 则说明成功覆盖所有区间，否则说明没有。</p><p>回过头来考虑如何书写二分，设 $l$ 为答案的下界，$r$ 为答案的上界，如果二分得到的时间点 $\text{mid}$ 符合条件，因为大于 $\text{mid}$ 的时间点也一定符合条件，所以更新 $r&#x3D;\text{mid}$，否则更新 $l&#x3D;\text{mid+1}$。我们重复这个过程，直到搜索范围的左右端点相等，此时就找到了最早的时间。 当然 $l,r$ 的初始值我们也需要思考，$l$ 显然为 $1$，而 $r$ 我们需要考虑极限情况，即只存在一个最左或最右的阀门在最晚的时间点打开，显然此时需要的时间为 $2 \times 10^9$，所以 $r$ 的初始值为 $2 \times 10^9$。</p><p>时间复杂度：$O(n\log n^2)$。</p><h3 id="AC-Code-1"><a href="#AC-Code-1" class="headerlink" title="AC_Code"></a>AC_Code</h3><ul><li>C++</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> sz(s) ((int)s.size())</span><br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios_base :: <span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>); cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span>, <span class="hljs-title">s</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        cin &gt;&gt; a[i] &gt;&gt; s[i];<br>    &#125;<br>    <span class="hljs-keyword">auto</span> check = [&amp;](LL t) &#123;<br>        std::vector&lt;pair&lt;LL, LL&gt;&gt; v;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (t &gt;= s[i]) v.<span class="hljs-built_in">push_back</span>(&#123;a[i] - (t - s[i]), a[i] + (t - s[i])&#125;);<br>        &#125;<br>        <span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sz</span>(v) == <span class="hljs-number">0</span> || v[<span class="hljs-number">0</span>].first &gt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        LL r = v[<span class="hljs-number">0</span>].second;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-built_in">sz</span>(v); ++i) &#123;<br>            <span class="hljs-keyword">if</span> (v[i].first &lt;= r + <span class="hljs-number">1</span>) r = <span class="hljs-built_in">max</span>(r, v[i].second);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> r &gt;= m;<br>    &#125;;<br>    LL l = <span class="hljs-number">1</span>, r = <span class="hljs-number">2e9</span>;<br>    <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>        LL mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    cout &lt;&lt; r &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> n, m;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        n = sc.nextInt();<br>        m = sc.nextInt();<br>        <span class="hljs-type">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-type">int</span>[] s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            a[i] = sc.nextInt();<br>            s[i] = sc.nextInt();<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, r = <span class="hljs-number">2_000_000_000</span>;<br>        <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> l + r &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (check(mid, a, s)) r = mid;<br>            <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        System.out.println(r);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-type">long</span> t, <span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span>[] s)</span> &#123;<br>        List&lt;Pair&lt;Long, Long&gt;&gt; v = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (t &gt;= s[i]) &#123;<br>                v.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Pair</span>&lt;&gt;(a[i] - (t - s[i]), a[i] + (t - s[i])));<br>            &#125;<br>        &#125;<br>        v.sort(Comparator.comparingLong(Pair::getKey));<br>        <span class="hljs-keyword">if</span> (v.size() == <span class="hljs-number">0</span> || v.get(<span class="hljs-number">0</span>).getKey() &gt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> v.get(<span class="hljs-number">0</span>).getValue();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; v.size(); ++i) &#123;<br>            <span class="hljs-keyword">if</span> (v.get(i).getKey() &lt;= r + <span class="hljs-number">1</span>) r = Math.max(r, v.get(i).getValue());<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> r &gt;= m;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pair</span>&lt;K, V&gt; &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> K key;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> V value;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Pair</span><span class="hljs-params">(K key, V value)</span> &#123;<br>            <span class="hljs-built_in">this</span>.key = key;<br>            <span class="hljs-built_in">this</span>.value = value;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> K <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> key;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> V <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> value;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python">n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>a = []<br>s = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    a_i, s_i = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    a.append(a_i)<br>    s.append(s_i)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">t</span>):<br>    v = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-keyword">if</span> t &gt;= s[i]:<br>            v.append((a[i] - (t - s[i]), a[i] + (t - s[i])))<br>    v.sort()<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(v) == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> v[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] &gt; <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    r = v[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(v)):<br>        <span class="hljs-keyword">if</span> v[i][<span class="hljs-number">0</span>] &lt;= r + <span class="hljs-number">1</span>:<br>            r = <span class="hljs-built_in">max</span>(r, v[i][<span class="hljs-number">1</span>])<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> r &gt;= m<br><br>l = <span class="hljs-number">1</span><br>r = <span class="hljs-number">2_000_000_000</span><br><span class="hljs-keyword">while</span> l &lt; r:<br>    mid = (l + r) // <span class="hljs-number">2</span><br>    <span class="hljs-keyword">if</span> check(mid):<br>        r = mid<br>    <span class="hljs-keyword">else</span>:<br>        l = mid + <span class="hljs-number">1</span><br><br><span class="hljs-built_in">print</span>(r)<br></code></pre></td></tr></table></figure><h2 id="保险箱-蓝桥云课"><a href="#保险箱-蓝桥云课" class="headerlink" title="保险箱 - 蓝桥云课"></a><a href="https://www.lanqiao.cn/problems/3545/learning/?page=1&first_category_id=1&name=%E4%BF%9D%E9%99%A9%E7%AE%B1">保险箱 - 蓝桥云课</a></h2><h3 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h3><p>小蓝有一个保险箱，保险箱上共有 $n$ 位数字。</p><p>小蓝可以任意调整保险箱上的每个数字，每一次操作可以将其中一位增加 $1$ 或减少 $1$。</p><p>当某位原本为 $9$ 或 $0$ 时可能会向前（左边）进位&#x2F;退位，当最高位（左边第一位）上的数字变化时向前的进位或退位忽略。</p><p>例如： $00000$ 的第 $5$ 位减 $1$ 变为 $99999$； $99999$ 的第 $5$ 位减 $1$ 变为 $99998$； $00000$ 的第 $4$ 位减 $1$ 变为 $99990$； $97993$ 的第 $4$ 位加 $1$ 变为 $98003$； $99909$ 的第 $3$ 位加 $1$ 变为 $00009$。</p><p>保险箱上一开始有一个数字 $x$，小蓝希望把它变成 $y$，这样才能打开它，问小蓝最少需要操作的次数。</p><h3 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入的第一行包含一个整数 $n$。</p><p>第二行包含一个 $n$ 位整数 $x$。</p><p>第三行包含一个 $n$ 位整数 $y$。</p><h3 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出一行包含一个整数表示答案。</p><h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">5 12349 54321<br></code></pre></td></tr></table></figure><h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">11<br></code></pre></td></tr></table></figure><h3 id="评测用例规模与约定-2"><a href="#评测用例规模与约定-2" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h3><p>对于 $30$% 的评测用例，$1 \leq n \leq 300$；</p><p>对于 $60$% 的评测用例，$1 \leq n \leq 3000$；</p><p>对于所有评测用例，$1 \leq n \leq 10^5$，$x,y$ 中仅包含数字 $0$ 至 $9$，可能有前导零。</p><h3 id="运行限制-4"><a href="#运行限制-4" class="headerlink" title="运行限制"></a>运行限制</h3><table><thead><tr><th>语言</th><th>最大运行时间</th><th>最大运行内存</th></tr></thead><tbody><tr><td>C++</td><td>3s</td><td>512M</td></tr><tr><td>C</td><td>3s</td><td>512M</td></tr><tr><td>Java</td><td>5s</td><td>512M</td></tr><tr><td>Python3</td><td>12s</td><td>512M</td></tr><tr><td>PyPy3</td><td>12s</td><td>512M</td></tr><tr><td>Go</td><td>12s</td><td>512M</td></tr><tr><td>JavaScript</td><td>12s</td><td>512M</td></tr></tbody></table><p>总通过次数: 724  |  总提交次数: 1125  |  通过率: 64.4%</p><p>难度: 简单   标签: 2023, 省赛, 动态规划</p><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>题目问的是将一个 $n$ 位的数字从 $x$ 变成 $y$ 需要进行几次操作，每次操作可以任意选择一位进行 +1 或者 -1，并且除了最高位以外，操作产生的进位和退位会保留。</p><h4 id="暴力思路"><a href="#暴力思路" class="headerlink" title="暴力思路"></a>暴力思路</h4><p>最直接的解法是直接进行模拟，从最后一位数字开始进行比较，判断是加或减哪个能获得最小步骤，同时处理借位或退位的情况。</p><h4 id="动态规划状态设计"><a href="#动态规划状态设计" class="headerlink" title="动态规划状态设计"></a>动态规划状态设计</h4><p>由于这个题目每次对一位进行了加和减的操作之后，会产生进位和退位的后继影响，所以我们可以考虑使用动态规划来解决这个问题。从最低位（从右向左）开始考虑，低位的改变会对高位产生影响，而每一位会存在三种可能性：进位、退位、不退不进。</p><p>因此我们可以使用一个 dp 数组对此进行记录：</p><ol><li>$dp[i][0]$表示第 $i$ 位既没有进位、也没有退位的最小所需操作数。</li><li>$dp[i][1]$表示第 $i$ 位进行了进位的最小所需操作数。</li><li>$dp[i][2]$表示第 $i$ 位进行了退位的最小所需操作数。</li></ol><p>最后对三种可能性取一个最小值，即可得到答案。</p><h4 id="初始化和状态转移"><a href="#初始化和状态转移" class="headerlink" title="初始化和状态转移"></a>初始化和状态转移</h4><p>将 $x$ 上第i位数字变成 $y$ 上第i位数字所需的最小操作数是当前位的操作数加上更低位的操作数，由于存在三种不同的情况，对于每一种情况，分别有以下几种转移：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">dp[i][<span class="hljs-number">0</span>] = <span class="hljs-built_in">min</span>(dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + <span class="hljs-built_in">abs</span>(a[i] - b[i]), dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>] + <span class="hljs-built_in">abs</span>((a[i] + <span class="hljs-number">1</span>) - b[i]) ,  dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">2</span>] + <span class="hljs-built_in">abs</span>((a[i] - <span class="hljs-number">1</span>) - b[i]));<br><br>dp[i][<span class="hljs-number">1</span>] = <span class="hljs-built_in">min</span>(dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + (<span class="hljs-number">10</span> - a[i] + b[i]), dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>] +  <span class="hljs-number">10</span> - (a[i] + <span class="hljs-number">1</span>) + b[i], dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">2</span>] + <span class="hljs-number">10</span> - (a[i] - <span class="hljs-number">1</span>)+ b[i]);<br><br>dp[i][<span class="hljs-number">2</span>] = <span class="hljs-built_in">min</span>(dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + a[i] + <span class="hljs-number">10</span> - b[i], dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>] + (a[i] + <span class="hljs-number">1</span>)+ <span class="hljs-number">10</span> - b[i], dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">2</span>] + (a[i]<span class="hljs-number">-1</span>) + <span class="hljs-number">10</span> - b[i]);<br></code></pre></td></tr></table></figure><p>这三种情况分别对应了当前位置不进不退、进行了进位、进行了退位和上一位不进不退、进行了进位、进行了退位的组合结果，一共有 $3\times3$ 种情况。</p><h4 id="最终答案"><a href="#最终答案" class="headerlink" title="最终答案"></a>最终答案</h4><p>最后的答案是第 $n$ 位上的三种情况的最小值，也就是对 $dp[n][0]$, $dp[n][1]$ 和 $dp[n][2]$ 取最小值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">ans = <span class="hljs-built_in">min</span>(dp[n][<span class="hljs-number">0</span>], dp[n][<span class="hljs-number">1</span>], dp[n][<span class="hljs-number">2</span>])<br></code></pre></td></tr></table></figure><p>时间复杂度为 $O(n)$。</p><h3 id="AC-Code-2"><a href="#AC-Code-2" class="headerlink" title="AC_Code"></a>AC_Code</h3><ul><li>C++</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">1000000000</span>;<br><span class="hljs-type">int</span> dp[<span class="hljs-number">1000010</span>][<span class="hljs-number">3</span>];<br><span class="hljs-type">int</span> n, a[<span class="hljs-number">1000010</span>], b[<span class="hljs-number">1000010</span>];<br>string x, y;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; x &gt;&gt; y;<br>    <span class="hljs-built_in">reverse</span>(x.<span class="hljs-built_in">begin</span>(), x.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-built_in">reverse</span>(y.<span class="hljs-built_in">begin</span>(), y.<span class="hljs-built_in">end</span>());<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        a[i] = x[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        b[i] = y[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (!i) &#123;<br>            dp[i][<span class="hljs-number">0</span>] = <span class="hljs-built_in">abs</span>(a[i] - b[i]);<br>            dp[i][<span class="hljs-number">1</span>] = <span class="hljs-number">10</span> - a[i] + b[i];<br>            dp[i][<span class="hljs-number">2</span>] = a[i] + <span class="hljs-number">10</span> - b[i];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            dp[i][<span class="hljs-number">0</span>] = <span class="hljs-built_in">min</span>(&#123;dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + <span class="hljs-built_in">abs</span>(a[i] - b[i]), dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>] + <span class="hljs-built_in">abs</span>(a[i] + <span class="hljs-number">1</span> - b[i]), dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">2</span>] + <span class="hljs-built_in">abs</span>(a[i] - <span class="hljs-number">1</span> - b[i])&#125;);<br>            dp[i][<span class="hljs-number">1</span>] = <span class="hljs-built_in">min</span>(&#123;dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + (<span class="hljs-number">10</span> - a[i] + b[i]), dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>] + <span class="hljs-number">10</span> - (a[i] + <span class="hljs-number">1</span>) + b[i], dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">2</span>] + <span class="hljs-number">10</span> - (a[i] - <span class="hljs-number">1</span>) + b[i]&#125;);<br>            dp[i][<span class="hljs-number">2</span>] = <span class="hljs-built_in">min</span>(&#123;dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + a[i] + <span class="hljs-number">10</span> - b[i], dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>] + (a[i] + <span class="hljs-number">1</span>) + <span class="hljs-number">10</span> - b[i], dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">2</span>] + (a[i] - <span class="hljs-number">1</span>) + <span class="hljs-number">10</span> - b[i]&#125;);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> ans = dp[n<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>];<br>    ans = <span class="hljs-built_in">min</span>(ans, dp[n - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>]);<br>    ans = <span class="hljs-built_in">min</span>(ans, dp[n - <span class="hljs-number">1</span>][<span class="hljs-number">2</span>]);<br>    cout &lt;&lt; ans &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">INF</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000000000</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        scanner.nextLine(); <span class="hljs-comment">// Consume newline</span><br>        <br>        <span class="hljs-type">String</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(scanner.nextLine()).reverse().toString();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(scanner.nextLine()).reverse().toString();<br>        <br>        <span class="hljs-type">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-type">int</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            a[i] = x.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span>;<br>            b[i] = y.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        &#125;<br>        <br>        <span class="hljs-type">int</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">1000010</span>][<span class="hljs-number">3</span>];<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) &#123;<br>                dp[i][<span class="hljs-number">0</span>] = Math.abs(a[i] - b[i]);<br>                dp[i][<span class="hljs-number">1</span>] = <span class="hljs-number">10</span> - a[i] + b[i];<br>                dp[i][<span class="hljs-number">2</span>] = a[i] + <span class="hljs-number">10</span> - b[i];<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                dp[i][<span class="hljs-number">0</span>] = Math.min(<br>                    Math.min(dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + Math.abs(a[i] - b[i]), dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>] + Math.abs(a[i] + <span class="hljs-number">1</span> - b[i])),<br>                    dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">2</span>] + Math.abs(a[i] - <span class="hljs-number">1</span> - b[i])<br>                );<br>                <br>                dp[i][<span class="hljs-number">1</span>] = Math.min(<br>                    Math.min(dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + (<span class="hljs-number">10</span> - a[i] + b[i]), dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>] + <span class="hljs-number">10</span> - (a[i] + <span class="hljs-number">1</span>) + b[i]),<br>                    dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">2</span>] + <span class="hljs-number">10</span> - (a[i] - <span class="hljs-number">1</span>) + b[i]<br>                );<br>                <br>                dp[i][<span class="hljs-number">2</span>] = Math.min(<br>                    Math.min(dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + a[i] + <span class="hljs-number">10</span> - b[i], dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>] + (a[i] + <span class="hljs-number">1</span>) + <span class="hljs-number">10</span> - b[i]),<br>                    dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">2</span>] + (a[i] - <span class="hljs-number">1</span>) + <span class="hljs-number">10</span> - b[i]<br>                );<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> Math.min(Math.min(dp[n - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>], dp[n - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>]), dp[n - <span class="hljs-number">1</span>][<span class="hljs-number">2</span>]);<br>        System.out.println(ans);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python">INF = <span class="hljs-number">1000000000</span><br>dp = [[INF <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000010</span>)]<br><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>x = <span class="hljs-built_in">input</span>()[::-<span class="hljs-number">1</span>]<br>y = <span class="hljs-built_in">input</span>()[::-<span class="hljs-number">1</span>]<br><br>a = [<span class="hljs-number">0</span>] * n<br>b = [<span class="hljs-number">0</span>] * n<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    a[i] = <span class="hljs-built_in">int</span>(x[i])<br>    b[i] = <span class="hljs-built_in">int</span>(y[i])<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>:<br>        dp[i][<span class="hljs-number">0</span>] = <span class="hljs-built_in">abs</span>(a[i] - b[i])<br>        dp[i][<span class="hljs-number">1</span>] = <span class="hljs-number">10</span> - a[i] + b[i]<br>        dp[i][<span class="hljs-number">2</span>] = a[i] + <span class="hljs-number">10</span> - b[i]<br>    <span class="hljs-keyword">else</span>:<br>        dp[i][<span class="hljs-number">0</span>] = <span class="hljs-built_in">min</span>(dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + <span class="hljs-built_in">abs</span>(a[i] - b[i]), dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>] + <span class="hljs-built_in">abs</span>(a[i] + <span class="hljs-number">1</span> - b[i]), dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">2</span>] + <span class="hljs-built_in">abs</span>(a[i] - <span class="hljs-number">1</span> - b[i]))<br>        dp[i][<span class="hljs-number">1</span>] = <span class="hljs-built_in">min</span>(dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + (<span class="hljs-number">10</span> - a[i] + b[i]), dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>] + <span class="hljs-number">10</span> - (a[i] + <span class="hljs-number">1</span>) + b[i], dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">2</span>] + <span class="hljs-number">10</span> - (a[i] - <span class="hljs-number">1</span>) + b[i])<br>        dp[i][<span class="hljs-number">2</span>] = <span class="hljs-built_in">min</span>(dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + a[i] + <span class="hljs-number">10</span> - b[i], dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>] + (a[i] + <span class="hljs-number">1</span>) + <span class="hljs-number">10</span> - b[i], dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">2</span>] + (a[i] - <span class="hljs-number">1</span>) + <span class="hljs-number">10</span> - b[i])<br><br>ans = <span class="hljs-built_in">min</span>(dp[n-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>], dp[n-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>], dp[n-<span class="hljs-number">1</span>][<span class="hljs-number">2</span>])<br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h2 id="树上选点-蓝桥云课"><a href="#树上选点-蓝桥云课" class="headerlink" title="树上选点 - 蓝桥云课"></a><a href="https://www.lanqiao.cn/problems/3546/learning/?page=1&first_category_id=1&name=%E6%A0%91%E4%B8%8A%E9%80%89%E7%82%B9">树上选点 - 蓝桥云课</a></h2><h3 id="问题描述-5"><a href="#问题描述-5" class="headerlink" title="问题描述"></a>问题描述</h3><p>给定一棵树，树根为 $1$，每个点的点权为 $V_i$。 你需要找出若干个点 $P_i$，使得：</p><ol><li>每两个点 $P_x$、$P_y$ 互不相邻；</li><li>每两个点 $P_x$、$P_y$ 与树根的距离互不相同；</li><li>找出的点的点权之和尽可能大。</li></ol><p>请输出找到的这些点的点权和的最大值。</p><h3 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入的第一行包含一个整数 $n$。</p><p>第二行包含 $n-1$ 个整数 $F_i$，相邻整数之间使用一个空格分隔，分别表示第 $2$ 至 $n$ 个结点的父结点编号。</p><p>第三行包含 $n$ 个整数 $V_i$，相邻整数之间使用一个空格分隔，分别表示每个结点的点权。</p><h3 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出一行包含一个整数表示答案。</p><h3 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">5 1 2 3 2 2 1 9 3 5<br></code></pre></td></tr></table></figure><h3 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">11<br></code></pre></td></tr></table></figure><h3 id="评测用例规模与约定-3"><a href="#评测用例规模与约定-3" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h3><p>对于 $40$% 的评测用例，$n \leq 5000$；</p><p>对于所有评测用例，$1 \leq n \leq 2 \times 10^5$，$1 \leq F_i &lt; i$，$1 \leq V_i \leq 10^4$。</p><h3 id="运行限制-5"><a href="#运行限制-5" class="headerlink" title="运行限制"></a>运行限制</h3><table><thead><tr><th>语言</th><th>最大运行时间</th><th>最大运行内存</th></tr></thead><tbody><tr><td>C++</td><td>3s</td><td>512M</td></tr><tr><td>C</td><td>3s</td><td>512M</td></tr><tr><td>Java</td><td>5s</td><td>512M</td></tr><tr><td>Python3</td><td>20s</td><td>512M</td></tr><tr><td>PyPy3</td><td>20s</td><td>512M</td></tr><tr><td>Go</td><td>20s</td><td>512M</td></tr><tr><td>JavaScript</td><td>20s</td><td>512M</td></tr></tbody></table><p>总通过次数: 210  |  总提交次数: 457  |  通过率: 46%</p><p>难度: 简单   标签: 2023, 省赛, 动态规划</p><p>版权声明</p><p>部分题目由用户贡献，若您是著作权持有人，请与我们联系。</p><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><p>这个问题可以使用动态规划的策略进行解决。首先，我们要解析并存储树的结构，然后从叶子节点开始，通过动态规划的方法，逐步向上更新每个节点被选中和不被选中时能得到的最大权值和。</p><p><strong>状态定义</strong></p><p>我们定义两种状态，$f[u][1]$ 和 $f[u][0]$。$f[u][1]$ 表示选择节点 $u$ 的最大权值，$f[u][0]$ 表示不选择节点 $u$ 的最大权值。</p><p><strong>状态转移</strong></p><p>对于每一个节点 $u$，我们有以下状态转移方程：</p><ul><li>不选择当前节点 $u$：$f[u][0] &#x3D; max(f[u][0], f[v][1])$，其中 $v$ 是 $u$ 的下一层节点，表示我们可以选择下一层的任何一个节点；</li><li>选择当前节点 $u$：$f[u][1] &#x3D; max(f[u][1], a[u] + f[v][0])$，表示我们选择当前节点 $u$，并且我们不能选择其子节点 $v$，但是我们可以选择 $v$ 的子节点。</li></ul><p><strong>具体实现</strong></p><p>首先，我们读取输入数据，存储树的结构，并初始化状态矩阵。然后，我们从叶子节点开始，逐步向上更新每一个节点的状态。对于每一层的节点，我们先更新不选择该节点的方案，然后再更新选择该节点的方案。为了减少时间复杂度，我们使用了 <code>multiset</code> 来存储每一层能够转移的所有状态，可以直接找到最大值。</p><p><strong>时间复杂度分析</strong></p><p>每个节点我们都进行了一次状态更新操作，所以时间复杂度为 $O(n)$。在更新状态时，我们使用了 <code>multiset</code> 进行最大值查询，时间复杂度为 $O(\log n)$，所以总的时间复杂度为 $O(n \log n)$。</p><h3 id="AC-Code-3"><a href="#AC-Code-3" class="headerlink" title="AC_Code"></a>AC_Code</h3><ul><li>C++</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//c++</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">200010</span>;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; g[N], depth[N];     <span class="hljs-comment">// g[]用来存每个结点的儿子 , depth[] 用来存每一深度的结点</span><br><span class="hljs-type">int</span> d[N], a[N], f[N][<span class="hljs-number">2</span>], fa[N]; <span class="hljs-comment">// d[]记录每个结点的深度,a[]是每个结点的值,f[][]第一维表示结点、第二维表示是否选择该节点</span><br><span class="hljs-built_in">multiset</span>&lt;<span class="hljs-type">int</span>&gt; s[N];             <span class="hljs-comment">// 存每一层能够转移的所有状态</span><br><span class="hljs-type">signed</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;n);<br>    d[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;          <span class="hljs-comment">// 1是根，所以深度为1</span><br>    <span class="hljs-type">int</span> max_depth = <span class="hljs-number">0</span>; <span class="hljs-comment">// 记录最大深度</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;fa[i]);<br>        g[fa[i]].push_back(i);            <span class="hljs-comment">// 存结点的儿子</span><br>        d[i] = d[fa[i]] + <span class="hljs-number">1</span>;              <span class="hljs-comment">// 子节点深度等于父节点深度+1</span><br>        max_depth = max(max_depth, d[i]); <span class="hljs-comment">// 更新最大深度</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;a[i]);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        depth[d[i]].push_back(i); <span class="hljs-comment">// 记录每一层的结点</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = max_depth; j &gt;= <span class="hljs-number">1</span>; j--) <span class="hljs-comment">// 从叶子结点开始更新结点最大值</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> u : depth[j]) <span class="hljs-comment">// 本层结点大小更新</span><br>        &#123;<br>            <span class="hljs-comment">// 先来更新不选择该结点的方案</span><br>            <span class="hljs-keyword">if</span> (s[j + <span class="hljs-number">1</span>].size())                               <span class="hljs-comment">// 如果下一层存在能转移过来的状态</span><br>                f[u][<span class="hljs-number">0</span>] = max(f[u][<span class="hljs-number">0</span>], *prev(s[j + <span class="hljs-number">1</span>].end())); <span class="hljs-comment">// 当前节点如果不选肯定选的是前一层的最大值(选或者不选都行)</span><br><br>            <span class="hljs-comment">// 再来更新选择该节点的方案</span><br>            f[u][<span class="hljs-number">1</span>] = a[u];     <span class="hljs-comment">// 如果选择该结点,则该结点的最小值是结点本身的值</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : g[u]) <span class="hljs-comment">// 选择能够转移到现在这个状态的状态</span><br>            &#123;<br>                s[j + <span class="hljs-number">1</span>].erase(s[j + <span class="hljs-number">1</span>].find(f[v][<span class="hljs-number">1</span>])); <span class="hljs-comment">// 因为不能选择相邻结点,把选取了它的儿子的方案除去,不能从这些最大值中更新</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> (s[j + <span class="hljs-number">1</span>].size()) <span class="hljs-comment">// 如果下一层存在能转移过来的状态</span><br>            &#123;<br>                <span class="hljs-type">int</span> mx = *prev(s[j + <span class="hljs-number">1</span>].end());    <span class="hljs-comment">// 能够转移至这个状态的最大值</span><br>                f[u][<span class="hljs-number">1</span>] = max(f[u][<span class="hljs-number">1</span>], a[u] + mx); <span class="hljs-comment">// 如果选这个节点,那么要从他非儿子中选一个最大的(不选或选)或者从他儿子中选一个不选的最大的</span><br>            &#125;<br><br>            <span class="hljs-comment">// 为下一次状态更新做准备</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : g[u])<br>            &#123;<br>                s[j + <span class="hljs-number">1</span>].insert(f[v][<span class="hljs-number">1</span>]); <span class="hljs-comment">// 刚刚为了更新选择该结点状态时删去了选它的儿子状态,现在再加回来,因为本层其他节点可能更新需要</span><br>            &#125;<br>            s[j].insert(f[u][<span class="hljs-number">1</span>]);<br>            s[j].insert(f[u][<span class="hljs-number">0</span>]); <span class="hljs-comment">// 当前节点或者不选都可以作为它们上一层节点的更新值</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, max(f[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>], f[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>])); <span class="hljs-comment">// 在选和不选1结点中的方案中的最大值就是答案</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">200010</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;Integer&gt;[] g = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>[N], depth = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>[N];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N], a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N], fa = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[][] f = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N][<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> TreeMap&lt;Integer, Integer&gt;[] s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>[N];<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        d[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max_depth</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            g[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            depth[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>            fa[i] = scanner.nextInt();<br>            g[fa[i]].add(i);<br>            d[i] = d[fa[i]] + <span class="hljs-number">1</span>;<br>            max_depth = Math.max(max_depth, d[i]);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            a[i] = scanner.nextInt();<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            depth[d[i]].add(i);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= max_depth + <span class="hljs-number">1</span>; i++)&#123;<br>            s[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;();<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> max_depth; j &gt;= <span class="hljs-number">1</span>; j--) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> u : depth[j]) &#123;<br>                <span class="hljs-keyword">if</span> (s[j + <span class="hljs-number">1</span>].size() &gt; <span class="hljs-number">0</span>) &#123;<br>                    f[u][<span class="hljs-number">0</span>] = Math.max(f[u][<span class="hljs-number">0</span>], s[j + <span class="hljs-number">1</span>].lastKey());<br>                &#125;<br>                f[u][<span class="hljs-number">1</span>] = a[u];<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v : g[u]) &#123;<br>                    remove(s[j + <span class="hljs-number">1</span>], f[v][<span class="hljs-number">1</span>]);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (s[j + <span class="hljs-number">1</span>].size() &gt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">mx</span> <span class="hljs-operator">=</span> s[j + <span class="hljs-number">1</span>].lastKey();<br>                    f[u][<span class="hljs-number">1</span>] = Math.max(f[u][<span class="hljs-number">1</span>], a[u] + mx);<br>                &#125;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v : g[u]) &#123;<br>                    add(s[j + <span class="hljs-number">1</span>], f[v][<span class="hljs-number">1</span>]);<br>                &#125;<br>                add(s[j], f[u][<span class="hljs-number">1</span>]);<br>                add(s[j], f[u][<span class="hljs-number">0</span>]);<br>            &#125;<br>        &#125;<br><br>        System.out.println(Math.max(f[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>], f[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]));<br>        scanner.close();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(TreeMap&lt;Integer, Integer&gt; map, <span class="hljs-type">int</span> x)</span> &#123;<br>        map.put(x, map.getOrDefault(x, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(TreeMap&lt;Integer, Integer&gt; map, <span class="hljs-type">int</span> x)</span> &#123;<br>        <span class="hljs-keyword">if</span> (map.containsKey(x)) &#123;<br>            <span class="hljs-keyword">if</span> (map.get(x) == <span class="hljs-number">1</span>) &#123;<br>                map.remove(x);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                map.put(x, map.get(x) - <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Counter<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br>N = <span class="hljs-number">200010</span><br>g = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N)]<br>depth = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N)]<br>d = [<span class="hljs-number">0</span>] * N<br>a = [<span class="hljs-number">0</span>] * N<br>fa = [<span class="hljs-number">0</span>] * N<br>f = [[<span class="hljs-number">0</span>] * <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N)]<br>s = [Counter() <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N)]<br><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>d[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span><br>max_depth = <span class="hljs-number">0</span><br>arrt = [<span class="hljs-built_in">int</span>(n) <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&quot;</span>).split()]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n + <span class="hljs-number">1</span>):<br>    fa[i] = arrt[i - <span class="hljs-number">2</span>]<span class="hljs-comment">#int(input())</span><br>    g[fa[i]].append(i)<br>    d[i] = d[fa[i]] + <span class="hljs-number">1</span><br>    max_depth = <span class="hljs-built_in">max</span>(max_depth, d[i])<br><br>arrt = [<span class="hljs-built_in">int</span>(n) <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&quot;</span>).split()]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>    a[i] = arrt[i - <span class="hljs-number">1</span>] <span class="hljs-comment">#int(input())</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>    depth[d[i]].append(i)<br><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(max_depth, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> u <span class="hljs-keyword">in</span> depth[j]:<br>        <span class="hljs-keyword">if</span> s[j + <span class="hljs-number">1</span>]:<br>            f[u][<span class="hljs-number">0</span>] = <span class="hljs-built_in">max</span>(f[u][<span class="hljs-number">0</span>], <span class="hljs-built_in">max</span>(s[j + <span class="hljs-number">1</span>].keys()))<br><br>        f[u][<span class="hljs-number">1</span>] = a[u]<br>        <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> g[u]:<br>            s[j + <span class="hljs-number">1</span>][f[v][<span class="hljs-number">1</span>]] -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> s[j + <span class="hljs-number">1</span>][f[v][<span class="hljs-number">1</span>]] == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">del</span> s[j + <span class="hljs-number">1</span>][f[v][<span class="hljs-number">1</span>]]<br><br>        <span class="hljs-keyword">if</span> s[j + <span class="hljs-number">1</span>]:<br>            mx = <span class="hljs-built_in">max</span>(s[j + <span class="hljs-number">1</span>].keys())<br>            f[u][<span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(f[u][<span class="hljs-number">1</span>], a[u] + mx)<br><br>        <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> g[u]:<br>            s[j + <span class="hljs-number">1</span>][f[v][<span class="hljs-number">1</span>]] += <span class="hljs-number">1</span><br><br>        s[j][f[u][<span class="hljs-number">1</span>]] += <span class="hljs-number">1</span><br>        s[j][f[u][<span class="hljs-number">0</span>]] += <span class="hljs-number">1</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(f[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>], f[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]))<br></code></pre></td></tr></table></figure><h2 id="T字消除-蓝桥云课"><a href="#T字消除-蓝桥云课" class="headerlink" title="T字消除 - 蓝桥云课"></a><a href="https://www.lanqiao.cn/problems/3547/learning/?page=1&first_category_id=1&tags=2023&name=T">T字消除 - 蓝桥云课</a></h2><h3 id="问题描述-6"><a href="#问题描述-6" class="headerlink" title="问题描述"></a>问题描述</h3><p>小蓝正在玩一款游戏，游戏中有一个 $n \times n$ 大小的 $01$ 矩阵 $A_{i,j}$。 小蓝每次需要选择一个 $T$ 字型的区域，且这个区域内至少要有一个 $1$。选中后，这个区域内所有的元素都会变成 $0$。 给定游戏目前的矩阵，小蓝想知道他最多可以进行多少次上述操作。 $T$ 字型区域是指形如 $(x-1,y)\to(x,y)\to(x+1,y)\to(x,y+1)$ 的四个点所形成的区域。其旋转 $90^\circ,180^\circ,270^\circ$ 的形式同样也视作 $T$ 字形区域。</p><h3 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入包含多组数据。</p><p>输入的第一行包含一个整数 $D$ 表示数据组数。</p><p>对于每组数据，第一行包含一个整数 $n$。</p><p>接下来 $n$ 行每行包含 $n$ 个 $0$ 或 $1$，表示矩阵 $A_{i,j}$ 的每个位置的值。</p><h3 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出 $D$ 行，每行包含一个整数表示小蓝最多可以对当前询问中的矩阵操作的次数。</p><h3 id="样例输入-4"><a href="#样例输入-4" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">1 3 001 011 111<br></code></pre></td></tr></table></figure><h3 id="样例输出-4"><a href="#样例输出-4" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">5<br></code></pre></td></tr></table></figure><h3 id="样例说明"><a href="#样例说明" class="headerlink" title="样例说明"></a>样例说明</h3><p>我们用 $X$ 表示某次操作选中的 $T$ 字形，以下给出一种可行方案：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">001 XXX 0X0 00X 0X0 X00 011 =&gt; 0X1 =&gt; XXX =&gt; 0XX =&gt; XX0 =&gt; XX0 111 111 111 11X 1X0 X00<br></code></pre></td></tr></table></figure><h3 id="评测用例规模与约定-4"><a href="#评测用例规模与约定-4" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h3><p>对于 $10$% 的评测用例，$n &#x3D; 3$；</p><p>对于 $40$% 的评测用例，$n \leq 30$；</p><p>对于所有评测用例，$3 \leq n \leq 2000$，矩阵中仅含 $0$ 和 $1$。</p><h3 id="运行限制-6"><a href="#运行限制-6" class="headerlink" title="运行限制"></a>运行限制</h3><table><thead><tr><th>语言</th><th>最大运行时间</th><th>最大运行内存</th></tr></thead><tbody><tr><td>C++</td><td>3s</td><td>512M</td></tr><tr><td>C</td><td>3s</td><td>512M</td></tr><tr><td>Java</td><td>5s</td><td>512M</td></tr><tr><td>Python3</td><td>999s</td><td>512M</td></tr><tr><td>PyPy3</td><td>999s</td><td>512M</td></tr><tr><td>Go</td><td>999s</td><td>512M</td></tr><tr><td>JavaScript</td><td>999s</td><td>512M</td></tr></tbody></table><p>总通过次数: 44  |  总提交次数: 199  |  通过率: 22.1%</p><p>难度: 简单   标签: 2023, 模拟, 省赛</p><h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><p>这个问题可以使用动态规划的策略进行解决。首先，我们要解析并存储树的结构，然后从叶子节点开始，通过动态规划的方法，逐步向上更新每个节点被选中和不被选中时能得到的最大权值和。</p><p><strong>状态定义</strong></p><p>我们定义两种状态，$f[u][1]$ 和 $f[u][0]$。$f[u][1]$ 表示选择节点 $u$ 的最大权值，$f[u][0]$ 表示不选择节点 $u$ 的最大权值。</p><p><strong>状态转移</strong></p><p>对于每一个节点 $u$，我们有以下状态转移方程：</p><ul><li>不选择当前节点 $u$：$f[u][0] &#x3D; max(f[u][0], f[v][1])$，其中 $v$ 是 $u$ 的下一层节点，表示我们可以选择下一层的任何一个节点；</li><li>选择当前节点 $u$：$f[u][1] &#x3D; max(f[u][1], a[u] + f[v][0])$，表示我们选择当前节点 $u$，并且我们不能选择其子节点 $v$，但是我们可以选择 $v$ 的子节点。</li></ul><p><strong>具体实现</strong></p><p>首先，我们读取输入数据，存储树的结构，并初始化状态矩阵。然后，我们从叶子节点开始，逐步向上更新每一个节点的状态。对于每一层的节点，我们先更新不选择该节点的方案，然后再更新选择该节点的方案。为了减少时间复杂度，我们使用了 <code>multiset</code> 来存储每一层能够转移的所有状态，可以直接找到最大值。</p><p><strong>时间复杂度分析</strong></p><p>每个节点我们都进行了一次状态更新操作，所以时间复杂度为 $O(n)$。在更新状态时，我们使用了 <code>multiset</code> 进行最大值查询，时间复杂度为 $O(\log n)$，所以总的时间复杂度为 $O(n \log n)$。</p><h3 id="AC-Code-4"><a href="#AC-Code-4" class="headerlink" title="AC_Code"></a>AC_Code</h3><ul><li>C++</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//c++</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">200010</span>;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; g[N], depth[N];     <span class="hljs-comment">// g[]用来存每个结点的儿子 , depth[] 用来存每一深度的结点</span><br><span class="hljs-type">int</span> d[N], a[N], f[N][<span class="hljs-number">2</span>], fa[N]; <span class="hljs-comment">// d[]记录每个结点的深度,a[]是每个结点的值,f[][]第一维表示结点、第二维表示是否选择该节点</span><br><span class="hljs-built_in">multiset</span>&lt;<span class="hljs-type">int</span>&gt; s[N];             <span class="hljs-comment">// 存每一层能够转移的所有状态</span><br><span class="hljs-type">signed</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;n);<br>    d[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;          <span class="hljs-comment">// 1是根，所以深度为1</span><br>    <span class="hljs-type">int</span> max_depth = <span class="hljs-number">0</span>; <span class="hljs-comment">// 记录最大深度</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;fa[i]);<br>        g[fa[i]].push_back(i);            <span class="hljs-comment">// 存结点的儿子</span><br>        d[i] = d[fa[i]] + <span class="hljs-number">1</span>;              <span class="hljs-comment">// 子节点深度等于父节点深度+1</span><br>        max_depth = max(max_depth, d[i]); <span class="hljs-comment">// 更新最大深度</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;a[i]);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        depth[d[i]].push_back(i); <span class="hljs-comment">// 记录每一层的结点</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = max_depth; j &gt;= <span class="hljs-number">1</span>; j--) <span class="hljs-comment">// 从叶子结点开始更新结点最大值</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> u : depth[j]) <span class="hljs-comment">// 本层结点大小更新</span><br>        &#123;<br>            <span class="hljs-comment">// 先来更新不选择该结点的方案</span><br>            <span class="hljs-keyword">if</span> (s[j + <span class="hljs-number">1</span>].size())                               <span class="hljs-comment">// 如果下一层存在能转移过来的状态</span><br>                f[u][<span class="hljs-number">0</span>] = max(f[u][<span class="hljs-number">0</span>], *prev(s[j + <span class="hljs-number">1</span>].end())); <span class="hljs-comment">// 当前节点如果不选肯定选的是前一层的最大值(选或者不选都行)</span><br><br>            <span class="hljs-comment">// 再来更新选择该节点的方案</span><br>            f[u][<span class="hljs-number">1</span>] = a[u];     <span class="hljs-comment">// 如果选择该结点,则该结点的最小值是结点本身的值</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : g[u]) <span class="hljs-comment">// 选择能够转移到现在这个状态的状态</span><br>            &#123;<br>                s[j + <span class="hljs-number">1</span>].erase(s[j + <span class="hljs-number">1</span>].find(f[v][<span class="hljs-number">1</span>])); <span class="hljs-comment">// 因为不能选择相邻结点,把选取了它的儿子的方案除去,不能从这些最大值中更新</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> (s[j + <span class="hljs-number">1</span>].size()) <span class="hljs-comment">// 如果下一层存在能转移过来的状态</span><br>            &#123;<br>                <span class="hljs-type">int</span> mx = *prev(s[j + <span class="hljs-number">1</span>].end());    <span class="hljs-comment">// 能够转移至这个状态的最大值</span><br>                f[u][<span class="hljs-number">1</span>] = max(f[u][<span class="hljs-number">1</span>], a[u] + mx); <span class="hljs-comment">// 如果选这个节点,那么要从他非儿子中选一个最大的(不选或选)或者从他儿子中选一个不选的最大的</span><br>            &#125;<br><br>            <span class="hljs-comment">// 为下一次状态更新做准备</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : g[u])<br>            &#123;<br>                s[j + <span class="hljs-number">1</span>].insert(f[v][<span class="hljs-number">1</span>]); <span class="hljs-comment">// 刚刚为了更新选择该结点状态时删去了选它的儿子状态,现在再加回来,因为本层其他节点可能更新需要</span><br>            &#125;<br>            s[j].insert(f[u][<span class="hljs-number">1</span>]);<br>            s[j].insert(f[u][<span class="hljs-number">0</span>]); <span class="hljs-comment">// 当前节点或者不选都可以作为它们上一层节点的更新值</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, max(f[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>], f[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>])); <span class="hljs-comment">// 在选和不选1结点中的方案中的最大值就是答案</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">200010</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;Integer&gt;[] g = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>[N], depth = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>[N];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N], a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N], fa = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[][] f = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N][<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> TreeMap&lt;Integer, Integer&gt;[] s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>[N];<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        d[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max_depth</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            g[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            depth[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>            fa[i] = scanner.nextInt();<br>            g[fa[i]].add(i);<br>            d[i] = d[fa[i]] + <span class="hljs-number">1</span>;<br>            max_depth = Math.max(max_depth, d[i]);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            a[i] = scanner.nextInt();<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            depth[d[i]].add(i);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= max_depth + <span class="hljs-number">1</span>; i++)&#123;<br>            s[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;();<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> max_depth; j &gt;= <span class="hljs-number">1</span>; j--) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> u : depth[j]) &#123;<br>                <span class="hljs-keyword">if</span> (s[j + <span class="hljs-number">1</span>].size() &gt; <span class="hljs-number">0</span>) &#123;<br>                    f[u][<span class="hljs-number">0</span>] = Math.max(f[u][<span class="hljs-number">0</span>], s[j + <span class="hljs-number">1</span>].lastKey());<br>                &#125;<br>                f[u][<span class="hljs-number">1</span>] = a[u];<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v : g[u]) &#123;<br>                    remove(s[j + <span class="hljs-number">1</span>], f[v][<span class="hljs-number">1</span>]);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (s[j + <span class="hljs-number">1</span>].size() &gt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">mx</span> <span class="hljs-operator">=</span> s[j + <span class="hljs-number">1</span>].lastKey();<br>                    f[u][<span class="hljs-number">1</span>] = Math.max(f[u][<span class="hljs-number">1</span>], a[u] + mx);<br>                &#125;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v : g[u]) &#123;<br>                    add(s[j + <span class="hljs-number">1</span>], f[v][<span class="hljs-number">1</span>]);<br>                &#125;<br>                add(s[j], f[u][<span class="hljs-number">1</span>]);<br>                add(s[j], f[u][<span class="hljs-number">0</span>]);<br>            &#125;<br>        &#125;<br><br>        System.out.println(Math.max(f[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>], f[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]));<br>        scanner.close();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(TreeMap&lt;Integer, Integer&gt; map, <span class="hljs-type">int</span> x)</span> &#123;<br>        map.put(x, map.getOrDefault(x, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(TreeMap&lt;Integer, Integer&gt; map, <span class="hljs-type">int</span> x)</span> &#123;<br>        <span class="hljs-keyword">if</span> (map.containsKey(x)) &#123;<br>            <span class="hljs-keyword">if</span> (map.get(x) == <span class="hljs-number">1</span>) &#123;<br>                map.remove(x);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                map.put(x, map.get(x) - <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Counter<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br>N = <span class="hljs-number">200010</span><br>g = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N)]<br>depth = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N)]<br>d = [<span class="hljs-number">0</span>] * N<br>a = [<span class="hljs-number">0</span>] * N<br>fa = [<span class="hljs-number">0</span>] * N<br>f = [[<span class="hljs-number">0</span>] * <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N)]<br>s = [Counter() <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N)]<br><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>d[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span><br>max_depth = <span class="hljs-number">0</span><br>arrt = [<span class="hljs-built_in">int</span>(n) <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&quot;</span>).split()]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n + <span class="hljs-number">1</span>):<br>    fa[i] = arrt[i - <span class="hljs-number">2</span>]<span class="hljs-comment">#int(input())</span><br>    g[fa[i]].append(i)<br>    d[i] = d[fa[i]] + <span class="hljs-number">1</span><br>    max_depth = <span class="hljs-built_in">max</span>(max_depth, d[i])<br><br>arrt = [<span class="hljs-built_in">int</span>(n) <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&quot;</span>).split()]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>    a[i] = arrt[i - <span class="hljs-number">1</span>] <span class="hljs-comment">#int(input())</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>    depth[d[i]].append(i)<br><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(max_depth, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> u <span class="hljs-keyword">in</span> depth[j]:<br>        <span class="hljs-keyword">if</span> s[j + <span class="hljs-number">1</span>]:<br>            f[u][<span class="hljs-number">0</span>] = <span class="hljs-built_in">max</span>(f[u][<span class="hljs-number">0</span>], <span class="hljs-built_in">max</span>(s[j + <span class="hljs-number">1</span>].keys()))<br><br>        f[u][<span class="hljs-number">1</span>] = a[u]<br>        <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> g[u]:<br>            s[j + <span class="hljs-number">1</span>][f[v][<span class="hljs-number">1</span>]] -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> s[j + <span class="hljs-number">1</span>][f[v][<span class="hljs-number">1</span>]] == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">del</span> s[j + <span class="hljs-number">1</span>][f[v][<span class="hljs-number">1</span>]]<br><br>        <span class="hljs-keyword">if</span> s[j + <span class="hljs-number">1</span>]:<br>            mx = <span class="hljs-built_in">max</span>(s[j + <span class="hljs-number">1</span>].keys())<br>            f[u][<span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(f[u][<span class="hljs-number">1</span>], a[u] + mx)<br><br>        <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> g[u]:<br>            s[j + <span class="hljs-number">1</span>][f[v][<span class="hljs-number">1</span>]] += <span class="hljs-number">1</span><br><br>        s[j][f[u][<span class="hljs-number">1</span>]] += <span class="hljs-number">1</span><br>        s[j][f[u][<span class="hljs-number">0</span>]] += <span class="hljs-number">1</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(f[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>], f[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]))<br></code></pre></td></tr></table></figure><h2 id="异或和-蓝桥云课"><a href="#异或和-蓝桥云课" class="headerlink" title="异或和 - 蓝桥云课"></a><a href="https://www.lanqiao.cn/problems/3549/learning/?page=1&first_category_id=1&tags=2023&name=%E5%BC%82%E6%88%96%E5%92%8C">异或和 - 蓝桥云课</a></h2><h3 id="问题描述-7"><a href="#问题描述-7" class="headerlink" title="问题描述"></a>问题描述</h3><p>给一棵含有 $n$ 个结点的有根树，根结点为 $1$，编号为 $i$ 的点有点权 $a_i$（$i \in [1,n]$）。现在有两种操作，格式如下：</p><ul><li>$1\ x\ y$：该操作表示将点 $x$ 的点权改为 $y$。</li><li>$2\ x$：该操作表示查询以结点 $x$ 为根的子树内的所有点的点权的异或和。</li></ul><p>现有长度为 $m$ 的操作序列，请对于每个第二类操作给出正确的结果。</p><h3 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入的第一行包含两个正整数 $n,m$，用一个空格分隔。</p><p>第二行包含 $n$ 个整数 $a_1,a_2,\ldots,a_n$，相邻整数之间使用一个空格分隔。</p><p>接下来 $n-1$ 行，每行包含两个正整数 $u_i,v_i$，表示结点 $u_i$ 和 $v_i$ 之间有一条边。</p><p>接下来 $m$ 行，每行包含一个操作。</p><h3 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出若干行，每行对应一个查询操作的答案。</p><h3 id="样例输入-5"><a href="#样例输入-5" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">4 4 1 2 3 4 1 2 1 3 2 4 2 1 1 1 0 2 1 2 2<br></code></pre></td></tr></table></figure><h3 id="样例输出-5"><a href="#样例输出-5" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">4 5 6<br></code></pre></td></tr></table></figure><h3 id="评测用例规模与约定-5"><a href="#评测用例规模与约定-5" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h3><p>对于 $30$% 的评测用例，$n,m \leq 1000$；</p><p>对于所有评测用例，$1 \leq n,m \leq 100000$，$0 \leq a_i,y \leq 100000$，$1 \leq u_i,v_i,x \leq n$。</p><h3 id="运行限制-7"><a href="#运行限制-7" class="headerlink" title="运行限制"></a>运行限制</h3><table><thead><tr><th>语言</th><th>最大运行时间</th><th>最大运行内存</th></tr></thead><tbody><tr><td>C++</td><td>3s</td><td>512M</td></tr><tr><td>C</td><td>3s</td><td>512M</td></tr><tr><td>Java</td><td>5s</td><td>512M</td></tr><tr><td>Python3</td><td>17s</td><td>512M</td></tr><tr><td>PyPy3</td><td>17s</td><td>512M</td></tr><tr><td>Go</td><td>17s</td><td>512M</td></tr><tr><td>JavaScript</td><td>17s</td><td>512M</td></tr></tbody></table><p>总通过次数: 367  |  总提交次数: 453  |  通过率: 81%</p><p>难度: 简单   标签: 2023, DFS序, 图论, 树状数组, 省赛</p><h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><p>考虑第二个操作，查询以节点 $x$ 为根的子树内的所有点的点权的异或和。</p><p>类似这种子树查询问题，我们通常使用 DFS 序对树进行预处理。具体地说，在 DFS 遍历中，我们从根节点开始，依次遍历它的每个子节点。对于每个子节点，我们首先遍历它的子树，然后回溯到该子节点，继续遍历它的兄弟节点。在遍历的过程中，我们可以记录每个节点在 DFS 序中的遍历顺序，即第一次遍历到该节点的时间戳和最后一次遍历到该节点的时间戳。这里的时间戳可以使用一个计数器来实现，每次遍历到一个新节点时，计数器加 $1$，表示当前节点的时间戳。当回溯到该节点时，表示当前节点的最后一次遍历时间戳。</p><p>这样操作有什么作用呢？假设我们有一个长度大于 $n$ 的数组 $a$，我们记进入每个点 $i$ 的时间戳为 $\text{in}[i]$，回溯到点 $i$ 的时间戳为 $\text{out}[i]$，同时将每个点的点权赋值到 $a[\text{in}[i]]$ 上。这样对于一个根为 $x$ 的子树内所有点的点权异或和就等价于 $a$ 数组区间 $[\text{in}[x],\text{out}[x]]$ 的异或和。这样我们就将复杂的树上询问，转化为我们熟悉的数组区间查询问题。</p><p>接下来考虑操作 $1$，将点 $x$ 的点权改为 $y$。</p><p>结合上述分析，该操作即是将 $a[\text{in}[x]]$ 改为 $y$。</p><p>综上所述，我们需要对 $a$ 数组进行一个单点修改和区间查询的操作，这个经典操作我们可以使用树状数组或者线段树来维护，代码中使用的是树状数组。具体地说，我们使用一个树状数组 $a$ 来维护树的 DFS 序的前缀异或序列，$a_i$ 表示区间 $[1,i]$ 的异或和。</p><ul><li>操作 $1$：将 $a[\text{in}[x]]$ 修改为 $y$。</li><li>操作 $2$：求解 $[\text{in}[x],\text{out}[x]]$ 的异或和，根据异或性质 $[1,r] \oplus[1,l-1]&#x3D;[l,r]$，我们只需要求解 $a_{\text{in}[x]-1} \oplus a_r$ 即可求得答案。</li></ul><p>时间复杂度为 $O(n \log n)$。</p><h3 id="AC-Code-5"><a href="#AC-Code-5" class="headerlink" title="AC_Code"></a>AC_Code</h3><ul><li>C++</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Fenwick</span> &#123;<br>    <span class="hljs-type">int</span> n;<br>    std::vector&lt;T&gt; a;<br><br>    <span class="hljs-built_in">Fenwick</span>(<span class="hljs-type">int</span> n = <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">init</span>(n);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>-&gt;n = n;<br>        a.<span class="hljs-built_in">assign</span>(n + <span class="hljs-number">1</span>, <span class="hljs-built_in">T</span>());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, T v)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (; x &lt;= n; x += x &amp; (-x)) &#123;<br>            a[x] ^= v;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function">T <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>        <span class="hljs-keyword">auto</span> ans = <span class="hljs-built_in">T</span>();<br>        <span class="hljs-keyword">for</span> (; x; x -= x &amp; (-x)) &#123;<br>            ans ^= a[x];<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br>    <span class="hljs-function">T <span class="hljs-title">rangeSum</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(r) ^ <span class="hljs-built_in">sum</span>(l);<br>    &#125;<br>&#125;;<br><span class="hljs-type">int</span> n, m, tot;<br><span class="hljs-type">int</span> a[N], in[N], out[N];<br>std::vector&lt;<span class="hljs-type">int</span>&gt; e[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> fa)</span> </span>&#123;<br>    in[u] = ++tot;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : e[u]) &#123;<br>        <span class="hljs-keyword">if</span> (v == fa) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs</span>(v, u);<br>    &#125;<br>    out[u] = tot;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios_base :: <span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>); cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-function">Fenwick&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">tr</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; ++i) &#123;<br>        <span class="hljs-type">int</span> u, v;<br>        cin &gt;&gt; u &gt;&gt; v;<br>        e[u].<span class="hljs-built_in">push_back</span>(v);<br>        e[v].<span class="hljs-built_in">push_back</span>(u);<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) tr.<span class="hljs-built_in">add</span>(in[i], a[i]);<br>    <span class="hljs-type">int</span> op, x, y;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i) &#123;<br>        cin &gt;&gt; op &gt;&gt; x;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>) &#123;<br>            cin &gt;&gt; y;<br>            <span class="hljs-type">int</span> v = tr.<span class="hljs-built_in">rangeSum</span>(in[x] - <span class="hljs-number">1</span>, in[x]);<br>            tr.<span class="hljs-built_in">add</span>(in[x], y ^ v);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            cout &lt;&lt; tr.<span class="hljs-built_in">rangeSum</span>(in[x] - <span class="hljs-number">1</span>, out[x]) &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.io.*;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">100010</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> n, m, tot;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N], in = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N], out = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N], b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br>    <span class="hljs-keyword">static</span> List&lt;Integer&gt;[] e = <span class="hljs-keyword">new</span> <span class="hljs-title class_">List</span>[N];<br> <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> v)</span> &#123;<br>        <span class="hljs-keyword">for</span> (; x &lt;= n; x += x &amp; (-x)) &#123;<br>            b[x] ^= v;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (x == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (; x &gt; <span class="hljs-number">0</span>; x -= x &amp; (-x)) &#123;<br>            ans ^= b[x];<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br> <br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">rangeSum</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> &#123;<br>        <span class="hljs-keyword">return</span> sum(r) ^ sum(l);<br>    &#125;<br> <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> fa)</span> &#123;<br>        in[u] = ++tot;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v : e[u]) &#123;<br>            <span class="hljs-keyword">if</span> (v == fa) <span class="hljs-keyword">continue</span>;<br>            dfs(v, u);<br>        &#125;<br>        out[u] = tot;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in));<br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(System.out));<br>        String[] temp = reader.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>        n = Integer.parseInt(temp[<span class="hljs-number">0</span>]);<br>        m = Integer.parseInt(temp[<span class="hljs-number">1</span>]);<br>        temp = reader.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>            a[i] = Integer.parseInt(temp[i - <span class="hljs-number">1</span>]);<br>            e[i]=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; ++i) &#123;<br>            temp = reader.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> Integer.parseInt(temp[<span class="hljs-number">0</span>]);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> Integer.parseInt(temp[<span class="hljs-number">1</span>]);<br>            e[u].add(v);<br>            e[v].add(u);<br>        &#125;<br>        dfs(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>            add(in[i], a[i]);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m; ++i) &#123;<br>            temp = reader.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">op</span> <span class="hljs-operator">=</span> Integer.parseInt(temp[<span class="hljs-number">0</span>]);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> Integer.parseInt(temp[<span class="hljs-number">1</span>]);<br>            <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> Integer.parseInt(temp[<span class="hljs-number">2</span>]);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> rangeSum(in[x] - <span class="hljs-number">1</span>, in[x]);<br>                add(in[x], y ^ v);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                writer.write(rangeSum(in[x] - <span class="hljs-number">1</span>, out[x]) + <span class="hljs-string">&quot;\n&quot;</span>);<br>            &#125;<br>        &#125;<br>        reader.close();<br>        writer.flush();<br>        writer.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><br>N = <span class="hljs-number">100010</span><br>n, m, tot = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>a = [<span class="hljs-number">0</span>]*N<br>in_ = [<span class="hljs-number">0</span>]*N<br>out = [<span class="hljs-number">0</span>]*N<br>b = [<span class="hljs-number">0</span>]*N<br>e = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N)]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, v</span>):<br>    <span class="hljs-keyword">while</span> x &lt;= n:<br>        b[x] ^= v<br>        x += x &amp; (-x)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sum_</span>(<span class="hljs-params">x</span>):<br>    ans = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span> x == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> ans<br>    <span class="hljs-keyword">while</span> x &gt; <span class="hljs-number">0</span>:<br>        ans ^= b[x]<br>        x -= x &amp; (-x)<br>    <span class="hljs-keyword">return</span> ans<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rangeSum</span>(<span class="hljs-params">l, r</span>):<br>    <span class="hljs-keyword">return</span> sum_(r) ^ sum_(l)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">u, fa</span>):<br>    <span class="hljs-keyword">global</span> tot<br>    in_[u] = tot = tot + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> e[u]:<br>        <span class="hljs-keyword">if</span> v == fa:<br>            <span class="hljs-keyword">continue</span><br>        dfs(v, u)<br>    out[u] = tot<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">global</span> n, m, tot<br>    n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, sys.stdin.readline().split())<br>    a[<span class="hljs-number">1</span>:n+<span class="hljs-number">1</span>] = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, sys.stdin.readline().split())<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">1</span>):<br>        u, v = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, sys.stdin.readline().split())<br>        e[u].append(v)<br>        e[v].append(u)<br>    dfs(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>):<br>        add(in_[i], a[i])<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>        op, x, *extra = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, sys.stdin.readline().split())<br>        <span class="hljs-keyword">if</span> op == <span class="hljs-number">1</span>:<br>            y = extra[<span class="hljs-number">0</span>]<br>            v = rangeSum(in_[x] - <span class="hljs-number">1</span>, in_[x])<br>            add(in_[x], y ^ v)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(rangeSum(in_[x] - <span class="hljs-number">1</span>, out[x]))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h2 id="混乱的数组-蓝桥云课"><a href="#混乱的数组-蓝桥云课" class="headerlink" title="混乱的数组 - 蓝桥云课"></a><a href="https://www.lanqiao.cn/problems/3550/learning/?page=1&first_category_id=1&tags=2023&name=%E6%B7%B7%E4%B9%B1%E7%9A%84%E6%95%B0%E7%BB%84">混乱的数组 - 蓝桥云课</a></h2><h3 id="问题描述-8"><a href="#问题描述-8" class="headerlink" title="问题描述"></a>问题描述</h3><p>给定一个正整数 $x$，请找出一个尽可能短的仅含正整数的数组 $A$，使得 $A$ 中恰好有 $x$ 对 $i, j$ 满足 $i &lt; j$ 且 $A_i &gt; A_j$。如果存在多个这样的数组，请输出字典序最小的那个。</p><h3 id="输入格式-6"><a href="#输入格式-6" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入一行包含一个整数表示 $x$。</p><h3 id="输出格式-6"><a href="#输出格式-6" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出两行。</p><p>第一行包含一个整数 $n$，表示所求出的数组长度。</p><p>第二行包含 $n$ 个整数 $A_i$，相邻整数之间使用一个空格分隔，依次表示数组中的每个数。</p><h3 id="样例输入-6"><a href="#样例输入-6" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">3<br></code></pre></td></tr></table></figure><h3 id="样例输出-6"><a href="#样例输出-6" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">3 3 2 1<br></code></pre></td></tr></table></figure><h3 id="评测用例规模与约定-6"><a href="#评测用例规模与约定-6" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h3><p>对于 $30$% 的评测用例，$x \leq 10$；</p><p>对于 $60$% 的评测用例，$x \leq 100$；</p><p>对于所有评测用例，$1 \leq x \leq 10^9$。</p><h3 id="运行限制-8"><a href="#运行限制-8" class="headerlink" title="运行限制"></a>运行限制</h3><table><thead><tr><th>语言</th><th>最大运行时间</th><th>最大运行内存</th></tr></thead><tbody><tr><td>C++</td><td>3s</td><td>512M</td></tr><tr><td>C</td><td>3s</td><td>512M</td></tr><tr><td>Java</td><td>5s</td><td>512M</td></tr><tr><td>Python3</td><td>12s</td><td>512M</td></tr><tr><td>PyPy3</td><td>12s</td><td>512M</td></tr><tr><td>Go</td><td>12s</td><td>512M</td></tr><tr><td>JavaScript</td><td>12s</td><td>512M</td></tr></tbody></table><p>总通过次数: 127  |  总提交次数: 411  |  通过率: 30.9%</p><p>难度: 简单   标签: 2023, 思维, 构造, 省赛</p><h3 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h4><p>题目要求我们构造出一个字典序最小且有 $x$ 个逆序对的可重复数字的数组。</p><p>我们可以假设一种特殊情况。我们知道，一个严格递减的数组一共有 $\dfrac{n\times(n-1)}{2}$ 个逆序对，也是长度为 $n$ 的序列最大逆序对数量，例如 $3,2,1$ 就有 $3$ 个逆序对。</p><p>因此我们可以通过该公式找出 $\ge x$ 的第一个严格递减数组。我们可以 $2$ 分 $n$，也可以暴力求 $n$，暴力求 $n$ 的复杂度是 $\sqrt{x}$。</p><h4 id="构造答案"><a href="#构造答案" class="headerlink" title="构造答案"></a>构造答案</h4><p>如果 $\dfrac{n\times(n-1)}{2}$ 恰好等于 $x$，那么答案就是 $n \sim 1$。</p><p>如果 $\dfrac{n\times(n-1)}{2}$ 大于 $x$，则说明答案序列一定长度为 $n$。因为我们求出来 $\dfrac{n\times (n-1)}{2} \ge x &gt; \dfrac{(n-1)\times(n-2)}{2}$。</p><p>现在假设 $x&#x3D;13$，则序列 $a&#x3D;[6,5,4,3,2,1]$，该序列有 $15$ 个逆序对。我们将 $6$ 变为 $4$，该序列就有 $13$ 个逆序对了。也就是 $a&#x3D;[4,5,4,3,2,1]$，但这并不是最小的答案，我们有如下修改方式：</p><ol><li>我们将 $a[3]$ 修改为 $3$，序列为 $[4,5,3,3,2,1]$，可以发现 $a[3]$ 和 $a[4]$ 构成不了逆序对，但 $a[1]$ 和 $a[3]$ 构成了逆序对，此时逆序对数不变，字典序变小。</li><li>我们将 $a[4]$ 修改为 $2$，序列为 $[4,5,3,2,2,1]$，可以发现 $a[3]$ 和 $a[4]$ 构成了逆序对，$a[4]$ 和 $a[5]$ 构不成逆序对了。</li></ol><p>因此我们若想修改 $a_i$，则 $1\sim i-1$ 中等于 $a_i$ 的数量要等于 $i+1\sim n$ 中等于 $a_i-1$ 的数量，就能在保持逆序对不变的情况下修改。继续按照上述结论修改为 $[4,5,3,2,1,1]$。</p><p>我们发现，$a[2]$ 修改为 $4$ 依旧不影响结果，现在序列变为 $[4,4,3,2,1,1]$。然后根据之前所述规则，将 $a[2]$ 改为 $3$，然后 $a[3]$ 也可以修改为 $2$，最终答案为 $[4,3,2,2,1,1]$。</p><p>从做题经验来说：构造题大多都是有规律的构造，而非暴力构造，我们可以尝试寻找规律：</p><p>对于 $x&#x3D;(11\sim 14)$ 我们均可以一一尝试：</p><p>$\text{[2 4 3 2 1 1 ],[3 3 2 2 1 1 ],[4 3 2 2 1 1],[5 4 3 2 1 1 ]}$。到这里发现可能后缀很像，但是依旧无法解题，我们继续找规律：</p><p>$x&#x3D;(16\sim21)$：</p><p>$\text{[2 5 4 3 2 1 1 ],[3 4 3 2 2 1 1],[4 3 3 2 2 1 1 ],[5 4 3 2 2 1 1],[6 5 4 3 2 1 1 ],[7,6,5,4,3,2,1]}$。</p><p>我们发现后缀是从 $\text{[1 1] [2 2 1 1] [3 3 2 2 1 1][2 2 1 1][1 1]}$ 这种形式出现。</p><p>而前缀规律为 $[2,5,4,3,2][3,4,3],[4],[5,4,3],[6,5,4,3,2]$。</p><p>因此前后缀规律出现，跟是否是当前一半有关，因此寻找出规律。</p><p>因此若 $x-\dfrac{n\times(n-1)}{2}\le \dfrac{n}{2}$，则我们首项填 $1+x-\dfrac{n\times(n-1)}{2}$，第二项从 $n-2$ 开始递减填充，最后填充值大小与首项一样，然后最后构造数量和 $x-\dfrac{n\times(n-1)}{2}$ 相关的 $[1,1][2,2][3,3]…$。</p><p>该方法成立原因如下：</p><p>以 $17,\text{[3 4 3 2 2 1 1]}$ 为例：</p><p>我们在末置部分构造 $\text{2 2 1 1}$，已经有 $4$ 个逆序对了，首项一定比末置部分构造要大，因此对首项贡献为 $4$ 个逆序对，然后第二项开始递减填充了 $2$ 次，末置部分构造对齐贡献了 $8$ 个逆序对，他们互相之间构造了 $1$ 个逆序对，因此答案为 $4+4+8+1&#x3D;17$。设 $x-\dfrac{n\times(n-1)}{2}&#x3D;x_1$，则末置部分构造长度为 $x_1\times2$，首项大小为 $x_1+1$，递减长度为 $n-x_1\times2-1$。则构造出的逆序对数量为： $\dfrac{(x_1\times(x1-1))}{2}\times 4+\dfrac{(x_1\times(x1-1))}{2}\times 4+(n-x_1\times2-1)\times\dfrac{(x_1\times(x1-1))}{2}\times 4+\dfrac{(n-x_1\times2-1)\times((n-x_1\times2-2))}{2}$ $\dfrac{(x_1\times(x1-1))}{2}\times 4$ 是末置部分构造出的逆序对数量。</p><p>$x-\dfrac{n\times(n-1)}{2}&gt;\dfrac{n}{2}$ 证明也同理。</p><p>综上，该方案是一个合理的构造方案。</p><h3 id="AC-Code-6"><a href="#AC-Code-6" class="headerlink" title="AC_Code"></a>AC_Code</h3><ul><li>C++</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> x, n, a[<span class="hljs-number">100005</span>], res, k, r;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>  n = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span> (n * (n - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span> &lt; x) n++;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, n);<br>  <span class="hljs-keyword">if</span> (n * (n - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span> == x) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>      a[i] = n - i + <span class="hljs-number">1</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    res = n * (n - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span> - x;<br>    <span class="hljs-keyword">if</span> (res &lt;= n / <span class="hljs-number">2</span>) &#123;<br>      r = n;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= res; i++) &#123;<br>        a[r--] = i;<br>        a[r--] = i;<br>      &#125;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r; i &gt;= <span class="hljs-number">1</span>; i--) a[i] = res + (r - i + <span class="hljs-number">1</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      res = n - res - <span class="hljs-number">1</span>;<br>      r = n;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= res; i++) &#123;<br>        a[r--] = i;<br>        a[r--] = i;<br>      &#125;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r; i &gt;= <span class="hljs-number">2</span>; i--) a[i] = res + (r - i + <span class="hljs-number">1</span>);<br>      a[<span class="hljs-number">1</span>] = res + <span class="hljs-number">1</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d%c&quot;</span>, a[i], i == n? <span class="hljs-string">&#x27;\n&#x27;</span> : <span class="hljs-string">&#x27; &#x27;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> in.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <br>        <span class="hljs-keyword">while</span> (n * (n - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span> &lt; x) &#123;<br>            n++;<br>        &#125;<br>        <br>        System.out.println(n);<br>        <br>        <span class="hljs-keyword">if</span> (n * (n - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span> == x) &#123;<br>            <span class="hljs-type">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>                a[i] = n - i + <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>                System.out.print(a[i]);<br>                <span class="hljs-keyword">if</span> (i == n) &#123;<br>                    System.out.println();<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    System.out.print(<span class="hljs-string">&quot; &quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> n * (n - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span> - x;<br>            <span class="hljs-type">int</span> r;<br>            <br>            <span class="hljs-keyword">if</span> (res &lt;= n / <span class="hljs-number">2</span>) &#123;<br>                r = n;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= res; i++) &#123;<br>                    a[r--] = i;<br>                    a[r--] = i;<br>                &#125;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> r; i &gt;= <span class="hljs-number">1</span>; i--) &#123;<br>                    a[i] = res + (r - i + <span class="hljs-number">1</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                res = n - res - <span class="hljs-number">1</span>;<br>                r = n;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= res; i++) &#123;<br>                    a[r--] = i;<br>                    a[r--] = i;<br>                &#125;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> r; i &gt;= <span class="hljs-number">2</span>; i--) &#123;<br>                    a[i] = res + (r - i + <span class="hljs-number">1</span>);<br>                &#125;<br>                a[<span class="hljs-number">1</span>] = res + <span class="hljs-number">1</span>;<br>            &#125;<br>            <br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>                System.out.print(a[i]);<br>                <span class="hljs-keyword">if</span> (i == n) &#123;<br>                    System.out.println();<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    System.out.print(<span class="hljs-string">&quot; &quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>n = <span class="hljs-number">1</span><br><br><span class="hljs-keyword">while</span> n * (n - <span class="hljs-number">1</span>) // <span class="hljs-number">2</span> &lt; x:<br>    n += <span class="hljs-number">1</span><br><br><span class="hljs-built_in">print</span>(n)<br><br><span class="hljs-keyword">if</span> n * (n - <span class="hljs-number">1</span>) // <span class="hljs-number">2</span> == x:<br>    a = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>)<br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>        a[i] = n - i + <span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(a[i], end=<span class="hljs-string">&quot; &quot;</span>)<br>    <br>    <span class="hljs-built_in">print</span>()<br><span class="hljs-keyword">else</span>:<br>    a = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>)<br>    res = n * (n - <span class="hljs-number">1</span>) // <span class="hljs-number">2</span> - x<br>    r = <span class="hljs-number">0</span><br>    <br>    <span class="hljs-keyword">if</span> res &lt;= n // <span class="hljs-number">2</span>:<br>        r = n<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, res + <span class="hljs-number">1</span>):<br>            a[r] = i<br>            r -= <span class="hljs-number">1</span><br>            a[r] = i<br>            r -= <span class="hljs-number">1</span><br>        <br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(r, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>            a[i] = res + (r - i + <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">else</span>:<br>        res = n - res - <span class="hljs-number">1</span><br>        r = n<br>        <br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, res + <span class="hljs-number">1</span>):<br>            a[r] = i<br>            r -= <span class="hljs-number">1</span><br>            a[r] = i<br>            r -= <span class="hljs-number">1</span><br>        <br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(r, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            a[i] = res + (r - i + <span class="hljs-number">1</span>)<br>        <br>        a[<span class="hljs-number">1</span>] = res + <span class="hljs-number">1</span><br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(a[i], end=<span class="hljs-string">&quot; &quot;</span>)<br>    <br>    <span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目总览&quot;&gt;&lt;a href=&quot;#题目总览&quot; class=&quot;headerlink&quot; title=&quot;题目总览&quot;&gt;&lt;/a&gt;题目总览&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;2023&lt;/li&gt;
&lt;li&gt;硬币兑换&lt;/li&gt;
&lt;li&gt;松散子序列&lt;/li&gt;
&lt;li&gt;管道&lt;/li&gt;
&lt;li&gt;保</summary>
      
    
    
    
    <category term="算法学习笔记" scheme="http://zdx-1.github.io/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="蓝桥杯备赛" scheme="http://zdx-1.github.io/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%A4%87%E8%B5%9B/"/>
    
  </entry>
  
</feed>
